##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    13/Oct/2014  21:25:05 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  \\ALFI-PC\Siemens\IAR\ARM\alfinant\LogSms\main.c     #
#    Command line    =  \\ALFI-PC\Siemens\IAR\ARM\alfinant\LogSms\main.c -D  #
#                       SGOLD -lC \\ALFI-PC\Siemens\IAR\ARM\alfinant\LogSms\ #
#                       Release_SGOLD\List\ -o \\ALFI-PC\Siemens\IAR\ARM\alf #
#                       inant\LogSms\Release_SGOLD\Obj\ -s9 --no_unroll      #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --fpu None -I         #
#                       C:\Users\Инсаф\Documents\alfinant\IAR\ARM\INC\       #
#                       --inline_threshold=2                                 #
#    List file       =  \\ALFI-PC\Siemens\IAR\ARM\alfinant\LogSms\Release_SG #
#                       OLD\List\main.lst                                    #
#    Object file     =  \\ALFI-PC\Siemens\IAR\ARM\alfinant\LogSms\Release_SG #
#                       OLD\Obj\main.r79                                     #
#                                                                            #
#                                                                            #
##############################################################################

\\ALFI-PC\Siemens\IAR\ARM\alfinant\LogSms\main.c
      1          #include <siemens\swilib.h>
      2          #include "strings.h"
      3          #include "conf_loader.h"
      4          
      5          #define   EMSAL_PROCESS      0x4210
      6          
      7          typedef struct{ 
      8            int word[26]; 
      9          }GBSPROC;
     10           
     11          #pragma swi_number=0x385
     12          __swi __arm GBSPROC *GBS_GetProcAddress(short cepid);
     13          

   \                                 In segment DATA_Z, align 4, align-sorted
     14          GBSPROC * gproc;
   \                     gproc:
   \   00000000                      DS8 4
     15          
     16          void (*old_sms_rlt_sm)();
   \                     old_sms_rlt_sm:
   \   00000004                      DS8 4
     17          

   \                                 In segment CODE, align 4, keep-with-next
     18          char *UnpackSMS(const PDU *sms)
     19          {
   \                     UnpackSMS:
   \   00000000   704F2DE9           PUSH     {R4-R6,R8-R11,LR}
     20            char *s;
     21            const char *p=sms->data;
     22            char *ss=NULL;
     23            unsigned int i;
     24            unsigned int m;
     25            int c;
     26            int c1;
     27            int c2;
     28            unsigned int is_udhl;
     29            if ((*p++)!=0x11) return NULL;
   \   00000004   0010D0E5           LDRB     R1,[R0, #+0]
   \   00000008   0040A0E3           MOV      R4,#+0
   \   0000000C   0060A0E3           MOV      R6,#+0
   \   00000010   110051E3           CMP      R1,#+17
   \   00000014   0100000A           BEQ      ??UnpackSMS_0
   \                     ??UnpackSMS_1:
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   708FBDE8           POP      {R4-R6,R8-R11,PC}
     30            if ((*p++)!=0x11) return NULL;
   \                     ??UnpackSMS_0:
   \   00000020   010080E2           ADD      R0,R0,#+1
   \   00000024   019080E2           ADD      R9,R0,#+1
   \   00000028   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000002C   110050E3           CMP      R0,#+17
   \   00000030   F8FFFF1A           BNE      ??UnpackSMS_1
     31            p++;//if (!(*p++)) return NULL; пропускаю ибо у меня там нуль
   \   00000034   010089E2           ADD      R0,R9,#+1
     32            c=*p++; //Пропускаем SCA
   \   00000038   ........           LDRB     R2,[R0], #+1
     33            p+=c;
   \   0000003C   009082E0           ADD      R9,R2,R0
     34            is_udhl=*p&0x40;
   \   00000040   0000D9E5           LDRB     R0,[R9, #+0]
   \   00000044   40B000E2           AND      R11,R0,#0x40
     35            if ((*p++)&3) goto LERR; //Неподходящий тип сообщения ;)
   \   00000048   ........           LDRB     R0,[R9], #+1
   \   0000004C   030010E3           TST      R0,#0x3
   \   00000050   AF00001A           BNE      ??UnpackSMS_2
     36            s=malloc(256);
   \   00000054   400FA0E3           MOV      R0,#+256
   \   00000058   140000EF           SWI      +20
   \   0000005C   0050A0E1           MOV      R5,R0
     37            ss=s;
     38            i=*p++; //Длина номера в нибблах
   \   00000060   ........           LDRB     R0,[R9], #+1
     39            if (*p == 0x91) {*s='+'; s++; } /* если интернациональный номер,добавляем символ '+' */
   \   00000064   0010D9E5           LDRB     R1,[R9, #+0]
   \   00000068   0560A0E1           MOV      R6,R5
   \   0000006C   910051E3           CMP      R1,#+145
   \   00000070   2B10A003           MOVEQ    R1,#+43
   \   00000074   ........           STRBEQ   R1,[R5], #+1
     40            if (*p == 0xD0)  /* алфавитно-цифровой тип номера */
   \   00000078   0010D9E5           LDRB     R1,[R9, #+0]
   \   0000007C   D00051E3           CMP      R1,#+208
   \   00000080   011089E2           ADD      R1,R9,#+1
   \   00000084   3100001A           BNE      ??UnpackSMS_3
     41          {
     42            p++;
     43            m = (i * 4 / 7); /* кол-во символов в номере */
   \   00000088   8C229FE5           LDR      R2,??UnpackSMS_4  ;; 0x24924925
   \   0000008C   0001A0E1           LSL      R0,R0,#+2
   \   00000090   923088E0           UMULL    R3,R8,R2,R0
   \   00000094   008098E0           ADDS     R8,R8,R0
   \   00000098   6880A0E1           RRX      R8,R8
   \   0000009C   2881A0E1           LSR      R8,R8,#+2
     44            i = 0;
   \   000000A0   0000A0E3           MOV      R0,#+0
     45            c2 = 0;
   \   000000A4   0030A0E1           MOV      R3,R0
   \   000000A8   000058E3           CMP      R8,#+0
   \   000000AC   1800001A           BNE      ??UnpackSMS_5
     46            while(m)
     47            {
     48              c=0x80;    do
     49              {
     50                if(!i) {c2=*p++; i=8;}
     51                c>>=1;
     52                if(c2&1) c|=0x80;
     53                c2>>=1; i--;
     54              }while(!(c&1)); 
     55              c>>=1;
     56              if(!c) c='@';
     57              if(c==2) c='$';
     58              *s = c; s++;
     59              m--;
     60            }
     61          
     62          }
     63            else
     64            {
     65              p++;
     66              m=0;
     67              c=0;
     68              while(m<i)
     69              {
     70                if (m&1) c1=c>>4; else c1=(c=(*p++))&0x0F;
     71                *s=c1+0x30;
     72                s++;
     73                m++;
     74              }
     75            }
     76                   
     77            *s=' '; s++;
   \                     ??UnpackSMS_6:
   \   000000B0   2000A0E3           MOV      R0,#+32
   \   000000B4   ........           STRB     R0,[R5], #+1
     78            //PID-идентификатор протокола,пропускаем
     79            p++;
   \   000000B8   010081E2           ADD      R0,R1,#+1
     80            //DCS-схема кодирования данных 
     81            c1=*p++;
   \   000000BC   ........           LDRB     R8,[R0], #+1
     82            //SCTS-Время/дата
     83            m=6;
   \   000000C0   0610A0E3           MOV      R1,#+6
     84            do
     85            {
     86              c=*p++;
   \                     ??UnpackSMS_7:
   \   000000C4   ........           LDRB     R2,[R0], #+1
     87              *s=(c&0x0F)+'0'; s++;
   \   000000C8   0F3002E2           AND      R3,R2,#0xF
   \   000000CC   303083E2           ADD      R3,R3,#+48
   \   000000D0   ........           STRB     R3,[R5], #+1
     88              *s=(c>>4)+'0'; s++;
   \   000000D4   3030A0E3           MOV      R3,#+48
   \   000000D8   422283E0           ADD      R2,R3,R2, ASR #+4
   \   000000DC   ........           STRB     R2,[R5], #+1
     89              switch(m)
   \   000000E0   022041E2           SUB      R2,R1,#+2
   \   000000E4   010052E3           CMP      R2,#+1
   \   000000E8   2700009A           BLS      ??UnpackSMS_8
   \   000000EC   032042E2           SUB      R2,R2,#+3
   \   000000F0   010052E3           CMP      R2,#+1
   \   000000F4   2020A083           MOVHI    R2,#+32
     90              {
     91              case 6:
     92              case 5:
     93                c='-';
   \   000000F8   2D20A093           MOVLS    R2,#+45
   \   000000FC   230000EA           B        ??UnpackSMS_9
   \                     ??UnpackSMS_10:
   \   00000100   020052E3           CMP      R2,#+2
   \   00000104   2420A003           MOVEQ    R2,#+36
   \                     ??UnpackSMS_11:
   \   00000108   ........           STRB     R2,[R5], #+1
   \   0000010C   018058E2           SUBS     R8,R8,#+1
   \   00000110   E6FFFF0A           BEQ      ??UnpackSMS_6
   \                     ??UnpackSMS_5:
   \   00000114   8020A0E3           MOV      R2,#+128
   \                     ??UnpackSMS_12:
   \   00000118   000050E3           CMP      R0,#+0
   \   0000011C   ........           LDRBEQ   R3,[R1], #+1
   \   00000120   0800A003           MOVEQ    R0,#+8
   \   00000124   C220A0E1           ASR      R2,R2,#+1
   \   00000128   010013E3           TST      R3,#0x1
   \   0000012C   80208213           ORRNE    R2,R2,#0x80
   \   00000130   C330A0E1           ASR      R3,R3,#+1
   \   00000134   010040E2           SUB      R0,R0,#+1
   \   00000138   010012E3           TST      R2,#0x1
   \   0000013C   F5FFFF0A           BEQ      ??UnpackSMS_12
   \   00000140   C220B0E1           ASRS     R2,R2,#+1
   \   00000144   EDFFFF1A           BNE      ??UnpackSMS_10
   \   00000148   4020A0E3           MOV      R2,#+64
   \   0000014C   EDFFFFEA           B        ??UnpackSMS_11
   \                     ??UnpackSMS_3:
   \   00000150   0080A0E3           MOV      R8,#+0
   \   00000154   0420A0E1           MOV      R2,R4
   \   00000158   000050E3           CMP      R0,#+0
   \   0000015C   0300001A           BNE      ??UnpackSMS_13
   \   00000160   D2FFFFEA           B        ??UnpackSMS_6
   \                     ??UnpackSMS_14:
   \   00000164   303083E2           ADD      R3,R3,#+48
   \   00000168   ........           STRB     R3,[R5], #+1
   \   0000016C   018088E2           ADD      R8,R8,#+1
   \                     ??UnpackSMS_13:
   \   00000170   000058E1           CMP      R8,R0
   \   00000174   CDFFFF2A           BCS      ??UnpackSMS_6
   \   00000178   010018E3           TST      R8,#0x1
   \   0000017C   ........           LDRBEQ   R2,[R1], #+1
   \   00000180   0F300202           ANDEQ    R3,R2,#0xF
   \   00000184   4232A011           ASRNE    R3,R2,#+4
   \   00000188   F5FFFFEA           B        ??UnpackSMS_14
     94                break;
     95              case 3:
     96              case 2:
     97                c=':';
   \                     ??UnpackSMS_8:
   \   0000018C   3A20A0E3           MOV      R2,#+58
     98                break;
     99              default:
    100                c=' ';
    101              }
    102              *s=c; s++;
   \                     ??UnpackSMS_9:
   \   00000190   ........           STRB     R2,[R5], #+1
    103            }
    104            while(--m);
   \   00000194   011051E2           SUBS     R1,R1,#+1
   \   00000198   C9FFFF1A           BNE      ??UnpackSMS_7
    105            p++; //Пропускаем TimeZone
   \   0000019C   019080E2           ADD      R9,R0,#+1
    106            m=*p++; //Длинна текста
   \   000001A0   ........           LDRB     R10,[R9], #+1
    107            if (is_udhl)
   \   000001A4   00005BE3           CMP      R11,#+0
   \   000001A8   1E00000A           BEQ      ??UnpackSMS_15
    108            {
    109              //Есть доп. заголовок, вычитываем
    110              is_udhl=*p; //Длина поля данных заголовка
    111              c=p[1];
   \   000001AC   0120D9E5           LDRB     R2,[R9, #+1]
   \   000001B0   00B0D9E5           LDRB     R11,[R9, #+0]
    112              if ((c==0)||(c==8))
   \   000001B4   000052E3           CMP      R2,#+0
   \   000001B8   1200000A           BEQ      ??UnpackSMS_16
   \   000001BC   080052E3           CMP      R2,#+8
   \   000001C0   0500001A           BNE      ??UnpackSMS_17
    113              {
    114                //Длинная смс, добавляем номер
    115                if (c)
    116                {
    117          	c=p[6];
   \   000001C4   0620D9E5           LDRB     R2,[R9, #+6]
    118          	c2=p[5];
   \   000001C8   0530D9E5           LDRB     R3,[R9, #+5]
    119                }
    120                else
    121                {
    122          	c=p[5];
    123          	c2=p[4];
    124                }
    125                s+=sprintf(s,"%u/%u ",c,c2);
   \                     ??UnpackSMS_18:
   \   000001CC   4C119FE5           LDR      R1,??UnpackSMS_4+0x4  ;; `?<Constant "%u/%u ">`
   \   000001D0   0500A0E1           MOV      R0,R5
   \   000001D4   160000EF           SWI      +22
   \   000001D8   055080E0           ADD      R5,R0,R5
    126              }
    127              is_udhl++; //Длина заголовка с учетом байта длинны
   \                     ??UnpackSMS_17:
   \   000001DC   01B08BE2           ADD      R11,R11,#+1
    128              
    129              c1 &= 0xC;/* кодировка */
   \   000001E0   0C8018E2           ANDS     R8,R8,#0xC
    130              
    131              if (c1 == 0)
   \   000001E4   0A00001A           BNE      ??UnpackSMS_19
    132              {
    133                //Для сообщения 7-бит
    134                is_udhl=((is_udhl*8)+6)/7; //Преобразуем в число пропускаемых септетов
   \   000001E8   2C119FE5           LDR      R1,??UnpackSMS_4  ;; 0x24924925
   \   000001EC   0600A0E3           MOV      R0,#+6
   \   000001F0   8B0180E0           ADD      R0,R0,R11, LSL #+3
   \   000001F4   91208BE0           UMULL    R2,R11,R1,R0
   \   000001F8   00B09BE0           ADDS     R11,R11,R0
   \   000001FC   6BB0A0E1           RRX      R11,R11
   \   00000200   2BB1A0E1           LSR      R11,R11,#+2
   \   00000204   070000EA           B        ??UnpackSMS_15
    135              }
   \                     ??UnpackSMS_16:
   \   00000208   0520D9E5           LDRB     R2,[R9, #+5]
   \   0000020C   0430D9E5           LDRB     R3,[R9, #+4]
   \   00000210   EDFFFFEA           B        ??UnpackSMS_18
    136              else if(c1 == 8 || c1 == 4)
   \                     ??UnpackSMS_19:
   \   00000214   080058E3           CMP      R8,#+8
   \   00000218   04005813           CMPNE    R8,#+4
    137              {
    138                //Для сообщения в юникоде или 8 бит
    139                p+=is_udhl; //Указатель на текст
   \   0000021C   09908B00           ADDEQ    R9,R11,R9
    140                m-=is_udhl; //Убрать длинну
   \   00000220   0BA04A00           SUBEQ    R10,R10,R11
    141                is_udhl=0; //Все уже пропущено
   \   00000224   00B0A003           MOVEQ    R11,#+0
    142              }
    143            }
    144            
    145            i=0;
   \                     ??UnpackSMS_15:
   \   00000228   0010A0E3           MOV      R1,#+0
    146            c2=0;
   \   0000022C   0100A0E1           MOV      R0,R1
    147            if (c1==8) m>>=1;
   \   00000230   080058E3           CMP      R8,#+8
   \   00000234   0200001A           BNE      ??UnpackSMS_20
   \   00000238   AAA0A0E1           LSR      R10,R10,#+1
   \   0000023C   000000EA           B        ??UnpackSMS_20
    148            while(m)
    149            {
    150              switch(c1)
    151              {
    152              default:
    153                //7 бит
    154                c=0x80; //Символ
    155                do
    156                {
    157          	if (!i) {c2=*p++; i=8;}
    158          	c>>=1;
    159          	if (c2&1) c|=0x80;
    160          	c2>>=1; i--;
    161                }
    162                while(!(c&1));
    163                c>>=1;
    164                if (!c) c='@';
    165                if (c==2) c='$';
    166                break;
    167                
    168              case 4:
    169                //8 бит
    170                c=*p++;
    171                break;
    172                
    173              case 8:
    174                //Юникод
    175                i=(*p++)<<8;
    176                i|=(*p++);
    177                if ((i>=0x410)&&(i<0x450)) i-=0x350;
    178                c=i;
    179                break;
    180              }
    181              if (!c) c='?';
    182              if ((c==0x0A)||(c==0x0D)) c=' ';
    183              if (is_udhl) //Если необходимо пропустить символы
    184              {
    185                is_udhl--; //Пропускаем
    186              }
    187              else
    188              {
    189                *s=c; s++;
    190              }
    191              m--;
   \                     ??UnpackSMS_21:
   \   00000240   01A04AE2           SUB      R10,R10,#+1
   \                     ??UnpackSMS_20:
   \   00000244   00005AE3           CMP      R10,#+0
   \   00000248   2C00000A           BEQ      ??UnpackSMS_22
   \   0000024C   042058E2           SUBS     R2,R8,#+4
   \   00000250   1300000A           BEQ      ??UnpackSMS_23
   \   00000254   042052E2           SUBS     R2,R2,#+4
   \   00000258   1300000A           BEQ      ??UnpackSMS_24
   \   0000025C   8020A0E3           MOV      R2,#+128
   \                     ??UnpackSMS_25:
   \   00000260   000051E3           CMP      R1,#+0
   \   00000264   ........           LDRBEQ   R0,[R9], #+1
   \   00000268   0810A003           MOVEQ    R1,#+8
   \   0000026C   C220A0E1           ASR      R2,R2,#+1
   \   00000270   010010E3           TST      R0,#0x1
   \   00000274   80208213           ORRNE    R2,R2,#0x80
   \   00000278   C000A0E1           ASR      R0,R0,#+1
   \   0000027C   011041E2           SUB      R1,R1,#+1
   \   00000280   010012E3           TST      R2,#0x1
   \   00000284   F5FFFF0A           BEQ      ??UnpackSMS_25
   \   00000288   C220B0E1           ASRS     R2,R2,#+1
   \   0000028C   4020A003           MOVEQ    R2,#+64
   \   00000290   1600000A           BEQ      ??UnpackSMS_26
   \   00000294   020052E3           CMP      R2,#+2
   \   00000298   1100001A           BNE      ??UnpackSMS_27
   \   0000029C   2420A0E3           MOV      R2,#+36
   \   000002A0   120000EA           B        ??UnpackSMS_26
   \                     ??UnpackSMS_23:
   \   000002A4   ........           LDRB     R2,[R9], #+1
   \   000002A8   0A0000EA           B        ??UnpackSMS_28
   \                     ??UnpackSMS_24:
   \   000002AC   ........           LDRB     R1,[R9], #+1
   \   000002B0   ........           LDRB     R2,[R9], #+1
   \   000002B4   0114A0E1           LSL      R1,R1,#+8
   \   000002B8   011082E1           ORR      R1,R2,R1
   \   000002BC   410E51E3           CMP      R1,#+1040
   \   000002C0   0300003A           BCC      ??UnpackSMS_29
   \   000002C4   450E51E3           CMP      R1,#+1104
   \   000002C8   4F20E033           MVNCC    R2,#+79
   \   000002CC   C02FC233           BICCC    R2,R2,#0x300
   \   000002D0   01108230           ADDCC    R1,R2,R1
   \                     ??UnpackSMS_29:
   \   000002D4   0120A0E1           MOV      R2,R1
   \                     ??UnpackSMS_28:
   \   000002D8   000052E3           CMP      R2,#+0
   \   000002DC   3F20A003           MOVEQ    R2,#+63
   \   000002E0   0200000A           BEQ      ??UnpackSMS_26
   \                     ??UnpackSMS_27:
   \   000002E4   0A0052E3           CMP      R2,#+10
   \   000002E8   0D005213           CMPNE    R2,#+13
   \   000002EC   2020A003           MOVEQ    R2,#+32
   \                     ??UnpackSMS_26:
   \   000002F0   00005BE3           CMP      R11,#+0
   \   000002F4   ........           STRBEQ   R2,[R5], #+1
   \   000002F8   01B04B12           SUBNE    R11,R11,#+1
   \   000002FC   CFFFFFEA           B        ??UnpackSMS_21
    192            }
    193            *s=0x0D; s++;
   \                     ??UnpackSMS_22:
   \   00000300   0D00A0E3           MOV      R0,#+13
   \   00000304   ........           STRB     R0,[R5], #+1
    194            *s=0x0A; s++; 
   \   00000308   0A00A0E3           MOV      R0,#+10
   \   0000030C   ........           STRB     R0,[R5], #+1
    195            *s=0;
   \   00000310   0040C5E5           STRB     R4,[R5, #+0]
    196          LERR:
    197            return ss;
   \                     ??UnpackSMS_2:
   \   00000314   0600A0E1           MOV      R0,R6
   \   00000318   708FBDE8           POP      {R4-R6,R8-R11,PC}
   \                     ??UnpackSMS_4:
   \   0000031C   25499224           DC32     0x24924925
   \   00000320   ........           DC32     `?<Constant "%u/%u ">`
    198          }
    199          

   \                                 In segment CODE, align 4, keep-with-next
    200          void my_emsal_process(void)  
    201          {  
   \                     my_emsal_process:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   10D04DE2           SUB      SP,SP,#+16
    202            GBS_MSG msg;
    203            zeromem(&msg, sizeof(GBS_MSG));
   \   00000008   1010A0E3           MOV      R1,#+16
   \   0000000C   0D00A0E1           MOV      R0,SP
   \   00000010   1D0100EF           SWI      +285
    204            GBS_ReceiveMessage(&msg);
   \   00000014   0D00A0E1           MOV      R0,SP
   \   00000018   010100EF           SWI      +257
    205          
    206            if (msg.msg == 0x6100) 
   \   0000001C   F200DDE1           LDRSH    R0,[SP, #+2]
   \   00000020   610C50E3           CMP      R0,#+24832
   \   00000024   0500001A           BNE      ??my_emsal_process_0
    207            {  
    208              char *text=UnpackSMS(IncommingPDU());
   \   00000028   DB8100EF           SWI      +33243
   \   0000002C   ........           BL       UnpackSMS
   \   00000030   0010B0E1           MOVS     R1,R0
    209          extern void WriteLog(char *text);
    210              if(text) SUBPROC((void *)WriteLog, text);
   \   00000034   0100000A           BEQ      ??my_emsal_process_0
   \   00000038   14009FE5           LDR      R0,??my_emsal_process_1  ;; WriteLog
   \   0000003C   710100EF           SWI      +369
    211            }
    212            old_sms_rlt_sm(); 
   \                     ??my_emsal_process_0:
   \   00000040   10009FE5           LDR      R0,??my_emsal_process_1+0x4  ;; gproc + 4
   \   00000044   000090E5           LDR      R0,[R0, #+0]
   \   00000048   30FF2FE1           BLX      R0
    213            __asm("NOP"); // чтобы исключить генерацию невыполнимой инструкции MOV PC,Rn
   \   0000004C   0000A0E1           NOP              
    214          }
   \   00000050   0F80BDE8           POP      {R0-R3,PC}       ;; return
   \                     ??my_emsal_process_1:
   \   00000054   ........           DC32     WriteLog
   \   00000058   ........           DC32     gproc + 4
    215            
    216          

   \                                 In segment CODE, align 4, keep-with-next
    217          void SetSMSListener()
    218          {
   \                     SetSMSListener:
   \   00000000   10402DE9           PUSH     {R4,LR}
    219            gproc = GBS_GetProcAddress(EMSAL_PROCESS);
   \   00000004   ........           LDR      R4,??DataTable1  ;; gproc
   \   00000008   1000A0E3           MOV      R0,#+16
   \   0000000C   420C80E3           ORR      R0,R0,#0x4200
   \   00000010   850300EF           SWI      +901
   \   00000014   000084E5           STR      R0,[R4, #+0]
    220            old_sms_rlt_sm = (void(*)()) gproc->word[15]; // сохраняем адрес легитимного обработчика:)
   \   00000018   3C1090E5           LDR      R1,[R0, #+60]
   \   0000001C   041084E5           STR      R1,[R4, #+4]
    221            gproc->word[15] = (int) my_emsal_process;  
   \   00000020   04109FE5           LDR      R1,??SetSMSListener_0  ;; my_emsal_process
   \   00000024   3C1080E5           STR      R1,[R0, #+60]
    222          }
   \   00000028   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??SetSMSListener_0:
   \   0000002C   ........           DC32     my_emsal_process
    223          

   \                                 In segment CODE, align 4, keep-with-next
    224          void DeleteSMSListener()
    225          {
    226            gproc->word[15] = (int) old_sms_rlt_sm;  
   \                     DeleteSMSListener:
   \   00000000   ........           LDR      R0,??DataTable1  ;; gproc
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   040090E5           LDR      R0,[R0, #+4]
   \   0000000C   3C0081E5           STR      R0,[R1, #+60]
    227          }
   \   00000010   1EFF2FE1           BX       LR               ;; return
    228          
    229          /******************************************************************************/
    230          

   \                                 In segment DATA_C, align 4, align-sorted
    231          const int minus11=-11;
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11
    232          extern const char LOGFILE[];
    233          
    234          typedef struct
    235          {
    236            CSM_RAM csm;
    237          }MAIN_CSM;
    238          

   \                                 In segment DATA_Z, align 4, align-sorted
    239          int maincsm_id;
   \                     maincsm_id:
   \   00000000                      DS8 4
    240          

   \                                 In segment CODE, align 4, keep-with-next
    241          int maincsm_onmessage(CSM_RAM* data,GBS_MSG* msg)
    242          {
   \                     maincsm_onmessage:
   \   00000000   00402DE9           PUSH     {LR}
    243            if(msg->msg == MSG_RECONFIGURE_REQ) 
   \   00000004   F200D1E1           LDRSH    R0,[R1, #+2]
   \   00000008   F120A0E3           MOV      R2,#+241
   \   0000000C   C02F82E3           ORR      R2,R2,#0x300
   \   00000010   020050E1           CMP      R0,R2
   \   00000014   0900001A           BNE      ??maincsm_onmessage_0
    244            {
    245              extern const char *successed_config_filename;
    246              if (strcmp_nocase(successed_config_filename,(char *)msg->data0)==0)
   \   00000018   28009FE5           LDR      R0,??maincsm_onmessage_1  ;; successed_config_filename
   \   0000001C   081091E5           LDR      R1,[R1, #+8]
   \   00000020   000090E5           LDR      R0,[R0, #+0]
   \   00000024   ........           _BLF     strcmp_nocase,??strcmp_nocase??rA
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0300001A           BNE      ??maincsm_onmessage_0
    247              {
    248                ShowMSG(0x11,(int)"LogSms config updated!");
   \   00000030   14109FE5           LDR      R1,??maincsm_onmessage_1+0x4  ;; `?<Constant "LogSms config updated!">`
   \   00000034   1100A0E3           MOV      R0,#+17
   \   00000038   480100EF           SWI      +328
    249                InitConfig();
   \   0000003C   ........           _BLF     InitConfig,??InitConfig??rA
    250              }
    251            }  
    252            
    253            return (1);  
   \                     ??maincsm_onmessage_0:
   \   00000040   0100A0E3           MOV      R0,#+1
   \   00000044   0080BDE8           POP      {PC}             ;; return
   \                     ??maincsm_onmessage_1:
   \   00000048   ........           DC32     successed_config_filename
   \   0000004C   ........           DC32     `?<Constant "LogSms config updated!">`
    254          }
    255          

   \                                 In segment CODE, align 4, keep-with-next
    256          static void maincsm_oncreate(CSM_RAM *data)
    257          { 
    258          }
   \                     maincsm_oncreate:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    259          
    260          extern void kill_data(void *p, void (*func_p)(void *));

   \                                 In segment CODE, align 4, keep-with-next
    261          void ElfKiller(void)
    262          {
   \                     ElfKiller:
   \   00000000   00402DE9           PUSH     {LR}
    263            extern void *ELF_BEGIN;
    264            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??ElfKiller_0  ;; ELF_BEGIN
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??ElfKiller_0:
   \   00000018   ........           DC32     ELF_BEGIN
    265          }
    266          

   \                                 In segment CODE, align 4, keep-with-next
    267          static void maincsm_onclose(CSM_RAM *csm)
    268          {
   \                     maincsm_onclose:
   \   00000000   00402DE9           PUSH     {LR}
    269              DeleteSMSListener();
   \   00000004   ........           BL       DeleteSMSListener
    270              SUBPROC((void *)ElfKiller);
   \   00000008   04009FE5           LDR      R0,??maincsm_onclose_0  ;; ElfKiller
   \   0000000C   710100EF           SWI      +369
    271          }
   \   00000010   0080BDE8           POP      {PC}             ;; return
   \                     ??maincsm_onclose_0:
   \   00000014   ........           DC32     ElfKiller
    272          
    273          

   \                                 In segment DATA_Z, align 4, align-sorted
    274          static unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280
    275          
    276          static const struct
    277          {
    278            CSM_DESC maincsm;
    279            WSHDR maincsm_name;

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "LogSms">`:
   \   00000000   4C6F67536D73       DC8 "LogSms"
   \              00          
   \   00000007   00                 DC8 0
   \   00000008   ............       DC32 maincsm_onmessage, maincsm_oncreate, maincsm_onclose, 40, 1
   \              ............
   \              280000000100
   \              0000        
   \   0000001C   ............       DC32 minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              ....CCCCAA55
   \              55AA33330000
   \              0000        
   \   00000030   8B00               DC16 139
   \   00000032   0000               DC8 0, 0
    280          }MAINCSM =
    281          {
    282            {
    283            maincsm_onmessage,
    284            maincsm_oncreate,
    285          #ifdef NEWSGOLD
    286            0,
    287            0,
    288            0,
    289            0,
    290          #endif
    291            maincsm_onclose,
    292            sizeof(MAIN_CSM),
    293            1,
    294            &minus11
    295            },
    296            {
    297              maincsm_name_body,
    298              NAMECSM_MAGIC1,
    299              NAMECSM_MAGIC2,
    300              0x0,
    301              139
    302            }
    303          };
    304          
    305          
    306          static void UpdateCSMname(void)
    307          {
    308            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"LogSms");
    309          }
    310          

   \                                 In segment CODE, align 4, keep-with-next
    311          void WriteLog(char *text)
    312          {
   \                     WriteLog:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040B0E1           MOVS     R4,R0
    313            unsigned int ul;
    314            if (!text) return;
   \   0000000C   3180BD08           POPEQ    {R0,R4,R5,PC}
    315            int f=fopen(LOGFILE,A_ReadWrite+A_Create+A_Append+A_BIN,P_READ+P_WRITE,&ul);
   \   00000010   50009FE5           LDR      R0,??WriteLog_0  ;; LOGFILE
   \   00000014   0D30A0E1           MOV      R3,SP
   \   00000018   602FA0E3           MOV      R2,#+384
   \   0000001C   0A10A0E3           MOV      R1,#+10
   \   00000020   811C81E3           ORR      R1,R1,#0x8100
   \   00000024   0A0000EF           SWI      +10
   \   00000028   0050A0E1           MOV      R5,R0
    316            if (f!=-1)
   \   0000002C   010075E3           CMN      R5,#+1
   \   00000030   0900000A           BEQ      ??WriteLog_1
    317            {    
    318              fwrite(f,text,strlen(text),&ul);
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   1B0000EF           SWI      +27
   \   0000003C   0D30A0E1           MOV      R3,SP
   \   00000040   0020A0E1           MOV      R2,R0
   \   00000044   0410A0E1           MOV      R1,R4
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   0C0000EF           SWI      +12
    319              fclose(f,&ul);
   \   00000050   0D10A0E1           MOV      R1,SP
   \   00000054   0500A0E1           MOV      R0,R5
   \   00000058   0D0000EF           SWI      +13
    320            }
    321            mfree(text);
   \                     ??WriteLog_1:
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   150000EF           SWI      +21
    322          }
   \   00000064   3180BDE8           POP      {R0,R4,R5,PC}    ;; return
   \                     ??WriteLog_0:
   \   00000068   ........           DC32     LOGFILE
    323          

   \                                 In segment CODE, align 4, keep-with-next
    324          int main(void)
    325          {
   \                     main:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    326            SetSMSListener();
    327            
    328            InitConfig();
    329            CSM_RAM *save_cmpc;
    330            char dummy[sizeof(MAIN_CSM)];
    331            UpdateCSMname();  
   \   00000004   74409FE5           LDR      R4,??main_0      ;; `?<Constant "LogSms">`
   \   00000008   28D04DE2           SUB      SP,SP,#+40
   \   0000000C   ........           BL       SetSMSListener
   \   00000010   ........           _BLF     InitConfig,??InitConfig??rA
   \   00000014   0410A0E1           MOV      R1,R4
   \   00000018   200084E2           ADD      R0,R4,#+32
   \   0000001C   240100EF           SWI      +292
    332            LockSched();
   \   00000020   460100EF           SWI      +326
    333            save_cmpc=CSM_root()->csm_q->current_msg_processing_csm;
   \   00000024   068100EF           SWI      +33030
   \   00000028   080090E5           LDR      R0,[R0, #+8]
   \   0000002C   045090E5           LDR      R5,[R0, #+4]
    334            CSM_root()->csm_q->current_msg_processing_csm=CSM_root()->csm_q->csm.first;
   \   00000030   068100EF           SWI      +33030
   \   00000034   0060A0E1           MOV      R6,R0
   \   00000038   068100EF           SWI      +33030
   \   0000003C   080090E5           LDR      R0,[R0, #+8]
   \   00000040   081096E5           LDR      R1,[R6, #+8]
   \   00000044   080090E5           LDR      R0,[R0, #+8]
    335            maincsm_id=CreateCSM(&MAINCSM.maincsm,dummy,0);
   \   00000048   0020A0E3           MOV      R2,#+0
   \   0000004C   040081E5           STR      R0,[R1, #+4]
   \   00000050   0D10A0E1           MOV      R1,SP
   \   00000054   080084E2           ADD      R0,R4,#+8
   \   00000058   070100EF           SWI      +263
   \   0000005C   20109FE5           LDR      R1,??main_0+0x4  ;; maincsm_id
   \   00000060   000081E5           STR      R0,[R1, #+0]
    336            CSM_root()->csm_q->current_msg_processing_csm=save_cmpc;
   \   00000064   068100EF           SWI      +33030
   \   00000068   080090E5           LDR      R0,[R0, #+8]
   \   0000006C   045080E5           STR      R5,[R0, #+4]
    337            UnlockSched();
   \   00000070   470100EF           SWI      +327
    338          
    339            
    340            return 0;
   \   00000074   0000A0E3           MOV      R0,#+0
   \   00000078   28D08DE2           ADD      SP,SP,#+40
   \   0000007C   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??main_0:
   \   00000080   ........           DC32     `?<Constant "LogSms">`
   \   00000084   ........           DC32     maincsm_id
    341          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     gproc

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%u/%u ">`:
   \   00000000   25752F257520       DC8 "%u/%u "
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "LogSms config updated!">`:
   \   00000000   4C6F67536D73       DC8 "LogSms config updated!"
   \              20636F6E6669
   \              672075706461
   \              7465642100  
   \   00000017   00                 DC8 0

   Maximum stack usage in bytes:

     Function          CSTACK
     --------          ------
     DeleteSMSListener     0
     ElfKiller             4
     SetSMSListener        8
     UnpackSMS            36
     WriteLog             16
     main                 56
     maincsm_onclose       4
     maincsm_oncreate      0
     maincsm_onmessage     4
     my_emsal_process     20


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     gproc                             8
     UnpackSMS                       804
     my_emsal_process                 92
     SetSMSListener                   48
     DeleteSMSListener                20
     minus11                           4
     maincsm_id                        4
     maincsm_onmessage                80
     maincsm_oncreate                  4
     ElfKiller                        28
     maincsm_onclose                  24
     maincsm_name_body               280
     ?<Constant "LogSms">             52
     WriteLog                        108
     main                            136
     ??DataTable1                      4
     ?<Constant "%u/%u ">              8
     ?<Constant "LogSms config updated!">
                                      24
      Others                          88

 
 1 424 bytes in segment CODE
    88 bytes in segment DATA_C
   292 bytes in segment DATA_Z
    12 bytes in segment INITTAB
 
 1 348 bytes of CODE  memory (+ 88 bytes shared)
    88 bytes of CONST memory
   292 bytes of DATA  memory

Errors: none
Warnings: none
