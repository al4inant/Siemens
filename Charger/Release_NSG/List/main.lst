##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    20/Dec/2015  13:13:32 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  E:\Users\alfinant\Documents\Siemens\alfinant\Charger #
#                       \main.c                                              #
#    Command line    =  E:\Users\alfinant\Documents\Siemens\alfinant\Charger #
#                       \main.c -D NEWSGOLD -lCN E:\Users\alfinant\Documents #
#                       \Siemens\alfinant\Charger\Release_NSG\List\ -la      #
#                       E:\Users\alfinant\Documents\Siemens\alfinant\Charger #
#                       \Release_NSG\List\ -o E:\Users\alfinant\Documents\Si #
#                       emens\alfinant\Charger\Release_NSG\Obj\ -z9          #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --fpu None            #
#                       --dlib_config E:\Users\alfinant\Documents\Siemens\IA #
#                       R\ARM\LIB\dl5tpainl8n.h -I                           #
#                       E:\Users\alfinant\Documents\Siemens\IAR\ARM\INC\     #
#                       --inline_threshold=2                                 #
#    List file       =  E:\Users\alfinant\Documents\Siemens\alfinant\Charger #
#                       \Release_NSG\List\main.lst                           #
#    Object file     =  E:\Users\alfinant\Documents\Siemens\alfinant\Charger #
#                       \Release_NSG\Obj\main.r79                            #
#                                                                            #
#                                                                            #
##############################################################################

E:\Users\alfinant\Documents\Siemens\alfinant\Charger\main.c
      1          #include "..\inc\swilib.h"
      2          //#include "..\inc\connector.h"
      3          //#include "..\inc\i2c.h"
      4          
      5          #ifdef NEWSGOLD
      6          #include "..\inc\reg8876.h"
      7          #else
      8          #include "..\inc\reg8875.h"
      9          #endif
     10          
     11          
     12          //PhyWAS_ExtPower
     13          
     14          typedef struct
     15          {
     16            int zero0;
     17            int zero1;
     18            int one;
     19            short pid;
     20            short pid_from;
     21            short msg;
     22            short submess;
     23          }SA_MSG;
     24          
     25          //#include <siemens/tbase_work/tbase.h>
     26          
     27          //#define C81
     28          
     29          typedef struct{ 
     30            int word[26]; 
     31          }GBSPROC;
     32           
     33          #pragma swi_number=0x385
     34          __swi __arm GBSPROC *GBS_GetProcAddress(short cepid);
     35          
     36          
     37          extern void kill_data(void *p, void (*func_p)(void *));
     38          #pragma segment="ELFBEGIN"

   \                                 In segment CODE, align 4, keep-with-next
     39          void ElfKiller(void)
     40          {
   \                     ElfKiller:
   \   00000000   00402DE9           PUSH     {LR}
     41            kill_data(__segment_begin("ELFBEGIN"),(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??ElfKiller_0  ;; SFB(ELFBEGIN)
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??ElfKiller_0:
   \   00000018   ........           DC32     SFB(ELFBEGIN)
     42          }
     43          
     44          

   \                                 In segment CODE, align 4, keep-with-next
     45          void USB_Charging_NSG()
     46          { //STA: MAIN-заряжается, DONE, STBY-зарядка не требуется, WAIT-требуется зарядка
   \                     USB_Charging_NSG:
   \   00000000   10402DE9           PUSH     {R4,LR}
     47            //CTY: NONE, USB, STD
     48           
     49            GBS_SendMessage(0x40B8,0x6,0,0,0);  //from WAS_HISR_Detection to PhyWAS_ExtPower_Process
   \   00000004   0000A0E3           MOV      R0,#+0
   \   00000008   01002DE9           PUSH     {R0}
   \   0000000C   B840A0E3           MOV      R4,#+184
   \   00000010   404C84E3           ORR      R4,R4,#0x4000
   \   00000014   0030A0E3           MOV      R3,#+0
   \   00000018   0020A0E1           MOV      R2,R0
   \   0000001C   0610A0E3           MOV      R1,#+6
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   000100EF           SWI      +256
     50            GBS_SendMessage(0x40B8,0x1,0,0,0);  //from WAS_HISR_Detection to PhyWAS_ExtPower_Process
   \   00000028   0000A0E3           MOV      R0,#+0
   \   0000002C   01002DE9           PUSH     {R0}
   \   00000030   0030A0E1           MOV      R3,R0
   \   00000034   0020A0E1           MOV      R2,R0
   \   00000038   0110A0E3           MOV      R1,#+1
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   000100EF           SWI      +256
     51            GBS_SendMessage(0x407E,0x1400,0,0,0);  //from WAS_HISR_Detection to PhyWAS_ExtPower_Process
   \   00000044   0000A0E3           MOV      R0,#+0
   \   00000048   01002DE9           PUSH     {R0}
   \   0000004C   0030A0E1           MOV      R3,R0
   \   00000050   0020A0E1           MOV      R2,R0
   \   00000054   501DA0E3           MOV      R1,#+5120
   \   00000058   3A0044E2           SUB      R0,R4,#+58
   \   0000005C   000100EF           SWI      +256
     52            GBS_SendMessage(0x3F00,0xA,0,0,0);  //from WAS_HISR_Detection to PhyWAS_ExtPower_Process 
   \   00000060   0000A0E3           MOV      R0,#+0
   \   00000064   01002DE9           PUSH     {R0}
   \   00000068   0030A0E1           MOV      R3,R0
   \   0000006C   0020A0E1           MOV      R2,R0
   \   00000070   0A10A0E3           MOV      R1,#+10
   \   00000074   FC0DA0E3           MOV      R0,#+16128
   \   00000078   000100EF           SWI      +256
     53            GBS_SendMessage(0x3F00,0xB,0,0,0);  //from WAS_HISR_Detection to PhyWAS_ExtPower_Process
   \   0000007C   0000A0E3           MOV      R0,#+0
   \   00000080   01002DE9           PUSH     {R0}
   \   00000084   0030A0E1           MOV      R3,R0
   \   00000088   0020A0E1           MOV      R2,R0
   \   0000008C   0B10A0E3           MOV      R1,#+11
   \   00000090   FC0DA0E3           MOV      R0,#+16128
   \   00000094   000100EF           SWI      +256
     54            GBS_SendMessage(0x3F00,0xC,0,0,0);  //from WAS_HISR_Detection to PhyWAS_ExtPower_Process 
   \   00000098   0000A0E3           MOV      R0,#+0
   \   0000009C   01002DE9           PUSH     {R0}
   \   000000A0   0030A0E1           MOV      R3,R0
   \   000000A4   0020A0E1           MOV      R2,R0
   \   000000A8   0C10A0E3           MOV      R1,#+12
   \   000000AC   FC0DA0E3           MOV      R0,#+16128
   \   000000B0   000100EF           SWI      +256
     55            //GBS_SendMessage(0x6B03,0x1A71,0,0,0); //from WAS_Manager_Process to WAS_ChargerController
     56          
     57            ShowMSG(0x11, (int)"PwrState: MAIN");
   \   000000B4   ........           LDR      R1,??DataTable1  ;; `?<Constant "PwrState: MAIN">`
   \   000000B8   1100A0E3           MOV      R0,#+17
   \   000000BC   480100EF           SWI      +328
     58          }
   \   000000C0   18D08DE2           ADD      SP,SP,#+24
   \   000000C4   1080BDE8           POP      {R4,PC}          ;; return
     59          

   \                                 In segment CODE, align 4, keep-with-next
     60          void USB_Charging()
     61          { //STA: MAIN-заряжается, DONE, STBY-зарядка не требуется, WAIT-требуется зарядка
   \                     USB_Charging:
   \   00000000   10402DE9           PUSH     {R4,LR}
     62            //CTY: NONE, USB, STD
     63            
     64            GBS_SendMessage(0x3F00,0x8,0,0,0);  //источник usb
   \   00000004   0000A0E3           MOV      R0,#+0
   \   00000008   01002DE9           PUSH     {R0}
   \   0000000C   0030A0E3           MOV      R3,#+0
   \   00000010   0020A0E1           MOV      R2,R0
   \   00000014   0810A0E3           MOV      R1,#+8
   \   00000018   FC0DA0E3           MOV      R0,#+16128
   \   0000001C   000100EF           SWI      +256
     65            GBS_SendMessage(0x3F00,0xB,0,0,0);  //from WAS_HISR_Detection to PhyWAS_ExtPower_Process
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   01002DE9           PUSH     {R0}
   \   00000028   0030A0E1           MOV      R3,R0
   \   0000002C   0020A0E1           MOV      R2,R0
   \   00000030   0B10A0E3           MOV      R1,#+11
   \   00000034   FC0DA0E3           MOV      R0,#+16128
   \   00000038   000100EF           SWI      +256
     66            GBS_SendMessage(0x3F00,0xA,0,0,0);  //from WAS_HISR_Detection to PhyWAS_ExtPower_Process
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   01002DE9           PUSH     {R0}
   \   00000044   0030A0E1           MOV      R3,R0
   \   00000048   0020A0E1           MOV      R2,R0
   \   0000004C   0A10A0E3           MOV      R1,#+10
   \   00000050   FC0DA0E3           MOV      R0,#+16128
   \   00000054   000100EF           SWI      +256
     67            GBS_SendMessage(0x6B03,0x15,0,0,0); //from WAS_Manager to WAS_ChargerController
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   01002DE9           PUSH     {R0}
   \   00000060   0340A0E3           MOV      R4,#+3
   \   00000064   6B4C84E3           ORR      R4,R4,#0x6B00
   \   00000068   0030A0E1           MOV      R3,R0
   \   0000006C   0020A0E1           MOV      R2,R0
   \   00000070   1510A0E3           MOV      R1,#+21
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   000100EF           SWI      +256
     68            GBS_SendMessage(0x6B03,0x10,0,0,0); //from WAS_Manager to WAS_ChargerController
   \   0000007C   0000A0E3           MOV      R0,#+0
   \   00000080   01002DE9           PUSH     {R0}
   \   00000084   0030A0E1           MOV      R3,R0
   \   00000088   0020A0E1           MOV      R2,R0
   \   0000008C   1010A0E3           MOV      R1,#+16
   \   00000090   0400A0E1           MOV      R0,R4
   \   00000094   000100EF           SWI      +256
     69            ShowMSG(0x11, (int)"PwrState: MAIN");
   \   00000098   ........           LDR      R1,??DataTable1  ;; `?<Constant "PwrState: MAIN">`
   \   0000009C   1100A0E3           MOV      R0,#+17
   \   000000A0   480100EF           SWI      +328
     70          /*  
     71            Для NSG:сетевая зарядка:
     72            1. При втыкании штекера выполняется прерывание (интерфейс SCU) Pasic_LISR
     73            2. Из прерывания вызывается Pasic_HISR
     74            3. Pasic_HISR читает по i2c значения 1го и 2го регистра PMU
     75            4. В callback`е i2c функции отправляется сообщение msg=7 3F00_PhyWAS_ExtPower_Process`у
     76            5. 3F00_PhyWAS_ExtPower_Process передает msg=0x1A77 6B03_WAS_ChargerController
     77            6. 6B03_WAS_ChargerController передает msg=0x1A19 4500_WAS_Manager_Process
     78            7. 4500_WAS_Manager_Process передает msg=6 40B8_AKKU_ANZEIGE, msg=1 40B8_AKKU_ANZEIGE, msg=0x1400 407E_AKKU_MESS
     79            
     80            3. В 3F00_PhyWAS_ExtPower_Process активируется WAS_HISR_Detection,тот передает сообщение msg=0x1A42 WAS_DetectionController
     81             . 6B00_WAS_DetectionController передает сообщение(0x1A1A) 4500_WAS_Manager_Process
     82          
     83            1. В callback`е i2c функции отправляется сообщение msg=8 3F00_PhyWAS_ExtPower_Process`у +
     84            2. 3F00_PhyWAS_ExtPower_Process передает msg=0x1A77 6B03_WAS_ChargerController
     85            3. 6B03_WAS_ChargerController передает msg=0x1A19 4500_WAS_Manager_Process
     86            
     87          */
     88          }
   \   000000A4   14D08DE2           ADD      SP,SP,#+20
   \   000000A8   1080BDE8           POP      {R4,PC}          ;; return
     89          

   \                                 In segment CODE, align 4, keep-with-next
     90          int main(char *exename, char *fname)
     91          {
   \                     main:
   \   00000000   00402DE9           PUSH     {LR}
     92            /*char s[32];
     93            void *adr =GBS_GetProcAddress(0x408b);
     94            sprintf(s, "=0x%X", adr);
     95            ShowMSG(0x11, (int)s);
     96           */ 
     97            USB_Charging_NSG();
   \   00000004   ........           BL       USB_Charging_NSG
     98           
     99              
    100            //GBS_SendMessage(0x3F00,0x6,0,0,0); // CTY=NONE
    101           
    102          /*GBS_SendMessage(0x3F00,0x6,0,0,0);
    103            GBS_SendMessage(0x6B03,0xF,0,0,0);  // CTY=NONE
    104            GBS_SendMessage(0x3F00,0xB,0,0,0);  
    105            GBS_SendMessage(0x3F00,0xA,0,0,0);
    106            GBS_SendMessage(0x6B03,0x15,0,0,0);    
    107            //0xA,4
    108          */
    109          
    110          }
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   0080BDE8           POP      {PC}             ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     `?<Constant "PwrState: MAIN">`

   \                                 In segment ELFBEGIN, align 1

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "PwrState: MAIN">`:
   \   00000000   507772537461       DC8 "PwrState: MAIN"
   \              74653A204D41
   \              494E00      
   \   0000000F   00                 DC8 0
    111          
    112          
    113          
    114          

   Maximum stack usage in bytes:

     Function         CSTACK
     --------         ------
     ElfKiller            4
     USB_Charging        28
     USB_Charging_NSG    32
     main                 4


   Segment part sizes:

     Function/Label               Bytes
     --------------               -----
     ElfKiller                      28
     USB_Charging_NSG              200
     USB_Charging                  172
     main                           16
     ??DataTable1                    4
     ?<Constant "PwrState: MAIN">   16
      Others                        28

 
 448 bytes in segment CODE
  16 bytes in segment DATA_C
 
 420 bytes of CODE  memory (+ 28 bytes shared)
  16 bytes of CONST memory

Errors: none
Warnings: none
