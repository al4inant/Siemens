//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   18/Dec/2015  01:32:03 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  E:\Users\alfinant\Documents\Siemens\alfinant\Test\m /
//                       ain.c                                               /
//    Command line    =  E:\Users\alfinant\Documents\Siemens\alfinant\Test\m /
//                       ain.c -D SGOLD -D LUMBERG -lCN                      /
//                       E:\Users\alfinant\Documents\Siemens\alfinant\Test\R /
//                       elease_SGOLD\List\ -la E:\Users\alfinant\Documents\ /
//                       Siemens\alfinant\Test\Release_SGOLD\List\ -o        /
//                       E:\Users\alfinant\Documents\Siemens\alfinant\Test\R /
//                       elease_SGOLD\Obj\ -z9 --cpu_mode arm --endian       /
//                       little --cpu ARM926EJ-S --stack_align 4             /
//                       --interwork -e --fpu None --dlib_config             /
//                       E:\Users\alfinant\Documents\Siemens\IAR\ARM\LIB\dl5 /
//                       tpainl8n.h -I E:\Users\alfinant\Documents\Siemens\I /
//                       AR\ARM\INC\ --inline_threshold=2                    /
//    List file       =  E:\Users\alfinant\Documents\Siemens\alfinant\Test\R /
//                       elease_SGOLD\List\main.s79                          /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)
        RSEG ELFBEGIN:DATA:REORDER:NOROOT(0)

        PUBWEAK `?*?DATA_ID`
`?<Constant "                       ">` EQU 0
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable2 EQU 0
??DataTable3 EQU 0
??DataTable4 EQU 0
??DataTable5 EQU 0
??DataTable7 EQU 0
        MULTWEAK ??Delay??rT
        MULTWEAK ??ElfKiller??rT
        MULTWEAK ??InitConnectorMap??rT
        MULTWEAK ??InitPinSafe??rT
        MULTWEAK ??RestorePin??rT
        MULTWEAK ??SaveRegMap??rT
        MULTWEAK ??SetProcAddr??rT
        MULTWEAK ??USB_Charging??rT
        MULTWEAK ??callback??rT
        MULTWEAK ??digitalRead??rT
        MULTWEAK ??digitalWrite??rT
        MULTWEAK ??i2cr_pmu??rA
        MULTWEAK ??i2cw_pmu??rA
        MULTWEAK ??kill_data??rA
        MULTWEAK ??main??rT
        MULTWEAK ??my_smsif_sm??rT
        MULTWEAK ??my_smsif_sm_logger??rT
        MULTWEAK ??pinMode??rT
        MULTWEAK ??pinSetIO??rT
        MULTWEAK ??showres??rT
        MULTWEAK ??tmr_proc??rT
        PUBWEAK ?init?tab?DATA_I
        PUBWEAK ?init?tab?DATA_Z
        PUBWEAK CCU0
        PUBWEAK CCU1
        PUBLIC Delay
        FUNCTION Delay,0203H
        PUBLIC ElfKiller
        FUNCTION ElfKiller,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBWEAK GPIO
        PUBLIC InitConnectorMap
        FUNCTION InitConnectorMap,0201H
        PUBLIC InitPinSafe
        FUNCTION InitPinSafe,0203H
        LOCFRAME CSTACK, 16, STACK
        PUBLIC RestorePin
        FUNCTION RestorePin,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC SaveRegMap
        FUNCTION SaveRegMap,0201H
        LOCFRAME CSTACK, 16, STACK
        PUBLIC SetProcAddr
        FUNCTION SetProcAddr,0203H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC USB_Charging
        FUNCTION USB_Charging,0201H
        LOCFRAME CSTACK, 24, STACK
        PUBLIC callback
        FUNCTION callback,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC connector
        PUBLIC dat
        PUBLIC `data`
        PUBLIC digitalRead
        FUNCTION digitalRead,0203H
        PUBLIC digitalWrite
        FUNCTION digitalWrite,0203H
        PUBLIC main
        FUNCTION main,0a03H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC map
        PUBLIC msg
        PUBLIC my_smsif_sm
        FUNCTION my_smsif_sm,080201H
        LOCFRAME CSTACK, 28, STACK
        PUBLIC my_smsif_sm_logger
        FUNCTION my_smsif_sm_logger,080201H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC old_addr
        PUBLIC pinMode
        FUNCTION pinMode,0203H
        PUBLIC pinSetIO
        FUNCTION pinSetIO,0203H
        PUBLIC ram
        PUBLIC reg_1
        PUBLIC reg_10
        PUBLIC reg_2
        PUBLIC save_connector
        PUBLIC showres
        FUNCTION showres,0601H
        LOCFRAME CSTACK, 140, STACK
        PUBLIC tmr
        PUBLIC tmr_proc
        FUNCTION tmr_proc,0601H
        LOCFRAME CSTACK, 4, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
i2cr_pmu            SYMBOL "i2cr_pmu"
i2cw_pmu            SYMBOL "i2cw_pmu"
kill_data           SYMBOL "kill_data"
Delay               SYMBOL "Delay"
??Delay??rT         SYMBOL "??rT", Delay
ElfKiller           SYMBOL "ElfKiller"
??ElfKiller??rT     SYMBOL "??rT", ElfKiller
InitConnectorMap    SYMBOL "InitConnectorMap"
??InitConnectorMap??rT SYMBOL "??rT", InitConnectorMap
InitPinSafe         SYMBOL "InitPinSafe"
??InitPinSafe??rT   SYMBOL "??rT", InitPinSafe
RestorePin          SYMBOL "RestorePin"
??RestorePin??rT    SYMBOL "??rT", RestorePin
SaveRegMap          SYMBOL "SaveRegMap"
??SaveRegMap??rT    SYMBOL "??rT", SaveRegMap
SetProcAddr         SYMBOL "SetProcAddr"
??SetProcAddr??rT   SYMBOL "??rT", SetProcAddr
USB_Charging        SYMBOL "USB_Charging"
??USB_Charging??rT  SYMBOL "??rT", USB_Charging
callback            SYMBOL "callback"
??callback??rT      SYMBOL "??rT", callback
digitalRead         SYMBOL "digitalRead"
??digitalRead??rT   SYMBOL "??rT", digitalRead
digitalWrite        SYMBOL "digitalWrite"
??digitalWrite??rT  SYMBOL "??rT", digitalWrite
??i2cr_pmu??rA      SYMBOL "??rA", i2cr_pmu
??i2cw_pmu??rA      SYMBOL "??rA", i2cw_pmu
??kill_data??rA     SYMBOL "??rA", kill_data
main                SYMBOL "main"
??main??rT          SYMBOL "??rT", main
my_smsif_sm         SYMBOL "my_smsif_sm"
??my_smsif_sm??rT   SYMBOL "??rT", my_smsif_sm
my_smsif_sm_logger  SYMBOL "my_smsif_sm_logger"
??my_smsif_sm_logger??rT SYMBOL "??rT", my_smsif_sm_logger
pinMode             SYMBOL "pinMode"
??pinMode??rT       SYMBOL "??rT", pinMode
pinSetIO            SYMBOL "pinSetIO"
??pinSetIO??rT      SYMBOL "??rT", pinSetIO
showres             SYMBOL "showres"
??showres??rT       SYMBOL "??rT", showres
tmr_proc            SYMBOL "tmr_proc"
??tmr_proc??rT      SYMBOL "??rT", tmr_proc

        EXTERN i2cr_pmu
        FUNCTION i2cr_pmu,0202H
        EXTERN i2cw_pmu
        FUNCTION i2cw_pmu,0202H
        EXTERN kill_data
        FUNCTION kill_data,0202H


        ASEGN DATA_AN:DATA:NOROOT,0f4300000H
// GPIO_TypeDef __data GPIO
GPIO:
        DS8 212

        ASEGN DATA_AN:DATA:NOROOT,0f4000000H
// CAPCOM_TypeDef __data CCU0
CCU0:
        DS8 256

        ASEGN DATA_AN:DATA:NOROOT,0f4100000H
// CAPCOM_TypeDef __data CCU1
CCU1:
        DS8 256

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
// uint32_t __data connector[8]
connector:
        DS8 32
// uint32_t __data save_connector[7]
save_connector:
        DS8 28

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??InitConnectorMap??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE InitConnectorMap

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function InitConnectorMap
        ARM
// __??Code32?? __code __interwork __atpcs void InitConnectorMap()
InitConnectorMap:
        LDR      R0,??DataTable6  ;; connector
        MOV      R1,#-268435456
        ORR      R1,R1,#0x4300000
        ADD      R2,R1,#+80
        STR      R2,[R0, #+4]
        ADD      R2,R1,#+76
        STR      R2,[R0, #+8]
        ADD      R2,R1,#+88
        STR      R2,[R0, #+12]
        ADD      R2,R1,#+84
        STR      R2,[R0, #+16]
        ADD      R1,R1,#+92
        STR      R1,[R0, #+20]
        MOV      R1,#+6
        STR      R1,[R0, #+24]
        BX       LR               ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??InitPinSafe??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE InitPinSafe

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function InitPinSafe
        ARM
// __??Code32?? __code __interwork __atpcs void InitPinSafe(uint8_t, int)
InitPinSafe:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        CMP      R0,#+8
        POPCS    {R4-R6,PC}
        LDR      R12,??DataTable6  ;; connector
        MOV      R3,R0
        LDR      R4,[R12, +R3, LSL #+2]
        MOVS     R2,R4
        POPEQ    {R4-R6,PC}
        ADD      R12,R12,R3, LSL #+2
        CMP      R4,#+6
        BNE      ??InitPinSafe_1
        CMP      R1,#+0
        POPEQ    {R4-R6,PC}
        LDR      R1,[R12, #+32]
        MOV      R3,#+0
        MOV      R2,#+0
        MOV      R0,#+16
        _BLF     i2cr_pmu,??i2cr_pmu??rA
        POP      {R4-R6,PC}
??InitPinSafe_1:
        MOV      R3,#-201326592
        MVN      R4,#+4096
        ORR      R5,R3,#0x100000
        MOV      R6,#+256
        SUB      R0,R0,#+1
        CMP      R0,#+4
        BHI      ??InitPinSafe_2
        ADR      LR,??InitPinSafe_0
        LDRB     LR,[LR, R0]
        ADD      PC,PC,LR, LSL #+2
        DATA
??InitPinSafe_0:
        DC8      +1,+20,+6,+11
        DC8      +16,+0,+0,+0
        ARM
??InitPinSafe_3:
        STR      R6,[R3, #+0]
        LDR      R0,[R3, #+236]
        AND      R0,R4,R0
        STR      R0,[R3, #+236]
        B        ??InitPinSafe_2
??InitPinSafe_4:
        STR      R6,[R5, #+0]
        LDR      R0,[R5, #+236]
        AND      R0,R4,R0
        STR      R0,[R5, #+236]
        B        ??InitPinSafe_2
??InitPinSafe_5:
        STR      R6,[R3, #+0]
        LDR      R0,[R3, #+220]
        AND      R0,R4,R0
        STR      R0,[R3, #+220]
        B        ??InitPinSafe_2
??InitPinSafe_6:
        STR      R6,[R5, #+0]
        LDR      R0,[R5, #+220]
        AND      R0,R4,R0
        STR      R0,[R5, #+220]
??InitPinSafe_2:
        CMP      R1,#+0
        LDRNE    R0,[R2, #+0]
        STRNE    R0,[R12, #+32]
        LDR      R0,[R2, #+0]
        ORR      R0,R0,#0x8000
        STR      R0,[R2, #+0]
        MOV      R0,#+33024
        STR      R0,[R2, #+0]
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??RestorePin??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE RestorePin

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function RestorePin
        ARM
// __??Code32?? __code __interwork __atpcs void RestorePin(uint8_t)
RestorePin:
        LDR      R2,??DataTable6  ;; connector
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R1,R0
        LDR      R3,[R2, +R1, LSL #+2]
        ADD      R1,R2,R1, LSL #+2
        LDR      R1,[R1, #+32]
        CMP      R1,#+0
        POPEQ    {PC}
        CMP      R3,#+6
        BNE      ??RestorePin_1
        MOV      R3,#+0
        MOV      R2,#+0
        MOV      R0,#+16
        _BLF     i2cw_pmu,??i2cw_pmu??rA
        POP      {PC}
??RestorePin_1:
        STR      R1,[R3, #+0]
        MOV      R1,#-201326592
        ORR      R2,R1,#0x100000
        MOV      R3,#+256
        SUB      R0,R0,#+1
        CMP      R0,#+4
        POPHI    {PC}
        ADR      R12,??RestorePin_0
        LDRB     R12,[R12, R0]
        ADD      PC,PC,R12, LSL #+2
        DATA
??RestorePin_0:
        DC8      +1,+32,+9,+17
        DC8      +25,+0,+0,+0
        ARM
??RestorePin_2:
        STR      R3,[R1, #+0]
        LDR      R0,[R1, #+236]
        ORR      R0,R0,#0x4000
        STR      R0,[R1, #+236]
        LDR      R0,[R1, #+236]
        ORR      R0,R0,#0x1000
        STR      R0,[R1, #+236]
        POP      {PC}
??RestorePin_3:
        STR      R3,[R2, #+0]
        LDR      R0,[R2, #+236]
        ORR      R0,R0,#0x4000
        STR      R0,[R2, #+236]
        LDR      R0,[R2, #+236]
        ORR      R0,R0,#0x1000
        STR      R0,[R2, #+236]
        POP      {PC}
??RestorePin_4:
        STR      R3,[R1, #+0]
        LDR      R0,[R1, #+220]
        ORR      R0,R0,#0x4000
        STR      R0,[R1, #+220]
        LDR      R0,[R1, #+220]
        ORR      R0,R0,#0x1000
        STR      R0,[R1, #+220]
        POP      {PC}
??RestorePin_5:
        STR      R3,[R2, #+0]
        LDR      R0,[R2, #+220]
        ORR      R0,R0,#0x4000
        STR      R0,[R2, #+220]
        LDR      R0,[R2, #+220]
        ORR      R0,R0,#0x1000
        STR      R0,[R2, #+220]
??RestorePin_6:
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??pinSetIO??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE pinSetIO

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function pinSetIO
        ARM
// __??Code32?? __code __interwork __atpcs void pinSetIO(uint8_t, int, int)
pinSetIO:
        LDR      R3,??DataTable6  ;; connector
        LDR      R12,[R3, +R0, LSL #+2]
        ADD      R0,R3,R0, LSL #+2
        LDR      R0,[R0, #+32]
        CMP      R0,#+0
        BXEQ     LR
        LDR      R0,[R12, #+0]
        ORR      R1,R2,R1, LSL #+4
        ORR      R0,R0,#0x8000
        STR      R0,[R12, #+0]
        LDR      R0,[R12, #+0]
        ORR      R0,R1,R0
        STR      R0,[R12, #+0]
        LDR      R0,[R12, #+0]
        BIC      R0,R0,#0x8000
        STR      R0,[R12, #+0]
        BX       LR               ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??pinMode??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE pinMode

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function pinMode
        ARM
// __??Code32?? __code __interwork __atpcs void pinMode(uint8_t, uint8_t)
pinMode:
        LDR      R2,??DataTable6  ;; connector
        LDR      R0,[R2, +R0, LSL #+2]
        CMP      R0,#+0
        BXEQ     LR
        CMP      R1,#+0
        BNE      ??pinMode_0
        LDR      R1,[R0, #+0]
        ORR      R1,R1,#0x8000
        STR      R1,[R0, #+0]
        LDR      R1,[R0, #+0]
        BIC      R1,R1,#0x8400
        B        ??pinMode_1
??pinMode_0:
        CMP      R1,#+1
        BXNE     LR
        LDR      R1,[R0, #+0]
        ORR      R1,R1,#0x8000
        STR      R1,[R0, #+0]
        LDR      R1,[R0, #+0]
        ORR      R1,R1,#0x400
        STR      R1,[R0, #+0]
        LDR      R1,[R0, #+0]
        BIC      R1,R1,#0x8000
??pinMode_1:
        B        ?Subroutine18
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??digitalWrite??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE digitalWrite

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function digitalWrite
        ARM
// __??Code32?? __code __interwork __atpcs void digitalWrite(uint8_t, uint8_t)
digitalWrite:
        LDR      R2,??DataTable6  ;; connector
        LDR      R0,[R2, +R0, LSL #+2]
        CMP      R0,#+0
        BXEQ     LR
        CMP      R1,#+1
        BNE      ??digitalWrite_0
        LDR      R1,[R0, #+0]
        ORR      R1,R1,#0x8000
        STR      R1,[R0, #+0]
        LDR      R1,[R0, #+0]
        ORR      R1,R1,#0x200
        STR      R1,[R0, #+0]
        LDR      R1,[R0, #+0]
        BIC      R1,R1,#0x8000
        B        ??digitalWrite_1
??digitalWrite_0:
        CMP      R1,#+0
        BXNE     LR
        LDR      R1,[R0, #+0]
        ORR      R1,R1,#0x8000
        STR      R1,[R0, #+0]
        LDR      R1,[R0, #+0]
        BIC      R1,R1,#0x8200
        CFI EndBlock cfiBlock11
??digitalWrite_1:
        REQUIRE ?Subroutine18
        ;; // Fall through to label ?Subroutine18

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon1
        CFI NoFunction
        ARM
?Subroutine18:
        STR      R1,[R0, #+0]
        BX       LR               ;; return
        CFI EndBlock cfiBlock12

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon0
        CFI NoFunction
        THUMB
??digitalRead??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock13
        REQUIRE digitalRead

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon1
        CFI Function digitalRead
        ARM
// __??Code32?? __code __interwork __atpcs int digitalRead(uint8_t)
digitalRead:
        LDR      R2,??DataTable6  ;; connector
        MOV      R1,#+0
        LDR      R0,[R2, +R0, LSL #+2]
        CMP      R0,#+0
        LDRNE    R0,[R0, #+0]
        ANDNE    R0,R0,#0x200
        LSRNE    R1,R0,#+9
        MOV      R0,R1
        BX       LR               ;; return
        CFI EndBlock cfiBlock14

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable6:
        DC32     connector

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon0
        CFI NoFunction
        THUMB
??ElfKiller??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock15
        REQUIRE ElfKiller

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon1
        CFI Function ElfKiller
        ARM
ElfKiller:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SWI      +32789
        MOV      R1,R0
        LDR      R0,??ElfKiller_0  ;; SFB(ELFBEGIN)
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        _BF      kill_data,??kill_data??rA  ;; tailcall
        DATA
??ElfKiller_0:
        DC32     SFB(ELFBEGIN)
        CFI EndBlock cfiBlock16

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon0
        CFI NoFunction
        THUMB
??SaveRegMap??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock17
        REQUIRE SaveRegMap

        RSEG DATA_I:DATA:SORT:NOROOT(2)
`data`:
        DS8 24
        REQUIRE `?<Initializer for data>`
map:
        DS8 4
        REQUIRE `?<Initializer for map>`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon1
        CFI Function SaveRegMap
        ARM
SaveRegMap:
        PUSH     {R0,R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+16
        MOV      R1,#+0
        LDR      R4,??SaveRegMap_0  ;; `data`
        STR      R1,[SP, #+0]
        MOV      R0,#+0
??SaveRegMap_1:
        LDR      R1,[R4, #+24]
        LDR      R2,[R1], #+4
        STR      R1,[R4, #+24]
        STR      R2,[R4, +R0, LSL #+2]
        ADD      R0,R0,#+1
        CMP      R0,#+6
        BLT      ??SaveRegMap_1
        LDR      R0,??SaveRegMap_0+0x4  ;; `?<Constant "0:\\\\SCCU.bin">`
        MOV      R3,SP
        MOV      R2,#+384
        MOV      R1,#+2
        ORR      R1,R1,#0x8300
        SWI      +10
        MOV      R5,R0
        MOV      R3,SP
        MOV      R2,#+24
        MOV      R1,R4
        SWI      +12
        MOV      R1,SP
        MOV      R0,R5
        SWI      +13
        POP      {R0,R4,R5,PC}    ;; return
        DATA
??SaveRegMap_0:
        DC32     `data`
        DC32     `?<Constant "0:\\\\SCCU.bin">`
        CFI EndBlock cfiBlock18

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon0
        CFI NoFunction
        THUMB
??SetProcAddr??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock19
        REQUIRE SetProcAddr

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon1
        CFI Function SetProcAddr
        ARM
SetProcAddr:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R1
        SWI      +901
        CMP      R0,#+0
        LDRNE    R1,[R0, #+60]
        STRNE    R4,[R0, #+60]
        MOVNE    R0,R1
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock20

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon0
        CFI NoFunction
        THUMB
??my_smsif_sm_logger??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock21
        REQUIRE my_smsif_sm_logger

        RSEG DATA_I:DATA:SORT:NOROOT(2)
old_addr:
        DS8 4
        REQUIRE `?<Initializer for old_addr>`
msg:
        DS8 4
        REQUIRE `?<Initializer for msg>`
ram:
        DS8 4
        REQUIRE `?<Initializer for ram>`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon1
        CFI Function my_smsif_sm_logger
        ARM
my_smsif_sm_logger:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        LDR      R4,??DataTable8  ;; old_addr
        LDR      R0,[R4, #+4]
        SWI      +257
        LDR      R0,[R4, #+4]
        ADD      R0,R0,#+16
        STR      R0,[R4, #+4]
        LDR      R0,[R4, #+0]
        BLX      R0
        NOP              
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock22

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon0
        CFI NoFunction
        THUMB
??my_smsif_sm??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock23
        REQUIRE my_smsif_sm

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon1
        CFI Function my_smsif_sm
        ARM
my_smsif_sm:
        PUSH     {R0-R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+24
        MOV      R1,#+16
        LDR      R4,??DataTable8  ;; old_addr
        MOV      R0,SP
        SWI      +285
        MOV      R0,SP
        SWI      +257
        LDRSH    R0,[SP, #+0]
        MOV      R1,#+115
        ORR      R1,R1,#0x4000
        CMP      R0,R1
        LDRSHEQ  R0,[SP, #+2]
        CMPEQ    R0,#+105
        BNE      ??my_smsif_sm_0
        SWI      +258
        LDR      R1,[SP, #+8]
        LDR      R0,[R4, #+8]
        MOV      R2,#+178
        SWI      +286
        LDR      R0,[R4, #+8]
        MOV      R3,#+0
        ADD      R0,R0,#+192
        STR      R0,[R4, #+8]
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+28
        MOV      R2,R0
        MOV      R1,#+400
        MOV      R0,#+119
        ORR      R0,R0,#0x4000
        SWI      +256
        ADD      SP,SP,#+4
        CFI CFA R13+24
        B        ??my_smsif_sm_1
??my_smsif_sm_0:
        LDR      R0,[R4, #+0]
        BLX      R0
??my_smsif_sm_1:
        NOP              
        POP      {R0-R4,PC}       ;; return
        CFI EndBlock cfiBlock24

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable8:
        DC32     old_addr

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon0
        CFI NoFunction
        THUMB
??showres??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock25
        REQUIRE showres

        RSEG DATA_Z:DATA:SORT:NOROOT(0)
dat:
        DS8 1

        RSEG DATA_Z:DATA:SORT:NOROOT(0)
reg_1:
        DS8 1
reg_2:
        DS8 1
reg_10:
        DS8 1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock26 Using cfiCommon1
        CFI Function showres
        ARM
showres:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SUB      SP,SP,#+128
        CFI CFA R13+132
        LDR      R0,??showres_0   ;; reg_1
        MOV      R1,#+208
        SUB      R1,R1,#+198180864
        LDR      R1,[R1, #+0]
        PUSH     {R1}
        CFI CFA R13+136
        LDRB     R1,[R0, #+2]
        PUSH     {R1}
        CFI CFA R13+140
        LDRB     R3,[R0, #+1]
        LDRB     R2,[R0, #+0]
        LDR      R1,??showres_0+0x4  ;; `?<Constant "i2cReg1=%X\\ni2cReg2=%X...">`
        ADD      R0,SP,#+8
        SWI      +22
        ADD      R1,SP,#+8
        MOV      R0,#+1
        SWI      +328
        LDR      R0,??showres_0+0x8  ;; ElfKiller
        SWI      +369
        ADD      SP,SP,#+136
        CFI CFA R13+4
        POP      {PC}             ;; return
        DATA
??showres_0:
        DC32     reg_1
        DC32     `?<Constant "i2cReg1=%X\\ni2cReg2=%X...">`
        DC32     ElfKiller
        CFI EndBlock cfiBlock26

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock27 Using cfiCommon0
        CFI NoFunction
        THUMB
??callback??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock27
        REQUIRE callback

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock28 Using cfiCommon1
        CFI Function callback
        ARM
callback:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        LDRSH    R0,[R0, #+6]
        CMP      R0,#+1
        POPNE    {PC}
        LDR      R0,??callback_0  ;; showres
        SWI      +369
        POP      {PC}             ;; return
        DATA
??callback_0:
        DC32     showres
        CFI EndBlock cfiBlock28

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock29 Using cfiCommon0
        CFI NoFunction
        THUMB
??tmr_proc??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock29
        REQUIRE tmr_proc

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
tmr:
        DS8 16

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock30 Using cfiCommon1
        CFI Function tmr_proc
        ARM
tmr_proc:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R0,#+2
        BL       digitalRead
        EOR      R1,R0,#0x1
        AND      R1,R1,#0xFF
        MOV      R0,#+2
        BL       digitalWrite
        LDR      R2,??tmr_proc_0  ;; tmr_proc
        LDR      R0,??tmr_proc_0+0x4  ;; tmr
        MOV      R1,#+1
        SWI      +77
        POP      {PC}             ;; return
        DATA
??tmr_proc_0:
        DC32     tmr_proc
        DC32     tmr
        CFI EndBlock cfiBlock30

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock31 Using cfiCommon0
        CFI NoFunction
        THUMB
??Delay??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock31
        REQUIRE Delay

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock32 Using cfiCommon1
        CFI Function Delay
        ARM
Delay:
        LDR      R1,??Delay_0     ;; 0xfffffffff4b00010
        LDR      R1,[R1, #+0]
        ADD      R0,R0,R1
??Delay_1:
        LDR      R1,??Delay_0     ;; 0xfffffffff4b00010
        LDR      R1,[R1, #+0]
        CMP      R1,R0
        BCC      ??Delay_1
        BX       LR               ;; return
        DATA
??Delay_0:
        DC32     0xfffffffff4b00010
        CFI EndBlock cfiBlock32

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock33 Using cfiCommon0
        CFI NoFunction
        THUMB
??USB_Charging??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock33
        REQUIRE USB_Charging

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock34 Using cfiCommon1
        CFI Function USB_Charging
        ARM
USB_Charging:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+12
        MOV      R3,#+0
        MOV      R2,R0
        MOV      R1,#+11
        MOV      R0,#+16128
        SWI      +256
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+16
        MOV      R3,R0
        MOV      R2,R0
        MOV      R1,#+10
        MOV      R0,#+16128
        SWI      +256
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+20
        MOV      R4,#+3
        ORR      R4,R4,#0x6B00
        MOV      R3,R0
        MOV      R2,R0
        MOV      R1,#+21
        MOV      R0,R4
        SWI      +256
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+24
        MOV      R3,R0
        MOV      R2,R0
        MOV      R1,#+16
        MOV      R0,R4
        SWI      +256
        LDR      R1,??USB_Charging_0  ;; `?<Constant "PwrState: MAIN">`
        MOV      R0,#+17
        SWI      +328
        POP      {R0-R4,PC}       ;; return
        DATA
??USB_Charging_0:
        DC32     `?<Constant "PwrState: MAIN">`
        CFI EndBlock cfiBlock34

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock35 Using cfiCommon0
        CFI NoFunction
        THUMB
??main??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock35
        REQUIRE main

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock36 Using cfiCommon1
        CFI Function main
        ARM
main:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+8
        MOV      R3,#+0
        MOV      R2,R0
        MOV      R1,#+6
        MOV      R0,#+16128
        SWI      +256
        MOV      R0,#+0
        POP      {R1,PC}          ;; return
        CFI EndBlock cfiBlock36

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock37 Using cfiCommon1
        CFI NoFunction
        ARM
??i2cr_pmu??rA:
        LDR      R12,??Subroutine19_0  ;; i2cr_pmu
        BX       R12
        DATA
??Subroutine19_0:
        DC32     i2cr_pmu
        CFI EndBlock cfiBlock37

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock38 Using cfiCommon1
        CFI NoFunction
        ARM
??i2cw_pmu??rA:
        LDR      R12,??Subroutine20_0  ;; i2cw_pmu
        BX       R12
        DATA
??Subroutine20_0:
        DC32     i2cw_pmu
        CFI EndBlock cfiBlock38

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock39 Using cfiCommon1
        CFI NoFunction
        ARM
??kill_data??rA:
        LDR      R12,??Subroutine21_0  ;; kill_data
        BX       R12
        DATA
??Subroutine21_0:
        DC32     kill_data
        CFI EndBlock cfiBlock39

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for data>`:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0
`?<Initializer for map>`:
        DC32 0F45000A0H

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for old_addr>`:
        DATA
        DC8 0, 0, 0, 0
`?<Initializer for msg>`:
        DC32 0A80D0000H
`?<Initializer for ram>`:
        DC32 2819424256

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        RSEG ELFBEGIN:DATA:REORDER:NOROOT(0)

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "0:\\\\SCCU.bin">`:
        DATA
        DC8 "0:\\SCCU.bin"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "i2cReg1=%X\\ni2cReg2=%X...">`:
        DATA
        DC8 "i2cReg1=%X\012i2cReg2=%X\012i2cReg10=%X\012pmCharge=%X\012"
        DC8 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "PwrState: MAIN">`:
        DATA
        DC8 "PwrState: MAIN"
        DC8 0

        END
// 
// 1 712 bytes in segment CODE
//   724 bytes in segment DATA_AN
//    76 bytes in segment DATA_C
//    40 bytes in segment DATA_I
//    40 bytes in segment DATA_ID
//    80 bytes in segment DATA_Z
//    24 bytes in segment INITTAB
// 
// 1 604 bytes of CODE  memory (+ 132 bytes shared)
//   116 bytes of CONST memory
//   120 bytes of DATA  memory (+ 724 bytes shared)
//
//Errors: none
//Warnings: 1
