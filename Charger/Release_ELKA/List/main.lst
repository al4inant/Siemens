##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    21/Oct/2014  10:41:20 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\Users\Инсаф\Documents\alfinant\IAR\ARM\alfinant\T #
#                       est\main.c                                           #
#    Command line    =  C:\Users\Инсаф\Documents\alfinant\IAR\ARM\alfinant\T #
#                       est\main.c -D NEWSGOLD -D ELKA -D NANO -lCN          #
#                       C:\Users\Инсаф\Documents\alfinant\IAR\ARM\alfinant\T #
#                       est\Release_ELKA\List\ -la                           #
#                       C:\Users\Инсаф\Documents\alfinant\IAR\ARM\alfinant\T #
#                       est\Release_ELKA\List\ -o                            #
#                       C:\Users\Инсаф\Documents\alfinant\IAR\ARM\alfinant\T #
#                       est\Release_ELKA\Obj\ -z9 --cpu_mode arm --endian    #
#                       little --cpu ARM926EJ-S --stack_align 4 --interwork  #
#                       -e --fpu None --dlib_config                          #
#                       C:\Users\Инсаф\Documents\alfinant\IAR\ARM\LIB\dl5tpa #
#                       inl8n.h -I C:\Users\Инсаф\Documents\alfinant\IAR\ARM #
#                       \INC\ --inline_threshold=2                           #
#    List file       =  C:\Users\Инсаф\Documents\alfinant\IAR\ARM\alfinant\T #
#                       est\Release_ELKA\List\main.lst                       #
#    Object file     =  C:\Users\Инсаф\Documents\alfinant\IAR\ARM\alfinant\T #
#                       est\Release_ELKA\Obj\main.r79                        #
#                                                                            #
#                                                                            #
##############################################################################

C:\Users\Инсаф\Documents\alfinant\IAR\ARM\alfinant\Test\main.c
      1          #include <siemens/swilib.h>
      2          #include <siemens/nu_swilib.h>
      3          #include <siemens/reg8876.h>

   \                                 In segment DATA_AN, at 0xf4000000
   \   CAPCOM_TypeDef __data CCU0
   \                     CCU0:
   \   00000000                      DS8 256

   \                                 In segment DATA_AN, at 0xf4100000
   \   CAPCOM_TypeDef __data CCU1
   \                     CCU1:
   \   00000000                      DS8 256
      4          #include <siemens/clkman.h>
      5          #include <siemens/i2c.h>
      6          #include <siemens/connector.h>

   \                                 In segment DATA_I, align 4, align-sorted
   \   uint32_t __data connector[13]
   \                     connector:
   \   00000000                      DS8 52
   \   00000034                      REQUIRE `?<Initializer for connector>`
   \   uint32_t __data save_connector[13]
   \                     save_connector:
   \   00000034                      DS8 52
   \   00000068                      REQUIRE `?<Initializer for save_connector>`

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void InitPin(uint8_t)
   \                     InitPin:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0D0050E3           CMP      R0,#+13
   \   00000008   0080BD28           POPCS    {PC}
   \   0000000C   ........           LDR      R1,??DataTable3  ;; connector
   \   00000010   002191E7           LDR      R2,[R1, +R0, LSL #+2]
   \   00000014   0230B0E1           MOVS     R3,R2
   \   00000018   0080BD08           POPEQ    {PC}
   \   0000001C   000181E0           ADD      R0,R1,R0, LSL #+2
   \   00000020   070052E3           CMP      R2,#+7
   \   00000024   0400001A           BNE      ??InitPin_0
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   341080E2           ADD      R1,R0,#+52
   \   00000030   1000A0E3           MOV      R0,#+16
   \   00000034   ........           _BLF     i2cr_pmu,??i2cr_pmu??rA
   \   00000038   0080BDE8           POP      {PC}
   \                     ??InitPin_0:
   \   0000003C   F414A0E3           MOV      R1,#-201326592
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   002081E5           STR      R2,[R1, #+0]
   \   00000048   40C981E3           ORR      R12,R1,#0x100000
   \   0000004C   00208CE5           STR      R2,[R12, #+0]
   \   00000050   002093E5           LDR      R2,[R3, #+0]
   \   00000054   342080E5           STR      R2,[R0, #+52]
   \   00000058   000093E5           LDR      R0,[R3, #+0]
   \   0000005C   800C80E3           ORR      R0,R0,#0x8000
   \   00000060   000083E5           STR      R0,[R3, #+0]
   \   00000064   000093E5           LDR      R0,[R3, #+0]
   \   00000068   400F80E3           ORR      R0,R0,#0x100
   \   0000006C   000083E5           STR      R0,[R3, #+0]
   \   00000070   400FA0E3           MOV      R0,#+256
   \   00000074   000081E5           STR      R0,[R1, #+0]
   \   00000078   00008CE5           STR      R0,[R12, #+0]
   \   0000007C   0080BDE8           POP      {PC}             ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void pinMode(uint8_t, uint8_t)
   \                     pinMode:
   \   00000000   ........           LDR      R2,??DataTable3  ;; connector
   \   00000004   000192E7           LDR      R0,[R2, +R0, LSL #+2]
   \   00000008   000050E3           CMP      R0,#+0
   \   0000000C   1EFF2F01           BXEQ     LR
   \   00000010   000051E3           CMP      R1,#+0
   \   00000014   00109005           LDREQ    R1,[R0, #+0]
   \   00000018   842CE0E3           MVN      R2,#+33792
   \   0000001C   801C8103           ORREQ    R1,R1,#0x8000
   \   00000020   1100000A           BEQ      ??pinMode_0
   \   00000024   010051E3           CMP      R1,#+1
   \   00000028   0800001A           BNE      ??pinMode_1
   \   0000002C   001090E5           LDR      R1,[R0, #+0]
   \   00000030   801C81E3           ORR      R1,R1,#0x8000
   \   00000034   001080E5           STR      R1,[R0, #+0]
   \   00000038   001090E5           LDR      R1,[R0, #+0]
   \   0000003C   401E81E3           ORR      R1,R1,#0x400
   \   00000040   001080E5           STR      R1,[R0, #+0]
   \   00000044   001090E5           LDR      R1,[R0, #+0]
   \   00000048   801CC1E3           BIC      R1,R1,#0x8000
   \   0000004C   090000EA           B        ??pinMode_2
   \                     ??pinMode_1:
   \   00000050   020051E3           CMP      R1,#+2
   \   00000054   0800001A           BNE      ??pinMode_3
   \   00000058   001090E5           LDR      R1,[R0, #+0]
   \   0000005C   801C81E3           ORR      R1,R1,#0x8000
   \   00000060   001080E5           STR      R1,[R0, #+0]
   \   00000064   001090E5           LDR      R1,[R0, #+0]
   \   00000068   401D81E3           ORR      R1,R1,#0x1000
   \                     ??pinMode_0:
   \   0000006C   001080E5           STR      R1,[R0, #+0]
   \   00000070   001090E5           LDR      R1,[R0, #+0]
   \   00000074   011002E0           AND      R1,R2,R1
   \                     ??pinMode_2:
   \   00000078   ........           B        ?Subroutine13
   \                     ??pinMode_3:
   \   0000007C   030051E3           CMP      R1,#+3
   \   00000080   501DA003           MOVEQ    R1,#+5120
   \   00000084   FBFFFF0A           BEQ      ??pinMode_2
   \   00000088   040051E3           CMP      R1,#+4
   \   0000008C   601CA003           MOVEQ    R1,#+24576
   \   00000090   00108005           STREQ    R1,[R0, #+0]
   \   00000094   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine13:
   \   00000000   001080E5           STR      R1,[R0, #+0]
   \   00000004   1EFF2FE1           BX       LR

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void digitalWrite(uint8_t, uint8_t)
   \                     digitalWrite:
   \   00000000   ........           LDR      R2,??DataTable3  ;; connector
   \   00000004   000192E7           LDR      R0,[R2, +R0, LSL #+2]
   \   00000008   000050E3           CMP      R0,#+0
   \   0000000C   1EFF2F01           BXEQ     LR
   \   00000010   010051E3           CMP      R1,#+1
   \   00000014   0800001A           BNE      ??digitalWrite_0
   \   00000018   001090E5           LDR      R1,[R0, #+0]
   \   0000001C   801C81E3           ORR      R1,R1,#0x8000
   \   00000020   001080E5           STR      R1,[R0, #+0]
   \   00000024   001090E5           LDR      R1,[R0, #+0]
   \   00000028   801F81E3           ORR      R1,R1,#0x200
   \   0000002C   001080E5           STR      R1,[R0, #+0]
   \   00000030   001090E5           LDR      R1,[R0, #+0]
   \   00000034   801CC1E3           BIC      R1,R1,#0x8000
   \   00000038   060000EA           B        ??digitalWrite_1
   \                     ??digitalWrite_0:
   \   0000003C   000051E3           CMP      R1,#+0
   \   00000040   1EFF2F11           BXNE     LR
   \   00000044   001090E5           LDR      R1,[R0, #+0]
   \   00000048   801C81E3           ORR      R1,R1,#0x8000
   \   0000004C   001080E5           STR      R1,[R0, #+0]
   \   00000050   001090E5           LDR      R1,[R0, #+0]
   \   00000054   821CC1E3           BIC      R1,R1,#0x8200
   \                     ??digitalWrite_1:
   \   00000058                      REQUIRE ?Subroutine13
   \   00000058                      ;; // Fall through to label ?Subroutine13

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs int digitalRead(uint8_t)
   \                     digitalRead:
   \   00000000   ........           LDR      R2,??DataTable3  ;; connector
   \   00000004   0010A0E3           MOV      R1,#+0
   \   00000008   000192E7           LDR      R0,[R2, +R0, LSL #+2]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   00009015           LDRNE    R0,[R0, #+0]
   \   00000014   801F0012           ANDNE    R1,R0,#0x200
   \   00000018   0100A0E1           MOV      R0,R1
   \   0000001C   1EFF2FE1           BX       LR               ;; return
      7          
      8          #define EMSAL_PROCESS 0x4210
      9          
     10          
     11          typedef struct
     12          {
     13            int zero0;
     14            int zero1;
     15            int one;
     16            short pid;
     17            short pid_from;
     18            short msg;
     19            short submess;
     20          }SA_MSG;
     21          
     22          //#include <siemens/tbase_work/tbase.h>
     23          
     24          //#define C81
     25          
     26          typedef struct{ 
     27            int word[26]; 
     28          }GBSPROC;
     29           
     30          #pragma swi_number=0x385
     31          __swi __arm GBSPROC *GBS_GetProcAddress(short cepid);
     32          
     33          #define    S0before              ((void(*)()) 0xA001788C)
     34          #define    S0TxByte              ((int(*)(int ic, char data)) 0xA0017820)
     35          #define    SV_STR                ((int(*)(unsigned addr, int data)) 0xA02324D4)
     36          #define    DecodeBlock           ((int(*)(void *addr, int len, void *dest)) 0xA000A5A8)
     37          
     38          
     39          extern void kill_data(void *p, void (*func_p)(void *));
     40          #pragma segment="ELFBEGIN"

   \                                 In segment CODE, align 4, keep-with-next
     41          void ElfKiller(void)
     42          {
   \                     ElfKiller:
   \   00000000   00402DE9           PUSH     {LR}
     43            kill_data(__segment_begin("ELFBEGIN"),(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??ElfKiller_0  ;; SFB(ELFBEGIN)
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??ElfKiller_0:
   \   00000018   ........           DC32     SFB(ELFBEGIN)
     44          }
     45          

   \                                 In segment DATA_I, align 4, align-sorted
     46          unsigned data[0x6];
   \                     `data`:
   \   00000000                      DS8 24
   \   00000018                      REQUIRE `?<Initializer for data>`
     47          unsigned *map =(unsigned*)0xF45000A0;
   \                     map:
   \   00000018                      DS8 4
   \   0000001C                      REQUIRE `?<Initializer for map>`
     48          

   \                                 In segment CODE, align 4, keep-with-next
     49          void SaveRegMap()
     50          { unsigned  err=0;
   \                     SaveRegMap:
   \   00000000   31402DE9           PUSH     {R0,R4,R5,LR}
   \   00000004   0010A0E3           MOV      R1,#+0
     51          
     52            for(int i=0; i<6;i++) data[i] = *(map++); 
   \   00000008   5C409FE5           LDR      R4,??SaveRegMap_0  ;; `data`
   \   0000000C   00108DE5           STR      R1,[SP, #+0]
   \   00000010   0000A0E3           MOV      R0,#+0
   \                     ??SaveRegMap_1:
   \   00000014   181094E5           LDR      R1,[R4, #+24]
   \   00000018   ........           LDR      R2,[R1], #+4
   \   0000001C   181084E5           STR      R1,[R4, #+24]
   \   00000020   002184E7           STR      R2,[R4, +R0, LSL #+2]
   \   00000024   010080E2           ADD      R0,R0,#+1
   \   00000028   060050E3           CMP      R0,#+6
   \   0000002C   F8FFFFBA           BLT      ??SaveRegMap_1
     53          
     54            int f=fopen("0:\\SCCU.bin",A_ReadWrite+A_Create+A_Truncate+A_BIN,P_WRITE+P_READ,&err);
   \   00000030   38009FE5           LDR      R0,??SaveRegMap_0+0x4  ;; `?<Constant "0:\\\\SCCU.bin">`
   \   00000034   0D30A0E1           MOV      R3,SP
   \   00000038   602FA0E3           MOV      R2,#+384
   \   0000003C   0210A0E3           MOV      R1,#+2
   \   00000040   831C81E3           ORR      R1,R1,#0x8300
   \   00000044   0A0000EF           SWI      +10
   \   00000048   0050A0E1           MOV      R5,R0
     55            fwrite(f,data,0x18,&err);
   \   0000004C   0D30A0E1           MOV      R3,SP
   \   00000050   1820A0E3           MOV      R2,#+24
   \   00000054   0410A0E1           MOV      R1,R4
   \   00000058   0C0000EF           SWI      +12
     56            fclose(f,&err);
   \   0000005C   0D10A0E1           MOV      R1,SP
   \   00000060   0500A0E1           MOV      R0,R5
   \   00000064   0D0000EF           SWI      +13
     57          }
   \   00000068   3180BDE8           POP      {R0,R4,R5,PC}    ;; return
   \                     ??SaveRegMap_0:
   \   0000006C   ........           DC32     `data`
   \   00000070   ........           DC32     `?<Constant "0:\\\\SCCU.bin">`
     58          
     59          
     60          
     61          
     62          enum{FAK,MyMenu,VibraLight,UserProfiles,Setup,Developer_Menu,Apidc_Setup,MediaPlayer,Sound_Recorder,FRDB,Avatar,Radio,OrangeHome}; 
     63          
     64          #pragma swi_number=0x2E4
     65          __swi __arm int SettingsAE_Update_ws(WSHDR *,int proc,char * entry,char *keyword);
     66          
     67          #pragma swi_number=0x2E6
     68          __swi __arm int SettingsAE_SetFlag(int val,int set,char * entry,char *keyword);
     69          
     70          #pragma swi_number=0x2E8
     71          __swi __arm int SettingsAE_Update(int val,int set,char * entry,char *keyword);
     72          
     73          
     74          
     75          
     76          

   \                                 In segment CODE, align 4, keep-with-next
     77          void callback2(void *i2c_msg, int err)
     78          {
     79            I2C_MSG *msg = (I2C_MSG*)i2c_msg;
     80            if(!err)
   \                     callback2:
   \   00000000   3C309FE5           LDR      R3,??callback2_0  ;; `?<Constant "0x%x">`
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   20D04DE2           SUB      SP,SP,#+32
   \   0000000C   000051E3           CMP      R1,#+0
   \   00000010   0600001A           BNE      ??callback2_1
     81            {
     82              char s[32];
     83              sprintf(s, "0x%x", *msg->data);
   \   00000014   0C0090E5           LDR      R0,[R0, #+12]
   \   00000018   0310A0E1           MOV      R1,R3
   \   0000001C   0020D0E5           LDRB     R2,[R0, #+0]
   \   00000020   0D00A0E1           MOV      R0,SP
   \   00000024   160000EF           SWI      +22
     84              ShowMSG(1, (int)s);
   \   00000028   0D10A0E1           MOV      R1,SP
   \   0000002C   000000EA           B        ??callback2_2
     85            }else
     86              ShowMSG(1, (int)"i2c receive error");
   \                     ??callback2_1:
   \   00000030   081083E2           ADD      R1,R3,#+8
   \                     ??callback2_2:
   \   00000034   0100A0E3           MOV      R0,#+1
   \   00000038   480100EF           SWI      +328
     87          }
   \   0000003C   20D08DE2           ADD      SP,SP,#+32
   \   00000040   0080BDE8           POP      {PC}             ;; return
   \                     ??callback2_0:
   \   00000044   ........           DC32     `?<Constant "0x%x">`
     88          

   \                                 In segment CODE, align 4, keep-with-next
     89          void _delay_us(unsigned __us)
     90          {
     91            unsigned count = STM_TIM0 + __us;
   \                     _delay_us:
   \   00000000   ........           LDR      R1,??DataTable7  ;; 0xfffffffff4b00010
   \   00000004   001091E5           LDR      R1,[R1, #+0]
   \   00000008   010080E0           ADD      R0,R0,R1
     92             while (STM_TIM0 < count);
   \                     ??_delay_us_0:
   \   0000000C   ........           LDR      R1,??DataTable7  ;; 0xfffffffff4b00010
   \   00000010   001091E5           LDR      R1,[R1, #+0]
   \   00000014   000051E1           CMP      R1,R0
   \   00000018   FBFFFF3A           BCC      ??_delay_us_0
     93          }
   \   0000001C   1EFF2FE1           BX       LR               ;; return
     94          

   \                                 In segment CODE, align 4, keep-with-next
     95          void _delay_ms(unsigned __ms) 
     96          {
     97            unsigned count = STM_TIM0 + ((__ms * 0x7D) << 3);
   \                     _delay_ms:
   \   00000000   ........           LDR      R1,??DataTable7  ;; 0xfffffffff4b00010
   \   00000004   7D20A0E3           MOV      R2,#+125
   \   00000008   001091E5           LDR      R1,[R1, #+0]
   \   0000000C   920000E0           MUL      R0,R2,R0
   \   00000010   800181E0           ADD      R0,R1,R0, LSL #+3
     98             while (STM_TIM0 < count);
   \                     ??_delay_ms_0:
   \   00000014   ........           LDR      R1,??DataTable7  ;; 0xfffffffff4b00010
   \   00000018   001091E5           LDR      R1,[R1, #+0]
   \   0000001C   000051E1           CMP      R1,R0
   \   00000020   FBFFFF3A           BCC      ??_delay_ms_0
     99          }
   \   00000024   1EFF2FE1           BX       LR               ;; return
    100          
    101          #define    Kill_Browser            ((void(*)()) 0xA05FC3ED)
    102          #define    Upp_Browser             ((void(*)()) 0xA05FC273)
    103          #define    GBS_DeactSProc          ((void(*)()) 0xA00922AF)
    104          #define    FL_GPTU0_Init           ((void(*)()) 0xA0521878)
    105          #define    FL_GPTU0_Start          ((void(*)(int)) 0xA0521944)
    106          #define    FL_Onoff                ((void(*)(int)) 0xA052160C)
    107          #define    swProc                  ((void(*)(void*, int)) 0xA052160C)
    108          #define    GPTU1_Init              ((void(*)(unsigned)) 0xA00A3CFC)
    109          

   \                                 In segment CODE, align 4, keep-with-next
    110          void* SetProcAddr(short cepid, void(*new_addr)())
    111          { GBSPROC *p;
   \                     SetProcAddr:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0140A0E1           MOV      R4,R1
    112            void *old_addr;
    113            if(p = GBS_GetProcAddress(cepid))
   \   00000008   850300EF           SWI      +901
   \   0000000C   000050E3           CMP      R0,#+0
    114            {
    115              old_addr = (void*) p->word[15];
   \   00000010   3C109015           LDRNE    R1,[R0, #+60]
    116              p->word[15] = (int) new_addr;
   \   00000014   3C408015           STRNE    R4,[R0, #+60]
    117              return old_addr;
   \   00000018   0100A011           MOVNE    R0,R1
    118            } else return 0;
   \   0000001C   1080BDE8           POP      {R4,PC}          ;; return
    119          }
    120          

   \                                 In segment DATA_I, align 4, align-sorted
    121          void(*old_addr)();
   \                     old_addr:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for old_addr>`
    122          GBS_MSG *msg=(GBS_MSG*)0xA80D0000;
   \                     msg:
   \   00000004                      DS8 4
   \   00000008                      REQUIRE `?<Initializer for msg>`
    123          unsigned ram=0xA80D0000;
   \                     ram:
   \   00000008                      DS8 4
   \   0000000C                      REQUIRE `?<Initializer for ram>`
    124          

   \                                 In segment CODE, align 4, keep-with-next
    125          void my_smsif_sm_logger()
    126          {
   \                     my_smsif_sm_logger:
   \   00000000   10402DE9           PUSH     {R4,LR}
    127            GBS_ReceiveMessage(msg);
   \   00000004   ........           LDR      R4,??DataTable9  ;; old_addr
   \   00000008   040094E5           LDR      R0,[R4, #+4]
   \   0000000C   010100EF           SWI      +257
    128            msg++;
   \   00000010   040094E5           LDR      R0,[R4, #+4]
   \   00000014   140080E2           ADD      R0,R0,#+20
   \   00000018   040084E5           STR      R0,[R4, #+4]
    129            
    130            old_addr();
   \   0000001C   000094E5           LDR      R0,[R4, #+0]
   \   00000020   30FF2FE1           BLX      R0
    131            __asm("NOP"); 
   \   00000024   0000A0E1           NOP              
    132          }
   \   00000028   1080BDE8           POP      {R4,PC}          ;; return
    133          

   \                                 In segment CODE, align 4, keep-with-next
    134          void my_smsif_sm()
    135          { GBS_MSG msg;
   \                     my_smsif_sm:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
    136            zeromem(&msg,sizeof(GBS_MSG));
   \   00000008   1410A0E3           MOV      R1,#+20
    137            GBS_ReceiveMessage(&msg);
    138            if(msg.pid_from==0x4073 &&  msg.msg==0x69) //в data0 указатель на PDU
   \   0000000C   ........           LDR      R4,??DataTable9  ;; old_addr
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   1D0100EF           SWI      +285
   \   00000018   0D00A0E1           MOV      R0,SP
   \   0000001C   010100EF           SWI      +257
   \   00000020   00009DE5           LDR      R0,[SP, #+0]
   \   00000024   7310A0E3           MOV      R1,#+115
   \   00000028   401C81E3           ORR      R1,R1,#0x4000
   \   0000002C   010050E1           CMP      R0,R1
   \   00000030   04009D05           LDREQ    R0,[SP, #+4]
   \   00000034   69005003           CMPEQ    R0,#+105
   \   00000038   1100001A           BNE      ??my_smsif_sm_0
    139            {
    140              GBS_AcceptMessage();
   \   0000003C   020100EF           SWI      +258
    141              memcpy((void*)ram, msg.data0, sizeof(PDU));
   \   00000040   0C109DE5           LDR      R1,[SP, #+12]
   \   00000044   080094E5           LDR      R0,[R4, #+8]
   \   00000048   B220A0E3           MOV      R2,#+178
   \   0000004C   1E0100EF           SWI      +286
    142              ram+=0xC0;
   \   00000050   080094E5           LDR      R0,[R4, #+8]
    143              GBS_SendMessage(0x4077, 0x190, 0, 0, 0);
   \   00000054   0030A0E3           MOV      R3,#+0
   \   00000058   C00080E2           ADD      R0,R0,#+192
   \   0000005C   080084E5           STR      R0,[R4, #+8]
   \   00000060   0000A0E3           MOV      R0,#+0
   \   00000064   01002DE9           PUSH     {R0}
   \   00000068   0020A0E1           MOV      R2,R0
   \   0000006C   641FA0E3           MOV      R1,#+400
   \   00000070   7700A0E3           MOV      R0,#+119
   \   00000074   400C80E3           ORR      R0,R0,#0x4000
   \   00000078   000100EF           SWI      +256
   \   0000007C   04D08DE2           ADD      SP,SP,#+4
   \   00000080   010000EA           B        ??my_smsif_sm_1
    144            }
    145            else   old_addr();
   \                     ??my_smsif_sm_0:
   \   00000084   000094E5           LDR      R0,[R4, #+0]
   \   00000088   30FF2FE1           BLX      R0
    146            __asm("NOP"); 
   \                     ??my_smsif_sm_1:
   \   0000008C   0000A0E1           NOP              
    147          }
   \   00000090   14D08DE2           ADD      SP,SP,#+20
   \   00000094   1080BDE8           POP      {R4,PC}          ;; return
    148          

   \                                 In segment CODE, align 4, keep-with-next
    149          int main(char *exename, char *fname)
    150          {
   \                     main:
   \   00000000   00402DE9           PUSH     {LR}
    151          //unsigned pwm = clkman_requre(MAM, "PWM");456y  
    152             //clkman_set_level(pwm, 6);  //0-Off, 1-Lowest(52MHz), 2-Low(52MHz), 3-standart(52MHz), 4-High(104MHz), 5-Highest(208MHz), 6-Standart(52MHz)
    153          
    154          /*  
    155           char s[32];
    156            
    157            void *adr =GBS_GetProcAddress(0x40D2);
    158            sprintf(s, "0x%X", adr);
    159            ShowMSG(0x11, (int)s);
    160          */
    161          
    162            //old_addr=(void(*)())SetProcAddr(0x4077, my_smsif_sm);
    163          
    164            //FL_Onoff(100);
    165            //FL_GPTU0_Init();
    166            //swProc((void*)0xA01D7EA4, 0x4025);
    167            //GBS_SendMessage(0x4025, 0x1943,0,0,0); 
    168            asm("swi 4");
   \   00000004   040000EF           swi 4            
    169            GPTU1_Init(0x544D0000);
   \   00000008   18109FE5           LDR      R1,??main_0      ;; 0xffffffffa00a3cfc
   \   0000000C   5404A0E3           MOV      R0,#+1409286144
   \   00000010   4D0880E3           ORR      R0,R0,#0x4D0000
   \   00000014   31FF2FE1           BLX      R1
    170            SUBPROC((void *)ElfKiller);
   \   00000018   0C009FE5           LDR      R0,??main_0+0x4  ;; ElfKiller
   \   0000001C   710100EF           SWI      +369
    171            return 0;
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   0080BDE8           POP      {PC}             ;; return
   \                     ??main_0:
   \   00000028   FC3C0AA0           DC32     0xffffffffa00a3cfc
   \   0000002C   ........           DC32     ElfKiller
    172          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     connector

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   1000B0F4           DC32     0xfffffffff4b00010

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   ........           DC32     old_addr

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for connector>`:
   \   00000000   000000005400       DC32 0, 4096786516, 4096786520, 4096786512, 4096786508, 0, 4096786524
   \              30F4580030F4
   \              500030F44C00
   \              30F400000000
   \              5C0030F4    
   \   0000001C   070000000000       DC32 7, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \                     `?<Initializer for save_connector>`:
   \   00000034   000000000000       DC32 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              00000000    

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for data>`:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000010   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     `?<Initializer for map>`:
   \   00000018   A00050F4           DC32 0F45000A0H

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for old_addr>`:
   \   00000000   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for msg>`:
   \   00000004   00000DA8           DC32 0A80D0000H
   \                     `?<Initializer for ram>`:
   \   00000008   00000DA8           DC32 2819424256

   \                                 In segment ELFBEGIN, align 1

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0:\\\\SCCU.bin">`:
   \   00000000   303A5C534343       DC8 "0:\\SCCU.bin"
   \              552E62696E00

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0x%x">`:
   \   00000000   3078257800         DC8 "0x%x"
   \   00000005   000000             DC8 0, 0, 0
   \   00000008   693263207265       DC8 "i2c receive error"
   \              636569766520
   \              6572726F7200
   \   0000001A   0000               DC8 0, 0
    173          
    174            
    175          /*
    176          #define   SMSAL_PROCESS        0x420F
    177          #define   EMSAL_PROCESS        0x4210
    178          #define   SMS_SIMIF_SM         0x4077
    179          
    180           if ((msg->pid_from == EMSAL_PROCESS)&& (msg->msg == 0x3A)&&(msg->submess==0x4)&&((int)msg->data1) == 0x10) 
    181            { 
    182              char s[0x30];
    183              sprintf(s, "msg=0x%X submess=0x%X data0=0x%X data1=0x%X", msg->msg, msg->submess,msg->data0, msg->data1);
    184            }
    185          */
    186          

   Maximum stack usage in bytes:

     Function           CSTACK
     --------           ------
     ElfKiller              4
     InitPin                4
     SaveRegMap            16
     SetProcAddr            8
     _delay_ms              0
     _delay_us              0
     callback2             36
     digitalRead            0
     digitalWrite           0
     main                   4
     my_smsif_sm           32
     my_smsif_sm_logger     8
     pinMode                0


   Segment part sizes:

     Function/Label               Bytes
     --------------               -----
     CCU0                          256
     CCU1                          256
     connector                     104
     InitPin                       128
     pinMode                       152
     ?Subroutine13                   8
     digitalWrite                   88
     digitalRead                    32
     ElfKiller                      28
     data                           28
     SaveRegMap                    116
     callback2                      72
     _delay_us                      32
     _delay_ms                      40
     SetProcAddr                    32
     old_addr                       12
     my_smsif_sm_logger             44
     my_smsif_sm                   152
     main                           48
     ??DataTable3                    4
     ??DataTable7                    4
     ??DataTable9                    4
     ?<Initializer for connector>  104
     ?<Initializer for data>        28
     ?<Initializer for old_addr>    12
     ?<Constant "0:\\SCCU.bin">     12
     ?<Constant "0x%x">             28
      Others                        88

 
 1 060 bytes in segment CODE
   512 bytes in segment DATA_AN
    40 bytes in segment DATA_C
   144 bytes in segment DATA_I
   144 bytes in segment DATA_ID
    12 bytes in segment INITTAB
 
 984 bytes of CODE  memory (+  88 bytes shared)
 184 bytes of CONST memory
 144 bytes of DATA  memory (+ 512 bytes shared)

Errors: none
Warnings: none
