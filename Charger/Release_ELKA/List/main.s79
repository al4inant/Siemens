//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   21/Oct/2014  10:41:20 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  C:\Users\Инсаф\Documents\alfinant\IAR\ARM\alfinant\ /
//                       Test\main.c                                         /
//    Command line    =  C:\Users\Инсаф\Documents\alfinant\IAR\ARM\alfinant\ /
//                       Test\main.c -D NEWSGOLD -D ELKA -D NANO -lCN        /
//                       C:\Users\Инсаф\Documents\alfinant\IAR\ARM\alfinant\ /
//                       Test\Release_ELKA\List\ -la                         /
//                       C:\Users\Инсаф\Documents\alfinant\IAR\ARM\alfinant\ /
//                       Test\Release_ELKA\List\ -o                          /
//                       C:\Users\Инсаф\Documents\alfinant\IAR\ARM\alfinant\ /
//                       Test\Release_ELKA\Obj\ -z9 --cpu_mode arm --endian  /
//                       little --cpu ARM926EJ-S --stack_align 4             /
//                       --interwork -e --fpu None --dlib_config             /
//                       C:\Users\Инсаф\Documents\alfinant\IAR\ARM\LIB\dl5tp /
//                       ainl8n.h -I C:\Users\Инсаф\Documents\alfinant\IAR\A /
//                       RM\INC\ --inline_threshold=2                        /
//    List file       =  C:\Users\Инсаф\Documents\alfinant\IAR\ARM\alfinant\ /
//                       Test\Release_ELKA\List\main.s79                     /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)
        RSEG ELFBEGIN:DATA:REORDER:NOROOT(0)

        PUBWEAK `?*?DATA_ID`
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable2 EQU 0
??DataTable4 EQU 0
??DataTable5 EQU 0
??DataTable6 EQU 0
??DataTable8 EQU 0
        MULTWEAK ??ElfKiller??rT
        MULTWEAK ??InitPin??rT
        MULTWEAK ??SaveRegMap??rT
        MULTWEAK ??SetProcAddr??rT
        MULTWEAK ??_delay_ms??rT
        MULTWEAK ??_delay_us??rT
        MULTWEAK ??callback2??rT
        MULTWEAK ??digitalRead??rT
        MULTWEAK ??digitalWrite??rT
        MULTWEAK ??i2cr_pmu??rA
        MULTWEAK ??kill_data??rA
        MULTWEAK ??main??rT
        MULTWEAK ??my_smsif_sm??rT
        MULTWEAK ??my_smsif_sm_logger??rT
        MULTWEAK ??pinMode??rT
        PUBWEAK ?init?tab?DATA_I
        PUBWEAK CCU0
        PUBWEAK CCU1
        PUBLIC ElfKiller
        FUNCTION ElfKiller,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC InitPin
        FUNCTION InitPin,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC SaveRegMap
        FUNCTION SaveRegMap,0201H
        LOCFRAME CSTACK, 16, STACK
        PUBLIC SetProcAddr
        FUNCTION SetProcAddr,0203H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC _delay_ms
        FUNCTION _delay_ms,0203H
        PUBLIC _delay_us
        FUNCTION _delay_us,0203H
        PUBLIC callback2
        FUNCTION callback2,0203H
        LOCFRAME CSTACK, 36, STACK
        PUBLIC connector
        PUBLIC `data`
        PUBLIC digitalRead
        FUNCTION digitalRead,0203H
        PUBLIC digitalWrite
        FUNCTION digitalWrite,0203H
        PUBLIC main
        FUNCTION main,080a03H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC map
        PUBLIC msg
        PUBLIC my_smsif_sm
        FUNCTION my_smsif_sm,080201H
        LOCFRAME CSTACK, 32, STACK
        PUBLIC my_smsif_sm_logger
        FUNCTION my_smsif_sm_logger,080201H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC old_addr
        PUBLIC pinMode
        FUNCTION pinMode,0203H
        PUBLIC ram
        PUBLIC save_connector
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
i2cr_pmu            SYMBOL "i2cr_pmu"
kill_data           SYMBOL "kill_data"
ElfKiller           SYMBOL "ElfKiller"
??ElfKiller??rT     SYMBOL "??rT", ElfKiller
InitPin             SYMBOL "InitPin"
??InitPin??rT       SYMBOL "??rT", InitPin
SaveRegMap          SYMBOL "SaveRegMap"
??SaveRegMap??rT    SYMBOL "??rT", SaveRegMap
SetProcAddr         SYMBOL "SetProcAddr"
??SetProcAddr??rT   SYMBOL "??rT", SetProcAddr
_delay_ms           SYMBOL "_delay_ms"
??_delay_ms??rT     SYMBOL "??rT", _delay_ms
_delay_us           SYMBOL "_delay_us"
??_delay_us??rT     SYMBOL "??rT", _delay_us
callback2           SYMBOL "callback2"
??callback2??rT     SYMBOL "??rT", callback2
digitalRead         SYMBOL "digitalRead"
??digitalRead??rT   SYMBOL "??rT", digitalRead
digitalWrite        SYMBOL "digitalWrite"
??digitalWrite??rT  SYMBOL "??rT", digitalWrite
??i2cr_pmu??rA      SYMBOL "??rA", i2cr_pmu
??kill_data??rA     SYMBOL "??rA", kill_data
main                SYMBOL "main"
??main??rT          SYMBOL "??rT", main
my_smsif_sm         SYMBOL "my_smsif_sm"
??my_smsif_sm??rT   SYMBOL "??rT", my_smsif_sm
my_smsif_sm_logger  SYMBOL "my_smsif_sm_logger"
??my_smsif_sm_logger??rT SYMBOL "??rT", my_smsif_sm_logger
pinMode             SYMBOL "pinMode"
??pinMode??rT       SYMBOL "??rT", pinMode

        EXTERN i2cr_pmu
        FUNCTION i2cr_pmu,0202H
        EXTERN kill_data
        FUNCTION kill_data,0202H


        ASEGN DATA_AN:DATA:NOROOT,0f4000000H
// CAPCOM_TypeDef __data CCU0
CCU0:
        DS8 256

        ASEGN DATA_AN:DATA:NOROOT,0f4100000H
// CAPCOM_TypeDef __data CCU1
CCU1:
        DS8 256

        RSEG DATA_I:DATA:SORT:NOROOT(2)
// uint32_t __data connector[13]
connector:
        DS8 52
        REQUIRE `?<Initializer for connector>`
// uint32_t __data save_connector[13]
save_connector:
        DS8 52
        REQUIRE `?<Initializer for save_connector>`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??InitPin??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE InitPin

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function InitPin
        ARM
// __??Code32?? __code __interwork __atpcs void InitPin(uint8_t)
InitPin:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        CMP      R0,#+13
        POPCS    {PC}
        LDR      R1,??DataTable3  ;; connector
        LDR      R2,[R1, +R0, LSL #+2]
        MOVS     R3,R2
        POPEQ    {PC}
        ADD      R0,R1,R0, LSL #+2
        CMP      R2,#+7
        BNE      ??InitPin_0
        MOV      R2,#+0
        ADD      R1,R0,#+52
        MOV      R0,#+16
        _BLF     i2cr_pmu,??i2cr_pmu??rA
        POP      {PC}
??InitPin_0:
        MOV      R1,#-201326592
        MOV      R2,#+0
        STR      R2,[R1, #+0]
        ORR      R12,R1,#0x100000
        STR      R2,[R12, #+0]
        LDR      R2,[R3, #+0]
        STR      R2,[R0, #+52]
        LDR      R0,[R3, #+0]
        ORR      R0,R0,#0x8000
        STR      R0,[R3, #+0]
        LDR      R0,[R3, #+0]
        ORR      R0,R0,#0x100
        STR      R0,[R3, #+0]
        MOV      R0,#+256
        STR      R0,[R1, #+0]
        STR      R0,[R12, #+0]
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??pinMode??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE pinMode

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function pinMode
        ARM
// __??Code32?? __code __interwork __atpcs void pinMode(uint8_t, uint8_t)
pinMode:
        LDR      R2,??DataTable3  ;; connector
        LDR      R0,[R2, +R0, LSL #+2]
        CMP      R0,#+0
        BXEQ     LR
        CMP      R1,#+0
        LDREQ    R1,[R0, #+0]
        MVN      R2,#+33792
        ORREQ    R1,R1,#0x8000
        BEQ      ??pinMode_0
        CMP      R1,#+1
        BNE      ??pinMode_1
        LDR      R1,[R0, #+0]
        ORR      R1,R1,#0x8000
        STR      R1,[R0, #+0]
        LDR      R1,[R0, #+0]
        ORR      R1,R1,#0x400
        STR      R1,[R0, #+0]
        LDR      R1,[R0, #+0]
        BIC      R1,R1,#0x8000
        B        ??pinMode_2
??pinMode_1:
        CMP      R1,#+2
        BNE      ??pinMode_3
        LDR      R1,[R0, #+0]
        ORR      R1,R1,#0x8000
        STR      R1,[R0, #+0]
        LDR      R1,[R0, #+0]
        ORR      R1,R1,#0x1000
??pinMode_0:
        STR      R1,[R0, #+0]
        LDR      R1,[R0, #+0]
        AND      R1,R2,R1
??pinMode_2:
        B        ?Subroutine13
??pinMode_3:
        CMP      R1,#+3
        MOVEQ    R1,#+5120
        BEQ      ??pinMode_2
        CMP      R1,#+4
        MOVEQ    R1,#+24576
        STREQ    R1,[R0, #+0]
        BX       LR               ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??digitalWrite??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE digitalWrite

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function digitalWrite
        ARM
// __??Code32?? __code __interwork __atpcs void digitalWrite(uint8_t, uint8_t)
digitalWrite:
        LDR      R2,??DataTable3  ;; connector
        LDR      R0,[R2, +R0, LSL #+2]
        CMP      R0,#+0
        BXEQ     LR
        CMP      R1,#+1
        BNE      ??digitalWrite_0
        LDR      R1,[R0, #+0]
        ORR      R1,R1,#0x8000
        STR      R1,[R0, #+0]
        LDR      R1,[R0, #+0]
        ORR      R1,R1,#0x200
        STR      R1,[R0, #+0]
        LDR      R1,[R0, #+0]
        BIC      R1,R1,#0x8000
        B        ??digitalWrite_1
??digitalWrite_0:
        CMP      R1,#+0
        BXNE     LR
        LDR      R1,[R0, #+0]
        ORR      R1,R1,#0x8000
        STR      R1,[R0, #+0]
        LDR      R1,[R0, #+0]
        BIC      R1,R1,#0x8200
        CFI EndBlock cfiBlock5
??digitalWrite_1:
        REQUIRE ?Subroutine13
        ;; // Fall through to label ?Subroutine13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon1
        CFI NoFunction
        ARM
?Subroutine13:
        STR      R1,[R0, #+0]
        BX       LR
        CFI EndBlock cfiBlock6

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon0
        CFI NoFunction
        THUMB
??digitalRead??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock7
        REQUIRE digitalRead

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon1
        CFI Function digitalRead
        ARM
// __??Code32?? __code __interwork __atpcs int digitalRead(uint8_t)
digitalRead:
        LDR      R2,??DataTable3  ;; connector
        MOV      R1,#+0
        LDR      R0,[R2, +R0, LSL #+2]
        CMP      R0,#+0
        LDRNE    R0,[R0, #+0]
        ANDNE    R1,R0,#0x200
        MOV      R0,R1
        BX       LR               ;; return
        CFI EndBlock cfiBlock8

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable3:
        DC32     connector

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon0
        CFI NoFunction
        THUMB
??ElfKiller??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock9
        REQUIRE ElfKiller

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon1
        CFI Function ElfKiller
        ARM
ElfKiller:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SWI      +32789
        MOV      R1,R0
        LDR      R0,??ElfKiller_0  ;; SFB(ELFBEGIN)
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        _BF      kill_data,??kill_data??rA  ;; tailcall
        DATA
??ElfKiller_0:
        DC32     SFB(ELFBEGIN)
        CFI EndBlock cfiBlock10

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon0
        CFI NoFunction
        THUMB
??SaveRegMap??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock11
        REQUIRE SaveRegMap

        RSEG DATA_I:DATA:SORT:NOROOT(2)
`data`:
        DS8 24
        REQUIRE `?<Initializer for data>`
map:
        DS8 4
        REQUIRE `?<Initializer for map>`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon1
        CFI Function SaveRegMap
        ARM
SaveRegMap:
        PUSH     {R0,R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+16
        MOV      R1,#+0
        LDR      R4,??SaveRegMap_0  ;; `data`
        STR      R1,[SP, #+0]
        MOV      R0,#+0
??SaveRegMap_1:
        LDR      R1,[R4, #+24]
        LDR      R2,[R1], #+4
        STR      R1,[R4, #+24]
        STR      R2,[R4, +R0, LSL #+2]
        ADD      R0,R0,#+1
        CMP      R0,#+6
        BLT      ??SaveRegMap_1
        LDR      R0,??SaveRegMap_0+0x4  ;; `?<Constant "0:\\\\SCCU.bin">`
        MOV      R3,SP
        MOV      R2,#+384
        MOV      R1,#+2
        ORR      R1,R1,#0x8300
        SWI      +10
        MOV      R5,R0
        MOV      R3,SP
        MOV      R2,#+24
        MOV      R1,R4
        SWI      +12
        MOV      R1,SP
        MOV      R0,R5
        SWI      +13
        POP      {R0,R4,R5,PC}    ;; return
        DATA
??SaveRegMap_0:
        DC32     `data`
        DC32     `?<Constant "0:\\\\SCCU.bin">`
        CFI EndBlock cfiBlock12

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon0
        CFI NoFunction
        THUMB
??callback2??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock13
        REQUIRE callback2

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon1
        CFI Function callback2
        ARM
callback2:
        LDR      R3,??callback2_0  ;; `?<Constant "0x%x">`
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SUB      SP,SP,#+32
        CFI CFA R13+36
        CMP      R1,#+0
        BNE      ??callback2_1
        LDR      R0,[R0, #+12]
        MOV      R1,R3
        LDRB     R2,[R0, #+0]
        MOV      R0,SP
        SWI      +22
        MOV      R1,SP
        B        ??callback2_2
??callback2_1:
        ADD      R1,R3,#+8
??callback2_2:
        MOV      R0,#+1
        SWI      +328
        ADD      SP,SP,#+32
        CFI CFA R13+4
        POP      {PC}             ;; return
        DATA
??callback2_0:
        DC32     `?<Constant "0x%x">`
        CFI EndBlock cfiBlock14

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon0
        CFI NoFunction
        THUMB
??_delay_us??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock15
        REQUIRE _delay_us

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon1
        CFI Function _delay_us
        ARM
_delay_us:
        LDR      R1,??DataTable7  ;; 0xfffffffff4b00010
        LDR      R1,[R1, #+0]
        ADD      R0,R0,R1
??_delay_us_0:
        LDR      R1,??DataTable7  ;; 0xfffffffff4b00010
        LDR      R1,[R1, #+0]
        CMP      R1,R0
        BCC      ??_delay_us_0
        BX       LR               ;; return
        CFI EndBlock cfiBlock16

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon0
        CFI NoFunction
        THUMB
??_delay_ms??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock17
        REQUIRE _delay_ms

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon1
        CFI Function _delay_ms
        ARM
_delay_ms:
        LDR      R1,??DataTable7  ;; 0xfffffffff4b00010
        MOV      R2,#+125
        LDR      R1,[R1, #+0]
        MUL      R0,R2,R0
        ADD      R0,R1,R0, LSL #+3
??_delay_ms_0:
        LDR      R1,??DataTable7  ;; 0xfffffffff4b00010
        LDR      R1,[R1, #+0]
        CMP      R1,R0
        BCC      ??_delay_ms_0
        BX       LR               ;; return
        CFI EndBlock cfiBlock18

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable7:
        DC32     0xfffffffff4b00010

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon0
        CFI NoFunction
        THUMB
??SetProcAddr??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock19
        REQUIRE SetProcAddr

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon1
        CFI Function SetProcAddr
        ARM
SetProcAddr:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R1
        SWI      +901
        CMP      R0,#+0
        LDRNE    R1,[R0, #+60]
        STRNE    R4,[R0, #+60]
        MOVNE    R0,R1
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock20

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon0
        CFI NoFunction
        THUMB
??my_smsif_sm_logger??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock21
        REQUIRE my_smsif_sm_logger

        RSEG DATA_I:DATA:SORT:NOROOT(2)
old_addr:
        DS8 4
        REQUIRE `?<Initializer for old_addr>`
msg:
        DS8 4
        REQUIRE `?<Initializer for msg>`
ram:
        DS8 4
        REQUIRE `?<Initializer for ram>`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon1
        CFI Function my_smsif_sm_logger
        ARM
my_smsif_sm_logger:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        LDR      R4,??DataTable9  ;; old_addr
        LDR      R0,[R4, #+4]
        SWI      +257
        LDR      R0,[R4, #+4]
        ADD      R0,R0,#+20
        STR      R0,[R4, #+4]
        LDR      R0,[R4, #+0]
        BLX      R0
        NOP              
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock22

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon0
        CFI NoFunction
        THUMB
??my_smsif_sm??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock23
        REQUIRE my_smsif_sm

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon1
        CFI Function my_smsif_sm
        ARM
my_smsif_sm:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        SUB      SP,SP,#+20
        CFI CFA R13+28
        MOV      R1,#+20
        LDR      R4,??DataTable9  ;; old_addr
        MOV      R0,SP
        SWI      +285
        MOV      R0,SP
        SWI      +257
        LDR      R0,[SP, #+0]
        MOV      R1,#+115
        ORR      R1,R1,#0x4000
        CMP      R0,R1
        LDREQ    R0,[SP, #+4]
        CMPEQ    R0,#+105
        BNE      ??my_smsif_sm_0
        SWI      +258
        LDR      R1,[SP, #+12]
        LDR      R0,[R4, #+8]
        MOV      R2,#+178
        SWI      +286
        LDR      R0,[R4, #+8]
        MOV      R3,#+0
        ADD      R0,R0,#+192
        STR      R0,[R4, #+8]
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+32
        MOV      R2,R0
        MOV      R1,#+400
        MOV      R0,#+119
        ORR      R0,R0,#0x4000
        SWI      +256
        ADD      SP,SP,#+4
        CFI CFA R13+28
        B        ??my_smsif_sm_1
??my_smsif_sm_0:
        LDR      R0,[R4, #+0]
        BLX      R0
??my_smsif_sm_1:
        NOP              
        ADD      SP,SP,#+20
        CFI CFA R13+8
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock24

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable9:
        DC32     old_addr

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon0
        CFI NoFunction
        THUMB
??main??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock25
        REQUIRE main

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock26 Using cfiCommon1
        CFI Function main
        ARM
main:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        swi 4            
        LDR      R1,??main_0      ;; 0xffffffffa00a3cfc
        MOV      R0,#+1409286144
        ORR      R0,R0,#0x4D0000
        BLX      R1
        LDR      R0,??main_0+0x4  ;; ElfKiller
        SWI      +369
        MOV      R0,#+0
        POP      {PC}             ;; return
        DATA
??main_0:
        DC32     0xffffffffa00a3cfc
        DC32     ElfKiller
        CFI EndBlock cfiBlock26

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock27 Using cfiCommon1
        CFI NoFunction
        ARM
??i2cr_pmu??rA:
        LDR      R12,??Subroutine14_0  ;; i2cr_pmu
        BX       R12
        DATA
??Subroutine14_0:
        DC32     i2cr_pmu
        CFI EndBlock cfiBlock27

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock28 Using cfiCommon1
        CFI NoFunction
        ARM
??kill_data??rA:
        LDR      R12,??Subroutine15_0  ;; kill_data
        BX       R12
        DATA
??Subroutine15_0:
        DC32     kill_data
        CFI EndBlock cfiBlock28

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for connector>`:
        DATA
        DC32 0, 4096786516, 4096786520, 4096786512, 4096786508, 0, 4096786524
        DC32 7, 0, 0, 0, 0, 0
`?<Initializer for save_connector>`:
        DC32 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for data>`:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0
`?<Initializer for map>`:
        DC32 0F45000A0H

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for old_addr>`:
        DATA
        DC8 0, 0, 0, 0
`?<Initializer for msg>`:
        DC32 0A80D0000H
`?<Initializer for ram>`:
        DC32 2819424256

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        RSEG ELFBEGIN:DATA:REORDER:NOROOT(0)

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "0:\\\\SCCU.bin">`:
        DATA
        DC8 "0:\\SCCU.bin"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "0x%x">`:
        DATA
        DC8 "0x%x"
        DC8 0, 0, 0
        DC8 "i2c receive error"
        DC8 0, 0

        END
// 
// 1 060 bytes in segment CODE
//   512 bytes in segment DATA_AN
//    40 bytes in segment DATA_C
//   144 bytes in segment DATA_I
//   144 bytes in segment DATA_ID
//    12 bytes in segment INITTAB
// 
// 984 bytes of CODE  memory (+  88 bytes shared)
// 184 bytes of CONST memory
// 144 bytes of DATA  memory (+ 512 bytes shared)
//
//Errors: none
//Warnings: none
