##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    08/Jun/2017  22:38:20 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  E:\Users\alfinant\Documents\Siemens\alfinant\CarCont #
#                       rol2\meas.c                                          #
#    Command line    =  E:\Users\alfinant\Documents\Siemens\alfinant\CarCont #
#                       rol2\meas.c -D X75 -D SGOLD -lC                      #
#                       E:\Users\alfinant\Documents\Siemens\alfinant\CarCont #
#                       rol2\Release_SGOLDX75\List\ -o                       #
#                       E:\Users\alfinant\Documents\Siemens\alfinant\CarCont #
#                       rol2\Release_SGOLDX75\Obj\ -s9 --cpu_mode arm        #
#                       --endian little --cpu ARM926EJ-S --stack_align 4     #
#                       --interwork -e --fpu None -I                         #
#                       E:\Users\alfinant\Documents\Siemens\IAR\ARM\INC\     #
#                       --inline_threshold=2                                 #
#    List file       =  E:\Users\alfinant\Documents\Siemens\alfinant\CarCont #
#                       rol2\Release_SGOLDX75\List\meas.lst                  #
#    Object file     =  E:\Users\alfinant\Documents\Siemens\alfinant\CarCont #
#                       rol2\Release_SGOLDX75\Obj\meas.r79                   #
#                                                                            #
#                                                                            #
##############################################################################

E:\Users\alfinant\Documents\Siemens\alfinant\CarControl2\meas.c
      1          //by alfinant 07.06.2017
      2          //============================ Measurement Interface ===========================
      3          
      4          #include "../inc/swilib.h"

  typedef unsigned int size_t; 
                       ^
"E:\Users\alfinant\Documents\Siemens\alfinant\inc\sha.h",31  Warning[Pe301]: 
          typedef name has already been declared (with same type)
      5          #include "../inc/nu_swilib.h"
      6          //#include "clkman.h"
      7          #include "irq_work.h"
      8          
      9          #ifdef NEWSGOLD
     10          #include "reg8876.h"
     11          #else
     12          #include "reg8875.h"

   \                                 In segment DATA_AN, at 0xf4c00000
   \   MEAS_TypeDef __data MEAS
   \                     MEAS:
   \   00000000                      DS8 248
     13          #endif
     14          
     15          #define HISR_STACK_SIZE 512

   \                                 In segment DATA_Z, align 4, align-sorted
     16          static unsigned long hisr_stack[HISR_STACK_SIZE];
     17          static NU_HISR hisr;
     18          
     19          static int adata=0, adata0, adata1, adata2, adata3, adata4, adata5, adata6;
     20          static int saved_meas_ctrl2;
     21          static IRQ_DESC irq_saved;
   \                     irq_saved:
   \   00000000                      DS8 8
   \   00000008                      DS8 4
   \   0000000C                      DS8 4
   \   00000010                      DS8 4
   \   00000014                      DS8 4
   \   00000018                      DS8 4
   \   0000001C                      DS8 4
   \   00000020                      DS8 4
   \   00000024                      DS8 4
   \   00000028                      DS8 4
   \   0000002C                      DS8 2048
   \   0000082C                      DS8 400
     22          static void (*callback_func)(int data)=NULL;
     23          

   \                                 In segment CODE, align 4, keep-with-next
     24          void H_MEAS_RDY_M2_entry()
     25          {
   \                     H_MEAS_RDY_M2_entry:
   \   00000000   10402DE9           PUSH     {R4,LR}
     26            adata = divide(7,(adata0+adata1+adata2+adata3+adata4+adata5+adata6));    
   \   00000004   ........           LDR      R4,??DataTable4  ;; irq_saved
   \   00000008   080094E5           LDR      R0,[R4, #+8]
   \   0000000C   0C1094E5           LDR      R1,[R4, #+12]
   \   00000010   000081E0           ADD      R0,R1,R0
   \   00000014   101094E5           LDR      R1,[R4, #+16]
   \   00000018   000081E0           ADD      R0,R1,R0
   \   0000001C   141094E5           LDR      R1,[R4, #+20]
   \   00000020   000081E0           ADD      R0,R1,R0
   \   00000024   181094E5           LDR      R1,[R4, #+24]
   \   00000028   000081E0           ADD      R0,R1,R0
   \   0000002C   1C1094E5           LDR      R1,[R4, #+28]
   \   00000030   000081E0           ADD      R0,R1,R0
   \   00000034   201094E5           LDR      R1,[R4, #+32]
   \   00000038   001081E0           ADD      R1,R1,R0
   \   0000003C   0700A0E3           MOV      R0,#+7
   \   00000040   BC0000EF           SWI      +188
   \   00000044   0010A0E1           MOV      R1,R0
     27            SUBPROC((void*)callback_func, adata); 
   \   00000048   280094E5           LDR      R0,[R4, #+40]
   \   0000004C   710100EF           SWI      +369
     28          }
   \   00000050   1080BDE8           POP      {R4,PC}          ;; return
     29          

   \                                 In segment CODE, align 4, keep-with-next
     30          static void meas_rdyirq(int vector)//vector==0x46
     31          {
   \                     meas_rdyirq:
   \   00000000   10402DE9           PUSH     {R4,LR}
     32            MEAS.RDYIRQ = 0x4000;//сбросили флаг
   \   00000004   C004A0E3           MOV      R0,#-1073741824
   \   00000008   D30580E3           ORR      R0,R0,#0x34C00000
     33            MEAS.RDYIRQ = 0;//вообще отключили 
     34            MEAS.CTRL2 &=~ MEAS_ENTRIG;
     35            
     36            if (MEAS.STAT & MEAS_READY)
   \   0000000C   ........           LDR      R4,??DataTable4  ;; irq_saved
   \   00000010   401CA0E3           MOV      R1,#+16384
   \   00000014   F01080E5           STR      R1,[R0, #+240]
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   F01080E5           STR      R1,[R0, #+240]
   \   00000020   181090E5           LDR      R1,[R0, #+24]
   \   00000024   4015C1E3           BIC      R1,R1,#0x10000000
   \   00000028   181080E5           STR      R1,[R0, #+24]
   \   0000002C   1C1090E5           LDR      R1,[R0, #+28]
   \   00000030   800411E3           TST      R1,#0x80000000
   \   00000034   0D00000A           BEQ      ??meas_rdyirq_0
     37            {
     38              adata0=MEAS.DATA0; 
   \   00000038   201090E5           LDR      R1,[R0, #+32]
   \   0000003C   081084E5           STR      R1,[R4, #+8]
     39              adata1=MEAS.DATA1;
   \   00000040   241090E5           LDR      R1,[R0, #+36]
   \   00000044   0C1084E5           STR      R1,[R4, #+12]
     40              adata2=MEAS.DATA2;
   \   00000048   281090E5           LDR      R1,[R0, #+40]
   \   0000004C   101084E5           STR      R1,[R4, #+16]
     41              adata3=MEAS.DATA3;
   \   00000050   2C1090E5           LDR      R1,[R0, #+44]
   \   00000054   141084E5           STR      R1,[R4, #+20]
     42              adata4=MEAS.DATA4;
   \   00000058   301090E5           LDR      R1,[R0, #+48]
   \   0000005C   181084E5           STR      R1,[R4, #+24]
     43              adata5=MEAS.DATA5;
   \   00000060   341090E5           LDR      R1,[R0, #+52]
   \   00000064   1C1084E5           STR      R1,[R4, #+28]
     44              adata6=MEAS.DATA6;
   \   00000068   381090E5           LDR      R1,[R0, #+56]
   \   0000006C   201084E5           STR      R1,[R4, #+32]
     45            }
     46            
     47            MEAS.CTRL2=saved_meas_ctrl2;//восстанавливаем
   \                     ??meas_rdyirq_0:
   \   00000070   241094E5           LDR      R1,[R4, #+36]
   \   00000074   181080E5           STR      R1,[R0, #+24]
     48            irq_set_prio(0x72, 8);//разблокируем прерывание gsm_tpu_meas  
   \   00000078   0810A0E3           MOV      R1,#+8
   \   0000007C   7200A0E3           MOV      R0,#+114
   \   00000080   ........           _BLF     irq_set_prio,??irq_set_prio??rA
     49            NU_Activate_HISR(&hisr);  
   \   00000084   2C00A0E3           MOV      R0,#+44
   \   00000088   800E80E3           ORR      R0,R0,#0x800
   \   0000008C   040080E0           ADD      R0,R0,R4
   \   00000090   530300EF           SWI      +851
     50          }
   \   00000094   1080BDE8           POP      {R4,PC}          ;; return
     51          
     52          

   \                                 In segment CODE, align 4, keep-with-next
     53          int meas_init()
     54          {
   \                     meas_init:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
     55            int ret=0;
     56            
     57            STATUS status=
     58              NU_Create_HISR(&hisr, "H_MEAS_RDY_M2", H_MEAS_RDY_M2_entry, 0, (void*)hisr_stack, HISR_STACK_SIZE);
     59          
     60            if (status==NU_SUCCESS)
   \   00000004   ........           LDR      R4,??DataTable3  ;; irq_saved
   \   00000008   84209FE5           LDR      R2,??meas_init_0  ;; H_MEAS_RDY_M2_entry
   \   0000000C   84109FE5           LDR      R1,??meas_init_0+0x4  ;; `?<Constant "H_MEAS_RDY_M2">`
   \   00000010   800FA0E3           MOV      R0,#+512
   \   00000014   01002DE9           PUSH     {R0}
   \   00000018   0050A0E3           MOV      R5,#+0
   \   0000001C   0030A0E3           MOV      R3,#+0
   \   00000020   2C0084E2           ADD      R0,R4,#+44
   \   00000024   01002DE9           PUSH     {R0}
   \   00000028   2C00A0E3           MOV      R0,#+44
   \   0000002C   800E80E3           ORR      R0,R0,#0x800
   \   00000030   040080E0           ADD      R0,R0,R4
   \   00000034   540300EF           SWI      +852
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   08D08DE2           ADD      SP,SP,#+8
   \   00000040   1100001A           BNE      ??meas_init_1
     61            {
     62              ret=1;
     63              //ClkStateOn(MEASIF_MASK);
     64              MEAS.CLK &= ~ 1;
     65              MEAS.CLK &= 0x114;
     66              MEAS.RDYIRQ = 0;
     67              irq_req(0x46, 3, 8, meas_rdyirq, &irq_saved);
   \   00000044   50309FE5           LDR      R3,??meas_init_0+0x8  ;; meas_rdyirq
   \   00000048   C004A0E3           MOV      R0,#-1073741824
   \   0000004C   D30580E3           ORR      R0,R0,#0x34C00000
   \   00000050   001090E5           LDR      R1,[R0, #+0]
   \   00000054   0150A0E3           MOV      R5,#+1
   \   00000058   0110C1E3           BIC      R1,R1,#0x1
   \   0000005C   001080E5           STR      R1,[R0, #+0]
   \   00000060   001090E5           LDR      R1,[R0, #+0]
   \   00000064   0820A0E3           MOV      R2,#+8
   \   00000068   451F01E2           AND      R1,R1,#0x114
   \   0000006C   001080E5           STR      R1,[R0, #+0]
   \   00000070   0010A0E3           MOV      R1,#+0
   \   00000074   F01080E5           STR      R1,[R0, #+240]
   \   00000078   10002DE9           PUSH     {R4}
   \   0000007C   0310A0E3           MOV      R1,#+3
   \   00000080   4600A0E3           MOV      R0,#+70
   \   00000084   ........           _BLF     irq_req,??irq_req??rA
   \   00000088   04D08DE2           ADD      SP,SP,#+4
     68            }
     69            
     70            return ret;
   \                     ??meas_init_1:
   \   0000008C   0500A0E1           MOV      R0,R5
   \   00000090   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??meas_init_0:
   \   00000094   ........           DC32     H_MEAS_RDY_M2_entry
   \   00000098   ........           DC32     `?<Constant "H_MEAS_RDY_M2">`
   \   0000009C   ........           DC32     meas_rdyirq
     71          }
     72          

   \                                 In segment CODE, align 4, keep-with-next
     73          void meas_deinit()
     74          {
   \                     meas_deinit:
   \   00000000   10402DE9           PUSH     {R4,LR}
     75            irq_req(0x46, irq_saved.state, irq_saved.prio, irq_saved.handler, &irq_saved);
   \   00000004   ........           LDR      R4,??DataTable3  ;; irq_saved
   \   00000008   0400A0E1           MOV      R0,R4
   \   0000000C   01002DE9           PUSH     {R0}
   \   00000010   043094E5           LDR      R3,[R4, #+4]
   \   00000014   0120D4E5           LDRB     R2,[R4, #+1]
   \   00000018   0010D4E5           LDRB     R1,[R4, #+0]
   \   0000001C   4600A0E3           MOV      R0,#+70
   \   00000020   ........           _BLF     irq_req,??irq_req??rA
     76            NU_Delete_HISR(&hisr); 
   \   00000024   2C00A0E3           MOV      R0,#+44
   \   00000028   800E80E3           ORR      R0,R0,#0x800
   \   0000002C   040080E0           ADD      R0,R0,R4
   \   00000030   550300EF           SWI      +853
     77          }
   \   00000034   1180BDE8           POP      {R0,R4,PC}       ;; return
     78          

   \                                 In segment CODE, align 4, keep-with-next
     79          void meas_get_volt_m2(void (*callback)(int data))
     80          {
   \                     meas_get_volt_m2:
   \   00000000   10402DE9           PUSH     {R4,LR}
     81            callback_func = callback;
   \   00000004   ........           LDR      R4,??DataTable4  ;; irq_saved
     82            irq_set_prio(0x72, 0);
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   280084E5           STR      R0,[R4, #+40]
   \   00000010   7200A0E3           MOV      R0,#+114
   \   00000014   ........           _BLF     irq_set_prio,??irq_set_prio??rA
     83            //ClkStateOn(MEASIF_MASK);
     84            MEAS.CLK &= ~ 1;
   \   00000018   C004A0E3           MOV      R0,#-1073741824
   \   0000001C   D30580E3           ORR      R0,R0,#0x34C00000
   \   00000020   001090E5           LDR      R1,[R0, #+0]
   \   00000024   0110C1E3           BIC      R1,R1,#0x1
   \   00000028   001080E5           STR      R1,[R0, #+0]
     85            MEAS.CLK &= 0x114;
   \   0000002C   001090E5           LDR      R1,[R0, #+0]
   \   00000030   451F01E2           AND      R1,R1,#0x114
   \   00000034   001080E5           STR      R1,[R0, #+0]
     86            saved_meas_ctrl2 = MEAS.CTRL2;//сохраняемся
   \   00000038   181090E5           LDR      R1,[R0, #+24]
   \   0000003C   241084E5           STR      R1,[R4, #+36]
     87            MEAS.CTRL2 &=~ MEAS_ENTRIG;
   \   00000040   181090E5           LDR      R1,[R0, #+24]
   \   00000044   4015C1E3           BIC      R1,R1,#0x10000000
   \   00000048   181080E5           STR      R1,[R0, #+24]
     88            //while (MEAS.STAT & MEAS_BUSY);//ждемс
     89            MEAS.RDYIRQ = 0x4000;//сброс флага
   \   0000004C   401CA0E3           MOV      R1,#+16384
   \   00000050   F01080E5           STR      R1,[R0, #+240]
     90            MEAS.RDYIRQ = 0x1000;//активируем прерывание
   \   00000054   401DA0E3           MOV      R1,#+4096
   \   00000058   F01080E5           STR      R1,[R0, #+240]
     91            MEAS.CTRL2=0x30300003; //конфиг-я для чтения напряжения с M2
   \   0000005C   CC13A0E3           MOV      R1,#+805306371
   \   00000060   C01981E3           ORR      R1,R1,#0x300000
   \   00000064   181080E5           STR      R1,[R0, #+24]
     92            //while ((MEAS.STAT & MEAS_READY) == 0);//только если не используешь прерывание
     93          }
   \   00000068   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     irq_saved

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     irq_saved

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "H_MEAS_RDY_M2">`:
   \   00000000   485F4D454153       DC8 "H_MEAS_RDY_M2"
   \              5F5244595F4D
   \              3200        
   \   0000000E   0000               DC8 0, 0

   Maximum stack usage in bytes:

     Function            CSTACK
     --------            ------
     H_MEAS_RDY_M2_entry     8
     meas_deinit            12
     meas_get_volt_m2        8
     meas_init              20
     meas_rdyirq             8


   Segment part sizes:

     Function/Label              Bytes
     --------------              -----
     MEAS                         248
     irq_saved                   2492
     H_MEAS_RDY_M2_entry           84
     meas_rdyirq                  152
     meas_init                    160
     meas_deinit                   56
     meas_get_volt_m2             108
     ??DataTable3                   4
     ??DataTable4                   4
     ?<Constant "H_MEAS_RDY_M2">   16
      Others                       56

 
   612 bytes in segment CODE
   248 bytes in segment DATA_AN
    16 bytes in segment DATA_C
 2 492 bytes in segment DATA_Z
    12 bytes in segment INITTAB
 
   568 bytes of CODE  memory (+  56 bytes shared)
    16 bytes of CONST memory
 2 492 bytes of DATA  memory (+ 248 bytes shared)

Errors: none
Warnings: 1
