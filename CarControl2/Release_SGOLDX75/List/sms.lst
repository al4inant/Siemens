##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    08/Jun/2017  22:38:20 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  E:\Users\alfinant\Documents\Siemens\alfinant\CarCont #
#                       rol2\sms.c                                           #
#    Command line    =  E:\Users\alfinant\Documents\Siemens\alfinant\CarCont #
#                       rol2\sms.c -D X75 -D SGOLD -lC                       #
#                       E:\Users\alfinant\Documents\Siemens\alfinant\CarCont #
#                       rol2\Release_SGOLDX75\List\ -o                       #
#                       E:\Users\alfinant\Documents\Siemens\alfinant\CarCont #
#                       rol2\Release_SGOLDX75\Obj\ -s9 --cpu_mode arm        #
#                       --endian little --cpu ARM926EJ-S --stack_align 4     #
#                       --interwork -e --fpu None -I                         #
#                       E:\Users\alfinant\Documents\Siemens\IAR\ARM\INC\     #
#                       --inline_threshold=2                                 #
#    List file       =  E:\Users\alfinant\Documents\Siemens\alfinant\CarCont #
#                       rol2\Release_SGOLDX75\List\sms.lst                   #
#    Object file     =  E:\Users\alfinant\Documents\Siemens\alfinant\CarCont #
#                       rol2\Release_SGOLDX75\Obj\sms.r79                    #
#                                                                            #
#                                                                            #
##############################################################################

E:\Users\alfinant\Documents\Siemens\alfinant\CarControl2\sms.c
      1          #include "../inc/swilib.h"

  typedef unsigned int size_t; 
                       ^
"E:\Users\alfinant\Documents\Siemens\alfinant\inc\sha.h",31  Warning[Pe301]: 
          typedef name has already been declared (with same type)
      2          #include "sms.h"
      3          
      4          typedef struct{ 
      5            int word[26]; 
      6          }GBSPROC;
      7          
      8          #pragma swi_number=0x385
      9          __swi __arm GBSPROC *GBS_GetProcAddress(short cepid);
     10          

   \                                 In segment DATA_Z, align 4, align-sorted
     11          static GBSPROC* gproc;
   \                     gproc:
   \   00000000                      DS8 4
     12          void (*sms_simif_sm)();
   \                     sms_simif_sm:
   \   00000004                      DS8 4
     13          
     14          //sms_hook

   \                                 In segment CODE, align 4, keep-with-next
     15          void SetSMSListener(void *new_handler)
     16          {
   \                     SetSMSListener:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
     17            gproc = GBS_GetProcAddress(SMS_SIMIF_SM);
   \   00000004   ........           LDR      R5,??DataTable1  ;; gproc
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   7700A0E3           MOV      R0,#+119
   \   00000010   400C80E3           ORR      R0,R0,#0x4000
   \   00000014   850300EF           SWI      +901
   \   00000018   000085E5           STR      R0,[R5, #+0]
     18            sms_simif_sm = (void(*)()) gproc->word[15];
   \   0000001C   3C1090E5           LDR      R1,[R0, #+60]
   \   00000020   041085E5           STR      R1,[R5, #+4]
     19            gproc->word[15] = (int) new_handler;  
   \   00000024   3C4080E5           STR      R4,[R0, #+60]
     20          }
   \   00000028   3080BDE8           POP      {R4,R5,PC}       ;; return
     21          

   \                                 In segment CODE, align 4, keep-with-next
     22          void DeleteSMSListener()
     23          {
     24            gproc->word[15] = (int) sms_simif_sm;  
   \                     DeleteSMSListener:
   \   00000000   ........           LDR      R0,??DataTable1  ;; gproc
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   040090E5           LDR      R0,[R0, #+4]
   \   0000000C   3C0081E5           STR      R0,[R1, #+60]
     25          }
   \   00000010   1EFF2FE1           BX       LR               ;; return
     26          
     27          //код распаковки (c)BoBa

   \                                 In segment CODE, align 4, keep-with-next
     28          SMS *UnpackTPDU(TPDU *tpdu)
     29          { 
   \                     UnpackTPDU:
   \   00000000   B0472DE9           PUSH     {R4,R5,R7-R10,LR}
     30            char *s;
     31            const char *p=tpdu->data;
     32            SMS *sms=NULL;
     33            unsigned int i;
     34            unsigned int m;
     35            int c;
     36            int c1;
     37            int c2;
     38            unsigned int is_udhl;
     39            if ((*p++)!=1) return NULL;
   \   00000004   0010D0E5           LDRB     R1,[R0, #+0]
   \   00000008   010051E3           CMP      R1,#+1
   \   0000000C   0100000A           BEQ      ??UnpackTPDU_0
   \                     ??UnpackTPDU_1:
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   B087BDE8           POP      {R4,R5,R7-R10,PC}
     40            if ((*p++)==0) return NULL; //длина TPDU
   \                     ??UnpackTPDU_0:
   \   00000018   010080E2           ADD      R0,R0,#+1
   \   0000001C   019080E2           ADD      R9,R0,#+1
   \   00000020   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   B087BD08           POPEQ    {R4,R5,R7-R10,PC}
     41            is_udhl=*p&0x40;
   \   0000002C   0000D9E5           LDRB     R0,[R9, #+0]
   \   00000030   404000E2           AND      R4,R0,#0x40
     42            if ((*p++)&3) return NULL; //Неподходящий тип сообщения ;)
   \   00000034   ........           LDRB     R0,[R9], #+1
   \   00000038   030010E3           TST      R0,#0x3
   \   0000003C   F3FFFF1A           BNE      ??UnpackTPDU_1
     43            s=malloc(sizeof(SMS));
   \   00000040   DD00A0E3           MOV      R0,#+221
   \   00000044   140000EF           SWI      +20
   \   00000048   0080A0E1           MOV      R8,R0
     44            zeromem(s, sizeof(SMS));
   \   0000004C   DD10A0E3           MOV      R1,#+221
   \   00000050   1D0100EF           SWI      +285
     45            sms=(SMS*)s;
     46            i=*p++; //Длина номера в нибблах
   \   00000054   ........           LDRB     R0,[R9], #+1
     47            if (*p == 0x91) {*s='+'; s++; } /* если интернациональный номер,добавляем символ '+' */
   \   00000058   0010D9E5           LDRB     R1,[R9, #+0]
   \   0000005C   0850A0E1           MOV      R5,R8
     48            if (*p == 0xD0)  /* алфавитно-цифровой тип номера */
   \   00000060   0070A0E3           MOV      R7,#+0
   \   00000064   910051E3           CMP      R1,#+145
   \   00000068   2B10A003           MOVEQ    R1,#+43
   \   0000006C   ........           STRBEQ   R1,[R8], #+1
   \   00000070   0010D9E5           LDRB     R1,[R9, #+0]
   \   00000074   D00051E3           CMP      R1,#+208
   \   00000078   011089E2           ADD      R1,R9,#+1
   \   0000007C   3000001A           BNE      ??UnpackTPDU_2
     49          {
     50            p++;
     51            m = (i * 4 / 7); /* кол-во символов в номере */
   \   00000080   78229FE5           LDR      R2,??UnpackTPDU_3  ;; 0x24924925
   \   00000084   0001A0E1           LSL      R0,R0,#+2
   \   00000088   923089E0           UMULL    R3,R9,R2,R0
   \   0000008C   009099E0           ADDS     R9,R9,R0
   \   00000090   6990A0E1           RRX      R9,R9
   \   00000094   2991A0E1           LSR      R9,R9,#+2
     52            i = 0;
   \   00000098   0000A0E3           MOV      R0,#+0
     53            c2 = 0;
   \   0000009C   0030A0E1           MOV      R3,R0
   \   000000A0   000059E3           CMP      R9,#+0
   \   000000A4   1700001A           BNE      ??UnpackTPDU_4
     54            while(m)
     55            {
     56              c=0x80;    do
     57              {
     58                if(!i) {c2=*p++; i=8;}
     59                c>>=1;
     60                if(c2&1) c|=0x80;
     61                c2>>=1; i--;
     62              }while(!(c&1)); 
     63              c>>=1;
     64              if(!c) c='@';
     65              if(c==2) c='$';
     66              *s = c; s++;
     67              m--;
     68            }
     69          
     70          }
     71            else
     72            {
     73              p++;
     74              m=0;
     75              c=0;
     76              while(m<i)
     77              {
     78                if (m&1) c1=c>>4; else c1=(c=(*p++))&0x0F;
     79                *s=c1+0x30;
     80                s++;
     81                m++;
     82              }
     83            }
     84                   
     85            //PID-идентификатор протокола,пропускаем
     86            p++;
   \                     ??UnpackTPDU_5:
   \   000000A8   011081E2           ADD      R1,R1,#+1
     87            //DCS-схема кодирования данных 
     88            c1=*p++;
   \   000000AC   ........           LDRB     R8,[R1], #+1
     89            //SCTS-Время/дата
     90            s=sms->time;
   \   000000B0   140085E2           ADD      R0,R5,#+20
     91            m=6;
   \   000000B4   0630A0E3           MOV      R3,#+6
     92            do
     93            {
     94              c=*p++;
   \                     ??UnpackTPDU_6:
   \   000000B8   ........           LDRB     R2,[R1], #+1
     95              *s=(c&0x0F)+'0'; s++;
   \   000000BC   0F9002E2           AND      R9,R2,#0xF
   \   000000C0   309089E2           ADD      R9,R9,#+48
   \   000000C4   ........           STRB     R9,[R0], #+1
     96              *s=(c>>4)+'0'; s++;
   \   000000C8   3090A0E3           MOV      R9,#+48
   \   000000CC   422289E0           ADD      R2,R9,R2, ASR #+4
   \   000000D0   ........           STRB     R2,[R0], #+1
     97              switch(m)
   \   000000D4   022043E2           SUB      R2,R3,#+2
   \   000000D8   010052E3           CMP      R2,#+1
   \   000000DC   2700009A           BLS      ??UnpackTPDU_7
   \   000000E0   032042E2           SUB      R2,R2,#+3
   \   000000E4   010052E3           CMP      R2,#+1
   \   000000E8   2020A083           MOVHI    R2,#+32
     98              {
     99              case 6:
    100              case 5:
    101                c='-';
   \   000000EC   2D20A093           MOVLS    R2,#+45
   \   000000F0   230000EA           B        ??UnpackTPDU_8
   \                     ??UnpackTPDU_9:
   \   000000F4   020052E3           CMP      R2,#+2
   \   000000F8   2420A003           MOVEQ    R2,#+36
   \                     ??UnpackTPDU_10:
   \   000000FC   ........           STRB     R2,[R8], #+1
   \   00000100   019059E2           SUBS     R9,R9,#+1
   \   00000104   E7FFFF0A           BEQ      ??UnpackTPDU_5
   \                     ??UnpackTPDU_4:
   \   00000108   8020A0E3           MOV      R2,#+128
   \                     ??UnpackTPDU_11:
   \   0000010C   000050E3           CMP      R0,#+0
   \   00000110   ........           LDRBEQ   R3,[R1], #+1
   \   00000114   0800A003           MOVEQ    R0,#+8
   \   00000118   C220A0E1           ASR      R2,R2,#+1
   \   0000011C   010013E3           TST      R3,#0x1
   \   00000120   80208213           ORRNE    R2,R2,#0x80
   \   00000124   C330A0E1           ASR      R3,R3,#+1
   \   00000128   010040E2           SUB      R0,R0,#+1
   \   0000012C   010012E3           TST      R2,#0x1
   \   00000130   F5FFFF0A           BEQ      ??UnpackTPDU_11
   \   00000134   C220B0E1           ASRS     R2,R2,#+1
   \   00000138   EDFFFF1A           BNE      ??UnpackTPDU_9
   \   0000013C   4020A0E3           MOV      R2,#+64
   \   00000140   EDFFFFEA           B        ??UnpackTPDU_10
   \                     ??UnpackTPDU_2:
   \   00000144   0090A0E3           MOV      R9,#+0
   \   00000148   0720A0E1           MOV      R2,R7
   \   0000014C   000050E3           CMP      R0,#+0
   \   00000150   0300001A           BNE      ??UnpackTPDU_12
   \   00000154   D3FFFFEA           B        ??UnpackTPDU_5
   \                     ??UnpackTPDU_13:
   \   00000158   303083E2           ADD      R3,R3,#+48
   \   0000015C   ........           STRB     R3,[R8], #+1
   \   00000160   019089E2           ADD      R9,R9,#+1
   \                     ??UnpackTPDU_12:
   \   00000164   000059E1           CMP      R9,R0
   \   00000168   CEFFFF2A           BCS      ??UnpackTPDU_5
   \   0000016C   010019E3           TST      R9,#0x1
   \   00000170   ........           LDRBEQ   R2,[R1], #+1
   \   00000174   0F300202           ANDEQ    R3,R2,#0xF
   \   00000178   4232A011           ASRNE    R3,R2,#+4
   \   0000017C   F5FFFFEA           B        ??UnpackTPDU_13
    102                break;
    103              case 3:
    104              case 2:
    105                c=':';
   \                     ??UnpackTPDU_7:
   \   00000180   3A20A0E3           MOV      R2,#+58
    106                break;
    107              default:
    108                c=' ';
    109              }
    110              *s=c; s++;
   \                     ??UnpackTPDU_8:
   \   00000184   ........           STRB     R2,[R0], #+1
    111            }
    112            while(--m);
   \   00000188   013053E2           SUBS     R3,R3,#+1
   \   0000018C   C9FFFF1A           BNE      ??UnpackTPDU_6
    113            p++; //Пропускаем TimeZone
   \   00000190   019081E2           ADD      R9,R1,#+1
    114            m=*p++; //Длинна текста
   \   00000194   ........           LDRB     R10,[R9], #+1
    115            if (is_udhl)
   \   00000198   000054E3           CMP      R4,#+0
   \   0000019C   1D00000A           BEQ      ??UnpackTPDU_14
    116            {
    117              s=sms->header;
    118              //Есть доп. заголовок, вычитываем
    119              is_udhl=*p; //Длина поля данных заголовка
    120              c=p[1];
   \   000001A0   0120D9E5           LDRB     R2,[R9, #+1]
   \   000001A4   0040D9E5           LDRB     R4,[R9, #+0]
   \   000001A8   280085E2           ADD      R0,R5,#+40
    121              if ((c==0)||(c==8))
   \   000001AC   000052E3           CMP      R2,#+0
   \   000001B0   1000000A           BEQ      ??UnpackTPDU_15
   \   000001B4   080052E3           CMP      R2,#+8
   \   000001B8   0300001A           BNE      ??UnpackTPDU_16
    122              {
    123                //Длинная смс, добавляем номер
    124                if (c)
    125                {
    126          	c=p[6];
   \   000001BC   0620D9E5           LDRB     R2,[R9, #+6]
    127          	c2=p[5];
   \   000001C0   0530D9E5           LDRB     R3,[R9, #+5]
    128                }
    129                else
    130                {
    131          	c=p[5];
    132          	c2=p[4];
    133                }
    134                s+=sprintf(s,"%u/%u ",c,c2);
   \                     ??UnpackTPDU_17:
   \   000001C4   38119FE5           LDR      R1,??UnpackTPDU_3+0x4  ;; `?<Constant "%u/%u ">`
   \   000001C8   160000EF           SWI      +22
    135              }
    136              is_udhl++; //Длина заголовка с учетом байта длинны
   \                     ??UnpackTPDU_16:
   \   000001CC   014084E2           ADD      R4,R4,#+1
    137              
    138              c1 &= 0xC;/* кодировка */
   \   000001D0   0C8018E2           ANDS     R8,R8,#0xC
    139              
    140              if (c1 == 0)
   \   000001D4   0A00001A           BNE      ??UnpackTPDU_18
    141              {
    142                //Для сообщения 7-бит
    143                is_udhl=((is_udhl*8)+6)/7; //Преобразуем в число пропускаемых септетов
   \   000001D8   20119FE5           LDR      R1,??UnpackTPDU_3  ;; 0x24924925
   \   000001DC   0600A0E3           MOV      R0,#+6
   \   000001E0   840180E0           ADD      R0,R0,R4, LSL #+3
   \   000001E4   912084E0           UMULL    R2,R4,R1,R0
   \   000001E8   004094E0           ADDS     R4,R4,R0
   \   000001EC   6440A0E1           RRX      R4,R4
   \   000001F0   2441A0E1           LSR      R4,R4,#+2
   \   000001F4   070000EA           B        ??UnpackTPDU_14
    144              }
   \                     ??UnpackTPDU_15:
   \   000001F8   0520D9E5           LDRB     R2,[R9, #+5]
   \   000001FC   0430D9E5           LDRB     R3,[R9, #+4]
   \   00000200   EFFFFFEA           B        ??UnpackTPDU_17
    145              else if(c1 == 8 || c1 == 4)
   \                     ??UnpackTPDU_18:
   \   00000204   080058E3           CMP      R8,#+8
   \   00000208   04005813           CMPNE    R8,#+4
    146              {
    147                //Для сообщения в юникоде или 8 бит
    148                p+=is_udhl; //Указатель на текст
   \   0000020C   09908400           ADDEQ    R9,R4,R9
    149                m-=is_udhl; //Убрать длинну
   \   00000210   04A04A00           SUBEQ    R10,R10,R4
    150                is_udhl=0; //Все уже пропущено
   \   00000214   0040A003           MOVEQ    R4,#+0
    151              }
    152            }
    153          
    154            s=sms->text;
   \                     ??UnpackTPDU_14:
   \   00000218   3C0085E2           ADD      R0,R5,#+60
    155            i=0;
   \   0000021C   0030A0E3           MOV      R3,#+0
    156            c2=0;
   \   00000220   0310A0E1           MOV      R1,R3
    157            if (c1==8) m>>=1;
   \   00000224   080058E3           CMP      R8,#+8
   \   00000228   0200001A           BNE      ??UnpackTPDU_19
   \   0000022C   AAA0A0E1           LSR      R10,R10,#+1
   \   00000230   000000EA           B        ??UnpackTPDU_19
    158            while(m)
    159            {
    160              switch(c1)
    161              {
    162              default:
    163                //7 бит
    164                c=0x80; //Символ
    165                do
    166                {
    167          	if (!i) {c2=*p++; i=8;}
    168          	c>>=1;
    169          	if (c2&1) c|=0x80;
    170          	c2>>=1; i--;
    171                }
    172                while(!(c&1));
    173                c>>=1;
    174                if (!c) c='@';
    175                if (c==2) c='$';
    176                break;
    177                
    178              case 4:
    179                //8 бит
    180                c=*p++;
    181                break;
    182                
    183              case 8:
    184                //Юникод
    185                i=(*p++)<<8;
    186                i|=(*p++);
    187                if ((i>=0x410)&&(i<0x450)) i-=0x350;
    188                c=i;
    189                break;
    190              }
    191              if (!c) c='?';
    192              if ((c==0x0A)||(c==0x0D)) c=' ';
    193              if (is_udhl) //Если необходимо пропустить символы
    194              {
    195                is_udhl--; //Пропускаем
    196              }
    197              else
    198              {
    199                *s=c; s++;
    200              }
    201              m--;
   \                     ??UnpackTPDU_20:
   \   00000234   01A04AE2           SUB      R10,R10,#+1
   \                     ??UnpackTPDU_19:
   \   00000238   00005AE3           CMP      R10,#+0
   \   0000023C   2C00000A           BEQ      ??UnpackTPDU_21
   \   00000240   042058E2           SUBS     R2,R8,#+4
   \   00000244   1300000A           BEQ      ??UnpackTPDU_22
   \   00000248   042052E2           SUBS     R2,R2,#+4
   \   0000024C   1300000A           BEQ      ??UnpackTPDU_23
   \   00000250   8020A0E3           MOV      R2,#+128
   \                     ??UnpackTPDU_24:
   \   00000254   000053E3           CMP      R3,#+0
   \   00000258   ........           LDRBEQ   R1,[R9], #+1
   \   0000025C   0830A003           MOVEQ    R3,#+8
   \   00000260   C220A0E1           ASR      R2,R2,#+1
   \   00000264   010011E3           TST      R1,#0x1
   \   00000268   80208213           ORRNE    R2,R2,#0x80
   \   0000026C   C110A0E1           ASR      R1,R1,#+1
   \   00000270   013043E2           SUB      R3,R3,#+1
   \   00000274   010012E3           TST      R2,#0x1
   \   00000278   F5FFFF0A           BEQ      ??UnpackTPDU_24
   \   0000027C   C220B0E1           ASRS     R2,R2,#+1
   \   00000280   4020A003           MOVEQ    R2,#+64
   \   00000284   1600000A           BEQ      ??UnpackTPDU_25
   \   00000288   020052E3           CMP      R2,#+2
   \   0000028C   1100001A           BNE      ??UnpackTPDU_26
   \   00000290   2420A0E3           MOV      R2,#+36
   \   00000294   120000EA           B        ??UnpackTPDU_25
   \                     ??UnpackTPDU_22:
   \   00000298   ........           LDRB     R2,[R9], #+1
   \   0000029C   0A0000EA           B        ??UnpackTPDU_27
   \                     ??UnpackTPDU_23:
   \   000002A0   ........           LDRB     R2,[R9], #+1
   \   000002A4   ........           LDRB     R3,[R9], #+1
   \   000002A8   0224A0E1           LSL      R2,R2,#+8
   \   000002AC   023083E1           ORR      R3,R3,R2
   \   000002B0   410E53E3           CMP      R3,#+1040
   \   000002B4   0300003A           BCC      ??UnpackTPDU_28
   \   000002B8   450E53E3           CMP      R3,#+1104
   \   000002BC   4F20E033           MVNCC    R2,#+79
   \   000002C0   C02FC233           BICCC    R2,R2,#0x300
   \   000002C4   03308230           ADDCC    R3,R2,R3
   \                     ??UnpackTPDU_28:
   \   000002C8   0320A0E1           MOV      R2,R3
   \                     ??UnpackTPDU_27:
   \   000002CC   000052E3           CMP      R2,#+0
   \   000002D0   3F20A003           MOVEQ    R2,#+63
   \   000002D4   0200000A           BEQ      ??UnpackTPDU_25
   \                     ??UnpackTPDU_26:
   \   000002D8   0A0052E3           CMP      R2,#+10
   \   000002DC   0D005213           CMPNE    R2,#+13
   \   000002E0   2020A003           MOVEQ    R2,#+32
   \                     ??UnpackTPDU_25:
   \   000002E4   000054E3           CMP      R4,#+0
   \   000002E8   ........           STRBEQ   R2,[R0], #+1
   \   000002EC   01404412           SUBNE    R4,R4,#+1
   \   000002F0   CFFFFFEA           B        ??UnpackTPDU_20
    202            }
    203           // *s=0x0D; s++;
    204           // *s=0x0A; s++; 
    205            *s=0;
   \                     ??UnpackTPDU_21:
   \   000002F4   0070C0E5           STRB     R7,[R0, #+0]
    206          
    207            return sms;
   \   000002F8   0500A0E1           MOV      R0,R5
   \   000002FC   B087BDE8           POP      {R4,R5,R7-R10,PC}
   \                     ??UnpackTPDU_3:
   \   00000300   25499224           DC32     0x24924925
   \   00000304   ........           DC32     `?<Constant "%u/%u ">`
    208          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     gproc

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%u/%u ">`:
   \   00000000   25752F257520       DC8 "%u/%u "
   \              00          
   \   00000007   00                 DC8 0
    209          /******************************************************************************/

   Maximum stack usage in bytes:

     Function          CSTACK
     --------          ------
     DeleteSMSListener     0
     SetSMSListener       12
     UnpackTPDU           32


   Segment part sizes:

     Function/Label       Bytes
     --------------       -----
     gproc                   8
     SetSMSListener         44
     DeleteSMSListener      20
     UnpackTPDU            776
     ??DataTable1            4
     ?<Constant "%u/%u ">    8
      Others                24

 
 856 bytes in segment CODE
   8 bytes in segment DATA_C
   8 bytes in segment DATA_Z
  12 bytes in segment INITTAB
 
 844 bytes of CODE  memory (+ 24 bytes shared)
   8 bytes of CONST memory
   8 bytes of DATA  memory

Errors: none
Warnings: 1
