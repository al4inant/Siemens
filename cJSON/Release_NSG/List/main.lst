##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    21/Oct/2018  18:38:06 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  E:\Users\alfinant\Documents\Siemens\alfinant\src_iar #
#                       \cJSON\main.c                                        #
#    Command line    =  E:\Users\alfinant\Documents\Siemens\alfinant\src_iar #
#                       \cJSON\main.c -D NEWSGOLD -lCN                       #
#                       E:\Users\alfinant\Documents\Siemens\alfinant\src_iar #
#                       \cJSON\Release_NSG\List\ -la                         #
#                       E:\Users\alfinant\Documents\Siemens\alfinant\src_iar #
#                       \cJSON\Release_NSG\List\ --diag_suppress Pe301 -o    #
#                       E:\Users\alfinant\Documents\Siemens\alfinant\src_iar #
#                       \cJSON\Release_NSG\Obj\ -z9 --cpu_mode arm --endian  #
#                       little --cpu ARM926EJ-S --stack_align 4 --interwork  #
#                       -e --fpu None --dlib_config                          #
#                       E:\Users\alfinant\Documents\Siemens\IAR\ARM\LIB\dl5t #
#                       painl8n.h -I E:\Users\alfinant\Documents\Siemens\IAR #
#                       \ARM\INC\ --inline_threshold=2                       #
#    List file       =  E:\Users\alfinant\Documents\Siemens\alfinant\src_iar #
#                       \cJSON\Release_NSG\List\main.lst                     #
#    Object file     =  E:\Users\alfinant\Documents\Siemens\alfinant\src_iar #
#                       \cJSON\Release_NSG\Obj\main.r79                      #
#                                                                            #
#                                                                            #
##############################################################################

E:\Users\alfinant\Documents\Siemens\alfinant\src_iar\cJSON\main.c
      1          #include <siemens\swilib.h>
      2          
      3          #include "json\cJSON.h"
      4          
      5          #pragma segment="ELFBEGIN"
      6          extern void kill_data(void *p, void (*func_p)(void *));

   \                                 In segment CODE, align 4, keep-with-next
      7          void ElfKiller(void)
      8          {
   \                     ElfKiller:
   \   00000000   00402DE9           PUSH     {LR}
      9            kill_data(__segment_begin("ELFBEGIN"),(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??ElfKiller_0  ;; SFB(ELFBEGIN)
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??ElfKiller_0:
   \   00000018   ........           DC32     SFB(ELFBEGIN)
     10          }
     11          

   \                                 In segment CODE, align 4, keep-with-next
     12          int main(char *exename, char *fname)
     13          {
   \                     main:
   \   00000000   10402DE9           PUSH     {R4,LR}
     14            char*p;
     15            
     16            //sprintf(s, "Version: %s\n", cJSON_Version());
     17            //ShowMSG(1, (int)s);
     18            
     19            cJSON *root = cJSON_CreateObject();
   \   00000004   ........           _BLF     cJSON_CreateObject,??cJSON_CreateObject??rA
     20            cJSON_AddNumberToObject(root, "width", 1920);
   \   00000008   34109FE5           LDR      R1,??main_0      ;; `?<Constant "width">`
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0020A0E3           MOV      R2,#+0
   \   00000014   4034A0E3           MOV      R3,#+1073741824
   \   00000018   9E3883E3           ORR      R3,R3,#0x9E0000
   \   0000001C   ........           _BLF     cJSON_AddNumberToObject,??cJSON_AddNumberToObject??rA
     21            //cJSON *item = cJSON_GetObjectItem(root, "width");
     22            p=cJSON_Print(root);
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     cJSON_Print,??cJSON_Print??rA
     23            //cJSON_Delete(root);
     24            ShowMSG(1, (int)p);
   \   00000028   0010A0E1           MOV      R1,R0
   \   0000002C   0100A0E3           MOV      R0,#+1
   \   00000030   480100EF           SWI      +328
     25            //mfree(p);
     26            SUBPROC((void*)ElfKiller);
   \   00000034   0C009FE5           LDR      R0,??main_0+0x4  ;; ElfKiller
   \   00000038   710100EF           SWI      +369
     27            return 0;
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??main_0:
   \   00000044   ........           DC32     `?<Constant "width">`
   \   00000048   ........           DC32     ElfKiller
     28          }

   \                                 In segment ELFBEGIN, align 1

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "width">`:
   \   00000000   776964746800       DC8 "width"
   \   00000006   0000               DC8 0, 0
     29          
     30          
     31          

   Maximum stack usage in bytes:

     Function  CSTACK
     --------  ------
     ElfKiller     4
     main          8


   Segment part sizes:

     Function/Label      Bytes
     --------------      -----
     ElfKiller             28
     main                  76
     ?<Constant "width">    8
      Others               56

 
 160 bytes in segment CODE
   8 bytes in segment DATA_C
 
 104 bytes of CODE  memory (+ 56 bytes shared)
   8 bytes of CONST memory

Errors: none
Warnings: none
