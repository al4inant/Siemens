//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   28/Dec/2015  22:14:46 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  E:\Users\alfinant\Documents\Siemens\alfinant\i2c_in /
//                       fo\main.c                                           /
//    Command line    =  E:\Users\alfinant\Documents\Siemens\alfinant\i2c_in /
//                       fo\main.c -D NEWSGOLD -lCN                          /
//                       E:\Users\alfinant\Documents\Siemens\alfinant\i2c_in /
//                       fo\Release_NSG\List\ -la                            /
//                       E:\Users\alfinant\Documents\Siemens\alfinant\i2c_in /
//                       fo\Release_NSG\List\ -o E:\Users\alfinant\Documents /
//                       \Siemens\alfinant\i2c_info\Release_NSG\Obj\ -z9     /
//                       --cpu_mode arm --endian little --cpu ARM926EJ-S     /
//                       --stack_align 4 --interwork -e --fpu None           /
//                       --dlib_config E:\Users\alfinant\Documents\Siemens\I /
//                       AR\ARM\LIB\dl5tpainl8n.h -I                         /
//                       E:\Users\alfinant\Documents\Siemens\IAR\ARM\INC\    /
//                       --inline_threshold=2                                /
//    List file       =  E:\Users\alfinant\Documents\Siemens\alfinant\i2c_in /
//                       fo\Release_NSG\List\main.s79                        /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)
        RSEG ELFBEGIN:DATA:REORDER:NOROOT(0)

??DataTable0 EQU 0
??DataTable1 EQU 0
        MULTWEAK ??ElfKiller??rT
        MULTWEAK ??SaveRegMap??rT
        MULTWEAK ??callback??rT
        MULTWEAK ??i2cr_pmu??rA
        MULTWEAK ??kill_data??rA
        MULTWEAK ??main??rT
        MULTWEAK ??showMess??rT
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC ElfKiller
        FUNCTION ElfKiller,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBWEAK GPIO
        PUBLIC SaveRegMap
        FUNCTION SaveRegMap,0201H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC callback
        FUNCTION callback,0603H
        LOCFRAME CSTACK, 16, STACK
        PUBLIC dat
        PUBLIC `data`
        PUBLIC main
        FUNCTION main,0a03H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC `r0`
        PUBLIC `r1`
        PUBLIC `r10`
        PUBLIC `r11`
        PUBLIC `r12`
        PUBLIC `r13`
        PUBLIC `r14`
        PUBLIC `r15`
        PUBLIC r16
        PUBLIC r17
        PUBLIC r18
        PUBLIC r19
        PUBLIC `r2`
        PUBLIC `r3`
        PUBLIC `r4`
        PUBLIC `r5`
        PUBLIC `r6`
        PUBLIC `r7`
        PUBLIC `r8`
        PUBLIC `r9`
        PUBLIC showMess
        FUNCTION showMess,0601H
        LOCFRAME CSTACK, 140, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
i2cr_pmu            SYMBOL "i2cr_pmu"
kill_data           SYMBOL "kill_data"
ElfKiller           SYMBOL "ElfKiller"
??ElfKiller??rT     SYMBOL "??rT", ElfKiller
SaveRegMap          SYMBOL "SaveRegMap"
??SaveRegMap??rT    SYMBOL "??rT", SaveRegMap
callback            SYMBOL "callback"
??callback??rT      SYMBOL "??rT", callback
??i2cr_pmu??rA      SYMBOL "??rA", i2cr_pmu
??kill_data??rA     SYMBOL "??rA", kill_data
main                SYMBOL "main"
??main??rT          SYMBOL "??rT", main
showMess            SYMBOL "showMess"
??showMess??rT      SYMBOL "??rT", showMess

        EXTERN i2cr_pmu
        FUNCTION i2cr_pmu,0202H
        EXTERN kill_data
        FUNCTION kill_data,0202H


        ASEGN DATA_AN:DATA:NOROOT,0f4300000H
// GPIO_TypeDef __data GPIO
GPIO:
        DS8 488

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??ElfKiller??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ElfKiller

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ElfKiller
        ARM
ElfKiller:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SWI      +32789
        MOV      R1,R0
        LDR      R0,??ElfKiller_0  ;; SFB(ELFBEGIN)
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        _BF      kill_data,??kill_data??rA  ;; tailcall
        DATA
??ElfKiller_0:
        DC32     SFB(ELFBEGIN)
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??SaveRegMap??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE SaveRegMap

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
`data`:
        DS8 24

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function SaveRegMap
        ARM
SaveRegMap:
        PUSH     {R0,R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+12
        LDR      R0,??SaveRegMap_0  ;; `?<Constant "0:\\\\SCCU.bin">`
        MOV      R1,#+0
        STR      R1,[SP, #+0]
        MOV      R3,SP
        MOV      R2,#+384
        MOV      R1,#+2
        ORR      R1,R1,#0x8300
        SWI      +10
        LDR      R1,??SaveRegMap_0+0x4  ;; `data`
        MOV      R4,R0
        MOV      R3,SP
        MOV      R2,#+24
        SWI      +12
        MOV      R1,SP
        MOV      R0,R4
        SWI      +13
        POP      {R0,R4,PC}       ;; return
        DATA
??SaveRegMap_0:
        DC32     `?<Constant "0:\\\\SCCU.bin">`
        DC32     `data`
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??showMess??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE showMess

        RSEG DATA_Z:DATA:SORT:NOROOT(0)
dat:
        DS8 1

        RSEG DATA_Z:DATA:SORT:NOROOT(0)
`r0`:
        DS8 1

        RSEG DATA_Z:DATA:SORT:NOROOT(0)
`r1`:
        DS8 1
`r2`:
        DS8 1
`r10`:
        DS8 1

        RSEG DATA_Z:DATA:SORT:NOROOT(0)
`r3`:
        DS8 1

        RSEG DATA_Z:DATA:SORT:NOROOT(0)
`r4`:
        DS8 1

        RSEG DATA_Z:DATA:SORT:NOROOT(0)
`r5`:
        DS8 1

        RSEG DATA_Z:DATA:SORT:NOROOT(0)
`r6`:
        DS8 1

        RSEG DATA_Z:DATA:SORT:NOROOT(0)
`r7`:
        DS8 1

        RSEG DATA_Z:DATA:SORT:NOROOT(0)
`r8`:
        DS8 1

        RSEG DATA_Z:DATA:SORT:NOROOT(0)
`r9`:
        DS8 1

        RSEG DATA_Z:DATA:SORT:NOROOT(0)
`r11`:
        DS8 1

        RSEG DATA_Z:DATA:SORT:NOROOT(0)
`r12`:
        DS8 1

        RSEG DATA_Z:DATA:SORT:NOROOT(0)
`r13`:
        DS8 1

        RSEG DATA_Z:DATA:SORT:NOROOT(0)
`r14`:
        DS8 1

        RSEG DATA_Z:DATA:SORT:NOROOT(0)
`r15`:
        DS8 1

        RSEG DATA_Z:DATA:SORT:NOROOT(0)
r16:
        DS8 1

        RSEG DATA_Z:DATA:SORT:NOROOT(0)
r17:
        DS8 1

        RSEG DATA_Z:DATA:SORT:NOROOT(0)
r18:
        DS8 1

        RSEG DATA_Z:DATA:SORT:NOROOT(0)
r19:
        DS8 1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function showMess
        ARM
showMess:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SUB      SP,SP,#+128
        CFI CFA R13+132
        LDR      R0,??DataTable3  ;; `r1`
        MOV      R1,#+208
        SUB      R1,R1,#+198180864
        LDR      R1,[R1, #+0]
        PUSH     {R1}
        CFI CFA R13+136
        LDRB     R1,[R0, #+2]
        PUSH     {R1}
        CFI CFA R13+140
        LDRB     R3,[R0, #+1]
        LDRB     R2,[R0, #+0]
        LDR      R1,??showMess_0  ;; `?<Constant "r1=%X\\nr2=%X\\nr10=%X\\npm...">`
        ADD      R0,SP,#+8
        SWI      +22
        ADD      R1,SP,#+8
        MOV      R0,#+1
        SWI      +328
        LDR      R0,??showMess_0+0x4  ;; ElfKiller
        SWI      +369
        ADD      SP,SP,#+136
        CFI CFA R13+4
        POP      {PC}             ;; return
        DATA
??showMess_0:
        DC32     `?<Constant "r1=%X\\nr2=%X\\nr10=%X\\npm...">`
        DC32     ElfKiller
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??callback??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE callback

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function callback
        ARM
callback:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        LDR      R5,??callback_0  ;; `r1`
        LDR      R6,??DataTable2  ;; callback
        MOV      R4,R0
        LDRSH    R0,[R4, #+6]
        CMP      R0,#+0
        BNE      ??callback_1
        MOV      R3,#+1
        MOV      R2,R6
        ADD      R1,R5,#+1
        MOV      R0,#+2
        _BLF     i2cr_pmu,??i2cr_pmu??rA
??callback_1:
        LDRSH    R0,[R4, #+6]
        CMP      R0,#+1
        BNE      ??callback_2
        MOV      R3,#+15
        MOV      R2,R6
        ADD      R1,R5,#+2
        MOV      R0,#+16
        _BLF     i2cr_pmu,??i2cr_pmu??rA
??callback_2:
        LDRSH    R0,[R4, #+6]
        CMP      R0,#+15
        POPNE    {R4-R6,PC}
        LDR      R0,??callback_0+0x4  ;; showMess
        SWI      +369
        POP      {R4-R6,PC}       ;; return
        DATA
??callback_0:
        DC32     `r1`
        DC32     showMess
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??main??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE main

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function main
        ARM
main:
        LDR      R2,??DataTable2  ;; callback
        LDR      R1,??DataTable3  ;; `r1`
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R3,#+0
        MOV      R0,#+1
        _BLF     i2cr_pmu,??i2cr_pmu??rA
        MOV      R0,#+0
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable2:
        DC32     callback

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable3:
        DC32     `r1`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon1
        CFI NoFunction
        ARM
??kill_data??rA:
        LDR      R12,??Subroutine5_0  ;; kill_data
        BX       R12
        DATA
??Subroutine5_0:
        DC32     kill_data
        CFI EndBlock cfiBlock10

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI NoFunction
        ARM
??i2cr_pmu??rA:
        LDR      R12,??Subroutine6_0  ;; i2cr_pmu
        BX       R12
        DATA
??Subroutine6_0:
        DC32     i2cr_pmu
        CFI EndBlock cfiBlock11

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        RSEG ELFBEGIN:DATA:REORDER:NOROOT(0)

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "0:\\\\SCCU.bin">`:
        DATA
        DC8 "0:\\SCCU.bin"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "r1=%X\\nr2=%X\\nr10=%X\\npm...">`:
        DATA
        DC8 "r1=%X\012r2=%X\012r10=%X\012pmCrhg=%X\012"
        DC8 0, 0

        END
// 
// 396 bytes in segment CODE
// 488 bytes in segment DATA_AN
//  44 bytes in segment DATA_C
//  45 bytes in segment DATA_Z
//  12 bytes in segment INITTAB
// 
// 352 bytes of CODE  memory (+  56 bytes shared)
//  44 bytes of CONST memory
//  45 bytes of DATA  memory (+ 488 bytes shared)
//
//Errors: none
//Warnings: none
