//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   03/Nov/2017  20:04:42 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  arm                                                 /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  E:\Users\alfinant\Documents\Siemens\alfinant\Meas\i /
//                       rq_work.c                                           /
//    Command line    =  E:\Users\alfinant\Documents\Siemens\alfinant\Meas\i /
//                       rq_work.c -D NEWSGOLD -D E71v45 -lCN                /
//                       E:\Users\alfinant\Documents\Siemens\alfinant\Meas\R /
//                       elease_NSG\List\ -la E:\Users\alfinant\Documents\Si /
//                       emens\alfinant\Meas\Release_NSG\List\ -o            /
//                       E:\Users\alfinant\Documents\Siemens\alfinant\Meas\R /
//                       elease_NSG\Obj\ -z9 --cpu_mode arm --endian little  /
//                       --cpu ARM926EJ-S --stack_align 4 -e --fpu None      /
//                       --dlib_config E:\Users\alfinant\Documents\Siemens\I /
//                       AR\ARM\LIB\dl5tpannl8n.h -I                         /
//                       E:\Users\alfinant\Documents\Siemens\IAR\ARM\INC\    /
//                       --inline_threshold=2                                /
//    List file       =  E:\Users\alfinant\Documents\Siemens\alfinant\Meas\R /
//                       elease_NSG\List\irq_work.s79                        /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME irq_work

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__arm"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        PUBLIC disable_interrupts
        FUNCTION disable_interrupts,080203H
        PUBLIC enable_interrupts
        FUNCTION enable_interrupts,080203H
        PUBLIC irq_get_prio
        FUNCTION irq_get_prio,0203H
        PUBLIC irq_req
        FUNCTION irq_req,0203H
        LOCFRAME CSTACK, 24, STACK
        PUBLIC irq_set_prio
        FUNCTION irq_set_prio,0203H
        LOCFRAME CSTACK, 12, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function disable_interrupts
        ARM
// __??Code32?? __code __arm __atpcs int disable_interrupts(void)
disable_interrupts:
        MRS      R0,CPSR
        AND      R1,R0,#0x1F
        CMP      R1,#+16
        BNE      ??disable_interrupts_0
        SWI 4            
??disable_interrupts_0:
        ORRS     R1,R0,#0xC0
        MSR      CPSR,R1
        AND      R0,R0,#0xC0
        MOV      PC,LR            ;; return
        CFI EndBlock cfiBlock0

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function enable_interrupts
        ARM
// __??Code32?? __code __arm __atpcs void enable_interrupts(int)
enable_interrupts:
        MRS      R1,CPSR
        AND      R2,R1,#0x1F
        CMP      R2,#+16
        BNE      ??enable_interrupts_0
        SWI 4            
??enable_interrupts_0:
        BIC      R1,R1,#0xC0
        ORRS     R0,R0,R1
        MSR      CPSR,R0
        MOV      PC,LR            ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function irq_set_prio
        ARM
irq_set_prio:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R0
        MOV      R5,R1
        BL       disable_interrupts
        MOV      R1,#-1073741776
        ORR      R1,R1,#0x32800000
        ADD      R1,R1,R4, LSL #+2
        LDR      R2,[R1, #+0]
        AND      R4,R2,#0xF
        AND      R2,R5,#0xF
        STR      R2,[R1, #+0]
        BL       enable_interrupts
        MOV      R0,R4
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock2

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function irq_get_prio
        ARM
irq_get_prio:
        MOV      R1,#-1073741776
        ORR      R1,R1,#0x32800000
        LDR      R0,[R1, +R0, LSL #+2]
        AND      R0,R0,#0xF
        MOV      PC,LR            ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function irq_req
        ARM
irq_req:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        LDR      R8,[SP, #+24]
        MOV      R4,R0
        MOV      R0,#+38
        ORR      R0,R0,#0x2400
        LDRB     R0,[R0, #+0]
        MOV      R5,R1
        MOV      R6,R2
        MOV      R7,R3
        STRB     R0,[R8, #+0]
        MOV      R0,#+70
        BL       irq_get_prio
        STRB     R0,[R8, #+1]
        MOV      R0,#+116
        ORR      R0,R0,#0x2500
        LDR      R0,[R0, #+0]
        STR      R0,[R8, #+4]
        BL       disable_interrupts
        MOV      R1,#+92
        ORR      R1,R1,#0x2400
        STR      R7,[R1, +R4, LSL #+2]
        BL       enable_interrupts
        BL       disable_interrupts
        MOV      R1,#+224
        ORR      R1,R1,#0x2300
        STRB     R5,[R1, +R4]
        BL       enable_interrupts
        MOV      R1,R6
        MOV      R0,R4
        BL       irq_set_prio
        POP      {R4-R8,PC}       ;; return
        CFI EndBlock cfiBlock4

        END
// 
// 272 bytes in segment CODE
// 
// 272 bytes of CODE memory
//
//Errors: none
//Warnings: none
