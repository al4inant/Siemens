##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    18/Feb/2023  23:43:18 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\GetProcA #
#                       drr\main.c                                           #
#    Command line    =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\GetProcA #
#                       drr\main.c -D NEWSGOLD -lCN                          #
#                       D:\Users\alfinant\Documents\Siemens\Dev\IAR\GetProcA #
#                       drr\Release_NSG\List\ -la                            #
#                       D:\Users\alfinant\Documents\Siemens\Dev\IAR\GetProcA #
#                       drr\Release_NSG\List\ -o D:\Users\alfinant\Documents #
#                       \Siemens\Dev\IAR\GetProcAdrr\Release_NSG\Obj\ -z9    #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --fpu None            #
#                       --dlib_config D:\Users\alfinant\Documents\Siemens\IA #
#                       R\ARM\LIB\dl5tpainl8n.h -I                           #
#                       D:\Users\alfinant\Documents\Siemens\IAR\ARM\INC\     #
#                       --inline_threshold=2                                 #
#    List file       =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\GetProcA #
#                       drr\Release_NSG\List\main.lst                        #
#    Object file     =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\GetProcA #
#                       drr\Release_NSG\Obj\main.r79                         #
#                                                                            #
#                                                                            #
##############################################################################

D:\Users\alfinant\Documents\Siemens\Dev\IAR\GetProcAdrr\main.c
      1          #include "../inc/siemens/swilib.h"
      2          
      3          
      4          typedef struct{ 
      5            int word[26]; 
      6          }GBSPROC;
      7           
      8          #pragma swi_number=0x385
      9          __swi __arm GBSPROC *GBS_GetProcAddress(short cepid);
     10          
     11          
     12          
     13          extern void kill_data(void *p, void (*func_p)(void *));
     14          #pragma segment="ELFBEGIN"

   \                                 In segment CODE, align 4, keep-with-next
     15          void ElfKiller(void)
     16          {
   \                     ElfKiller:
   \   00000000   00402DE9           PUSH     {LR}
     17            kill_data(__segment_begin("ELFBEGIN"),(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??ElfKiller_0  ;; SFB(ELFBEGIN)
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??ElfKiller_0:
   \   00000018   ........           DC32     SFB(ELFBEGIN)
     18          }
     19          
     20          

   \                                 In segment CODE, align 4, keep-with-next
     21          int main(char *exename, char *fname)
     22          {
   \                     main:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
     23            
     24           char s[32];
     25            
     26            void *adr =GBS_GetProcAddress(0x40c8);
   \   00000008   C800A0E3           MOV      R0,#+200
   \   0000000C   400C80E3           ORR      R0,R0,#0x4000
   \   00000010   850300EF           SWI      +901
     27            sprintf(s, "=0x%X", adr);
   \   00000014   20109FE5           LDR      R1,??main_0      ;; `?<Constant "=0x%X">`
   \   00000018   0020A0E1           MOV      R2,R0
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   160000EF           SWI      +22
     28            ShowMSG(0x11, (int)s);
   \   00000024   0D10A0E1           MOV      R1,SP
   \   00000028   1100A0E3           MOV      R0,#+17
   \   0000002C   480100EF           SWI      +328
     29          
     30            return 0;
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   20D08DE2           ADD      SP,SP,#+32
   \   00000038   0080BDE8           POP      {PC}             ;; return
   \                     ??main_0:
   \   0000003C   ........           DC32     `?<Constant "=0x%X">`
     31          }

   \                                 In segment ELFBEGIN, align 1

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "=0x%X">`:
   \   00000000   3D3078255800       DC8 "=0x%X"
   \   00000006   0000               DC8 0, 0
     32          
     33          
     34          
     35          

   Maximum stack usage in bytes:

     Function  CSTACK
     --------  ------
     ElfKiller     4
     main         36


   Segment part sizes:

     Function/Label      Bytes
     --------------      -----
     ElfKiller             28
     main                  64
     ?<Constant "=0x%X">    8
      Others               20

 
 112 bytes in segment CODE
   8 bytes in segment DATA_C
 
 92 bytes of CODE  memory (+ 20 bytes shared)
  8 bytes of CONST memory

Errors: none
Warnings: 4
