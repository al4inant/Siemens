##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    29/Dec/2016  15:43:34 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  E:\Users\alfinant\Documents\Siemens\alfinant\RF-part #
#                       Off\main.c                                           #
#    Command line    =  E:\Users\alfinant\Documents\Siemens\alfinant\RF-part #
#                       Off\main.c -D NEWSGOLD -lCN                          #
#                       E:\Users\alfinant\Documents\Siemens\alfinant\RF-part #
#                       Off\Release_NSG\List\ -la                            #
#                       E:\Users\alfinant\Documents\Siemens\alfinant\RF-part #
#                       Off\Release_NSG\List\ -o E:\Users\alfinant\Documents #
#                       \Siemens\alfinant\RF-partOff\Release_NSG\Obj\ -z9    #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --fpu None            #
#                       --dlib_config E:\Users\alfinant\Documents\Siemens\IA #
#                       R\ARM\LIB\dl5tpainl8n.h -I                           #
#                       E:\Users\alfinant\Documents\Siemens\IAR\ARM\INC\     #
#                       --inline_threshold=2                                 #
#    List file       =  E:\Users\alfinant\Documents\Siemens\alfinant\RF-part #
#                       Off\Release_NSG\List\main.lst                        #
#    Object file     =  E:\Users\alfinant\Documents\Siemens\alfinant\RF-part #
#                       Off\Release_NSG\Obj\main.r79                         #
#                                                                            #
#                                                                            #
##############################################################################

E:\Users\alfinant\Documents\Siemens\alfinant\RF-partOff\main.c
      1          #include <siemens/swilib.h>
      2          #ifdef NEWSGOLD
      3          #include "..\inc\reg8876.h"

   \                                 In segment DATA_AN, at 0xf4300000
   \   GPIO_TypeDef __data GPIO
   \                     GPIO:
   \   00000000                      DS8 488
      4          #else
      5          #include "..\inc\reg8875.h"
      6          #endif
      7          
      8          

   \                                 In segment DATA_C, align 4, align-sorted
      9          const int minus11=-11;
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11
     10          
     11          typedef struct
     12          {
     13            CSM_RAM csm;
     14          }MAIN_CSM;
     15          

   \                                 In segment DATA_Z, align 4, align-sorted
     16          int maincsm_id;
   \                     maincsm_id:
   \   00000000                      DS8 4
     17          

   \                                 In segment CODE, align 4, keep-with-next
     18          void RFpart_activate()
     19          {
     20            GPIO.TOUT7  &= ~ GPIO_ENAQ; // радиотракт включился 
   \                     RFpart_activate:
   \   00000000   F004A0E3           MOV      R0,#-268435456
   \   00000004   430680E3           ORR      R0,R0,#0x4300000
   \   00000008   E81090E5           LDR      R1,[R0, #+232]
   \   0000000C   801CC1E3           BIC      R1,R1,#0x8000
   \   00000010   ........           B        ?Subroutine7
     21          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine7:
   \   00000000   E81080E5           STR      R1,[R0, #+232]
   \   00000004   1EFF2FE1           BX       LR               ;; return
     22          

   \                                 In segment CODE, align 4, keep-with-next
     23          void RFpart_deactivate()
     24          {
     25            GPIO.TOUT7 |= GPIO_ENAQ;  //сброс, радиотракт отключился
   \                     RFpart_deactivate:
   \   00000000   F004A0E3           MOV      R0,#-268435456
   \   00000004   430680E3           ORR      R0,R0,#0x4300000
   \   00000008   E81090E5           LDR      R1,[R0, #+232]
   \   0000000C   801C81E3           ORR      R1,R1,#0x8000
   \   00000010                      REQUIRE ?Subroutine7
   \   00000010                      ;; // Fall through to label ?Subroutine7
     26          }
     27          

   \                                 In segment CODE, align 4, keep-with-next
     28          int maincsm_onmessage(CSM_RAM* data,GBS_MSG* msg)
     29          {
     30            return (1);  
   \                     maincsm_onmessage:
   \   00000000   0100A0E3           MOV      R0,#+1
   \   00000004   1EFF2FE1           BX       LR               ;; return
     31          }
     32          

   \                                 In segment CODE, align 4, keep-with-next
     33          static void maincsm_oncreate(CSM_RAM *data)
     34          {
   \                     maincsm_oncreate:
   \   00000000   00402DE9           PUSH     {LR}
     35            RFpart_deactivate();
   \   00000004   ........           BL       RFpart_deactivate
     36            ShowMSG(1,(int)"RF-part deactivated!" );
   \   00000008   08109FE5           LDR      R1,??maincsm_oncreate_0  ;; `?<Constant "RF-part deactivated!">`
   \   0000000C   0100A0E3           MOV      R0,#+1
   \   00000010   480100EF           SWI      +328
     37          }
   \   00000014   0080BDE8           POP      {PC}             ;; return
   \                     ??maincsm_oncreate_0:
   \   00000018   ........           DC32     `?<Constant "RF-part deactivated!">`
     38          
     39          extern void kill_data(void *p, void (*func_p)(void *));

   \                                 In segment CODE, align 4, keep-with-next
     40          void ElfKiller(void)
     41          {
   \                     ElfKiller:
   \   00000000   00402DE9           PUSH     {LR}
     42            extern void *ELF_BEGIN;
     43            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??ElfKiller_0  ;; ELF_BEGIN
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??ElfKiller_0:
   \   00000018   ........           DC32     ELF_BEGIN
     44          }
     45          

   \                                 In segment CODE, align 4, keep-with-next
     46          static void maincsm_onclose(CSM_RAM *csm)
     47          {
   \                     maincsm_onclose:
   \   00000000   00402DE9           PUSH     {LR}
     48              RFpart_activate();
   \   00000004   ........           BL       RFpart_activate
     49              SUBPROC((void *)ElfKiller);
   \   00000008   04009FE5           LDR      R0,??maincsm_onclose_0  ;; ElfKiller
   \   0000000C   710100EF           SWI      +369
     50          }
   \   00000010   0080BDE8           POP      {PC}             ;; return
   \                     ??maincsm_onclose_0:
   \   00000014   ........           DC32     ElfKiller
     51          
     52          

   \                                 In segment DATA_Z, align 4, align-sorted
     53          static unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280
     54          
     55          static const struct
     56          {
     57            CSM_DESC maincsm;
     58            WSHDR maincsm_name;

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "RF-partOff">`:
   \   00000000   52462D706172       DC8 "RF-partOff"
   \              744F666600  
   \   0000000B   00                 DC8 0
   \   0000000C   ............       DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
   \              ....00000000
   \              000000000000
   \              000000000000
   \              ........    
   \   00000028   280000000100       DC32 40, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              0000........
   \              ........CCCC
   \              AA5555AA3333
   \              00000000    
   \   00000044   8B00               DC16 139
   \   00000046   0000               DC8 0, 0
     59          }MAINCSM =
     60          {
     61            {
     62            maincsm_onmessage,
     63            maincsm_oncreate,
     64          #ifdef NEWSGOLD
     65            0,
     66            0,
     67            0,
     68            0,
     69          #endif
     70            maincsm_onclose,
     71            sizeof(MAIN_CSM),
     72            1,
     73            &minus11
     74            },
     75            {
     76              maincsm_name_body,
     77              NAMECSM_MAGIC1,
     78              NAMECSM_MAGIC2,
     79              0x0,
     80              139
     81            }
     82          };
     83          
     84          
     85          static void UpdateCSMname(void)
     86          {
     87            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"RF-partOff");
     88          }
     89          
     90          

   \                                 In segment CODE, align 4, keep-with-next
     91          int main(void)
     92          {  
   \                     main:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
     93             CSM_RAM *save_cmpc;
     94             char dummy[sizeof(MAIN_CSM)];
     95             UpdateCSMname();  
   \   00000004   6C409FE5           LDR      R4,??main_0      ;; `?<Constant "RF-partOff">`
   \   00000008   28D04DE2           SUB      SP,SP,#+40
   \   0000000C   0410A0E1           MOV      R1,R4
   \   00000010   340084E2           ADD      R0,R4,#+52
   \   00000014   240100EF           SWI      +292
     96             LockSched();
   \   00000018   460100EF           SWI      +326
     97             save_cmpc=CSM_root()->csm_q->current_msg_processing_csm;
   \   0000001C   068100EF           SWI      +33030
   \   00000020   080090E5           LDR      R0,[R0, #+8]
   \   00000024   045090E5           LDR      R5,[R0, #+4]
     98             CSM_root()->csm_q->current_msg_processing_csm=CSM_root()->csm_q->csm.first;
   \   00000028   068100EF           SWI      +33030
   \   0000002C   0060A0E1           MOV      R6,R0
   \   00000030   068100EF           SWI      +33030
   \   00000034   080090E5           LDR      R0,[R0, #+8]
   \   00000038   081096E5           LDR      R1,[R6, #+8]
   \   0000003C   080090E5           LDR      R0,[R0, #+8]
     99             maincsm_id=CreateCSM(&MAINCSM.maincsm,dummy,0);
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   040081E5           STR      R0,[R1, #+4]
   \   00000048   0D10A0E1           MOV      R1,SP
   \   0000004C   0C0084E2           ADD      R0,R4,#+12
   \   00000050   070100EF           SWI      +263
   \   00000054   20109FE5           LDR      R1,??main_0+0x4  ;; maincsm_id
   \   00000058   000081E5           STR      R0,[R1, #+0]
    100             CSM_root()->csm_q->current_msg_processing_csm=save_cmpc;
   \   0000005C   068100EF           SWI      +33030
   \   00000060   080090E5           LDR      R0,[R0, #+8]
   \   00000064   045080E5           STR      R5,[R0, #+4]
    101             UnlockSched();
   \   00000068   470100EF           SWI      +327
    102          
    103             return 0;
   \   0000006C   0000A0E3           MOV      R0,#+0
   \   00000070   28D08DE2           ADD      SP,SP,#+40
   \   00000074   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??main_0:
   \   00000078   ........           DC32     `?<Constant "RF-partOff">`
   \   0000007C   ........           DC32     maincsm_id
    104          }

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "RF-part deactivated!">`:
   \   00000000   52462D706172       DC8 "RF-part deactivated!"
   \              742064656163
   \              746976617465
   \              642100      
   \   00000015   000000             DC8 0, 0, 0
    105          

   Maximum stack usage in bytes:

     Function          CSTACK
     --------          ------
     ElfKiller             4
     RFpart_activate       0
     RFpart_deactivate     0
     main                 56
     maincsm_onclose       4
     maincsm_oncreate      4
     maincsm_onmessage     0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     GPIO                            488
     minus11                           4
     maincsm_id                        4
     RFpart_activate                  20
     ?Subroutine7                      8
     RFpart_deactivate                16
     maincsm_onmessage                 8
     maincsm_oncreate                 28
     ElfKiller                        28
     maincsm_onclose                  24
     maincsm_name_body               280
     ?<Constant "RF-partOff">         72
     main                            128
     ?<Constant "RF-part deactivated!">
                                      24
      Others                          52

 
 300 bytes in segment CODE
 488 bytes in segment DATA_AN
 100 bytes in segment DATA_C
 284 bytes in segment DATA_Z
  12 bytes in segment INITTAB
 
 260 bytes of CODE  memory (+  52 bytes shared)
 100 bytes of CONST memory
 284 bytes of DATA  memory (+ 488 bytes shared)

Errors: none
Warnings: none
