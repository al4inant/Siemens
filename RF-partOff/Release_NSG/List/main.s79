//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   29/Dec/2016  15:43:34 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  E:\Users\alfinant\Documents\Siemens\alfinant\RF-par /
//                       tOff\main.c                                         /
//    Command line    =  E:\Users\alfinant\Documents\Siemens\alfinant\RF-par /
//                       tOff\main.c -D NEWSGOLD -lCN                        /
//                       E:\Users\alfinant\Documents\Siemens\alfinant\RF-par /
//                       tOff\Release_NSG\List\ -la                          /
//                       E:\Users\alfinant\Documents\Siemens\alfinant\RF-par /
//                       tOff\Release_NSG\List\ -o                           /
//                       E:\Users\alfinant\Documents\Siemens\alfinant\RF-par /
//                       tOff\Release_NSG\Obj\ -z9 --cpu_mode arm --endian   /
//                       little --cpu ARM926EJ-S --stack_align 4             /
//                       --interwork -e --fpu None --dlib_config             /
//                       E:\Users\alfinant\Documents\Siemens\IAR\ARM\LIB\dl5 /
//                       tpainl8n.h -I E:\Users\alfinant\Documents\Siemens\I /
//                       AR\ARM\INC\ --inline_threshold=2                    /
//    List file       =  E:\Users\alfinant\Documents\Siemens\alfinant\RF-par /
//                       tOff\Release_NSG\List\main.s79                      /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        MULTWEAK ??ElfKiller??rT
        MULTWEAK ??RFpart_activate??rT
        MULTWEAK ??RFpart_deactivate??rT
        MULTWEAK ??kill_data??rA
        MULTWEAK ??main??rT
        MULTWEAK ??maincsm_onmessage??rT
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC ElfKiller
        FUNCTION ElfKiller,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBWEAK GPIO
        PUBLIC RFpart_activate
        FUNCTION RFpart_activate,0201H
        PUBLIC RFpart_deactivate
        FUNCTION RFpart_deactivate,0201H
        PUBLIC main
        FUNCTION main,0a03H
        LOCFRAME CSTACK, 56, STACK
        PUBLIC maincsm_id
        FUNCTION maincsm_onclose,0603H
        LOCFRAME CSTACK, 4, STACK
        FUNCTION maincsm_oncreate,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC maincsm_onmessage
        FUNCTION maincsm_onmessage,0603H
        PUBLIC minus11
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
kill_data           SYMBOL "kill_data"
ElfKiller           SYMBOL "ElfKiller"
??ElfKiller??rT     SYMBOL "??rT", ElfKiller
RFpart_activate     SYMBOL "RFpart_activate"
??RFpart_activate??rT SYMBOL "??rT", RFpart_activate
RFpart_deactivate   SYMBOL "RFpart_deactivate"
??RFpart_deactivate??rT SYMBOL "??rT", RFpart_deactivate
??kill_data??rA     SYMBOL "??rA", kill_data
main                SYMBOL "main"
??main??rT          SYMBOL "??rT", main
maincsm_onmessage   SYMBOL "maincsm_onmessage"
??maincsm_onmessage??rT SYMBOL "??rT", maincsm_onmessage

        EXTERN ELF_BEGIN
        EXTERN kill_data
        FUNCTION kill_data,0202H


        ASEGN DATA_AN:DATA:NOROOT,0f4300000H
// GPIO_TypeDef __data GPIO
GPIO:
        DS8 488

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
maincsm_id:
        DS8 4

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??RFpart_activate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE RFpart_activate

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function RFpart_activate
        ARM
RFpart_activate:
        MOV      R0,#-268435456
        ORR      R0,R0,#0x4300000
        LDR      R1,[R0, #+232]
        BIC      R1,R1,#0x8000
        B        ?Subroutine7
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??RFpart_deactivate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE RFpart_deactivate

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function RFpart_deactivate
        ARM
RFpart_deactivate:
        MOV      R0,#-268435456
        ORR      R0,R0,#0x4300000
        LDR      R1,[R0, #+232]
        ORR      R1,R1,#0x8000
        CFI EndBlock cfiBlock3
        REQUIRE ?Subroutine7
        ;; // Fall through to label ?Subroutine7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon1
        CFI NoFunction
        ARM
?Subroutine7:
        STR      R1,[R0, #+232]
        BX       LR               ;; return
        CFI EndBlock cfiBlock4

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_onmessage??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock5
        REQUIRE maincsm_onmessage

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon1
        CFI Function maincsm_onmessage
        ARM
maincsm_onmessage:
        MOV      R0,#+1
        BX       LR               ;; return
        CFI EndBlock cfiBlock6

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_oncreate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock7
        REQUIRE maincsm_oncreate

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon1
        CFI Function maincsm_oncreate
        ARM
maincsm_oncreate:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        BL       RFpart_deactivate
        LDR      R1,??maincsm_oncreate_0  ;; `?<Constant "RF-part deactivated!">`
        MOV      R0,#+1
        SWI      +328
        POP      {PC}             ;; return
        DATA
??maincsm_oncreate_0:
        DC32     `?<Constant "RF-part deactivated!">`
        CFI EndBlock cfiBlock8

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon0
        CFI NoFunction
        THUMB
??ElfKiller??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock9
        REQUIRE ElfKiller

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon1
        CFI Function ElfKiller
        ARM
ElfKiller:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SWI      +32789
        MOV      R1,R0
        LDR      R0,??ElfKiller_0  ;; ELF_BEGIN
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        _BF      kill_data,??kill_data??rA  ;; tailcall
        DATA
??ElfKiller_0:
        DC32     ELF_BEGIN
        CFI EndBlock cfiBlock10

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_onclose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock11
        REQUIRE maincsm_onclose

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon1
        CFI Function maincsm_onclose
        ARM
maincsm_onclose:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        BL       RFpart_activate
        LDR      R0,??maincsm_onclose_0  ;; ElfKiller
        SWI      +369
        POP      {PC}             ;; return
        DATA
??maincsm_onclose_0:
        DC32     ElfKiller
        CFI EndBlock cfiBlock12

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon0
        CFI NoFunction
        THUMB
??main??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock13
        REQUIRE main

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
maincsm_name_body:
        DS8 280

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "RF-part deactivated!">`:
        DATA
        DC8 "RF-part deactivated!"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "RF-partOff">`:
        DATA
        DC8 "RF-partOff"
        DC8 0
        DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
        DC32 40, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
        DC16 139
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
minus11:
        DATA
        DC32 -11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon1
        CFI Function main
        ARM
main:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        LDR      R4,??main_0      ;; `?<Constant "RF-partOff">`
        SUB      SP,SP,#+40
        CFI CFA R13+56
        MOV      R1,R4
        ADD      R0,R4,#+52
        SWI      +292
        SWI      +326
        SWI      +33030
        LDR      R0,[R0, #+8]
        LDR      R5,[R0, #+4]
        SWI      +33030
        MOV      R6,R0
        SWI      +33030
        LDR      R0,[R0, #+8]
        LDR      R1,[R6, #+8]
        LDR      R0,[R0, #+8]
        MOV      R2,#+0
        STR      R0,[R1, #+4]
        MOV      R1,SP
        ADD      R0,R4,#+12
        SWI      +263
        LDR      R1,??main_0+0x4  ;; maincsm_id
        STR      R0,[R1, #+0]
        SWI      +33030
        LDR      R0,[R0, #+8]
        STR      R5,[R0, #+4]
        SWI      +327
        MOV      R0,#+0
        ADD      SP,SP,#+40
        CFI CFA R13+16
        POP      {R4-R6,PC}       ;; return
        DATA
??main_0:
        DC32     `?<Constant "RF-partOff">`
        DC32     maincsm_id
        CFI EndBlock cfiBlock14

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI NoFunction
        ARM
??kill_data??rA:
        LDR      R12,??Subroutine8_0  ;; kill_data
        BX       R12
        DATA
??Subroutine8_0:
        DC32     kill_data
        CFI EndBlock cfiBlock15

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        END
// 
// 300 bytes in segment CODE
// 488 bytes in segment DATA_AN
// 100 bytes in segment DATA_C
// 284 bytes in segment DATA_Z
//  12 bytes in segment INITTAB
// 
// 260 bytes of CODE  memory (+  52 bytes shared)
// 100 bytes of CONST memory
// 284 bytes of DATA  memory (+ 488 bytes shared)
//
//Errors: none
//Warnings: none
