##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    04/Feb/2017  18:18:52 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  E:\Users\alfinant\Documents\Siemens\alfinant\PmuMon\ #
#                       main.c                                               #
#    Command line    =  E:\Users\alfinant\Documents\Siemens\alfinant\PmuMon\ #
#                       main.c -D NEWSGOLD -D ELKA -lCN                      #
#                       E:\Users\alfinant\Documents\Siemens\alfinant\PmuMon\ #
#                       Release_ELKA\List\ -la E:\Users\alfinant\Documents\S #
#                       iemens\alfinant\PmuMon\Release_ELKA\List\ -o         #
#                       E:\Users\alfinant\Documents\Siemens\alfinant\PmuMon\ #
#                       Release_ELKA\Obj\ -s9 --no_unroll --cpu_mode arm     #
#                       --endian little --cpu ARM926EJ-S --stack_align 4     #
#                       --interwork -e --fpu None --dlib_config              #
#                       E:\Users\alfinant\Documents\Siemens\IAR\ARM\LIB\dl5t #
#                       painl8n.h -I E:\Users\alfinant\Documents\Siemens\IAR #
#                       \ARM\INC\ --inline_threshold=2                       #
#    List file       =  E:\Users\alfinant\Documents\Siemens\alfinant\PmuMon\ #
#                       Release_ELKA\List\main.lst                           #
#    Object file     =  E:\Users\alfinant\Documents\Siemens\alfinant\PmuMon\ #
#                       Release_ELKA\Obj\main.r79                            #
#                                                                            #
#                                                                            #
##############################################################################

E:\Users\alfinant\Documents\Siemens\alfinant\PmuMon\main.c
      1          #include "../inc/swilib.h"
      2          #include "../inc/i2c.h"
      3          #include "rect_patcher.h"
      4          
      5          #define TMR_SECOND 216
      6          
      7          GBSTMR tmr;
      8          int ready=0;
      9          
     10          int page=1;
     11          int page_size=64;
     12          int cursor=0;
     13          char reg_buf[140];
     14          char reg_buf_prev[140];
     15          
     16          typedef struct
     17          {
     18            CSM_RAM csm;
     19            int gui_id;
     20          }MAIN_CSM;
     21          
     22          typedef struct
     23          {
     24            GUI gui;
     25            WSHDR *ws1;
     26          }MAIN_GUI;
     27          

   \                                 In segment DATA_Z, align 4, align-sorted
     28          int maingui_id;
   \                     maingui_id:
   \   00000000                      DS8 4
     29          

   \                                 In segment CODE, align 4, keep-with-next
     30          void callback(void *i2c_msg, int err)
     31          {
     32            ready++;
   \                     callback:
   \   00000000   ........           LDR      R0,??DataTable3  ;; ready
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   001090E5           LDR      R1,[R0, #+0]
   \   0000000C   011081E2           ADD      R1,R1,#+1
   \   00000010   001080E5           STR      R1,[R0, #+0]
     33            REDRAW(); 
   \   00000014   720100EF           SWI      +370
     34          }
   \   00000018   0080BDE8           POP      {PC}             ;; return
     35          

   \                                 In segment CODE, align 4, keep-with-next
     36          void do_tmr()
     37          {
   \                     do_tmr:
   \   00000000   10402DE9           PUSH     {R4,LR}
     38            i2cr_pmu(0, reg_buf, callback, 0, sizeof(reg_buf));
   \   00000004   ........           LDR      R4,??DataTable7  ;; ready
   \   00000008   28209FE5           LDR      R2,??do_tmr_0    ;; callback
   \   0000000C   8C00A0E3           MOV      R0,#+140
   \   00000010   01002DE9           PUSH     {R0}
   \   00000014   0030A0E3           MOV      R3,#+0
   \   00000018   241084E2           ADD      R1,R4,#+36
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   ........           _BLF     i2cr_pmu,??i2cr_pmu??rA
     39            GBS_StartTimerProc(&tmr,TMR_SECOND,do_tmr); 
   \   00000024   ........           LDR      R2,??DataTable4  ;; do_tmr
   \   00000028   D810A0E3           MOV      R1,#+216
   \   0000002C   140084E2           ADD      R0,R4,#+20
   \   00000030   4D0000EF           SWI      +77
     40          }
   \   00000034   1180BDE8           POP      {R0,R4,PC}       ;; return
   \                     ??do_tmr_0:
   \   00000038   ........           DC32     callback
     41          

   \                                 In segment CODE, align 4, keep-with-next
     42          static void OnRedraw(MAIN_GUI *data)
     43          {
   \                     OnRedraw:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
     44            WSHDR ws;
     45            unsigned short wsbody[32];
     46          
     47            int scr_w=ScreenW();
     48            int scr_h=ScreenH(); 
     49            int MYYDISP=0;
     50            int MYXDISP=4;
     51            int header_h=1+GetFontYSIZE(FONT_SMALL);
     52            int rec_w=27;//для экранов 320x240
     53            int rec_h=27;
     54            
     55            RECT rc[sizeof(reg_buf)];//массив 
     56            char* _reg_buf=reg_buf;
   \   00000004   ........           LDR      R4,??DataTable3  ;; ready
   \   00000008   CCD04DE2           SUB      SP,SP,#+204
   \   0000000C   40DE4DE2           SUB      SP,SP,#+1024
   \   00000010   888100EF           SWI      +33160
   \   00000014   00008DE5           STR      R0,[SP, #+0]
   \   00000018   898100EF           SWI      +33161
   \   0000001C   08008DE5           STR      R0,[SP, #+8]
   \   00000020   0800A0E3           MOV      R0,#+8
   \   00000024   C50100EF           SWI      +453
   \   00000028   016080E2           ADD      R6,R0,#+1
   \   0000002C   1B10A0E3           MOV      R1,#+27
   \   00000030   0C108DE5           STR      R1,[SP, #+12]
   \   00000034   04108DE5           STR      R1,[SP, #+4]
   \   00000038   241084E2           ADD      R1,R4,#+36
   \   0000003C   10108DE5           STR      R1,[SP, #+16]
     57            char* _reg_buf_prev=reg_buf_prev;
   \   00000040   B01084E2           ADD      R1,R4,#+176
   \   00000044   14108DE5           STR      R1,[SP, #+20]
     58            
     59            if(scr_w==132)//для экранов 176x132
   \   00000048   00009DE5           LDR      R0,[SP, #+0]
   \   0000004C   0070A0E3           MOV      R7,#+0
   \   00000050   0450A0E3           MOV      R5,#+4
   \   00000054   840050E3           CMP      R0,#+132
   \   00000058   0400001A           BNE      ??OnRedraw_0
     60            {
     61              rec_w=14;
   \   0000005C   0E10A0E3           MOV      R1,#+14
   \   00000060   0C108DE5           STR      R1,[SP, #+12]
     62              rec_h=14;
   \   00000064   04108DE5           STR      R1,[SP, #+4]
     63              MYYDISP=2;
   \   00000068   0270A0E3           MOV      R7,#+2
     64              MYXDISP=2;
   \   0000006C   0250A0E3           MOV      R5,#+2
     65            }
     66              
     67            //int sym_w=GetSymbolWidth('D', FONT_SMALL);
     68            
     69            CreateLocalWS(&ws, wsbody, 31);
   \                     ??OnRedraw_0:
   \   00000070   1F20A0E3           MOV      R2,#+31
   \   00000074   8C108DE2           ADD      R1,SP,#+140
   \   00000078   401E81E2           ADD      R1,R1,#+1024
   \   0000007C   18008DE2           ADD      R0,SP,#+24
   \   00000080   270100EF           SWI      +295
     70            
     71            DrawRoundedFrame(0,0,scr_w-1,scr_h-1,0,0,0,GetPaletteAdrByColorIndex(1),GetPaletteAdrByColorIndex(1));
   \   00000084   0100A0E3           MOV      R0,#+1
   \   00000088   2E0100EF           SWI      +302
   \   0000008C   0080A0E1           MOV      R8,R0
   \   00000090   0100A0E3           MOV      R0,#+1
   \   00000094   2E0100EF           SWI      +302
   \   00000098   00012DE9           PUSH     {R8}
   \   0000009C   01002DE9           PUSH     {R0}
   \   000000A0   0010A0E3           MOV      R1,#+0
   \   000000A4   0000A0E3           MOV      R0,#+0
   \   000000A8   01002DE9           PUSH     {R0}
   \   000000AC   01002DE9           PUSH     {R0}
   \   000000B0   01002DE9           PUSH     {R0}
   \   000000B4   1C009DE5           LDR      R0,[SP, #+28]
   \   000000B8   013040E2           SUB      R3,R0,#+1
   \   000000BC   14009DE5           LDR      R0,[SP, #+20]
   \   000000C0   012040E2           SUB      R2,R0,#+1
   \   000000C4   0000A0E3           MOV      R0,#+0
   \   000000C8   500100EF           SWI      +336
   \   000000CC   40139FE5           LDR      R1,??OnRedraw_1  ;; `?<Constant "PMU-MON">`
   \   000000D0   2C008DE2           ADD      R0,SP,#+44
     72            
     73            wsprintf(&ws, "PMU-MON");
   \   000000D4   240100EF           SWI      +292
     74            DrawString(&ws, MYXDISP, MYYDISP, scr_w-MYXDISP, scr_h+header_h, FONT_SMALL, TEXT_ALIGNLEFT, GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(23));
   \   000000D8   1700A0E3           MOV      R0,#+23
   \   000000DC   2E0100EF           SWI      +302
   \   000000E0   0090A0E1           MOV      R9,R0
   \   000000E4   0000A0E3           MOV      R0,#+0
   \   000000E8   2E0100EF           SWI      +302
   \   000000EC   1C109DE5           LDR      R1,[SP, #+28]
   \   000000F0   00022DE9           PUSH     {R9}
   \   000000F4   01002DE9           PUSH     {R0}
   \   000000F8   018086E0           ADD      R8,R6,R1
   \   000000FC   0720A0E1           MOV      R2,R7
   \   00000100   0510A0E1           MOV      R1,R5
   \   00000104   0100A0E3           MOV      R0,#+1
   \   00000108   01002DE9           PUSH     {R0}
   \   0000010C   0800A0E3           MOV      R0,#+8
   \   00000110   01002DE9           PUSH     {R0}
   \   00000114   0800A0E1           MOV      R0,R8
   \   00000118   01002DE9           PUSH     {R0}
   \   0000011C   28009DE5           LDR      R0,[SP, #+40]
   \   00000120   053040E0           SUB      R3,R0,R5
   \   00000124   40008DE2           ADD      R0,SP,#+64
   \   00000128   4C0100EF           SWI      +332
   \   0000012C   28D08DE2           ADD      SP,SP,#+40
     75          
     76            if(page!=1)
   \   00000130   040094E5           LDR      R0,[R4, #+4]
   \   00000134   010050E3           CMP      R0,#+1
   \   00000138   0900000A           BEQ      ??OnRedraw_2
     77            {
     78              wsprintf(&ws, "PAGE-2");
   \   0000013C   D4129FE5           LDR      R1,??OnRedraw_1+0x4  ;; `?<Constant "PMU-MON">` + 8
   \   00000140   18008DE2           ADD      R0,SP,#+24
   \   00000144   240100EF           SWI      +292
     79              _reg_buf=reg_buf+page_size;
   \   00000148   080094E5           LDR      R0,[R4, #+8]
   \   0000014C   040080E0           ADD      R0,R0,R4
   \   00000150   242080E2           ADD      R2,R0,#+36
   \   00000154   10208DE5           STR      R2,[SP, #+16]
     80              _reg_buf_prev=reg_buf_prev+page_size;
   \   00000158   B00080E2           ADD      R0,R0,#+176
   \   0000015C   14008DE5           STR      R0,[SP, #+20]
   \   00000160   020000EA           B        ??OnRedraw_3
     81            }
     82            else
     83               wsprintf(&ws, "PAGE-1");
   \                     ??OnRedraw_2:
   \   00000164   B0129FE5           LDR      R1,??OnRedraw_1+0x8  ;; `?<Constant "PMU-MON">` + 16
   \   00000168   18008DE2           ADD      R0,SP,#+24
   \   0000016C   240100EF           SWI      +292
     84            
     85            DrawString(&ws, MYXDISP, MYYDISP, scr_w-MYXDISP-2, scr_h+header_h, FONT_SMALL, TEXT_ALIGNRIGHT, GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(23));
   \                     ??OnRedraw_3:
   \   00000170   1700A0E3           MOV      R0,#+23
   \   00000174   2E0100EF           SWI      +302
   \   00000178   0090A0E1           MOV      R9,R0
   \   0000017C   0000A0E3           MOV      R0,#+0
   \   00000180   2E0100EF           SWI      +302
   \   00000184   00022DE9           PUSH     {R9}
   \   00000188   01002DE9           PUSH     {R0}
   \   0000018C   0720A0E1           MOV      R2,R7
   \   00000190   0510A0E1           MOV      R1,R5
     86          
     87            int x_offset=MYXDISP;
   \   00000194   05A0A0E1           MOV      R10,R5
   \   00000198   0400A0E3           MOV      R0,#+4
   \   0000019C   01002DE9           PUSH     {R0}
     88            int y_offset=MYYDISP+header_h; 
   \   000001A0   07B086E0           ADD      R11,R6,R7
     89            
     90            for(int i=0; i < page_size; i++)
   \   000001A4   0060A0E3           MOV      R6,#+0
   \   000001A8   0800A0E3           MOV      R0,#+8
   \   000001AC   01002DE9           PUSH     {R0}
   \   000001B0   00012DE9           PUSH     {R8}
   \   000001B4   14009DE5           LDR      R0,[SP, #+20]
   \   000001B8   050040E0           SUB      R0,R0,R5
   \   000001BC   023040E2           SUB      R3,R0,#+2
   \   000001C0   2C008DE2           ADD      R0,SP,#+44
   \   000001C4   4C0100EF           SWI      +332
   \   000001C8   080094E5           LDR      R0,[R4, #+8]
   \   000001CC   14D08DE2           ADD      SP,SP,#+20
   \   000001D0   010050E3           CMP      R0,#+1
   \   000001D4   670000AA           BGE      ??OnRedraw_4
   \   000001D8   690000EA           B        ??OnRedraw_5
     91            {
     92              rc[i].x=x_offset;
   \                     ??OnRedraw_6:
   \   000001DC   2C008DE2           ADD      R0,SP,#+44
   \   000001E0   867180E0           ADD      R7,R0,R6, LSL #+3
   \   000001E4   B0A0C7E1           STRH     R10,[R7, #+0]
     93              rc[i].y=y_offset;
   \   000001E8   B2B0C7E1           STRH     R11,[R7, #+2]
     94              rc[i].x2=x_offset+rec_w;
   \   000001EC   0C109DE5           LDR      R1,[SP, #+12]
     95              rc[i].y2=y_offset+rec_h; 
     96              
     97              x_offset+=rec_w+2;
     98              if (i>0 && (i+1)%8==0)
   \   000001F0   019086E2           ADD      R9,R6,#+1
   \   000001F4   0A0081E0           ADD      R0,R1,R10
   \   000001F8   B400C7E1           STRH     R0,[R7, #+4]
   \   000001FC   04109DE5           LDR      R1,[SP, #+4]
   \   00000200   010056E3           CMP      R6,#+1
   \   00000204   0B8081E0           ADD      R8,R1,R11
   \   00000208   B680C7E1           STRH     R8,[R7, #+6]
   \   0000020C   0C009DE5           LDR      R0,[SP, #+12]
   \   00000210   020080E2           ADD      R0,R0,#+2
   \   00000214   0AA080E0           ADD      R10,R0,R10
   \   00000218   080000BA           BLT      ??OnRedraw_7
   \   0000021C   4901A0E1           ASR      R0,R9,#+2
   \   00000220   A00E89E0           ADD      R0,R9,R0, LSR #+29
   \   00000224   C001A0E1           ASR      R0,R0,#+3
   \   00000228   800159E0           SUBS     R0,R9,R0, LSL #+3
   \   0000022C   0300001A           BNE      ??OnRedraw_7
     99              {
    100                x_offset=MYXDISP;
    101                y_offset+=rec_h+2;
   \   00000230   04009DE5           LDR      R0,[SP, #+4]
   \   00000234   05A0A0E1           MOV      R10,R5
   \   00000238   020080E2           ADD      R0,R0,#+2
   \   0000023C   0BB080E0           ADD      R11,R0,R11
    102               }
    103              
    104              char* color_rec_fon=GetPaletteAdrByColorIndex(5);
   \                     ??OnRedraw_7:
   \   00000240   0500A0E3           MOV      R0,#+5
   \   00000244   2E0100EF           SWI      +302
    105              if(ready > 1 && _reg_buf[i] != _reg_buf_prev[i]) color_rec_fon=GetPaletteAdrByColorIndex(2); 
   \   00000248   001094E5           LDR      R1,[R4, #+0]
   \   0000024C   020051E3           CMP      R1,#+2
   \   00000250   070000BA           BLT      ??OnRedraw_8
   \   00000254   10109DE5           LDR      R1,[SP, #+16]
   \   00000258   14209DE5           LDR      R2,[SP, #+20]
   \   0000025C   0110D6E7           LDRB     R1,[R6, +R1]
   \   00000260   0220D6E7           LDRB     R2,[R6, +R2]
   \   00000264   020051E1           CMP      R1,R2
   \   00000268   0100000A           BEQ      ??OnRedraw_8
   \   0000026C   0200A0E3           MOV      R0,#+2
   \   00000270   2E0100EF           SWI      +302
    106              
    107              DrawRectangle(rc[i].x, rc[i].y, rc[i].x2, rc[i].y2, 0, color_rec_fon, color_rec_fon);
   \                     ??OnRedraw_8:
   \   00000274   0010A0E1           MOV      R1,R0
   \   00000278   02002DE9           PUSH     {R1}
   \   0000027C   01002DE9           PUSH     {R0}
   \   00000280   0838A0E1           MOV      R3,R8, LSL #+16
   \   00000284   4338A0E1           MOV      R3,R3, ASR #+16
   \   00000288   0000A0E3           MOV      R0,#+0
   \   0000028C   01002DE9           PUSH     {R0}
   \   00000290   F420D7E1           LDRSH    R2,[R7, #+4]
   \   00000294   F210D7E1           LDRSH    R1,[R7, #+2]
   \   00000298   F000D7E1           LDRSH    R0,[R7, #+0]
   \   0000029C   B40100EF           SWI      +436
    108              if(i==cursor)
   \   000002A0   0C0094E5           LDR      R0,[R4, #+12]
   \   000002A4   0CD08DE2           ADD      SP,SP,#+12
   \   000002A8   000056E1           CMP      R6,R0
   \   000002AC   0E00001A           BNE      ??OnRedraw_9
    109                DrawRectangle(rc[i].x, rc[i].y, rc[i].x2, rc[i].y2, 0, GetPaletteAdrByColorIndex(0), GetPaletteAdrByColorIndex(23));
   \   000002B0   1700A0E3           MOV      R0,#+23
   \   000002B4   2E0100EF           SWI      +302
   \   000002B8   0080A0E1           MOV      R8,R0
   \   000002BC   0000A0E3           MOV      R0,#+0
   \   000002C0   2E0100EF           SWI      +302
   \   000002C4   00012DE9           PUSH     {R8}
   \   000002C8   01002DE9           PUSH     {R0}
   \   000002CC   0000A0E3           MOV      R0,#+0
   \   000002D0   01002DE9           PUSH     {R0}
   \   000002D4   F630D7E1           LDRSH    R3,[R7, #+6]
   \   000002D8   F420D7E1           LDRSH    R2,[R7, #+4]
   \   000002DC   F210D7E1           LDRSH    R1,[R7, #+2]
   \   000002E0   F000D7E1           LDRSH    R0,[R7, #+0]
   \   000002E4   B40100EF           SWI      +436
   \   000002E8   0CD08DE2           ADD      SP,SP,#+12
    110              wsprintf(&ws, "%02X", _reg_buf[i]);
   \                     ??OnRedraw_9:
   \   000002EC   10009DE5           LDR      R0,[SP, #+16]
   \   000002F0   28119FE5           LDR      R1,??OnRedraw_1+0xC  ;; `?<Constant "PMU-MON">` + 24
   \   000002F4   0020D6E7           LDRB     R2,[R6, +R0]
   \   000002F8   18008DE2           ADD      R0,SP,#+24
   \   000002FC   240100EF           SWI      +292
    111              int font_h=GetFontYSIZE(FONT_SMALL);   
   \   00000300   0800A0E3           MOV      R0,#+8
   \   00000304   C50100EF           SWI      +453
   \   00000308   0060A0E1           MOV      R6,R0
    112              int y_text_offset=(rec_h-font_h)/2;
    113              if(ready)
   \   0000030C   000094E5           LDR      R0,[R4, #+0]
   \   00000310   000050E3           CMP      R0,#+0
   \   00000314   1600000A           BEQ      ??OnRedraw_10
    114                DrawString(&ws, rc[i].x, rc[i].y+y_text_offset, rc[i].x2, rc[i].y2, FONT_SMALL, TEXT_ALIGNMIDDLE, GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(23));
   \   00000318   1700A0E3           MOV      R0,#+23
   \   0000031C   2E0100EF           SWI      +302
   \   00000320   0080A0E1           MOV      R8,R0
   \   00000324   0000A0E3           MOV      R0,#+0
   \   00000328   2E0100EF           SWI      +302
   \   0000032C   04109DE5           LDR      R1,[SP, #+4]
   \   00000330   00012DE9           PUSH     {R8}
   \   00000334   01002DE9           PUSH     {R0}
   \   00000338   061041E0           SUB      R1,R1,R6
   \   0000033C   A11F81E0           ADD      R1,R1,R1, LSR #+31
   \   00000340   0200A0E3           MOV      R0,#+2
   \   00000344   01002DE9           PUSH     {R0}
   \   00000348   0800A0E3           MOV      R0,#+8
   \   0000034C   01002DE9           PUSH     {R0}
   \   00000350   F600D7E1           LDRSH    R0,[R7, #+6]
   \   00000354   01002DE9           PUSH     {R0}
   \   00000358   F430D7E1           LDRSH    R3,[R7, #+4]
   \   0000035C   F200D7E1           LDRSH    R0,[R7, #+2]
   \   00000360   C12080E0           ADD      R2,R0,R1, ASR #+1
   \   00000364   F010D7E1           LDRSH    R1,[R7, #+0]
   \   00000368   2C008DE2           ADD      R0,SP,#+44
   \   0000036C   4C0100EF           SWI      +332
   \   00000370   14D08DE2           ADD      SP,SP,#+20
    115            }
   \                     ??OnRedraw_10:
   \   00000374   0960A0E1           MOV      R6,R9
   \                     ??OnRedraw_4:
   \   00000378   080094E5           LDR      R0,[R4, #+8]
   \   0000037C   000056E1           CMP      R6,R0
   \   00000380   95FFFFBA           BLT      ??OnRedraw_6
    116          
    117            wsprintf(&ws, "REG 0x%02X", cursor);
   \                     ??OnRedraw_5:
   \   00000384   0C2094E5           LDR      R2,[R4, #+12]
   \   00000388   94109FE5           LDR      R1,??OnRedraw_1+0x10  ;; `?<Constant "PMU-MON">` + 32
   \   0000038C   18008DE2           ADD      R0,SP,#+24
   \   00000390   240100EF           SWI      +292
    118            DrawString(&ws, MYXDISP, scr_h-GetFontYSIZE(FONT_SMALL_BOLD)-8, scr_w-MYXDISP-2, scr_h, FONT_SMALL_BOLD, TEXT_ALIGNLEFT, GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(23));  
   \   00000394   1700A0E3           MOV      R0,#+23
   \   00000398   2E0100EF           SWI      +302
   \   0000039C   0060A0E1           MOV      R6,R0
   \   000003A0   0000A0E3           MOV      R0,#+0
   \   000003A4   2E0100EF           SWI      +302
   \   000003A8   0070A0E1           MOV      R7,R0
   \   000003AC   0900A0E3           MOV      R0,#+9
   \   000003B0   C50100EF           SWI      +453
   \   000003B4   40002DE9           PUSH     {R6}
   \   000003B8   80002DE9           PUSH     {R7}
   \   000003BC   0110A0E3           MOV      R1,#+1
   \   000003C0   02002DE9           PUSH     {R1}
   \   000003C4   0910A0E3           MOV      R1,#+9
   \   000003C8   02002DE9           PUSH     {R1}
   \   000003CC   18109DE5           LDR      R1,[SP, #+24]
   \   000003D0   02002DE9           PUSH     {R1}
   \   000003D4   14109DE5           LDR      R1,[SP, #+20]
   \   000003D8   051041E0           SUB      R1,R1,R5
   \   000003DC   023041E2           SUB      R3,R1,#+2
   \   000003E0   1C109DE5           LDR      R1,[SP, #+28]
   \   000003E4   000041E0           SUB      R0,R1,R0
   \   000003E8   082040E2           SUB      R2,R0,#+8
   \   000003EC   0510A0E1           MOV      R1,R5
   \   000003F0   2C008DE2           ADD      R0,SP,#+44
   \   000003F4   4C0100EF           SWI      +332
    119            
    120            memcpy(reg_buf_prev, reg_buf, sizeof(reg_buf));
   \   000003F8   8C20A0E3           MOV      R2,#+140
   \   000003FC   241084E2           ADD      R1,R4,#+36
   \   00000400   B00084E2           ADD      R0,R4,#+176
   \   00000404   1E0100EF           SWI      +286
    121            __asm("NOP"); // !MOV PC,Rn
   \   00000408   0000A0E1           NOP              
    122          }
   \   0000040C   4EDE8DE2           ADD      SP,SP,#+1248
   \   00000410   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??OnRedraw_1:
   \   00000414   ........           DC32     `?<Constant "PMU-MON">`
   \   00000418   ........           DC32     `?<Constant "PMU-MON">` + 8
   \   0000041C   ........           DC32     `?<Constant "PMU-MON">` + 16
   \   00000420   ........           DC32     `?<Constant "PMU-MON">` + 24
   \   00000424   ........           DC32     `?<Constant "PMU-MON">` + 32
    123          
    124          

   \                                 In segment CODE, align 4, keep-with-next
    125          static void onCreate(MAIN_GUI *data, void *(*malloc_adr)(int))
    126          {
   \                     onCreate:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    127            data->ws1=AllocWS(256);
   \   00000008   400FA0E3           MOV      R0,#+256
   \   0000000C   250100EF           SWI      +293
    128            data->gui.state=1;
    129            GBS_StartTimerProc(&tmr,TMR_SECOND,do_tmr);
   \   00000010   ........           LDR      R2,??DataTable4  ;; do_tmr
   \   00000014   340084E5           STR      R0,[R4, #+52]
   \   00000018   0100A0E3           MOV      R0,#+1
   \   0000001C   0C00C4E5           STRB     R0,[R4, #+12]
   \   00000020   ........           LDR      R0,??DataTable6  ;; ready + 20
   \   00000024   D810A0E3           MOV      R1,#+216
   \   00000028   4D0000EF           SWI      +77
    130          }
   \   0000002C   1080BDE8           POP      {R4,PC}          ;; return
    131          

   \                                 In segment CODE, align 4, keep-with-next
    132          static void onClose(MAIN_GUI *data, void (*mfree_adr)(void *))
    133          {
   \                     onClose:
   \   00000000   00402DE9           PUSH     {LR}
    134            data->gui.state=0;
   \   00000004   0010A0E3           MOV      R1,#+0
   \   00000008   0C10C0E5           STRB     R1,[R0, #+12]
    135            FreeWS(data->ws1);
   \   0000000C   340090E5           LDR      R0,[R0, #+52]
   \   00000010   290100EF           SWI      +297
    136            GBS_DelTimer(&tmr);
   \   00000014   ........           LDR      R0,??DataTable6  ;; ready + 20
   \   00000018   8C0100EF           SWI      +396
    137          }
   \   0000001C   0080BDE8           POP      {PC}             ;; return
    138          

   \                                 In segment CODE, align 4, keep-with-next
    139          static void onFocus(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))
    140          {
   \                     onFocus:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    141            #ifdef ELKA
    142            DisableIconBar(1);
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   3B0200EF           SWI      +571
    143            #endif 
    144            data->gui.state=2;
   \   00000010   0200A0E3           MOV      R0,#+2
   \   00000014   0C00C4E5           STRB     R0,[R4, #+12]
    145            DisableIDLETMR();
   \   00000018   7F0100EF           SWI      +383
    146            //SetCpuClockLow(2); 
    147          }
   \   0000001C   1080BDE8           POP      {R4,PC}          ;; return
    148          

   \                                 In segment CODE, align 4, keep-with-next
    149          static void onUnfocus(MAIN_GUI *data, void (*mfree_adr)(void *))
    150          {
   \                     onUnfocus:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    151            #ifdef ELKA
    152            DisableIconBar(0);
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   3B0200EF           SWI      +571
    153            #endif 
    154            if (data->gui.state!=2) return;
   \   00000010   0C00D4E5           LDRB     R0,[R4, #+12]
   \   00000014   020050E3           CMP      R0,#+2
    155            data->gui.state=1;
   \   00000018   0100A003           MOVEQ    R0,#+1
   \   0000001C   0C00C405           STRBEQ   R0,[R4, #+12]
    156          }
   \   00000020   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In segment DATA_I, align 4, align-sorted
   \                     ready:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for ready>`
   \                     page:
   \   00000004                      DS8 4
   \   00000008                      REQUIRE `?<Initializer for page>`
   \                     page_size:
   \   00000008                      DS8 4
   \   0000000C                      REQUIRE `?<Initializer for page_size>`
   \                     cursor:
   \   0000000C                      DS8 4
   \   00000010                      REQUIRE `?<Initializer for cursor>`
    157          
    158          char dat42;
   \                     dat42:
   \   00000010                      DS8 1
   \   00000011                      REQUIRE `?<Initializer for dat42>`
    159          char dat44;
   \                     dat44:
   \   00000011                      DS8 1
   \   00000012                      REQUIRE `?<Initializer for dat44>`
    160          char dat50;
   \                     dat50:
   \   00000012                      DS8 1
   \   00000013                      REQUIRE `?<Initializer for dat50>`
    161          char dat46;
   \                     dat46:
   \   00000013                      DS8 1
   \   00000014                      REQUIRE `?<Initializer for dat46>`
   \                     tmr:
   \   00000014                      DS8 16
   \   00000024                      REQUIRE `?<Initializer for tmr>`
   \                     reg_buf:
   \   00000024                      DS8 140
   \   000000B0                      REQUIRE `?<Initializer for reg_buf>`
   \                     reg_buf_prev:
   \   000000B0                      DS8 140
   \   0000013C                      REQUIRE `?<Initializer for reg_buf_prev>`
    162          

   \                                 In segment CODE, align 4, keep-with-next
    163          static int OnKey(MAIN_GUI *data, GUI_MSG *msg)
    164          {
   \                     OnKey:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    165            if (msg->gbsmsg->msg==KEY_DOWN)
   \   00000004   040091E5           LDR      R0,[R1, #+4]
   \   00000008   ........           LDR      R5,??DataTable7  ;; ready
   \   0000000C   041090E5           LDR      R1,[R0, #+4]
   \   00000010   0240A0E3           MOV      R4,#+2
   \   00000014   9320A0E3           MOV      R2,#+147
   \   00000018   402F82E3           ORR      R2,R2,#0x100
   \   0000001C   020051E1           CMP      R1,R2
   \   00000020   3900001A           BNE      ??OnKey_1
    166            {
    167              switch(msg->gbsmsg->submess)
   \   00000024   080090E5           LDR      R0,[R0, #+8]
   \   00000028   0C1095E5           LDR      R1,[R5, #+12]
   \   0000002C   040040E2           SUB      R0,R0,#+4
   \   00000030   3A0050E3           CMP      R0,#+58
   \   00000034   3400008A           BHI      ??OnKey_1
   \   00000038   012F8FE2           ADR      R2,??OnKey_0
   \   0000003C   0020D2E7           LDRB     R2,[R2, R0]
   \   00000040   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??OnKey_0:
   \   00000044   51313131           DC8      +81,+49,+49,+49
   \   00000048   31313131           DC8      +49,+49,+49,+49
   \   0000004C   31313131           DC8      +49,+49,+49,+49
   \   00000050   31313131           DC8      +49,+49,+49,+49
   \   00000054   31313131           DC8      +49,+49,+49,+49
   \   00000058   31313131           DC8      +49,+49,+49,+49
   \   0000005C   31313131           DC8      +49,+49,+49,+49
   \   00000060   31313131           DC8      +49,+49,+49,+49
   \   00000064   31313131           DC8      +49,+49,+49,+49
   \   00000068   31311531           DC8      +49,+49,+21,+49
   \   0000006C   31313131           DC8      +49,+49,+49,+49
   \   00000070   310E1131           DC8      +49,+14,+17,+49
   \   00000074   31313131           DC8      +49,+49,+49,+49
   \   00000078   31313147           DC8      +49,+49,+49,+71
   \   0000007C   4B3E4300           DC8      +75,+62,+67,+0
    168              {
    169              case '1': page=1;
   \                     ??OnKey_2:
   \   00000080   0100A0E3           MOV      R0,#+1
   \   00000084   040085E5           STR      R0,[R5, #+4]
   \   00000088   220000EA           B        ??OnKey_3
    170              break;
    171                
    172              case '2': page=2;
   \                     ??OnKey_4:
   \   0000008C   044085E5           STR      R4,[R5, #+4]
   \   00000090   720100EF           SWI      +370
   \   00000094   0000A0E3           MOV      R0,#+0
   \   00000098   3080BDE8           POP      {R4,R5,PC}
    173              break;
    174              
    175              case '*':
    176                dat44=0x24;
   \                     ??OnKey_5:
   \   0000009C   2400A0E3           MOV      R0,#+36
   \   000000A0   1100C5E5           STRB     R0,[R5, #+17]
    177                i2cw_pmu(0x44, &dat44, NULL, NULL);
   \   000000A4   0030A0E3           MOV      R3,#+0
   \   000000A8   0020A0E3           MOV      R2,#+0
   \   000000AC   111085E2           ADD      R1,R5,#+17
   \   000000B0   4400A0E3           MOV      R0,#+68
   \   000000B4   ........           _BLF     i2cw_pmu,??i2cw_pmu??rA
    178                dat46=0x5f;
   \   000000B8   5F00A0E3           MOV      R0,#+95
   \   000000BC   1300C5E5           STRB     R0,[R5, #+19]
    179                i2cw_pmu(0x46, &dat46, NULL, NULL);
   \   000000C0   0030A0E3           MOV      R3,#+0
   \   000000C4   0320A0E1           MOV      R2,R3
   \   000000C8   131085E2           ADD      R1,R5,#+19
   \   000000CC   4600A0E3           MOV      R0,#+70
   \   000000D0   ........           _BLF     i2cw_pmu,??i2cw_pmu??rA
    180                dat50=0x82;
   \   000000D4   8200A0E3           MOV      R0,#+130
   \   000000D8   1200C5E5           STRB     R0,[R5, #+18]
    181                i2cw_pmu(0x50, &dat50, NULL, NULL);       
   \   000000DC   0030A0E3           MOV      R3,#+0
   \   000000E0   0320A0E1           MOV      R2,R3
   \   000000E4   121085E2           ADD      R1,R5,#+18
   \   000000E8   5000A0E3           MOV      R0,#+80
   \   000000EC   ........           _BLF     i2cw_pmu,??i2cw_pmu??rA
    182                dat42=8;
   \   000000F0   0800A0E3           MOV      R0,#+8
   \   000000F4   1000C5E5           STRB     R0,[R5, #+16]
    183                i2cw_pmu(0x42, &dat42, NULL, NULL);     
   \   000000F8   0030A0E3           MOV      R3,#+0
   \   000000FC   0320A0E1           MOV      R2,R3
   \   00000100   101085E2           ADD      R1,R5,#+16
   \   00000104   4200A0E3           MOV      R0,#+66
   \   00000108   ........           _BLF     i2cw_pmu,??i2cw_pmu??rA
    184                break;
    185                
    186              case LEFT_BUTTON:
    187                if(cursor > 0)cursor--;
    188                break;
    189                
    190              case RIGHT_BUTTON:
    191                if(cursor < (sizeof(reg_buf)-1)) cursor++;
    192                break;
    193                
    194              case UP_BUTTON:
    195                if(cursor >= 8)cursor-=8;
    196                break;
    197                
    198              case DOWN_BUTTON:
    199                if((cursor +8) <= (page_size-1)) cursor+=8;
    200                break;      
    201          
    202              case RIGHT_SOFT:
    203                return (1);
    204              }
    205            }
    206            if(page==1 && cursor > page_size-1)
   \                     ??OnKey_1:
   \   0000010C   040095E5           LDR      R0,[R5, #+4]
   \   00000110   010050E3           CMP      R0,#+1
   \   00000114   0600001A           BNE      ??OnKey_6
   \                     ??OnKey_3:
   \   00000118   080095E5           LDR      R0,[R5, #+8]
   \   0000011C   0C1095E5           LDR      R1,[R5, #+12]
   \   00000120   010040E2           SUB      R0,R0,#+1
   \   00000124   010050E1           CMP      R0,R1
    207            {
    208              page=2;
   \   00000128   044085B5           STRLT    R4,[R5, #+4]
    209              cursor=0;
   \   0000012C   0000A0B3           MOVLT    R0,#+0
   \   00000130   0C0085B5           STRLT    R0,[R5, #+12]
    210            }
    211            REDRAW();
   \                     ??OnKey_6:
   \   00000134   720100EF           SWI      +370
    212            return(0);
   \   00000138   0000A0E3           MOV      R0,#+0
   \   0000013C   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??OnKey_7:
   \   00000140   010051E3           CMP      R1,#+1
   \   00000144   F0FFFFBA           BLT      ??OnKey_1
   \   00000148   010041E2           SUB      R0,R1,#+1
   \                     ??OnKey_8:
   \   0000014C   0C0085E5           STR      R0,[R5, #+12]
   \   00000150   EDFFFFEA           B        ??OnKey_1
   \                     ??OnKey_9:
   \   00000154   8B0051E3           CMP      R1,#+139
   \   00000158   EBFFFF2A           BCS      ??OnKey_1
   \   0000015C   010081E2           ADD      R0,R1,#+1
   \   00000160   F9FFFFEA           B        ??OnKey_8
   \                     ??OnKey_10:
   \   00000164   080051E3           CMP      R1,#+8
   \   00000168   E7FFFFBA           BLT      ??OnKey_1
   \   0000016C   080041E2           SUB      R0,R1,#+8
   \   00000170   F5FFFFEA           B        ??OnKey_8
   \                     ??OnKey_11:
   \   00000174   080081E2           ADD      R0,R1,#+8
   \   00000178   081095E5           LDR      R1,[R5, #+8]
   \   0000017C   011041E2           SUB      R1,R1,#+1
   \   00000180   000051E1           CMP      R1,R0
   \   00000184   E0FFFFBA           BLT      ??OnKey_1
   \   00000188   EFFFFFEA           B        ??OnKey_8
   \                     ??OnKey_12:
   \   0000018C   0100A0E3           MOV      R0,#+1
   \   00000190   3080BDE8           POP      {R4,R5,PC}
    213          }
    214          
    215          extern void kill_data(void *p, void (*func_p)(void *));
    216          

   \                                 In segment CODE, align 4, keep-with-next
    217          int method8(void){return(0);}
   \                     method8:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
    218          int method9(void){return(0);}
   \                     method9:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
    219          const void * const gui_methods[11]={
    220            (void *)OnRedraw,
    221            (void *)onCreate,
    222            (void *)onClose,
    223            (void *)onFocus,
    224            (void *)onUnfocus,
    225            (void *)OnKey,
    226            0,
    227            (void *)kill_data,
    228            (void *)method8,
    229            (void *)method9,
    230            0
    231          };
    232          

   \                                 In segment CODE, align 4, keep-with-next
    233          static void maincsm_oncreate(CSM_RAM *data)
    234          {
   \                     maincsm_oncreate:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    235            static const RECT Canvas={0,0,0,0};
    236            MAIN_GUI *main_gui=malloc(sizeof(MAIN_GUI));
   \   00000008   3800A0E3           MOV      R0,#+56
   \   0000000C   140000EF           SWI      +20
   \   00000010   0050A0E1           MOV      R5,R0
    237            MAIN_CSM *csm=(MAIN_CSM *)data;
    238            zeromem(main_gui,sizeof(MAIN_GUI));
   \   00000014   3810A0E3           MOV      R1,#+56
   \   00000018   1D0100EF           SWI      +285
    239            patch_rect((RECT*)&Canvas,0,0,ScreenW()-1,ScreenH()-1);
   \   0000001C   898100EF           SWI      +33161
   \   00000020   0060A0E1           MOV      R6,R0
   \   00000024   888100EF           SWI      +33160
   \   00000028   60209FE5           LDR      R2,??maincsm_oncreate_0  ;; ??Canvas
   \   0000002C   011046E2           SUB      R1,R6,#+1
   \   00000030   010040E2           SUB      R0,R0,#+1
   \   00000034   0060A0E3           MOV      R6,#+0
   \   00000038   006082E5           STR      R6,[R2, #+0]
   \   0000003C   B400C2E1           STRH     R0,[R2, #+4]
   \   00000040   B610C2E1           STRH     R1,[R2, #+6]
    240            main_gui->gui.canvas=(void *)(&Canvas);
   \   00000044   002085E5           STR      R2,[R5, #+0]
    241            main_gui->gui.methods=(void *)gui_methods;
   \   00000048   080082E2           ADD      R0,R2,#+8
   \   0000004C   040085E5           STR      R0,[R5, #+4]
    242            main_gui->gui.color1=0x65;
   \   00000050   6500A0E3           MOV      R0,#+101
   \   00000054   100085E5           STR      R0,[R5, #+16]
    243            main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
   \   00000058   158000EF           SWI      +32789
   \   0000005C   200085E5           STR      R0,[R5, #+32]
    244            main_gui->gui.unk10=2;
   \   00000060   0200A0E3           MOV      R0,#+2
   \   00000064   2C0085E5           STR      R0,[R5, #+44]
    245            main_gui->gui.flag30=1;
   \   00000068   0100A0E3           MOV      R0,#+1
   \   0000006C   300085E5           STR      R0,[R5, #+48]
    246            csm->csm.state=0;
   \   00000070   106084E5           STR      R6,[R4, #+16]
    247            csm->csm.unk1=0;
   \   00000074   146084E5           STR      R6,[R4, #+20]
    248          
    249            maingui_id=csm->gui_id=CreateGUI(main_gui);
   \   00000078   0500A0E1           MOV      R0,R5
   \   0000007C   370100EF           SWI      +311
   \   00000080   0C109FE5           LDR      R1,??maincsm_oncreate_0+0x4  ;; maingui_id
   \   00000084   280084E5           STR      R0,[R4, #+40]
   \   00000088   000081E5           STR      R0,[R1, #+0]
    250          }
   \   0000008C   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??maincsm_oncreate_0:
   \   00000090   ........           DC32     ??Canvas
   \   00000094   ........           DC32     maingui_id

   \                                 In segment DATA_C, align 4, align-sorted
   \                     ??Canvas:
   \   00000000   000000000000       DC16 0, 0, 0, 0
   \              0000        
   \                     gui_methods:
   \   00000008   ............       DC32 OnRedraw, onCreate, onClose, onFocus, onUnfocus, OnKey, 0H
   \              ............
   \              ............
   \              ............
   \              00000000    
   \   00000024   ............       DC32 kill_data, method8, method9, 0H
   \              ............
   \              00000000    
    251          
    252          #pragma segment="ELFBEGIN"

   \                                 In segment CODE, align 4, keep-with-next
    253          void ElfKiller(void)
    254          {
   \                     ElfKiller:
   \   00000000   00402DE9           PUSH     {LR}
    255            kill_data(__segment_begin("ELFBEGIN"),(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??ElfKiller_0  ;; SFB(ELFBEGIN)
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??ElfKiller_0:
   \   00000018   ........           DC32     SFB(ELFBEGIN)
    256          }
    257          

   \                                 In segment CODE, align 4, keep-with-next
    258          static void maincsm_onclose(CSM_RAM *data)
    259          { 
    260            SUBPROC((void *)ElfKiller);
   \                     maincsm_onclose:
   \   00000000   08009FE5           LDR      R0,??maincsm_onclose_0  ;; ElfKiller
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   710100EF           SWI      +369
    261          }
   \   0000000C   0080BDE8           POP      {PC}             ;; return
   \                     ??maincsm_onclose_0:
   \   00000010   ........           DC32     ElfKiller
    262          

   \                                 In segment CODE, align 4, keep-with-next
    263          static int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
    264          {
    265            MAIN_CSM *csm=(MAIN_CSM*)data;
    266            if ((msg->msg==MSG_GUI_DESTROYED)&&((int)msg->data0==csm->gui_id))
   \                     maincsm_onmessage:
   \   00000000   042091E5           LDR      R2,[R1, #+4]
   \   00000004   0E30A0E3           MOV      R3,#+14
   \   00000008   643C83E3           ORR      R3,R3,#0x6400
   \   0000000C   030052E1           CMP      R2,R3
   \   00000010   0400001A           BNE      ??maincsm_onmessage_0
   \   00000014   0C1091E5           LDR      R1,[R1, #+12]
   \   00000018   282090E5           LDR      R2,[R0, #+40]
   \   0000001C   020051E1           CMP      R1,R2
    267            {
    268              csm->csm.state=-3;
   \   00000020   0210E003           MVNEQ    R1,#+2
   \   00000024   10108005           STREQ    R1,[R0, #+16]
    269            }
    270          
    271            return(1);
   \                     ??maincsm_onmessage_0:
   \   00000028   0100A0E3           MOV      R0,#+1
   \   0000002C   1EFF2FE1           BX       LR               ;; return
    272          }
    273          

   \                                 In segment DATA_Z, align 4, align-sorted
    274          static unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280

   \                                 In segment DATA_C, align 4, align-sorted
    275          static const int minus11=-11;
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11
    276          
    277          static const struct
    278          {
    279            CSM_DESC maincsm;
    280            WSHDR maincsm_name;

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "PmuMon">`:
   \   00000000   506D754D6F6E       DC8 "PmuMon"
   \              00          
   \   00000007   00                 DC8 0
   \   00000008   ............       DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
   \              ....00000000
   \              000000000000
   \              000000000000
   \              ........    
   \   00000024   2C0000000100       DC32 44, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              0000........
   \              ........CCCC
   \              AA5555AA3333
   \              00000000    
   \   00000040   8B00               DC16 139
   \   00000042   0000               DC8 0, 0
    281          }MAINCSM =
    282          {
    283            {
    284            maincsm_onmessage,
    285            maincsm_oncreate,
    286          #ifdef NEWSGOLD
    287            0,
    288            0,
    289            0,
    290            0,
    291          #endif
    292            maincsm_onclose,
    293            sizeof(MAIN_CSM),
    294            1,
    295            &minus11
    296            },
    297            {
    298              maincsm_name_body,
    299              NAMECSM_MAGIC1,
    300              NAMECSM_MAGIC2,
    301              0x0,
    302              139
    303            }
    304          };
    305          

   \                                 In segment CODE, align 4, keep-with-next
    306          void UpdateCSMname(void)
    307          {
    308            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"PmuMon");
   \                     UpdateCSMname:
   \   00000000   10009FE5           LDR      R0,??UpdateCSMname_0  ;; `?<Constant "PmuMon">`
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   300080E2           ADD      R0,R0,#+48
   \   00000010   240100EF           SWI      +292
    309          }
   \   00000014   0080BDE8           POP      {PC}             ;; return
   \                     ??UpdateCSMname_0:
   \   00000018   ........           DC32     `?<Constant "PmuMon">`
    310          

   \                                 In segment CODE, align 4, keep-with-next
    311          int main(char *exename, char *fname)
    312          { 
   \                     main:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
    313            MAIN_CSM main_csm;
    314            zeromem(&main_csm, sizeof(MAIN_CSM));
   \   00000008   2C10A0E3           MOV      R1,#+44
   \   0000000C   0D00A0E1           MOV      R0,SP
   \   00000010   1D0100EF           SWI      +285
    315            UpdateCSMname();
   \   00000014   ........           BL       UpdateCSMname
    316            LockSched();
   \   00000018   460100EF           SWI      +326
    317            CreateCSM(&MAINCSM.maincsm,&main_csm,0);
   \   0000001C   18009FE5           LDR      R0,??main_0      ;; `?<Constant "PmuMon">` + 8
   \   00000020   0020A0E3           MOV      R2,#+0
   \   00000024   0D10A0E1           MOV      R1,SP
   \   00000028   070100EF           SWI      +263
    318            UnlockSched();
   \   0000002C   470100EF           SWI      +327
    319            return 0;
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   2CD08DE2           ADD      SP,SP,#+44
   \   00000038   0080BDE8           POP      {PC}             ;; return
   \                     ??main_0:
   \   0000003C   ........           DC32     `?<Constant "PmuMon">` + 8
    320          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     ready

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     do_tmr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     ready + 20

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     ready

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for ready>`:
   \   00000000   00000000           DC32 0
   \                     `?<Initializer for page>`:
   \   00000004   01000000           DC32 1
   \                     `?<Initializer for page_size>`:
   \   00000008   40000000           DC32 64
   \                     `?<Initializer for cursor>`:
   \   0000000C   00000000           DC32 0
   \                     `?<Initializer for dat42>`:
   \   00000010   00                 DC8 0
   \                     `?<Initializer for dat44>`:
   \   00000011   00                 DC8 0
   \                     `?<Initializer for dat50>`:
   \   00000012   00                 DC8 0
   \                     `?<Initializer for dat46>`:
   \   00000013   00                 DC8 0
   \                     `?<Initializer for tmr>`:
   \   00000014   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for reg_buf>`:
   \   00000024   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000034   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000044   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000054   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000064   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000074   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000084   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000094   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000A4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \                     `?<Initializer for reg_buf_prev>`:
   \   000000B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000100   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000110   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000120   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000130   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000

   \                                 In segment ELFBEGIN, align 1

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "PMU-MON">`:
   \   00000000   504D552D4D4F       DC8 "PMU-MON"
   \              4E00        
   \   00000008   504147452D32       DC8 "PAGE-2"
   \              00          
   \   0000000F   00                 DC8 0
   \   00000010   504147452D31       DC8 "PAGE-1"
   \              00          
   \   00000017   00                 DC8 0
   \   00000018   2530325800         DC8 "%02X"
   \   0000001D   000000             DC8 0, 0, 0
   \   00000020   524547203078       DC8 "REG 0x%02X"
   \              2530325800  
   \   0000002B   00                 DC8 0

   Maximum stack usage in bytes:

     Function          CSTACK
     --------          ------
     ElfKiller             4
     OnKey                12
     OnRedraw           1304
     UpdateCSMname         4
     callback              4
     do_tmr               12
     main                 48
     maincsm_onclose       4
     maincsm_oncreate     16
     maincsm_onmessage     0
     method8               0
     method9               0
     onClose               4
     onCreate              8
     onFocus               8
     onUnfocus             8


   Segment part sizes:

     Function/Label           Bytes
     --------------           -----
     maingui_id                  4
     callback                   28
     do_tmr                     60
     OnRedraw                 1064
     onCreate                   48
     onClose                    32
     onFocus                    32
     onUnfocus                  36
     ready                     316
     OnKey                     404
     method8                     8
     method9                     8
     maincsm_oncreate          152
     Canvas                     52
     ElfKiller                  28
     maincsm_onclose            20
     maincsm_onmessage          48
     maincsm_name_body         280
     minus11                     4
     ?<Constant "PmuMon">       68
     UpdateCSMname              28
     main                       64
     ??DataTable3                4
     ??DataTable4                4
     ??DataTable6                4
     ??DataTable7                4
     ?<Initializer for ready>  316
     ?<Constant "PMU-MON">      44
      Others                   124

 
 2 176 bytes in segment CODE
   168 bytes in segment DATA_C
   316 bytes in segment DATA_I
   316 bytes in segment DATA_ID
   284 bytes in segment DATA_Z
    24 bytes in segment INITTAB
 
 2 076 bytes of CODE  memory (+ 124 bytes shared)
   484 bytes of CONST memory
   600 bytes of DATA  memory

Errors: none
Warnings: 1
