##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    26/Dec/2016  18:06:14 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  E:\Users\alfinant\Documents\Siemens\alfinant\PmuMon\ #
#                       main.c                                               #
#    Command line    =  E:\Users\alfinant\Documents\Siemens\alfinant\PmuMon\ #
#                       main.c -D SGOLD -lCN E:\Users\alfinant\Documents\Sie #
#                       mens\alfinant\PmuMon\Release_SGOLD\List\ -la         #
#                       E:\Users\alfinant\Documents\Siemens\alfinant\PmuMon\ #
#                       Release_SGOLD\List\ -o E:\Users\alfinant\Documents\S #
#                       iemens\alfinant\PmuMon\Release_SGOLD\Obj\ -s9        #
#                       --no_unroll --cpu_mode arm --endian little --cpu     #
#                       ARM926EJ-S --stack_align 4 --interwork -e --fpu      #
#                       None --dlib_config E:\Users\alfinant\Documents\Sieme #
#                       ns\IAR\ARM\LIB\dl5tpainl8n.h -I                      #
#                       E:\Users\alfinant\Documents\Siemens\IAR\ARM\INC\     #
#                       --inline_threshold=2                                 #
#    List file       =  E:\Users\alfinant\Documents\Siemens\alfinant\PmuMon\ #
#                       Release_SGOLD\List\main.lst                          #
#    Object file     =  E:\Users\alfinant\Documents\Siemens\alfinant\PmuMon\ #
#                       Release_SGOLD\Obj\main.r79                           #
#                                                                            #
#                                                                            #
##############################################################################

E:\Users\alfinant\Documents\Siemens\alfinant\PmuMon\main.c
      1          #include "../inc/swilib.h"
      2          #include "../inc/i2c.h"
      3          #include "rect_patcher.h"
      4          
      5          #define TMR_SECOND 216
      6          

   \                                 In segment DATA_I, align 4, align-sorted
      7          GBSTMR tmr;
      8          int ready=0;
   \                     ready:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for ready>`
      9          
     10          int page=1;
   \                     page:
   \   00000004                      DS8 4
   \   00000008                      REQUIRE `?<Initializer for page>`
   \                     tmr:
   \   00000008                      DS8 16
   \   00000018                      REQUIRE `?<Initializer for tmr>`
     11          char reg_buf[140];
   \                     reg_buf:
   \   00000018                      DS8 140
   \   000000A4                      REQUIRE `?<Initializer for reg_buf>`
     12          char reg_buf_prev[140];
   \                     reg_buf_prev:
   \   000000A4                      DS8 140
   \   00000130                      REQUIRE `?<Initializer for reg_buf_prev>`
     13          
     14          typedef struct
     15          {
     16            CSM_RAM csm;
     17            int gui_id;
     18          }MAIN_CSM;
     19          
     20          typedef struct
     21          {
     22            GUI gui;
     23            WSHDR *ws1;
     24          }MAIN_GUI;
     25          

   \                                 In segment DATA_Z, align 4, align-sorted
     26          int maingui_id;
   \                     maingui_id:
   \   00000000                      DS8 4
     27          

   \                                 In segment CODE, align 4, keep-with-next
     28          void callback(void *i2c_msg, int err)
     29          {
     30            ready++;
   \                     callback:
   \   00000000   ........           LDR      R0,??DataTable3  ;; ready
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   001090E5           LDR      R1,[R0, #+0]
   \   0000000C   011081E2           ADD      R1,R1,#+1
   \   00000010   001080E5           STR      R1,[R0, #+0]
     31            REDRAW(); 
   \   00000014   720100EF           SWI      +370
     32          }
   \   00000018   0080BDE8           POP      {PC}             ;; return
     33          

   \                                 In segment CODE, align 4, keep-with-next
     34          void do_tmr()
     35          {
   \                     do_tmr:
   \   00000000   10402DE9           PUSH     {R4,LR}
     36            i2cr_pmu(0, reg_buf, callback, 0, sizeof(reg_buf));
   \   00000004   ........           LDR      R4,??DataTable7  ;; ready
   \   00000008   28209FE5           LDR      R2,??do_tmr_0    ;; callback
   \   0000000C   8C00A0E3           MOV      R0,#+140
   \   00000010   01002DE9           PUSH     {R0}
   \   00000014   0030A0E3           MOV      R3,#+0
   \   00000018   181084E2           ADD      R1,R4,#+24
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   ........           _BLF     i2cr_pmu,??i2cr_pmu??rA
     37            GBS_StartTimerProc(&tmr,TMR_SECOND,do_tmr); 
   \   00000024   ........           LDR      R2,??DataTable4  ;; do_tmr
   \   00000028   D810A0E3           MOV      R1,#+216
   \   0000002C   080084E2           ADD      R0,R4,#+8
   \   00000030   4D0000EF           SWI      +77
     38          }
   \   00000034   1180BDE8           POP      {R0,R4,PC}       ;; return
   \                     ??do_tmr_0:
   \   00000038   ........           DC32     callback
     39          

   \                                 In segment CODE, align 4, keep-with-next
     40          static void OnRedraw(MAIN_GUI *data)
     41          {
   \                     OnRedraw:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
     42            WSHDR ws;
     43            unsigned short wsbody[32];
     44          
     45            int scr_w=ScreenW();
     46            int scr_h=ScreenH(); 
     47            int MYYDISP=0;
     48            int MYXDISP=4;
     49            int header_h=1+GetFontYSIZE(FONT_SMALL);
     50            int rec_w=27;//для экранов 320x240
     51            int rec_h=27;
     52            
     53            RECT rc[sizeof(reg_buf)];
     54            char* _reg_buf=reg_buf;
   \   00000004   ........           LDR      R4,??DataTable3  ;; ready
   \   00000008   C8D04DE2           SUB      SP,SP,#+200
   \   0000000C   40DE4DE2           SUB      SP,SP,#+1024
   \   00000010   888100EF           SWI      +33160
   \   00000014   0090A0E1           MOV      R9,R0
   \   00000018   898100EF           SWI      +33161
   \   0000001C   0080A0E1           MOV      R8,R0
   \   00000020   0070A0E3           MOV      R7,#+0
   \   00000024   0410A0E3           MOV      R1,#+4
   \   00000028   00108DE5           STR      R1,[SP, #+0]
   \   0000002C   0700A0E3           MOV      R0,#+7
   \   00000030   C50100EF           SWI      +453
   \   00000034   016080E2           ADD      R6,R0,#+1
   \   00000038   1B10A0E3           MOV      R1,#+27
   \   0000003C   04108DE5           STR      R1,[SP, #+4]
   \   00000040   1B50A0E3           MOV      R5,#+27
   \   00000044   181084E2           ADD      R1,R4,#+24
   \   00000048   08108DE5           STR      R1,[SP, #+8]
     55            char* _reg_buf_prev=reg_buf_prev;
   \   0000004C   A41084E2           ADD      R1,R4,#+164
   \   00000050   0C108DE5           STR      R1,[SP, #+12]
     56            int page_size=80;
   \   00000054   5010A0E3           MOV      R1,#+80
   \   00000058   10108DE5           STR      R1,[SP, #+16]
     57            
     58            if(scr_w==132)//для экранов 176x132
   \   0000005C   840059E3           CMP      R9,#+132
   \   00000060   0500001A           BNE      ??OnRedraw_0
     59            {
     60              rec_w=14;
   \   00000064   0E10A0E3           MOV      R1,#+14
   \   00000068   04108DE5           STR      R1,[SP, #+4]
     61              rec_h=14;
   \   0000006C   0E50A0E3           MOV      R5,#+14
     62              MYYDISP=2;
   \   00000070   0270A0E3           MOV      R7,#+2
     63              MYXDISP=2;
   \   00000074   0710A0E1           MOV      R1,R7
   \   00000078   00108DE5           STR      R1,[SP, #+0]
     64            }
     65              
     66            //int sym_w=GetSymbolWidth('D', FONT_SMALL);
     67            
     68            CreateLocalWS(&ws, wsbody, 31);
   \                     ??OnRedraw_0:
   \   0000007C   1F20A0E3           MOV      R2,#+31
   \   00000080   88108DE2           ADD      R1,SP,#+136
   \   00000084   401E81E2           ADD      R1,R1,#+1024
   \   00000088   14008DE2           ADD      R0,SP,#+20
   \   0000008C   270100EF           SWI      +295
     69            
     70            DrawRoundedFrame(0,0,scr_w-1,scr_h-1,0,0,0,GetPaletteAdrByColorIndex(1),GetPaletteAdrByColorIndex(1));
   \   00000090   0100A0E3           MOV      R0,#+1
   \   00000094   2E0100EF           SWI      +302
   \   00000098   00A0A0E1           MOV      R10,R0
   \   0000009C   0100A0E3           MOV      R0,#+1
   \   000000A0   2E0100EF           SWI      +302
   \   000000A4   00042DE9           PUSH     {R10}
   \   000000A8   01002DE9           PUSH     {R0}
   \   000000AC   013048E2           SUB      R3,R8,#+1
   \   000000B0   012049E2           SUB      R2,R9,#+1
   \   000000B4   0010A0E3           MOV      R1,#+0
   \   000000B8   0000A0E3           MOV      R0,#+0
   \   000000BC   01002DE9           PUSH     {R0}
   \   000000C0   01002DE9           PUSH     {R0}
   \   000000C4   01002DE9           PUSH     {R0}
     71            
     72            wsprintf(&ws, "PMU-MON");
     73            DrawString(&ws, MYXDISP, MYYDISP, scr_w-MYXDISP, scr_h+header_h, FONT_SMALL, TEXT_ALIGNLEFT, GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(23));
   \   000000C8   088086E0           ADD      R8,R6,R8
   \   000000CC   500100EF           SWI      +336
   \   000000D0   5C129FE5           LDR      R1,??OnRedraw_1  ;; `?<Constant "PMU-MON">`
   \   000000D4   28008DE2           ADD      R0,SP,#+40
   \   000000D8   240100EF           SWI      +292
   \   000000DC   1700A0E3           MOV      R0,#+23
   \   000000E0   2E0100EF           SWI      +302
   \   000000E4   00A0A0E1           MOV      R10,R0
   \   000000E8   0000A0E3           MOV      R0,#+0
   \   000000EC   2E0100EF           SWI      +302
   \   000000F0   14109DE5           LDR      R1,[SP, #+20]
   \   000000F4   00042DE9           PUSH     {R10}
   \   000000F8   01002DE9           PUSH     {R0}
   \   000000FC   019049E0           SUB      R9,R9,R1
   \   00000100   0930A0E1           MOV      R3,R9
   \   00000104   0720A0E1           MOV      R2,R7
   \   00000108   0100A0E3           MOV      R0,#+1
   \   0000010C   01002DE9           PUSH     {R0}
   \   00000110   0700A0E3           MOV      R0,#+7
   \   00000114   01002DE9           PUSH     {R0}
   \   00000118   0800A0E1           MOV      R0,R8
   \   0000011C   01002DE9           PUSH     {R0}
   \   00000120   3C008DE2           ADD      R0,SP,#+60
   \   00000124   4C0100EF           SWI      +332
   \   00000128   28D08DE2           ADD      SP,SP,#+40
     74          
     75            if(page!=1)
   \   0000012C   040094E5           LDR      R0,[R4, #+4]
   \   00000130   010050E3           CMP      R0,#+1
   \   00000134   0900000A           BEQ      ??OnRedraw_2
     76            {
     77              wsprintf(&ws, "PAGE-2");
   \   00000138   F8119FE5           LDR      R1,??OnRedraw_1+0x4  ;; `?<Constant "PMU-MON">` + 8
   \   0000013C   14008DE2           ADD      R0,SP,#+20
   \   00000140   240100EF           SWI      +292
     78              _reg_buf=reg_buf+80;
   \   00000144   681084E2           ADD      R1,R4,#+104
   \   00000148   08108DE5           STR      R1,[SP, #+8]
     79              _reg_buf_prev=reg_buf_prev+80;
   \   0000014C   F41084E2           ADD      R1,R4,#+244
   \   00000150   0C108DE5           STR      R1,[SP, #+12]
     80              page_size=48;
   \   00000154   3010A0E3           MOV      R1,#+48
   \   00000158   10108DE5           STR      R1,[SP, #+16]
   \   0000015C   020000EA           B        ??OnRedraw_3
     81            }
     82            else
     83               wsprintf(&ws, "PAGE-1");
   \                     ??OnRedraw_2:
   \   00000160   D4119FE5           LDR      R1,??OnRedraw_1+0x8  ;; `?<Constant "PMU-MON">` + 16
   \   00000164   14008DE2           ADD      R0,SP,#+20
   \   00000168   240100EF           SWI      +292
     84            
     85            DrawString(&ws, MYXDISP, MYYDISP, scr_w-MYXDISP-2, scr_h+header_h, FONT_SMALL, TEXT_ALIGNRIGHT, GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(23));
   \                     ??OnRedraw_3:
   \   0000016C   1700A0E3           MOV      R0,#+23
   \   00000170   2E0100EF           SWI      +302
   \   00000174   00A0A0E1           MOV      R10,R0
   \   00000178   0000A0E3           MOV      R0,#+0
   \   0000017C   2E0100EF           SWI      +302
   \   00000180   00042DE9           PUSH     {R10}
   \   00000184   01002DE9           PUSH     {R0}
   \   00000188   023049E2           SUB      R3,R9,#+2
   \   0000018C   0720A0E1           MOV      R2,R7
     86          
     87            int x_offset=MYXDISP;
     88            int y_offset=MYYDISP+header_h; 
   \   00000190   079086E0           ADD      R9,R6,R7
   \   00000194   0400A0E3           MOV      R0,#+4
   \   00000198   01002DE9           PUSH     {R0}
     89            
     90            for(int i=0; i < page_size; i++)
   \   0000019C   00A0A0E3           MOV      R10,#+0
   \   000001A0   0700A0E3           MOV      R0,#+7
   \   000001A4   01002DE9           PUSH     {R0}
   \   000001A8   00012DE9           PUSH     {R8}
   \   000001AC   14109DE5           LDR      R1,[SP, #+20]
   \   000001B0   28008DE2           ADD      R0,SP,#+40
   \   000001B4   4C0100EF           SWI      +332
   \   000001B8   14809DE5           LDR      R8,[SP, #+20]
   \   000001BC   14D08DE2           ADD      SP,SP,#+20
   \   000001C0   500000EA           B        ??OnRedraw_4
     91            {
     92              rc[i].x=x_offset;
   \                     ??OnRedraw_5:
   \   000001C4   28008DE2           ADD      R0,SP,#+40
   \   000001C8   8A6180E0           ADD      R6,R0,R10, LSL #+3
   \   000001CC   B080C6E1           STRH     R8,[R6, #+0]
     93              rc[i].y=y_offset;
   \   000001D0   B290C6E1           STRH     R9,[R6, #+2]
     94              rc[i].x2=x_offset+rec_w;
   \   000001D4   04109DE5           LDR      R1,[SP, #+4]
     95              rc[i].y2=y_offset+rec_h; 
   \   000001D8   09B085E0           ADD      R11,R5,R9
   \   000001DC   080081E0           ADD      R0,R1,R8
   \   000001E0   B400C6E1           STRH     R0,[R6, #+4]
   \   000001E4   B6B0C6E1           STRH     R11,[R6, #+6]
     96              
     97              x_offset+=rec_w+2;
   \   000001E8   04009DE5           LDR      R0,[SP, #+4]
     98              if (i>0 && (i+1)%8==0)
   \   000001EC   01708AE2           ADD      R7,R10,#+1
   \   000001F0   020080E2           ADD      R0,R0,#+2
   \   000001F4   088080E0           ADD      R8,R0,R8
   \   000001F8   01005AE3           CMP      R10,#+1
   \   000001FC   060000BA           BLT      ??OnRedraw_6
   \   00000200   4701A0E1           ASR      R0,R7,#+2
   \   00000204   A00E87E0           ADD      R0,R7,R0, LSR #+29
   \   00000208   C001A0E1           ASR      R0,R0,#+3
   \   0000020C   800157E0           SUBS     R0,R7,R0, LSL #+3
     99              {
    100                x_offset=MYXDISP;
   \   00000210   00809D05           LDREQ    R8,[SP, #+0]
    101                y_offset+=rec_h+2;
   \   00000214   02008502           ADDEQ    R0,R5,#+2
   \   00000218   09908000           ADDEQ    R9,R0,R9
    102               }
    103              
    104              char* color_rec_fon=GetPaletteAdrByColorIndex(5);
   \                     ??OnRedraw_6:
   \   0000021C   0500A0E3           MOV      R0,#+5
   \   00000220   2E0100EF           SWI      +302
    105              if(ready > 1 && _reg_buf[i] != _reg_buf_prev[i]) color_rec_fon=GetPaletteAdrByColorIndex(2); 
   \   00000224   001094E5           LDR      R1,[R4, #+0]
   \   00000228   020051E3           CMP      R1,#+2
   \   0000022C   070000BA           BLT      ??OnRedraw_7
   \   00000230   08109DE5           LDR      R1,[SP, #+8]
   \   00000234   0C209DE5           LDR      R2,[SP, #+12]
   \   00000238   0110DAE7           LDRB     R1,[R10, +R1]
   \   0000023C   0220DAE7           LDRB     R2,[R10, +R2]
   \   00000240   020051E1           CMP      R1,R2
   \   00000244   0100000A           BEQ      ??OnRedraw_7
   \   00000248   0200A0E3           MOV      R0,#+2
   \   0000024C   2E0100EF           SWI      +302
    106              
    107              DrawRectangle(rc[i].x, rc[i].y, rc[i].x2, rc[i].y2, 0, color_rec_fon, color_rec_fon);
   \                     ??OnRedraw_7:
   \   00000250   0010A0E1           MOV      R1,R0
   \   00000254   02002DE9           PUSH     {R1}
   \   00000258   01002DE9           PUSH     {R0}
   \   0000025C   0B38A0E1           MOV      R3,R11, LSL #+16
   \   00000260   4338A0E1           MOV      R3,R3, ASR #+16
   \   00000264   0000A0E3           MOV      R0,#+0
   \   00000268   01002DE9           PUSH     {R0}
   \   0000026C   F420D6E1           LDRSH    R2,[R6, #+4]
   \   00000270   F210D6E1           LDRSH    R1,[R6, #+2]
   \   00000274   F000D6E1           LDRSH    R0,[R6, #+0]
   \   00000278   B40100EF           SWI      +436
    108              wsprintf(&ws, "%02X", _reg_buf[i]);
   \   0000027C   14009DE5           LDR      R0,[SP, #+20]
   \   00000280   B8109FE5           LDR      R1,??OnRedraw_1+0xC  ;; `?<Constant "PMU-MON">` + 24
   \   00000284   0020DAE7           LDRB     R2,[R10, +R0]
   \   00000288   20008DE2           ADD      R0,SP,#+32
   \   0000028C   240100EF           SWI      +292
    109              int font_h=GetFontYSIZE(FONT_SMALL);   
   \   00000290   0700A0E3           MOV      R0,#+7
   \   00000294   C50100EF           SWI      +453
   \   00000298   00A0A0E1           MOV      R10,R0
    110              int y_text_offset=(rec_h-font_h)/2;
    111              if(ready)
   \   0000029C   000094E5           LDR      R0,[R4, #+0]
   \   000002A0   0CD08DE2           ADD      SP,SP,#+12
   \   000002A4   000050E3           CMP      R0,#+0
   \   000002A8   1500000A           BEQ      ??OnRedraw_8
    112                DrawString(&ws, rc[i].x, rc[i].y+y_text_offset, rc[i].x2, rc[i].y2, FONT_SMALL, TEXT_ALIGNMIDDLE, GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(23));
   \   000002AC   1700A0E3           MOV      R0,#+23
   \   000002B0   2E0100EF           SWI      +302
   \   000002B4   00B0A0E1           MOV      R11,R0
   \   000002B8   0000A0E3           MOV      R0,#+0
   \   000002BC   2E0100EF           SWI      +302
   \   000002C0   00082DE9           PUSH     {R11}
   \   000002C4   01002DE9           PUSH     {R0}
   \   000002C8   0A1045E0           SUB      R1,R5,R10
   \   000002CC   A11F81E0           ADD      R1,R1,R1, LSR #+31
   \   000002D0   0200A0E3           MOV      R0,#+2
   \   000002D4   01002DE9           PUSH     {R0}
   \   000002D8   0700A0E3           MOV      R0,#+7
   \   000002DC   01002DE9           PUSH     {R0}
   \   000002E0   F600D6E1           LDRSH    R0,[R6, #+6]
   \   000002E4   01002DE9           PUSH     {R0}
   \   000002E8   F430D6E1           LDRSH    R3,[R6, #+4]
   \   000002EC   F200D6E1           LDRSH    R0,[R6, #+2]
   \   000002F0   C12080E0           ADD      R2,R0,R1, ASR #+1
   \   000002F4   F010D6E1           LDRSH    R1,[R6, #+0]
   \   000002F8   28008DE2           ADD      R0,SP,#+40
   \   000002FC   4C0100EF           SWI      +332
   \   00000300   14D08DE2           ADD      SP,SP,#+20
    113          }
   \                     ??OnRedraw_8:
   \   00000304   07A0A0E1           MOV      R10,R7
   \                     ??OnRedraw_4:
   \   00000308   10009DE5           LDR      R0,[SP, #+16]
   \   0000030C   00005AE1           CMP      R10,R0
   \   00000310   ABFFFFBA           BLT      ??OnRedraw_5
    114            
    115            memcpy(reg_buf_prev, reg_buf, sizeof(reg_buf));
   \   00000314   8C20A0E3           MOV      R2,#+140
   \   00000318   181084E2           ADD      R1,R4,#+24
   \   0000031C   A40084E2           ADD      R0,R4,#+164
   \   00000320   1E0100EF           SWI      +286
    116            __asm("NOP"); // !MOV PC,Rn
   \   00000324   0000A0E1           NOP              
    117          }
   \   00000328   C8D08DE2           ADD      SP,SP,#+200
   \   0000032C   40DE8DE2           ADD      SP,SP,#+1024
   \   00000330   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??OnRedraw_1:
   \   00000334   ........           DC32     `?<Constant "PMU-MON">`
   \   00000338   ........           DC32     `?<Constant "PMU-MON">` + 8
   \   0000033C   ........           DC32     `?<Constant "PMU-MON">` + 16
   \   00000340   ........           DC32     `?<Constant "PMU-MON">` + 24
    118          
    119          

   \                                 In segment CODE, align 4, keep-with-next
    120          static void onCreate(MAIN_GUI *data, void *(*malloc_adr)(int))
    121          {
   \                     onCreate:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    122            data->ws1=AllocWS(256);
   \   00000008   400FA0E3           MOV      R0,#+256
   \   0000000C   250100EF           SWI      +293
    123            data->gui.state=1;
    124            GBS_StartTimerProc(&tmr,TMR_SECOND,do_tmr);
   \   00000010   ........           LDR      R2,??DataTable4  ;; do_tmr
   \   00000014   300084E5           STR      R0,[R4, #+48]
   \   00000018   0100A0E3           MOV      R0,#+1
   \   0000001C   0C00C4E5           STRB     R0,[R4, #+12]
   \   00000020   ........           LDR      R0,??DataTable6  ;; ready + 8
   \   00000024   D810A0E3           MOV      R1,#+216
   \   00000028   4D0000EF           SWI      +77
    125          }
   \   0000002C   1080BDE8           POP      {R4,PC}          ;; return
    126          

   \                                 In segment CODE, align 4, keep-with-next
    127          static void onClose(MAIN_GUI *data, void (*mfree_adr)(void *))
    128          {
   \                     onClose:
   \   00000000   00402DE9           PUSH     {LR}
    129            data->gui.state=0;
   \   00000004   0010A0E3           MOV      R1,#+0
   \   00000008   0C10C0E5           STRB     R1,[R0, #+12]
    130            FreeWS(data->ws1);
   \   0000000C   300090E5           LDR      R0,[R0, #+48]
   \   00000010   290100EF           SWI      +297
    131            GBS_DelTimer(&tmr);
   \   00000014   ........           LDR      R0,??DataTable6  ;; ready + 8
   \   00000018   8C0100EF           SWI      +396
    132          }
   \   0000001C   0080BDE8           POP      {PC}             ;; return
    133          

   \                                 In segment CODE, align 4, keep-with-next
    134          static void onFocus(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))
    135          {
   \                     onFocus:
   \   00000000   00402DE9           PUSH     {LR}
    136            #ifdef ELKA
    137            DisableIconBar(1);
    138            #endif 
    139            data->gui.state=2;
   \   00000004   0210A0E3           MOV      R1,#+2
   \   00000008   0C10C0E5           STRB     R1,[R0, #+12]
    140            DisableIDLETMR();
   \   0000000C   7F0100EF           SWI      +383
    141            //SetCpuClockLow(2); 
    142          }
   \   00000010   0080BDE8           POP      {PC}             ;; return
    143          

   \                                 In segment CODE, align 4, keep-with-next
    144          static void onUnfocus(MAIN_GUI *data, void (*mfree_adr)(void *))
    145          {
    146            #ifdef ELKA
    147            DisableIconBar(0);
    148            #endif 
    149            if (data->gui.state!=2) return;
   \                     onUnfocus:
   \   00000000   0C10D0E5           LDRB     R1,[R0, #+12]
   \   00000004   020051E3           CMP      R1,#+2
    150            data->gui.state=1;
   \   00000008   0110A003           MOVEQ    R1,#+1
   \   0000000C   0C10C005           STRBEQ   R1,[R0, #+12]
    151          }
   \   00000010   1EFF2FE1           BX       LR               ;; return
    152          

   \                                 In segment CODE, align 4, keep-with-next
    153          static int OnKey(MAIN_GUI *data, GUI_MSG *msg)
    154          {
   \                     OnKey:
   \   00000000   00402DE9           PUSH     {LR}
    155            if (msg->gbsmsg->msg==KEY_DOWN)
   \   00000004   040091E5           LDR      R0,[R1, #+4]
   \   00000008   9320A0E3           MOV      R2,#+147
   \   0000000C   F210D0E1           LDRSH    R1,[R0, #+2]
   \   00000010   402F82E3           ORR      R2,R2,#0x100
   \   00000014   020051E1           CMP      R1,R2
   \   00000018   0B00001A           BNE      ??OnKey_0
    156            {
    157              switch(msg->gbsmsg->submess)
   \   0000001C   040090E5           LDR      R0,[R0, #+4]
   \   00000020   040050E2           SUBS     R0,R0,#+4
   \   00000024   0B00000A           BEQ      ??OnKey_1
   \   00000028   390040E2           SUB      R0,R0,#+57
   \   0000002C   010050E3           CMP      R0,#+1
   \   00000030   0500008A           BHI      ??OnKey_0
    158              {
    159              case GREEN_BUTTON:
    160                break;
    161              
    162              case RIGHT_BUTTON:
    163              case LEFT_BUTTON:
    164                if(page==1)
   \   00000034   ........           LDR      R0,??DataTable7  ;; ready
   \   00000038   041090E5           LDR      R1,[R0, #+4]
   \   0000003C   010051E3           CMP      R1,#+1
   \   00000040   01104112           SUBNE    R1,R1,#+1
    165                  page++;
   \   00000044   0210A003           MOVEQ    R1,#+2
   \   00000048   041080E5           STR      R1,[R0, #+4]
    166                else
    167                  page--;
    168                break;
    169          
    170              case RIGHT_SOFT:
    171                return (1);
    172              }
    173            }
    174            REDRAW();
   \                     ??OnKey_0:
   \   0000004C   720100EF           SWI      +370
    175            return(0);
   \   00000050   0000A0E3           MOV      R0,#+0
   \   00000054   0080BDE8           POP      {PC}             ;; return
   \                     ??OnKey_1:
   \   00000058   0100A0E3           MOV      R0,#+1
   \   0000005C   0080BDE8           POP      {PC}
    176          }
    177          
    178          extern void kill_data(void *p, void (*func_p)(void *));
    179          

   \                                 In segment CODE, align 4, keep-with-next
    180          int method8(void){return(0);}
   \                     method8:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
    181          int method9(void){return(0);}
   \                     method9:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
    182          const void * const gui_methods[11]={
    183            (void *)OnRedraw,
    184            (void *)onCreate,
    185            (void *)onClose,
    186            (void *)onFocus,
    187            (void *)onUnfocus,
    188            (void *)OnKey,
    189            0,
    190            (void *)kill_data,
    191            (void *)method8,
    192            (void *)method9,
    193            0
    194          };
    195          

   \                                 In segment CODE, align 4, keep-with-next
    196          static void maincsm_oncreate(CSM_RAM *data)
    197          {
   \                     maincsm_oncreate:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    198            static const RECT Canvas={0,0,0,0};
    199            MAIN_GUI *main_gui=malloc(sizeof(MAIN_GUI));
   \   00000008   3400A0E3           MOV      R0,#+52
   \   0000000C   140000EF           SWI      +20
   \   00000010   0050A0E1           MOV      R5,R0
    200            MAIN_CSM *csm=(MAIN_CSM *)data;
    201            zeromem(main_gui,sizeof(MAIN_GUI));
   \   00000014   3410A0E3           MOV      R1,#+52
   \   00000018   1D0100EF           SWI      +285
    202            patch_rect((RECT*)&Canvas,0,0,ScreenW()-1,ScreenH()-1);
   \   0000001C   898100EF           SWI      +33161
   \   00000020   0060A0E1           MOV      R6,R0
   \   00000024   888100EF           SWI      +33160
   \   00000028   60209FE5           LDR      R2,??maincsm_oncreate_0  ;; ??Canvas
   \   0000002C   011046E2           SUB      R1,R6,#+1
   \   00000030   010040E2           SUB      R0,R0,#+1
   \   00000034   0060A0E3           MOV      R6,#+0
   \   00000038   006082E5           STR      R6,[R2, #+0]
   \   0000003C   B400C2E1           STRH     R0,[R2, #+4]
   \   00000040   B610C2E1           STRH     R1,[R2, #+6]
    203            main_gui->gui.canvas=(void *)(&Canvas);
   \   00000044   002085E5           STR      R2,[R5, #+0]
    204            main_gui->gui.methods=(void *)gui_methods;
   \   00000048   080082E2           ADD      R0,R2,#+8
   \   0000004C   040085E5           STR      R0,[R5, #+4]
    205            main_gui->gui.color1=0x65;
   \   00000050   6500A0E3           MOV      R0,#+101
   \   00000054   100085E5           STR      R0,[R5, #+16]
    206            main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
   \   00000058   158000EF           SWI      +32789
   \   0000005C   1C0085E5           STR      R0,[R5, #+28]
    207            main_gui->gui.unk10=2;
   \   00000060   0200A0E3           MOV      R0,#+2
   \   00000064   280085E5           STR      R0,[R5, #+40]
    208            main_gui->gui.flag30=1;
   \   00000068   0100A0E3           MOV      R0,#+1
   \   0000006C   2C0085E5           STR      R0,[R5, #+44]
    209            csm->csm.state=0;
   \   00000070   106084E5           STR      R6,[R4, #+16]
    210            csm->csm.unk1=0;
   \   00000074   146084E5           STR      R6,[R4, #+20]
    211          
    212            maingui_id=csm->gui_id=CreateGUI(main_gui);
   \   00000078   0500A0E1           MOV      R0,R5
   \   0000007C   370100EF           SWI      +311
   \   00000080   0C109FE5           LDR      R1,??maincsm_oncreate_0+0x4  ;; maingui_id
   \   00000084   280084E5           STR      R0,[R4, #+40]
   \   00000088   000081E5           STR      R0,[R1, #+0]
    213          }
   \   0000008C   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??maincsm_oncreate_0:
   \   00000090   ........           DC32     ??Canvas
   \   00000094   ........           DC32     maingui_id

   \                                 In segment DATA_C, align 4, align-sorted
   \                     ??Canvas:
   \   00000000   000000000000       DC16 0, 0, 0, 0
   \              0000        
   \                     gui_methods:
   \   00000008   ............       DC32 OnRedraw, onCreate, onClose, onFocus, onUnfocus, OnKey, 0H
   \              ............
   \              ............
   \              ............
   \              00000000    
   \   00000024   ............       DC32 kill_data, method8, method9, 0H
   \              ............
   \              00000000    
    214          
    215          #pragma segment="ELFBEGIN"

   \                                 In segment CODE, align 4, keep-with-next
    216          void ElfKiller(void)
    217          {
   \                     ElfKiller:
   \   00000000   00402DE9           PUSH     {LR}
    218            kill_data(__segment_begin("ELFBEGIN"),(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??ElfKiller_0  ;; SFB(ELFBEGIN)
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??ElfKiller_0:
   \   00000018   ........           DC32     SFB(ELFBEGIN)
    219          }
    220          

   \                                 In segment CODE, align 4, keep-with-next
    221          static void maincsm_onclose(CSM_RAM *data)
    222          { 
    223            SUBPROC((void *)ElfKiller);
   \                     maincsm_onclose:
   \   00000000   08009FE5           LDR      R0,??maincsm_onclose_0  ;; ElfKiller
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   710100EF           SWI      +369
    224          }
   \   0000000C   0080BDE8           POP      {PC}             ;; return
   \                     ??maincsm_onclose_0:
   \   00000010   ........           DC32     ElfKiller
    225          

   \                                 In segment CODE, align 4, keep-with-next
    226          static int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
    227          {
    228            MAIN_CSM *csm=(MAIN_CSM*)data;
    229            if ((msg->msg==MSG_GUI_DESTROYED)&&((int)msg->data0==csm->gui_id))
   \                     maincsm_onmessage:
   \   00000000   F220D1E1           LDRSH    R2,[R1, #+2]
   \   00000004   980052E3           CMP      R2,#+152
   \   00000008   0400001A           BNE      ??maincsm_onmessage_0
   \   0000000C   081091E5           LDR      R1,[R1, #+8]
   \   00000010   282090E5           LDR      R2,[R0, #+40]
   \   00000014   020051E1           CMP      R1,R2
    230            {
    231              csm->csm.state=-3;
   \   00000018   0210E003           MVNEQ    R1,#+2
   \   0000001C   10108005           STREQ    R1,[R0, #+16]
    232            }
    233          
    234            return(1);
   \                     ??maincsm_onmessage_0:
   \   00000020   0100A0E3           MOV      R0,#+1
   \   00000024   1EFF2FE1           BX       LR               ;; return
    235          }
    236          

   \                                 In segment DATA_Z, align 4, align-sorted
    237          static unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280

   \                                 In segment DATA_C, align 4, align-sorted
    238          static const int minus11=-11;
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11
    239          
    240          static const struct
    241          {
    242            CSM_DESC maincsm;
    243            WSHDR maincsm_name;

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "PmuMon">`:
   \   00000000   506D754D6F6E       DC8 "PmuMon"
   \              00          
   \   00000007   00                 DC8 0
   \   00000008   ............       DC32 maincsm_onmessage, maincsm_oncreate, maincsm_onclose, 44, 1
   \              ............
   \              2C0000000100
   \              0000        
   \   0000001C   ............       DC32 minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              ....CCCCAA55
   \              55AA33330000
   \              0000        
   \   00000030   8B00               DC16 139
   \   00000032   0000               DC8 0, 0
    244          }MAINCSM =
    245          {
    246            {
    247            maincsm_onmessage,
    248            maincsm_oncreate,
    249          #ifdef NEWSGOLD
    250            0,
    251            0,
    252            0,
    253            0,
    254          #endif
    255            maincsm_onclose,
    256            sizeof(MAIN_CSM),
    257            1,
    258            &minus11
    259            },
    260            {
    261              maincsm_name_body,
    262              NAMECSM_MAGIC1,
    263              NAMECSM_MAGIC2,
    264              0x0,
    265              139
    266            }
    267          };
    268          

   \                                 In segment CODE, align 4, keep-with-next
    269          void UpdateCSMname(void)
    270          {
    271            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"PmuMon");
   \                     UpdateCSMname:
   \   00000000   10009FE5           LDR      R0,??UpdateCSMname_0  ;; `?<Constant "PmuMon">`
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   200080E2           ADD      R0,R0,#+32
   \   00000010   240100EF           SWI      +292
    272          }
   \   00000014   0080BDE8           POP      {PC}             ;; return
   \                     ??UpdateCSMname_0:
   \   00000018   ........           DC32     `?<Constant "PmuMon">`
    273          

   \                                 In segment CODE, align 4, keep-with-next
    274          int main(char *exename, char *fname)
    275          { 
   \                     main:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
    276            MAIN_CSM main_csm;
    277            zeromem(&main_csm, sizeof(MAIN_CSM));
   \   00000008   2C10A0E3           MOV      R1,#+44
   \   0000000C   0D00A0E1           MOV      R0,SP
   \   00000010   1D0100EF           SWI      +285
    278            UpdateCSMname();
   \   00000014   ........           BL       UpdateCSMname
    279            LockSched();
   \   00000018   460100EF           SWI      +326
    280            CreateCSM(&MAINCSM.maincsm,&main_csm,0);
   \   0000001C   18009FE5           LDR      R0,??main_0      ;; `?<Constant "PmuMon">` + 8
   \   00000020   0020A0E3           MOV      R2,#+0
   \   00000024   0D10A0E1           MOV      R1,SP
   \   00000028   070100EF           SWI      +263
    281            UnlockSched();
   \   0000002C   470100EF           SWI      +327
    282            return 0;
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   2CD08DE2           ADD      SP,SP,#+44
   \   00000038   0080BDE8           POP      {PC}             ;; return
   \                     ??main_0:
   \   0000003C   ........           DC32     `?<Constant "PmuMon">` + 8
    283          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     ready

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     do_tmr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     ready + 8

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     ready

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for ready>`:
   \   00000000   00000000           DC32 0
   \                     `?<Initializer for page>`:
   \   00000004   01000000           DC32 1
   \                     `?<Initializer for tmr>`:
   \   00000008   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for reg_buf>`:
   \   00000018   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000028   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000038   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000048   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000058   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000068   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000078   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000088   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000098   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \                     `?<Initializer for reg_buf_prev>`:
   \   000000A4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000B4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000104   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000114   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000124   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000

   \                                 In segment ELFBEGIN, align 1

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "PMU-MON">`:
   \   00000000   504D552D4D4F       DC8 "PMU-MON"
   \              4E00        
   \   00000008   504147452D32       DC8 "PAGE-2"
   \              00          
   \   0000000F   00                 DC8 0
   \   00000010   504147452D31       DC8 "PAGE-1"
   \              00          
   \   00000017   00                 DC8 0
   \   00000018   2530325800         DC8 "%02X"
   \   0000001D   000000             DC8 0, 0, 0

   Maximum stack usage in bytes:

     Function          CSTACK
     --------          ------
     ElfKiller             4
     OnKey                 4
     OnRedraw           1300
     UpdateCSMname         4
     callback              4
     do_tmr               12
     main                 48
     maincsm_onclose       4
     maincsm_oncreate     16
     maincsm_onmessage     0
     method8               0
     method9               0
     onClose               4
     onCreate              8
     onFocus               4
     onUnfocus             0


   Segment part sizes:

     Function/Label           Bytes
     --------------           -----
     ready                     304
     maingui_id                  4
     callback                   28
     do_tmr                     60
     OnRedraw                  836
     onCreate                   48
     onClose                    32
     onFocus                    20
     onUnfocus                  20
     OnKey                      96
     method8                     8
     method9                     8
     maincsm_oncreate          152
     Canvas                     52
     ElfKiller                  28
     maincsm_onclose            20
     maincsm_onmessage          40
     maincsm_name_body         280
     minus11                     4
     ?<Constant "PmuMon">       52
     UpdateCSMname              28
     main                       64
     ??DataTable3                4
     ??DataTable4                4
     ??DataTable6                4
     ??DataTable7                4
     ?<Initializer for ready>  304
     ?<Constant "PMU-MON">      32
      Others                   112

 
 1 592 bytes in segment CODE
   140 bytes in segment DATA_C
   304 bytes in segment DATA_I
   304 bytes in segment DATA_ID
   284 bytes in segment DATA_Z
    24 bytes in segment INITTAB
 
 1 504 bytes of CODE  memory (+ 112 bytes shared)
   444 bytes of CONST memory
   588 bytes of DATA  memory

Errors: none
Warnings: 1
