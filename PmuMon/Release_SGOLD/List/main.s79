//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   26/Dec/2016  18:06:14 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  E:\Users\alfinant\Documents\Siemens\alfinant\PmuMon /
//                       \main.c                                             /
//    Command line    =  E:\Users\alfinant\Documents\Siemens\alfinant\PmuMon /
//                       \main.c -D SGOLD -lCN E:\Users\alfinant\Documents\S /
//                       iemens\alfinant\PmuMon\Release_SGOLD\List\ -la      /
//                       E:\Users\alfinant\Documents\Siemens\alfinant\PmuMon /
//                       \Release_SGOLD\List\ -o E:\Users\alfinant\Documents /
//                       \Siemens\alfinant\PmuMon\Release_SGOLD\Obj\ -s9     /
//                       --no_unroll --cpu_mode arm --endian little --cpu    /
//                       ARM926EJ-S --stack_align 4 --interwork -e --fpu     /
//                       None --dlib_config E:\Users\alfinant\Documents\Siem /
//                       ens\IAR\ARM\LIB\dl5tpainl8n.h -I                    /
//                       E:\Users\alfinant\Documents\Siemens\IAR\ARM\INC\    /
//                       --inline_threshold=2                                /
//    List file       =  E:\Users\alfinant\Documents\Siemens\alfinant\PmuMon /
//                       \Release_SGOLD\List\main.s79                        /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)
        RSEG ELFBEGIN:DATA:REORDER:NOROOT(0)

        PUBWEAK `?*?DATA_ID`
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable2 EQU 0
??DataTable5 EQU 0
        MULTWEAK ??ElfKiller??rT
        MULTWEAK ??UpdateCSMname??rT
        MULTWEAK ??callback??rT
        MULTWEAK ??do_tmr??rT
        MULTWEAK ??i2cr_pmu??rA
        MULTWEAK ??kill_data??rA
        MULTWEAK ??main??rT
        MULTWEAK ??method8??rT
        MULTWEAK ??method9??rT
        PUBWEAK ?init?tab?DATA_I
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC ElfKiller
        FUNCTION ElfKiller,0603H
        LOCFRAME CSTACK, 4, STACK
        FUNCTION OnKey,0603H
        LOCFRAME CSTACK, 4, STACK
        FUNCTION OnRedraw,080603H
        LOCFRAME CSTACK, 1300, STACK
        PUBLIC UpdateCSMname
        FUNCTION UpdateCSMname,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC callback
        FUNCTION callback,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC do_tmr
        FUNCTION do_tmr,0601H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC gui_methods
        PUBLIC main
        FUNCTION main,0a03H
        LOCFRAME CSTACK, 48, STACK
        FUNCTION maincsm_onclose,0603H
        LOCFRAME CSTACK, 4, STACK
        FUNCTION maincsm_oncreate,0603H
        LOCFRAME CSTACK, 16, STACK
        FUNCTION maincsm_onmessage,0603H
        PUBLIC maingui_id
        PUBLIC method8
        FUNCTION method8,0603H
        PUBLIC method9
        FUNCTION method9,0603H
        FUNCTION onClose,0603H
        LOCFRAME CSTACK, 4, STACK
        FUNCTION onCreate,0603H
        LOCFRAME CSTACK, 8, STACK
        FUNCTION onFocus,0603H
        LOCFRAME CSTACK, 4, STACK
        FUNCTION onUnfocus,0603H
        PUBLIC page
        PUBLIC ready
        PUBLIC reg_buf
        PUBLIC reg_buf_prev
        PUBLIC tmr
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
i2cr_pmu            SYMBOL "i2cr_pmu"
kill_data           SYMBOL "kill_data"
ElfKiller           SYMBOL "ElfKiller"
??ElfKiller??rT     SYMBOL "??rT", ElfKiller
UpdateCSMname       SYMBOL "UpdateCSMname"
??UpdateCSMname??rT SYMBOL "??rT", UpdateCSMname
callback            SYMBOL "callback"
??callback??rT      SYMBOL "??rT", callback
do_tmr              SYMBOL "do_tmr"
??do_tmr??rT        SYMBOL "??rT", do_tmr
??i2cr_pmu??rA      SYMBOL "??rA", i2cr_pmu
??kill_data??rA     SYMBOL "??rA", kill_data
main                SYMBOL "main"
??main??rT          SYMBOL "??rT", main
method8             SYMBOL "method8"
??method8??rT       SYMBOL "??rT", method8
method9             SYMBOL "method9"
??method9??rT       SYMBOL "??rT", method9

        EXTERN i2cr_pmu
        FUNCTION i2cr_pmu,0202H
        EXTERN kill_data
        FUNCTION kill_data,0602H


        RSEG DATA_I:DATA:SORT:NOROOT(2)
ready:
        DS8 4
        REQUIRE `?<Initializer for ready>`
page:
        DS8 4
        REQUIRE `?<Initializer for page>`
tmr:
        DS8 16
        REQUIRE `?<Initializer for tmr>`
reg_buf:
        DS8 140
        REQUIRE `?<Initializer for reg_buf>`
reg_buf_prev:
        DS8 140
        REQUIRE `?<Initializer for reg_buf_prev>`

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
maingui_id:
        DS8 4

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??callback??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE callback

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function callback
        ARM
callback:
        LDR      R0,??DataTable3  ;; ready
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        LDR      R1,[R0, #+0]
        ADD      R1,R1,#+1
        STR      R1,[R0, #+0]
        SWI      +370
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??do_tmr??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE do_tmr

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function do_tmr
        ARM
do_tmr:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        LDR      R4,??DataTable7  ;; ready
        LDR      R2,??do_tmr_0    ;; callback
        MOV      R0,#+140
        PUSH     {R0}
        CFI CFA R13+12
        MOV      R3,#+0
        ADD      R1,R4,#+24
        MOV      R0,#+0
        _BLF     i2cr_pmu,??i2cr_pmu??rA
        LDR      R2,??DataTable4  ;; do_tmr
        MOV      R1,#+216
        ADD      R0,R4,#+8
        SWI      +77
        POP      {R0,R4,PC}       ;; return
        DATA
??do_tmr_0:
        DC32     callback
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??OnRedraw??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE OnRedraw

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function OnRedraw
        ARM
OnRedraw:
        PUSH     {R4-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+36
        LDR      R4,??DataTable3  ;; ready
        SUB      SP,SP,#+200
        CFI CFA R13+236
        SUB      SP,SP,#+1024
        CFI CFA R13+1260
        SWI      +33160
        MOV      R9,R0
        SWI      +33161
        MOV      R8,R0
        MOV      R7,#+0
        MOV      R1,#+4
        STR      R1,[SP, #+0]
        MOV      R0,#+7
        SWI      +453
        ADD      R6,R0,#+1
        MOV      R1,#+27
        STR      R1,[SP, #+4]
        MOV      R5,#+27
        ADD      R1,R4,#+24
        STR      R1,[SP, #+8]
        ADD      R1,R4,#+164
        STR      R1,[SP, #+12]
        MOV      R1,#+80
        STR      R1,[SP, #+16]
        CMP      R9,#+132
        BNE      ??OnRedraw_0
        MOV      R1,#+14
        STR      R1,[SP, #+4]
        MOV      R5,#+14
        MOV      R7,#+2
        MOV      R1,R7
        STR      R1,[SP, #+0]
??OnRedraw_0:
        MOV      R2,#+31
        ADD      R1,SP,#+136
        ADD      R1,R1,#+1024
        ADD      R0,SP,#+20
        SWI      +295
        MOV      R0,#+1
        SWI      +302
        MOV      R10,R0
        MOV      R0,#+1
        SWI      +302
        PUSH     {R10}
        CFI CFA R13+1264
        PUSH     {R0}
        CFI CFA R13+1268
        SUB      R3,R8,#+1
        SUB      R2,R9,#+1
        MOV      R1,#+0
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+1272
        PUSH     {R0}
        CFI CFA R13+1276
        PUSH     {R0}
        CFI CFA R13+1280
        ADD      R8,R6,R8
        SWI      +336
        LDR      R1,??OnRedraw_1  ;; `?<Constant "PMU-MON">`
        ADD      R0,SP,#+40
        SWI      +292
        MOV      R0,#+23
        SWI      +302
        MOV      R10,R0
        MOV      R0,#+0
        SWI      +302
        LDR      R1,[SP, #+20]
        PUSH     {R10}
        CFI CFA R13+1284
        PUSH     {R0}
        CFI CFA R13+1288
        SUB      R9,R9,R1
        MOV      R3,R9
        MOV      R2,R7
        MOV      R0,#+1
        PUSH     {R0}
        CFI CFA R13+1292
        MOV      R0,#+7
        PUSH     {R0}
        CFI CFA R13+1296
        MOV      R0,R8
        PUSH     {R0}
        CFI CFA R13+1300
        ADD      R0,SP,#+60
        SWI      +332
        ADD      SP,SP,#+40
        CFI CFA R13+1260
        LDR      R0,[R4, #+4]
        CMP      R0,#+1
        BEQ      ??OnRedraw_2
        LDR      R1,??OnRedraw_1+0x4  ;; `?<Constant "PMU-MON">` + 8
        ADD      R0,SP,#+20
        SWI      +292
        ADD      R1,R4,#+104
        STR      R1,[SP, #+8]
        ADD      R1,R4,#+244
        STR      R1,[SP, #+12]
        MOV      R1,#+48
        STR      R1,[SP, #+16]
        B        ??OnRedraw_3
??OnRedraw_2:
        LDR      R1,??OnRedraw_1+0x8  ;; `?<Constant "PMU-MON">` + 16
        ADD      R0,SP,#+20
        SWI      +292
??OnRedraw_3:
        MOV      R0,#+23
        SWI      +302
        MOV      R10,R0
        MOV      R0,#+0
        SWI      +302
        PUSH     {R10}
        CFI CFA R13+1264
        PUSH     {R0}
        CFI CFA R13+1268
        SUB      R3,R9,#+2
        MOV      R2,R7
        ADD      R9,R6,R7
        MOV      R0,#+4
        PUSH     {R0}
        CFI CFA R13+1272
        MOV      R10,#+0
        MOV      R0,#+7
        PUSH     {R0}
        CFI CFA R13+1276
        PUSH     {R8}
        CFI CFA R13+1280
        LDR      R1,[SP, #+20]
        ADD      R0,SP,#+40
        SWI      +332
        LDR      R8,[SP, #+20]
        ADD      SP,SP,#+20
        CFI CFA R13+1260
        B        ??OnRedraw_4
??OnRedraw_5:
        ADD      R0,SP,#+40
        ADD      R6,R0,R10, LSL #+3
        STRH     R8,[R6, #+0]
        STRH     R9,[R6, #+2]
        LDR      R1,[SP, #+4]
        ADD      R11,R5,R9
        ADD      R0,R1,R8
        STRH     R0,[R6, #+4]
        STRH     R11,[R6, #+6]
        LDR      R0,[SP, #+4]
        ADD      R7,R10,#+1
        ADD      R0,R0,#+2
        ADD      R8,R0,R8
        CMP      R10,#+1
        BLT      ??OnRedraw_6
        ASR      R0,R7,#+2
        ADD      R0,R7,R0, LSR #+29
        ASR      R0,R0,#+3
        SUBS     R0,R7,R0, LSL #+3
        LDREQ    R8,[SP, #+0]
        ADDEQ    R0,R5,#+2
        ADDEQ    R9,R0,R9
??OnRedraw_6:
        MOV      R0,#+5
        SWI      +302
        LDR      R1,[R4, #+0]
        CMP      R1,#+2
        BLT      ??OnRedraw_7
        LDR      R1,[SP, #+8]
        LDR      R2,[SP, #+12]
        LDRB     R1,[R10, +R1]
        LDRB     R2,[R10, +R2]
        CMP      R1,R2
        BEQ      ??OnRedraw_7
        MOV      R0,#+2
        SWI      +302
??OnRedraw_7:
        MOV      R1,R0
        PUSH     {R1}
        CFI CFA R13+1264
        PUSH     {R0}
        CFI CFA R13+1268
        MOV      R3,R11, LSL #+16
        MOV      R3,R3, ASR #+16
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+1272
        LDRSH    R2,[R6, #+4]
        LDRSH    R1,[R6, #+2]
        LDRSH    R0,[R6, #+0]
        SWI      +436
        LDR      R0,[SP, #+20]
        LDR      R1,??OnRedraw_1+0xC  ;; `?<Constant "PMU-MON">` + 24
        LDRB     R2,[R10, +R0]
        ADD      R0,SP,#+32
        SWI      +292
        MOV      R0,#+7
        SWI      +453
        MOV      R10,R0
        LDR      R0,[R4, #+0]
        ADD      SP,SP,#+12
        CFI CFA R13+1260
        CMP      R0,#+0
        BEQ      ??OnRedraw_8
        MOV      R0,#+23
        SWI      +302
        MOV      R11,R0
        MOV      R0,#+0
        SWI      +302
        PUSH     {R11}
        CFI CFA R13+1264
        PUSH     {R0}
        CFI CFA R13+1268
        SUB      R1,R5,R10
        ADD      R1,R1,R1, LSR #+31
        MOV      R0,#+2
        PUSH     {R0}
        CFI CFA R13+1272
        MOV      R0,#+7
        PUSH     {R0}
        CFI CFA R13+1276
        LDRSH    R0,[R6, #+6]
        PUSH     {R0}
        CFI CFA R13+1280
        LDRSH    R3,[R6, #+4]
        LDRSH    R0,[R6, #+2]
        ADD      R2,R0,R1, ASR #+1
        LDRSH    R1,[R6, #+0]
        ADD      R0,SP,#+40
        SWI      +332
        ADD      SP,SP,#+20
        CFI CFA R13+1260
??OnRedraw_8:
        MOV      R10,R7
??OnRedraw_4:
        LDR      R0,[SP, #+16]
        CMP      R10,R0
        BLT      ??OnRedraw_5
        MOV      R2,#+140
        ADD      R1,R4,#+24
        ADD      R0,R4,#+164
        SWI      +286
        NOP              
        ADD      SP,SP,#+200
        CFI CFA R13+1060
        ADD      SP,SP,#+1024
        CFI CFA R13+36
        POP      {R4-R11,PC}      ;; return
        DATA
??OnRedraw_1:
        DC32     `?<Constant "PMU-MON">`
        DC32     `?<Constant "PMU-MON">` + 8
        DC32     `?<Constant "PMU-MON">` + 16
        DC32     `?<Constant "PMU-MON">` + 24
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable3:
        DC32     ready

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??onCreate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE onCreate

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function onCreate
        ARM
onCreate:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
        MOV      R0,#+256
        SWI      +293
        LDR      R2,??DataTable4  ;; do_tmr
        STR      R0,[R4, #+48]
        MOV      R0,#+1
        STRB     R0,[R4, #+12]
        LDR      R0,??DataTable6  ;; ready + 8
        MOV      R1,#+216
        SWI      +77
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable4:
        DC32     do_tmr

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??onClose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE onClose

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function onClose
        ARM
onClose:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R1,#+0
        STRB     R1,[R0, #+12]
        LDR      R0,[R0, #+48]
        SWI      +297
        LDR      R0,??DataTable6  ;; ready + 8
        SWI      +396
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable6:
        DC32     ready + 8

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??onFocus??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE onFocus

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function onFocus
        ARM
onFocus:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R1,#+2
        STRB     R1,[R0, #+12]
        SWI      +383
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??onUnfocus??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE onUnfocus

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function onUnfocus
        ARM
onUnfocus:
        LDRB     R1,[R0, #+12]
        CMP      R1,#+2
        MOVEQ    R1,#+1
        STRBEQ   R1,[R0, #+12]
        BX       LR               ;; return
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??OnKey??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE OnKey

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function OnKey
        ARM
OnKey:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        LDR      R0,[R1, #+4]
        MOV      R2,#+147
        LDRSH    R1,[R0, #+2]
        ORR      R2,R2,#0x100
        CMP      R1,R2
        BNE      ??OnKey_0
        LDR      R0,[R0, #+4]
        SUBS     R0,R0,#+4
        BEQ      ??OnKey_1
        SUB      R0,R0,#+57
        CMP      R0,#+1
        BHI      ??OnKey_0
        LDR      R0,??DataTable7  ;; ready
        LDR      R1,[R0, #+4]
        CMP      R1,#+1
        SUBNE    R1,R1,#+1
        MOVEQ    R1,#+2
        STR      R1,[R0, #+4]
??OnKey_0:
        SWI      +370
        MOV      R0,#+0
        POP      {PC}             ;; return
??OnKey_1:
        MOV      R0,#+1
        POP      {PC}
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable7:
        DC32     ready

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??method8??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE method8

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function method8
        ARM
method8:
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        THUMB
??method9??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock18
        REQUIRE method9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI Function method9
        ARM
method9:
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock19

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_oncreate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock20
        REQUIRE maincsm_oncreate

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI Function maincsm_oncreate
        ARM
maincsm_oncreate:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R4,R0
        MOV      R0,#+52
        SWI      +20
        MOV      R5,R0
        MOV      R1,#+52
        SWI      +285
        SWI      +33161
        MOV      R6,R0
        SWI      +33160
        LDR      R2,??maincsm_oncreate_0  ;; ??Canvas
        SUB      R1,R6,#+1
        SUB      R0,R0,#+1
        MOV      R6,#+0
        STR      R6,[R2, #+0]
        STRH     R0,[R2, #+4]
        STRH     R1,[R2, #+6]
        STR      R2,[R5, #+0]
        ADD      R0,R2,#+8
        STR      R0,[R5, #+4]
        MOV      R0,#+101
        STR      R0,[R5, #+16]
        SWI      +32789
        STR      R0,[R5, #+28]
        MOV      R0,#+2
        STR      R0,[R5, #+40]
        MOV      R0,#+1
        STR      R0,[R5, #+44]
        STR      R6,[R4, #+16]
        STR      R6,[R4, #+20]
        MOV      R0,R5
        SWI      +311
        LDR      R1,??maincsm_oncreate_0+0x4  ;; maingui_id
        STR      R0,[R4, #+40]
        STR      R0,[R1, #+0]
        POP      {R4-R6,PC}       ;; return
        DATA
??maincsm_oncreate_0:
        DC32     ??Canvas
        DC32     maingui_id
        CFI EndBlock cfiBlock21

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon0
        CFI NoFunction
        THUMB
??ElfKiller??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock22
        REQUIRE ElfKiller

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI Function ElfKiller
        ARM
ElfKiller:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SWI      +32789
        MOV      R1,R0
        LDR      R0,??ElfKiller_0  ;; SFB(ELFBEGIN)
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        _BF      kill_data,??kill_data??rA  ;; tailcall
        DATA
??ElfKiller_0:
        DC32     SFB(ELFBEGIN)
        CFI EndBlock cfiBlock23

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_onclose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock24
        REQUIRE maincsm_onclose

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon1
        CFI Function maincsm_onclose
        ARM
maincsm_onclose:
        LDR      R0,??maincsm_onclose_0  ;; ElfKiller
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SWI      +369
        POP      {PC}             ;; return
        DATA
??maincsm_onclose_0:
        DC32     ElfKiller
        CFI EndBlock cfiBlock25

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock26 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_onmessage??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock26
        REQUIRE maincsm_onmessage

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock27 Using cfiCommon1
        CFI Function maincsm_onmessage
        ARM
maincsm_onmessage:
        LDRSH    R2,[R1, #+2]
        CMP      R2,#+152
        BNE      ??maincsm_onmessage_0
        LDR      R1,[R1, #+8]
        LDR      R2,[R0, #+40]
        CMP      R1,R2
        MVNEQ    R1,#+2
        STREQ    R1,[R0, #+16]
??maincsm_onmessage_0:
        MOV      R0,#+1
        BX       LR               ;; return
        CFI EndBlock cfiBlock27

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock28 Using cfiCommon0
        CFI NoFunction
        THUMB
??UpdateCSMname??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock28
        REQUIRE UpdateCSMname

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
maincsm_name_body:
        DS8 280

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "PMU-MON">`:
        DATA
        DC8 "PMU-MON"
        DC8 "PAGE-2"
        DC8 0
        DC8 "PAGE-1"
        DC8 0
        DC8 "%02X"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "PmuMon">`:
        DATA
        DC8 "PmuMon"
        DC8 0
        DC32 maincsm_onmessage, maincsm_oncreate, maincsm_onclose, 44, 1
        DC32 minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
        DC16 139
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
??Canvas:
        DATA
        DC16 0, 0, 0, 0
gui_methods:
        DC32 OnRedraw, onCreate, onClose, onFocus, onUnfocus, OnKey, 0H
        DC32 kill_data, method8, method9, 0H

        RSEG DATA_C:CONST:SORT:NOROOT(2)
minus11:
        DATA
        DC32 -11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock29 Using cfiCommon1
        CFI Function UpdateCSMname
        ARM
UpdateCSMname:
        LDR      R0,??UpdateCSMname_0  ;; `?<Constant "PmuMon">`
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R1,R0
        ADD      R0,R0,#+32
        SWI      +292
        POP      {PC}             ;; return
        DATA
??UpdateCSMname_0:
        DC32     `?<Constant "PmuMon">`
        CFI EndBlock cfiBlock29

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock30 Using cfiCommon0
        CFI NoFunction
        THUMB
??main??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock30
        REQUIRE main

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock31 Using cfiCommon1
        CFI Function main
        ARM
main:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SUB      SP,SP,#+44
        CFI CFA R13+48
        MOV      R1,#+44
        MOV      R0,SP
        SWI      +285
        BL       UpdateCSMname
        SWI      +326
        LDR      R0,??main_0      ;; `?<Constant "PmuMon">` + 8
        MOV      R2,#+0
        MOV      R1,SP
        SWI      +263
        SWI      +327
        MOV      R0,#+0
        ADD      SP,SP,#+44
        CFI CFA R13+4
        POP      {PC}             ;; return
        DATA
??main_0:
        DC32     `?<Constant "PmuMon">` + 8
        CFI EndBlock cfiBlock31

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock32 Using cfiCommon1
        CFI NoFunction
        ARM
??i2cr_pmu??rA:
        LDR      R12,??Subroutine16_0  ;; i2cr_pmu
        BX       R12
        DATA
??Subroutine16_0:
        DC32     i2cr_pmu
        CFI EndBlock cfiBlock32

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock33 Using cfiCommon1
        CFI NoFunction
        ARM
??kill_data??rA:
        LDR      R12,??Subroutine17_0  ;; kill_data
        BX       R12
        DATA
??Subroutine17_0:
        DC32     kill_data
        CFI EndBlock cfiBlock33

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for ready>`:
        DATA
        DC32 0
`?<Initializer for page>`:
        DC32 1
`?<Initializer for tmr>`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
`?<Initializer for reg_buf>`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
`?<Initializer for reg_buf_prev>`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        RSEG ELFBEGIN:DATA:REORDER:NOROOT(0)

        END
// 
// 1 592 bytes in segment CODE
//   140 bytes in segment DATA_C
//   304 bytes in segment DATA_I
//   304 bytes in segment DATA_ID
//   284 bytes in segment DATA_Z
//    24 bytes in segment INITTAB
// 
// 1 504 bytes of CODE  memory (+ 112 bytes shared)
//   444 bytes of CONST memory
//   588 bytes of DATA  memory
//
//Errors: none
//Warnings: 1
