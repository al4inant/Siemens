##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    12/Jul/2013  20:59:07 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  S:\Users\alfin_000\Documents\Siemens\IAR\ARM\Interfa #
#                       ce\CapCom_SGOLD\main.c                               #
#    Command line    =  S:\Users\alfin_000\Documents\Siemens\IAR\ARM\Interfa #
#                       ce\CapCom_SGOLD\main.c -D NEWSGOLD -lCN              #
#                       S:\Users\alfin_000\Documents\Siemens\IAR\ARM\Interfa #
#                       ce\CapCom_SGOLD\Release_SGOLD\List\ -la              #
#                       S:\Users\alfin_000\Documents\Siemens\IAR\ARM\Interfa #
#                       ce\CapCom_SGOLD\Release_SGOLD\List\ -o               #
#                       S:\Users\alfin_000\Documents\Siemens\IAR\ARM\Interfa #
#                       ce\CapCom_SGOLD\Release_SGOLD\Obj\ -z9 --cpu_mode    #
#                       arm --endian little --cpu ARM926EJ-S --stack_align   #
#                       4 --interwork -e --fpu None --dlib_config            #
#                       S:\Users\alfin_000\Documents\Siemens\IAR\ARM\LIB\dl5 #
#                       tpainl8n.h -I S:\Users\alfin_000\Documents\Siemens\I #
#                       AR\ARM\INC\ --inline_threshold=2                     #
#    List file       =  S:\Users\alfin_000\Documents\Siemens\IAR\ARM\Interfa #
#                       ce\CapCom_SGOLD\Release_SGOLD\List\main.lst          #
#    Object file     =  S:\Users\alfin_000\Documents\Siemens\IAR\ARM\Interfa #
#                       ce\CapCom_SGOLD\Release_SGOLD\Obj\main.r79           #
#                                                                            #
#                                                                            #
##############################################################################

S:\Users\alfin_000\Documents\Siemens\IAR\ARM\Interface\CapCom_SGOLD\main.c
      1          #include <swilib.h>
      2          
      3          extern void kill_data( void * p, void( * func_p ) ( void * ) );
      4          #pragma segment="ELFBEGIN"

   \                                 In segment CODE, align 4, keep-with-next
      5          void ElfKiller(void)
      6          {
   \                     ElfKiller:
   \   00000000   00402DE9           PUSH     {LR}
      7            kill_data(__segment_begin("ELFBEGIN"),(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??ElfKiller_0  ;; SFB(ELFBEGIN)
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??ElfKiller_0:
   \   00000018   ........           DC32     SFB(ELFBEGIN)
      8          }
      9          
     10          //SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay);
     11          //0 - дисплей, 1 - клавиатура, 2 - динамический свет (x65)
     12          
     13          #define pwm_EnablePort        ((int(*)(int channel))0xA11697E8)
     14          #define pwm_DisablePort       ((int(*)(int channel))0xA1169B3C)
     15          #define pwm_SetFreq           ((int(*)(int channel,int frequency))0xA116A478)
     16          #define pwm_SetDutycycle      ((int(*)(int channel,int dutycycle))0xA116A920)
     17          #define pwm_unk9              ((int(*)(int channel))0xA116A2B4)
     18          
     19          #define PIN_Set               ((int(*)(int p1,int pin, int p3))0xA1169360)
     20          #define Disable_INT           ((int(*)(void))0xA0837F80)
     21          #define Enable_INT            ((void(*)(unsigned cpsr))0xA0837FA0)
     22          

   \                                 In segment CODE, align 4, keep-with-next
     23          int main(char *exename, char *fname) {
     24            //pwm_unk9, 12(off),14(off)
     25            //N93: F43000B0 - dynlight pin
     26            //N9F: F4300098 - ringin pin
     27            
     28            pwm_EnablePort(8);
   \                     main:
   \   00000000   5C109FE5           LDR      R1,??main_0      ;; 0xffffffffa11697e8
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0800A0E3           MOV      R0,#+8
   \   0000000C   31FF2FE1           BLX      R1
     29            pwm_unk9(8);
   \   00000010   50109FE5           LDR      R1,??main_0+0x4  ;; 0xffffffffa116a2b4
   \   00000014   0800A0E3           MOV      R0,#+8
   \   00000018   31FF2FE1           BLX      R1
     30            pwm_SetFreq(8,1);
   \   0000001C   48209FE5           LDR      R2,??main_0+0x8  ;; 0xffffffffa116a478
   \   00000020   0110A0E3           MOV      R1,#+1
   \   00000024   0800A0E3           MOV      R0,#+8
   \   00000028   32FF2FE1           BLX      R2
     31            pwm_EnablePort(9);
   \   0000002C   30109FE5           LDR      R1,??main_0      ;; 0xffffffffa11697e8
   \   00000030   0900A0E3           MOV      R0,#+9
   \   00000034   31FF2FE1           BLX      R1
     32            pwm_SetDutycycle(9,50);
   \   00000038   30209FE5           LDR      R2,??main_0+0xC  ;; 0xffffffffa116a920
   \   0000003C   3210A0E3           MOV      R1,#+50
   \   00000040   0900A0E3           MOV      R0,#+9
   \   00000044   32FF2FE1           BLX      R2
     33            //SetIllumination( 2, 1, 0x64, 0x6E8);
     34            ShowMSG(1,(int)"Дин.свет включен!");
   \   00000048   24109FE5           LDR      R1,??main_0+0x10  ;; `?<Constant "\\304\\350\\355.\\361\\342\\345\\362 \\342`
   \   0000004C   0100A0E3           MOV      R0,#+1
   \   00000050   480100EF           SWI      +328
     35            
     36            SUBPROC((void *)ElfKiller);
   \   00000054   1C009FE5           LDR      R0,??main_0+0x14  ;; ElfKiller
   \   00000058   710100EF           SWI      +369
     37            return 0;
   \   0000005C   0000A0E3           MOV      R0,#+0
   \   00000060   0080BDE8           POP      {PC}             ;; return
   \                     ??main_0:
   \   00000064   E89716A1           DC32     0xffffffffa11697e8
   \   00000068   B4A216A1           DC32     0xffffffffa116a2b4
   \   0000006C   78A416A1           DC32     0xffffffffa116a478
   \   00000070   20A916A1           DC32     0xffffffffa116a920
   \   00000074   ........           DC32     `?<Constant "\\304\\350\\355.\\361\\342\\345\\362 \\342`
   \   00000078   ........           DC32     ElfKiller
     38          }

   \                                 In segment ELFBEGIN, align 1

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\304\\350\\355.\\361\\342\\345\\362 \\342`:
   \   00000000   C4E8ED2EF1E2       DC8 "\304\350\355.\361\342\345\362 \342\352\353\376\367\345\355!"
   \              E5F220E2EAEB
   \              FEF7E5ED2100
   \   00000012   0000               DC8 0, 0
     39          
     40          
     41          

   Maximum stack usage in bytes:

     Function  CSTACK
     --------  ------
     ElfKiller     4
     main          4


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     ElfKiller                        28
     main                            124
     ?<Constant "\304\350\355.\361\342\345\362 \342
                                      20
      Others                          20

 
 172 bytes in segment CODE
  20 bytes in segment DATA_C
 
 152 bytes of CODE  memory (+ 20 bytes shared)
  20 bytes of CONST memory

Errors: none
Warnings: none
