##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    05/Oct/2023  21:05:47 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\aes128_p #
#                       atch\aes\aes_ctr.c                                   #
#    Command line    =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\aes128_p #
#                       atch\aes\aes_ctr.c -D NEWSGOLD -D S75v52 -lC         #
#                       D:\Users\alfinant\Documents\Siemens\Dev\IAR\aes128_p #
#                       atch\S75v52\List\ -o D:\Users\alfinant\Documents\Sie #
#                       mens\Dev\IAR\aes128_patch\S75v52\Obj\ -z9            #
#                       --cpu_mode thumb --endian little --cpu ARM926EJ-S    #
#                       --stack_align 4 --interwork -e --enable_multibytes   #
#                       --fpu None --dlib_config D:\Users\alfinant\Documents #
#                       \Siemens\IAR\ARM\LIB\dl5tptinl8n.h -I                #
#                       D:\Users\alfinant\Documents\Siemens\IAR\ARM\INC\     #
#                       --inline_threshold=2                                 #
#    List file       =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\aes128_p #
#                       atch\S75v52\List\aes_ctr.lst                         #
#    Object file     =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\aes128_p #
#                       atch\S75v52\Obj\aes_ctr.r79                          #
#                                                                            #
#                                                                            #
##############################################################################

D:\Users\alfinant\Documents\Siemens\Dev\IAR\aes128_patch\aes\aes_ctr.c
      1          /* crypto/aes/aes_ctr.c -*- mode:C; c-file-style: "eay" -*- */
      2          /* ====================================================================
      3           * Copyright (c) 1998-2002 The OpenSSL Project.  All rights reserved.
      4           *
      5           * Redistribution and use in source and binary forms, with or without
      6           * modification, are permitted provided that the following conditions
      7           * are met:
      8           *
      9           * 1. Redistributions of source code must retain the above copyright
     10           *    notice, this list of conditions and the following disclaimer. 
     11           *
     12           * 2. Redistributions in binary form must reproduce the above copyright
     13           *    notice, this list of conditions and the following disclaimer in
     14           *    the documentation and/or other materials provided with the
     15           *    distribution.
     16           *
     17           * 3. All advertising materials mentioning features or use of this
     18           *    software must display the following acknowledgment:
     19           *    "This product includes software developed by the OpenSSL Project
     20           *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
     21           *
     22           * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
     23           *    endorse or promote products derived from this software without
     24           *    prior written permission. For written permission, please contact
     25           *    openssl-core@openssl.org.
     26           *
     27           * 5. Products derived from this software may not be called "OpenSSL"
     28           *    nor may "OpenSSL" appear in their names without prior written
     29           *    permission of the OpenSSL Project.
     30           *
     31           * 6. Redistributions of any form whatsoever must retain the following
     32           *    acknowledgment:
     33           *    "This product includes software developed by the OpenSSL Project
     34           *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
     35           *
     36           * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
     37           * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     38           * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
     39           * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
     40           * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     41           * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
     42           * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
     43           * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     44           * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
     45           * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
     46           * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
     47           * OF THE POSSIBILITY OF SUCH DAMAGE.
     48           * ====================================================================
     49           *
     50           */
     51          
     52          #ifndef AES_DEBUG
     53          # ifndef NDEBUG
     54          #  define NDEBUG
     55          # endif
     56          #endif
     57          #include <assert.h>
     58          
     59          #include <openssl/aes.h>
     60          #include "aes_locl.h"
     61          
     62          /* NOTE: the IV/counter CTR mode is big-endian.  The rest of the AES code
     63           * is endian-neutral. */
     64          
     65          /* increment counter (128-bit int) by 1 */

   \                                 In segment CODE, align 4, keep-with-next
     66          static void AES_ctr128_inc(unsigned char *counter) {
     67          	unsigned long c;
     68          
     69          	/* Grab bottom dword of counter and increment */
     70          	c = GETU32(counter + 12);
     71          	c++;	c &= 0xFFFFFFFF;
   \                     AES_ctr128_inc:
   \   00000000   017B               LDRB     R1,[R0, #+12]
   \   00000002   427B               LDRB     R2,[R0, #+13]
   \   00000004   0906               LSLS     R1,R1,#+24
   \   00000006   1204               LSLS     R2,R2,#+16
   \   00000008   4A40               EORS     R2,R2,R1
   \   0000000A   817B               LDRB     R1,[R0, #+14]
   \   0000000C   0B02               LSLS     R3,R1,#+8
   \   0000000E   C17B               LDRB     R1,[R0, #+15]
   \   00000010   5340               EORS     R3,R3,R2
   \   00000012   5940               EORS     R1,R1,R3
   \   00000014   491C               ADDS     R1,R1,#+1
     72          	PUTU32(counter + 12, c);
   \   00000016   0A0E               LSRS     R2,R1,#+24
   \   00000018   0273               STRB     R2,[R0, #+12]
   \   0000001A   0A0C               LSRS     R2,R1,#+16
   \   0000001C   4273               STRB     R2,[R0, #+13]
   \   0000001E   0A0A               LSRS     R2,R1,#+8
   \   00000020   8273               STRB     R2,[R0, #+14]
   \   00000022   0A00               MOVS     R2,R1
   \   00000024   C173               STRB     R1,[R0, #+15]
     73          
     74          	/* if no overflow, we're done */
     75          	if (c)
   \   00000026   39D1               BNE      ??AES_ctr128_inc_0
     76          		return;
     77          
     78          	/* Grab 1st dword of counter and increment */
     79          	c = GETU32(counter +  8);
     80          	c++;	c &= 0xFFFFFFFF;
   \   00000028   017A               LDRB     R1,[R0, #+8]
   \   0000002A   427A               LDRB     R2,[R0, #+9]
   \   0000002C   0906               LSLS     R1,R1,#+24
   \   0000002E   1204               LSLS     R2,R2,#+16
   \   00000030   4A40               EORS     R2,R2,R1
   \   00000032   817A               LDRB     R1,[R0, #+10]
   \   00000034   0B02               LSLS     R3,R1,#+8
   \   00000036   C17A               LDRB     R1,[R0, #+11]
   \   00000038   5340               EORS     R3,R3,R2
   \   0000003A   5940               EORS     R1,R1,R3
   \   0000003C   491C               ADDS     R1,R1,#+1
     81          	PUTU32(counter +  8, c);
   \   0000003E   0A0E               LSRS     R2,R1,#+24
   \   00000040   0272               STRB     R2,[R0, #+8]
   \   00000042   0A0C               LSRS     R2,R1,#+16
   \   00000044   4272               STRB     R2,[R0, #+9]
   \   00000046   0A0A               LSRS     R2,R1,#+8
   \   00000048   8272               STRB     R2,[R0, #+10]
   \   0000004A   0A00               MOVS     R2,R1
   \   0000004C   C172               STRB     R1,[R0, #+11]
     82          
     83          	/* if no overflow, we're done */
     84          	if (c)
   \   0000004E   25D1               BNE      ??AES_ctr128_inc_0
     85          		return;
     86          
     87          	/* Grab 2nd dword of counter and increment */
     88          	c = GETU32(counter +  4);
     89          	c++;	c &= 0xFFFFFFFF;
   \   00000050   0179               LDRB     R1,[R0, #+4]
   \   00000052   4279               LDRB     R2,[R0, #+5]
   \   00000054   0906               LSLS     R1,R1,#+24
   \   00000056   1204               LSLS     R2,R2,#+16
   \   00000058   4A40               EORS     R2,R2,R1
   \   0000005A   8179               LDRB     R1,[R0, #+6]
   \   0000005C   0B02               LSLS     R3,R1,#+8
   \   0000005E   C179               LDRB     R1,[R0, #+7]
   \   00000060   5340               EORS     R3,R3,R2
   \   00000062   5940               EORS     R1,R1,R3
   \   00000064   491C               ADDS     R1,R1,#+1
     90          	PUTU32(counter +  4, c);
   \   00000066   0A0E               LSRS     R2,R1,#+24
   \   00000068   0271               STRB     R2,[R0, #+4]
   \   0000006A   0A0C               LSRS     R2,R1,#+16
   \   0000006C   4271               STRB     R2,[R0, #+5]
   \   0000006E   0A0A               LSRS     R2,R1,#+8
   \   00000070   8271               STRB     R2,[R0, #+6]
   \   00000072   0A00               MOVS     R2,R1
   \   00000074   C171               STRB     R1,[R0, #+7]
     91          
     92          	/* if no overflow, we're done */
     93          	if (c)
   \   00000076   11D1               BNE      ??AES_ctr128_inc_0
     94          		return;
     95          
     96          	/* Grab top dword of counter and increment */
     97          	c = GETU32(counter +  0);
     98          	c++;	c &= 0xFFFFFFFF;
   \   00000078   0178               LDRB     R1,[R0, #+0]
   \   0000007A   4278               LDRB     R2,[R0, #+1]
   \   0000007C   0906               LSLS     R1,R1,#+24
   \   0000007E   1204               LSLS     R2,R2,#+16
   \   00000080   4A40               EORS     R2,R2,R1
   \   00000082   8178               LDRB     R1,[R0, #+2]
   \   00000084   0B02               LSLS     R3,R1,#+8
   \   00000086   C178               LDRB     R1,[R0, #+3]
   \   00000088   5340               EORS     R3,R3,R2
   \   0000008A   5940               EORS     R1,R1,R3
   \   0000008C   491C               ADDS     R1,R1,#+1
     99          	PUTU32(counter +  0, c);
   \   0000008E   0A0E               LSRS     R2,R1,#+24
   \   00000090   0270               STRB     R2,[R0, #+0]
   \   00000092   0A0C               LSRS     R2,R1,#+16
   \   00000094   4270               STRB     R2,[R0, #+1]
   \   00000096   0A0A               LSRS     R2,R1,#+8
   \   00000098   8270               STRB     R2,[R0, #+2]
   \   0000009A   C170               STRB     R1,[R0, #+3]
    100          }
   \                     ??AES_ctr128_inc_0:
   \   0000009C   7047               BX       LR
    101          
    102          /* The input encrypted as though 128bit counter mode is being
    103           * used.  The extra state information to record how much of the
    104           * 128bit block we have used is contained in *num, and the
    105           * encrypted counter is kept in ecount_buf.  Both *num and
    106           * ecount_buf must be initialised with zeros before the first
    107           * call to AES_ctr128_encrypt().
    108           *
    109           * This algorithm assumes that the counter is in the x lower bits
    110           * of the IV (ivec), and that the application has full control over
    111           * overflow and the rest of the IV.  This implementation takes NO
    112           * responsability for checking that the counter doesn't overflow
    113           * into the rest of the IV when incremented.
    114           */

   \                                 In segment CODE, align 4, keep-with-next
    115          void AES_ctr128_encrypt(const unsigned char *in, unsigned char *out,
    116          	size_t length, const AES_KEY *key,
    117          	unsigned char ivec[AES_BLOCK_SIZE],
    118          	unsigned char ecount_buf[AES_BLOCK_SIZE],
    119          	unsigned int *num) {
   \                     AES_ctr128_encrypt:
   \   00000000   F9B5               PUSH     {R0,R3-R7,LR}
   \   00000002   099C               LDR      R4,[SP, #+36]
   \   00000004   0500               MOVS     R5,R0
   \   00000006   0E00               MOVS     R6,R1
    120          
    121          	unsigned int n;
    122          	unsigned long l=length;
   \   00000008   0092               STR      R2,[SP, #+0]
    123          
    124          	assert(in && out && key && counter && num);
    125          	assert(*num < AES_BLOCK_SIZE);
    126          
    127          	n = *num;
   \   0000000A   2768               LDR      R7,[R4, #+0]
   \   0000000C   13E0               B        ??AES_ctr128_encrypt_0
    128          
    129          	while (l--) {
    130          		if (n == 0) {
   \                     ??AES_ctr128_encrypt_1:
   \   0000000E   002F               CMP      R7,#+0
   \   00000010   07D1               BNE      ??AES_ctr128_encrypt_2
    131          			AES_encrypt(ivec, ecount_buf, key);
   \   00000012   019A               LDR      R2,[SP, #+4]
   \   00000014   0899               LDR      R1,[SP, #+32]
   \   00000016   0798               LDR      R0,[SP, #+28]
   \   00000018   ........           _BLF     AES_encrypt,??AES_encrypt??rT
    132           			AES_ctr128_inc(ivec);
   \   0000001C   0798               LDR      R0,[SP, #+28]
   \   0000001E   ........           BL       AES_ctr128_inc
    133          		}
    134          		*(out++) = *(in++) ^ ecount_buf[n];
   \                     ??AES_ctr128_encrypt_2:
   \   00000022   0899               LDR      R1,[SP, #+32]
   \   00000024   2878               LDRB     R0,[R5, #+0]
   \   00000026   C95D               LDRB     R1,[R1, R7]
   \   00000028   6D1C               ADDS     R5,R5,#+1
    135          		n = (n+1) % AES_BLOCK_SIZE;
   \   0000002A   7F1C               ADDS     R7,R7,#+1
   \   0000002C   4140               EORS     R1,R1,R0
   \   0000002E   3170               STRB     R1,[R6, #+0]
   \   00000030   761C               ADDS     R6,R6,#+1
   \   00000032   3F07               LSLS     R7,R7,#+28
   \   00000034   3F0F               LSRS     R7,R7,#+28
    136          	}
   \                     ??AES_ctr128_encrypt_0:
   \   00000036   0098               LDR      R0,[SP, #+0]
   \   00000038   411E               SUBS     R1,R0,#+1
   \   0000003A   0091               STR      R1,[SP, #+0]
   \   0000003C   0028               CMP      R0,#+0
   \   0000003E   E6D1               BNE      ??AES_ctr128_encrypt_1
    137          
    138          	*num=n;
   \   00000040   2760               STR      R7,[R4, #+0]
    139          }
   \   00000042   FCBD               POP      {R2-R7,PC}       ;; return

   Maximum stack usage in bytes:

     Function           CSTACK
     --------           ------
     AES_ctr128_encrypt    28
     AES_ctr128_inc         4


   Segment part sizes:

     Function/Label     Bytes
     --------------     -----
     AES_ctr128_inc      158
     AES_ctr128_encrypt   68
      Others              24

 
 250 bytes in segment CODE
 
 226 bytes of CODE memory (+ 24 bytes shared)

Errors: none
Warnings: none
