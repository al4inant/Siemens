##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    05/Oct/2023  21:05:46 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\aes128_p #
#                       atch\aes\aes_cfb.c                                   #
#    Command line    =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\aes128_p #
#                       atch\aes\aes_cfb.c -D NEWSGOLD -D S75v52 -lC         #
#                       D:\Users\alfinant\Documents\Siemens\Dev\IAR\aes128_p #
#                       atch\S75v52\List\ -o D:\Users\alfinant\Documents\Sie #
#                       mens\Dev\IAR\aes128_patch\S75v52\Obj\ -z9            #
#                       --cpu_mode thumb --endian little --cpu ARM926EJ-S    #
#                       --stack_align 4 --interwork -e --enable_multibytes   #
#                       --fpu None --dlib_config D:\Users\alfinant\Documents #
#                       \Siemens\IAR\ARM\LIB\dl5tptinl8n.h -I                #
#                       D:\Users\alfinant\Documents\Siemens\IAR\ARM\INC\     #
#                       --inline_threshold=2                                 #
#    List file       =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\aes128_p #
#                       atch\S75v52\List\aes_cfb.lst                         #
#    Object file     =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\aes128_p #
#                       atch\S75v52\Obj\aes_cfb.r79                          #
#                                                                            #
#                                                                            #
##############################################################################

D:\Users\alfinant\Documents\Siemens\Dev\IAR\aes128_patch\aes\aes_cfb.c
      1          /* crypto/aes/aes_cfb.c -*- mode:C; c-file-style: "eay" -*- */
      2          /* ====================================================================
      3           * Copyright (c) 1998-2002 The OpenSSL Project.  All rights reserved.
      4           *
      5           * Redistribution and use in source and binary forms, with or without
      6           * modification, are permitted provided that the following conditions
      7           * are met:
      8           *
      9           * 1. Redistributions of source code must retain the above copyright
     10           *    notice, this list of conditions and the following disclaimer. 
     11           *
     12           * 2. Redistributions in binary form must reproduce the above copyright
     13           *    notice, this list of conditions and the following disclaimer in
     14           *    the documentation and/or other materials provided with the
     15           *    distribution.
     16           *
     17           * 3. All advertising materials mentioning features or use of this
     18           *    software must display the following acknowledgment:
     19           *    "This product includes software developed by the OpenSSL Project
     20           *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
     21           *
     22           * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
     23           *    endorse or promote products derived from this software without
     24           *    prior written permission. For written permission, please contact
     25           *    openssl-core@openssl.org.
     26           *
     27           * 5. Products derived from this software may not be called "OpenSSL"
     28           *    nor may "OpenSSL" appear in their names without prior written
     29           *    permission of the OpenSSL Project.
     30           *
     31           * 6. Redistributions of any form whatsoever must retain the following
     32           *    acknowledgment:
     33           *    "This product includes software developed by the OpenSSL Project
     34           *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
     35           *
     36           * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
     37           * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     38           * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
     39           * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
     40           * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     41           * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
     42           * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
     43           * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     44           * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
     45           * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
     46           * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
     47           * OF THE POSSIBILITY OF SUCH DAMAGE.
     48           * ====================================================================
     49           *
     50           */
     51          /* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
     52           * All rights reserved.
     53           *
     54           * This package is an SSL implementation written
     55           * by Eric Young (eay@cryptsoft.com).
     56           * The implementation was written so as to conform with Netscapes SSL.
     57           * 
     58           * This library is free for commercial and non-commercial use as long as
     59           * the following conditions are aheared to.  The following conditions
     60           * apply to all code found in this distribution, be it the RC4, RSA,
     61           * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
     62           * included with this distribution is covered by the same copyright terms
     63           * except that the holder is Tim Hudson (tjh@cryptsoft.com).
     64           * 
     65           * Copyright remains Eric Young's, and as such any Copyright notices in
     66           * the code are not to be removed.
     67           * If this package is used in a product, Eric Young should be given attribution
     68           * as the author of the parts of the library used.
     69           * This can be in the form of a textual message at program startup or
     70           * in documentation (online or textual) provided with the package.
     71           * 
     72           * Redistribution and use in source and binary forms, with or without
     73           * modification, are permitted provided that the following conditions
     74           * are met:
     75           * 1. Redistributions of source code must retain the copyright
     76           *    notice, this list of conditions and the following disclaimer.
     77           * 2. Redistributions in binary form must reproduce the above copyright
     78           *    notice, this list of conditions and the following disclaimer in the
     79           *    documentation and/or other materials provided with the distribution.
     80           * 3. All advertising materials mentioning features or use of this software
     81           *    must display the following acknowledgement:
     82           *    "This product includes cryptographic software written by
     83           *     Eric Young (eay@cryptsoft.com)"
     84           *    The word 'cryptographic' can be left out if the rouines from the library
     85           *    being used are not cryptographic related :-).
     86           * 4. If you include any Windows specific code (or a derivative thereof) from 
     87           *    the apps directory (application code) you must include an acknowledgement:
     88           *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
     89           * 
     90           * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
     91           * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     92           * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
     93           * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
     94           * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     95           * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
     96           * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     97           * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
     98           * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
     99           * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
    100           * SUCH DAMAGE.
    101           * 
    102           * The licence and distribution terms for any publically available version or
    103           * derivative of this code cannot be changed.  i.e. this code cannot simply be
    104           * copied and put under another distribution licence
    105           * [including the GNU Public Licence.]
    106           */
    107          
    108          #ifndef AES_DEBUG
    109          # ifndef NDEBUG
    110          #  define NDEBUG
    111          # endif
    112          #endif
    113          #include <assert.h>
    114          
    115          #include "../defs.h"
    116          #include <openssl/aes.h>
    117          #include "aes_locl.h"
    118          //#include <openssl/e_os.h>
    119          
    120          /* The input and output encrypted as though 128bit cfb mode is being
    121           * used.  The extra state information to record how much of the
    122           * 128bit block we have used is contained in *num;
    123           */
    124          

   \                                 In segment CODE, align 4, keep-with-next
    125          void AES_cfb128_encrypt(const unsigned char *in, unsigned char *out,
    126          	size_t length, const AES_KEY *key,
    127          	unsigned char *ivec, int *num, const int enc) {
   \                     AES_cfb128_encrypt:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0500               MOVS     R5,R0
   \   00000004   0898               LDR      R0,[SP, #+32]
   \   00000006   0E00               MOVS     R6,R1
    128          
    129          	unsigned int n;
    130          	unsigned long l = length;
    131          	unsigned char c;
    132          
    133          	assert(in && out && key && ivec && num);
    134          
    135          	n = *num;
   \   00000008   0799               LDR      R1,[SP, #+28]
   \   0000000A   1400               MOVS     R4,R2
   \   0000000C   0F68               LDR      R7,[R1, #+0]
   \   0000000E   0028               CMP      R0,#+0
   \   00000010   2AD0               BEQ      ??AES_cfb128_encrypt_0
    136          
    137          	if (enc) {
    138          		while (l--) {
   \                     ??AES_cfb128_encrypt_1:
   \   00000012   2000               MOVS     R0,R4
   \   00000014   441E               SUBS     R4,R0,#+1
   \   00000016   0028               CMP      R0,#+0
   \   00000018   2AD0               BEQ      ??AES_cfb128_encrypt_2
    139          			if (n == 0) {
   \   0000001A   002F               CMP      R7,#+0
   \   0000001C   04D1               BNE      ??AES_cfb128_encrypt_3
    140          				AES_encrypt(ivec, ivec, key);
   \   0000001E   0699               LDR      R1,[SP, #+24]
   \   00000020   009A               LDR      R2,[SP, #+0]
   \   00000022   0800               MOVS     R0,R1
   \   00000024   ........           _BLF     AES_encrypt,??AES_encrypt??rT
    141          			}
    142          			ivec[n] = *(out++) = *(in++) ^ ivec[n];
   \                     ??AES_cfb128_encrypt_3:
   \   00000028   0698               LDR      R0,[SP, #+24]
   \   0000002A   2A78               LDRB     R2,[R5, #+0]
   \   0000002C   C019               ADDS     R0,R0,R7
   \   0000002E   0178               LDRB     R1,[R0, #+0]
   \   00000030   6D1C               ADDS     R5,R5,#+1
    143          			n = (n+1) % AES_BLOCK_SIZE;
   \   00000032   7F1C               ADDS     R7,R7,#+1
   \   00000034   5140               EORS     R1,R1,R2
   \   00000036   3170               STRB     R1,[R6, #+0]
   \   00000038   761C               ADDS     R6,R6,#+1
   \   0000003A   0170               STRB     R1,[R0, #+0]
   \   0000003C   3F07               LSLS     R7,R7,#+28
   \   0000003E   3F0F               LSRS     R7,R7,#+28
   \   00000040   E7E7               B        ??AES_cfb128_encrypt_1
    144          		}
    145          	} else {
    146          		while (l--) {
    147          			if (n == 0) {
   \                     ??AES_cfb128_encrypt_4:
   \   00000042   002F               CMP      R7,#+0
   \   00000044   04D1               BNE      ??AES_cfb128_encrypt_5
    148          				AES_encrypt(ivec, ivec, key);
   \   00000046   0699               LDR      R1,[SP, #+24]
   \   00000048   009A               LDR      R2,[SP, #+0]
   \   0000004A   0800               MOVS     R0,R1
   \   0000004C   ........           _BLF     AES_encrypt,??AES_encrypt??rT
    149          			}
    150          			c = *(in);
    151          			*(out++) = *(in++) ^ ivec[n];
   \                     ??AES_cfb128_encrypt_5:
   \   00000050   0699               LDR      R1,[SP, #+24]
   \   00000052   2878               LDRB     R0,[R5, #+0]
   \   00000054   C919               ADDS     R1,R1,R7
   \   00000056   0A78               LDRB     R2,[R1, #+0]
   \   00000058   6D1C               ADDS     R5,R5,#+1
    152          			ivec[n] = c;
    153          			n = (n+1) % AES_BLOCK_SIZE;
   \   0000005A   7F1C               ADDS     R7,R7,#+1
   \   0000005C   4240               EORS     R2,R2,R0
   \   0000005E   3270               STRB     R2,[R6, #+0]
   \   00000060   761C               ADDS     R6,R6,#+1
   \   00000062   0870               STRB     R0,[R1, #+0]
   \   00000064   3F07               LSLS     R7,R7,#+28
   \   00000066   3F0F               LSRS     R7,R7,#+28
    154          		}
   \                     ??AES_cfb128_encrypt_0:
   \   00000068   2000               MOVS     R0,R4
   \   0000006A   441E               SUBS     R4,R0,#+1
   \   0000006C   0028               CMP      R0,#+0
   \   0000006E   E8D1               BNE      ??AES_cfb128_encrypt_4
    155          	}
    156          
    157          	*num=n;
   \                     ??AES_cfb128_encrypt_2:
   \   00000070   0798               LDR      R0,[SP, #+28]
   \   00000072   0760               STR      R7,[R0, #+0]
    158          }
   \   00000074   F8BD               POP      {R3-R7,PC}       ;; return
    159          
    160          /* This expects a single block of size nbits for both in and out. Note that
    161             it corrupts any extra bits in the last byte of out */

   \                                 In segment CODE, align 4, keep-with-next
    162          void AES_cfbr_encrypt_block(const unsigned char *in,unsigned char *out,
    163          			    const int nbits,const AES_KEY *key,
    164          			    unsigned char *ivec,const int enc)
    165              {
   \                     AES_cfbr_encrypt_block:
   \   00000000   F3B5               PUSH     {R0,R1,R4-R7,LR}
   \   00000002   88B0               SUB      SP,SP,#+32
   \   00000004   0F9C               LDR      R4,[SP, #+60]
   \   00000006   109E               LDR      R6,[SP, #+64]
   \   00000008   1500               MOVS     R5,R2
   \   0000000A   1F00               MOVS     R7,R3
    166              int n,rem,num;
    167              unsigned char ovec[AES_BLOCK_SIZE*2];
    168          
    169              if (nbits<=0 || nbits>128) return;
   \   0000000C   012D               CMP      R5,#+1
   \   0000000E   4CDB               BLT      ??AES_cfbr_encrypt_block_0
   \   00000010   812D               CMP      R5,#+129
   \   00000012   4ADA               BGE      ??AES_cfbr_encrypt_block_0
   \   00000014   1022               MOVS     R2,#+16
   \   00000016   2100               MOVS     R1,R4
   \   00000018   6846               MOV      R0,SP
    170          
    171          	/* fill in the first half of the new IV with the current IV */
    172          	memcpy(ovec,ivec,AES_BLOCK_SIZE);
   \   0000001A   ........           _BLF     -1594078704,??rT0xA0FC4A10
    173          	/* construct the new IV */
    174          	AES_encrypt(ivec,ivec,key);
   \   0000001E   3A00               MOVS     R2,R7
   \   00000020   2100               MOVS     R1,R4
   \   00000022   2000               MOVS     R0,R4
   \   00000024   ........           _BLF     AES_encrypt,??AES_encrypt??rT
    175          	num = (nbits+7)/8;
   \   00000028   E81D               ADDS     R0,R5,#+7
   \   0000002A   8110               ASRS     R1,R0,#+2
   \   0000002C   490F               LSRS     R1,R1,#+29
   \   0000002E   0818               ADDS     R0,R1,R0
   \   00000030   C110               ASRS     R1,R0,#+3
    176          	if (enc)	/* encrypt the input */
   \   00000032   6846               MOV      R0,SP
   \   00000034   002E               CMP      R6,#+0
   \   00000036   0CD0               BEQ      ??AES_cfbr_encrypt_block_1
    177          	    for(n=0 ; n < num ; ++n)
   \   00000038   0023               MOVS     R3,#+0
   \                     ??AES_cfbr_encrypt_block_2:
   \   0000003A   8B42               CMP      R3,R1
   \   0000003C   18DA               BGE      ??AES_cfbr_encrypt_block_3
    178          		out[n] = (ovec[AES_BLOCK_SIZE+n] = in[n] ^ ivec[n]);
   \   0000003E   089A               LDR      R2,[SP, #+32]
   \   00000040   D65C               LDRB     R6,[R2, R3]
   \   00000042   E25C               LDRB     R2,[R4, R3]
   \   00000044   7240               EORS     R2,R2,R6
   \   00000046   C618               ADDS     R6,R0,R3
   \   00000048   3274               STRB     R2,[R6, #+16]
   \   0000004A   099E               LDR      R6,[SP, #+36]
   \   0000004C   F254               STRB     R2,[R6, R3]
   \   0000004E   5B1C               ADDS     R3,R3,#+1
   \   00000050   F3E7               B        ??AES_cfbr_encrypt_block_2
    179          	else		/* decrypt the input */
    180          	    for(n=0 ; n < num ; ++n)
   \                     ??AES_cfbr_encrypt_block_1:
   \   00000052   0023               MOVS     R3,#+0
   \   00000054   0AE0               B        ??AES_cfbr_encrypt_block_4
    181          		out[n] = (ovec[AES_BLOCK_SIZE+n] = in[n]) ^ ivec[n];
   \                     ??AES_cfbr_encrypt_block_5:
   \   00000056   089A               LDR      R2,[SP, #+32]
   \   00000058   D65C               LDRB     R6,[R2, R3]
   \   0000005A   C218               ADDS     R2,R0,R3
   \   0000005C   1674               STRB     R6,[R2, #+16]
   \   0000005E   099A               LDR      R2,[SP, #+36]
   \   00000060   9446               MOV      R12,R2
   \   00000062   E25C               LDRB     R2,[R4, R3]
   \   00000064   7240               EORS     R2,R2,R6
   \   00000066   6646               MOV      R6,R12
   \   00000068   F254               STRB     R2,[R6, R3]
   \   0000006A   5B1C               ADDS     R3,R3,#+1
   \                     ??AES_cfbr_encrypt_block_4:
   \   0000006C   8B42               CMP      R3,R1
   \   0000006E   F2DB               BLT      ??AES_cfbr_encrypt_block_5
    182          	/* shift ovec left... */
    183          	rem = nbits%8;
   \                     ??AES_cfbr_encrypt_block_3:
   \   00000070   A910               ASRS     R1,R5,#+2
   \   00000072   490F               LSRS     R1,R1,#+29
   \   00000074   4919               ADDS     R1,R1,R5
   \   00000076   C910               ASRS     R1,R1,#+3
   \   00000078   CA00               LSLS     R2,R1,#+3
   \   0000007A   AA1A               SUBS     R2,R5,R2
    184          	num = nbits/8;
    185          	if(rem==0)
   \   0000007C   05D1               BNE      ??AES_cfbr_encrypt_block_6
    186          	    memcpy(ivec,ovec+num,AES_BLOCK_SIZE);
   \   0000007E   1022               MOVS     R2,#+16
   \   00000080   4118               ADDS     R1,R0,R1
   \   00000082   2000               MOVS     R0,R4
   \   00000084   ........           _BLF     -1594078704,??rT0xA0FC4A10
   \   00000088   0FE0               B        ??AES_cfbr_encrypt_block_0
    187          	else
    188          	    for(n=0 ; n < AES_BLOCK_SIZE ; ++n)
   \                     ??AES_cfbr_encrypt_block_6:
   \   0000008A   0023               MOVS     R3,#+0
    189          		ivec[n] = ovec[n+num]<<rem | ovec[n+num+1]>>(8-rem);
   \                     ??AES_cfbr_encrypt_block_7:
   \   0000008C   5D18               ADDS     R5,R3,R1
   \   0000008E   4519               ADDS     R5,R0,R5
   \   00000090   2F78               LDRB     R7,[R5, #+0]
   \   00000092   6E78               LDRB     R6,[R5, #+1]
   \   00000094   9740               LSLS     R7,R7,R2
   \   00000096   B446               MOV      R12,R6
   \   00000098   0826               MOVS     R6,#+8
   \   0000009A   B51A               SUBS     R5,R6,R2
   \   0000009C   6646               MOV      R6,R12
   \   0000009E   2E41               ASRS     R6,R6,R5
   \   000000A0   3E43               ORRS     R6,R6,R7
   \   000000A2   E654               STRB     R6,[R4, R3]
   \   000000A4   5B1C               ADDS     R3,R3,#+1
   \   000000A6   102B               CMP      R3,#+16
   \   000000A8   F0DB               BLT      ??AES_cfbr_encrypt_block_7
   \                     ??AES_cfbr_encrypt_block_0:
   \   000000AA   0AB0               ADD      SP,SP,#+40
   \   000000AC   F0BD               POP      {R4-R7,PC}       ;; return
    190          
    191              /* it is not necessary to cleanse ovec, since the IV is not secret */
    192              }
    193          
    194          /* N.B. This expects the input to be packed, MS bit first */

   \                                 In segment CODE, align 4, keep-with-next
    195          void AES_cfb1_encrypt(const unsigned char *in, unsigned char *out,
    196          		      size_t length, const AES_KEY *key,
    197          		      unsigned char *ivec, int *num, const int enc)
    198              {
   \                     AES_cfb1_encrypt:
   \   00000000   FBB5               PUSH     {R0,R1,R3-R7,LR}
   \   00000002   82B0               SUB      SP,SP,#+8
   \   00000004   1400               MOVS     R4,R2
    199              unsigned int n;
    200              unsigned char c[1],d[1];
    201          
    202              assert(in && out && key && ivec && num);
    203              assert(*num == 0);
    204          
    205              ClearMemory(out, (length+7)/8); //memset(out,0,(length+7)/8);
   \   00000006   E01D               ADDS     R0,R4,#+7
   \   00000008   C108               LSRS     R1,R0,#+3
   \   0000000A   0398               LDR      R0,[SP, #+12]
   \   0000000C   0025               MOVS     R5,#+0
   \   0000000E   ........           _BLF     -1594078796,??rT0xA0FC49B4
   \   00000012   1BE0               B        ??AES_cfb1_encrypt_0
    206              for(n=0 ; n < length ; ++n)
   \                     ??AES_cfb1_encrypt_1:
   \   00000014   0021               MOVS     R1,#+0
   \   00000016   0170               STRB     R1,[R0, #+0]
    207          	{
    208          	c[0]=(in[n/8]&(1 << (7-n%8))) ? 0x80 : 0;
    209          	AES_cfbr_encrypt_block(c,d,1,key,ivec,enc);
   \                     ??AES_cfb1_encrypt_2:
   \   00000018   0C99               LDR      R1,[SP, #+48]
   \   0000001A   0A98               LDR      R0,[SP, #+40]
   \   0000001C   0122               MOVS     R2,#+1
   \   0000001E   03B4               PUSH     {R0,R1}
   \   00000020   069B               LDR      R3,[SP, #+24]
   \   00000022   02A9               ADD      R1,SP,#+8
   \   00000024   02A8               ADD      R0,SP,#+8
   \   00000026   491C               ADDS     R1,R1,#+1
   \   00000028   ........           BL       AES_cfbr_encrypt_block
    210          	out[n/8]=(out[n/8]&~(1 << (7-n%8)))|((d[0]&0x80) >> (n%8));
   \   0000002C   0598               LDR      R0,[SP, #+20]
   \   0000002E   02AA               ADD      R2,SP,#+8
   \   00000030   9278               LDRB     R2,[R2, #+2]
   \   00000032   8019               ADDS     R0,R0,R6
   \   00000034   0178               LDRB     R1,[R0, #+0]
   \   00000036   6D1C               ADDS     R5,R5,#+1
   \   00000038   9143               BICS     R1,R1,R2
   \   0000003A   02AA               ADD      R2,SP,#+8
   \   0000003C   5278               LDRB     R2,[R2, #+1]
   \   0000003E   1740               ANDS     R7,R7,R2
   \   00000040   02AA               ADD      R2,SP,#+8
   \   00000042   D278               LDRB     R2,[R2, #+3]
   \   00000044   D740               LSRS     R7,R7,R2
   \   00000046   0F43               ORRS     R7,R7,R1
   \   00000048   0770               STRB     R7,[R0, #+0]
   \   0000004A   02B0               ADD      SP,SP,#+8
   \                     ??AES_cfb1_encrypt_0:
   \   0000004C   A542               CMP      R5,R4
   \   0000004E   15D2               BCS      ??AES_cfb1_encrypt_3
   \   00000050   6846               MOV      R0,SP
   \   00000052   0722               MOVS     R2,#+7
   \   00000054   2A40               ANDS     R2,R2,R5
   \   00000056   C270               STRB     R2,[R0, #+3]
   \   00000058   6B46               MOV      R3,SP
   \   0000005A   DB78               LDRB     R3,[R3, #+3]
   \   0000005C   0121               MOVS     R1,#+1
   \   0000005E   0722               MOVS     R2,#+7
   \   00000060   D21A               SUBS     R2,R2,R3
   \   00000062   9140               LSLS     R1,R1,R2
   \   00000064   8170               STRB     R1,[R0, #+2]
   \   00000066   0298               LDR      R0,[SP, #+8]
   \   00000068   EE08               LSRS     R6,R5,#+3
   \   0000006A   805D               LDRB     R0,[R0, R6]
   \   0000006C   6946               MOV      R1,SP
   \   0000006E   8978               LDRB     R1,[R1, #+2]
   \   00000070   8027               MOVS     R7,#+128
   \   00000072   0842               TST      R0,R1
   \   00000074   6846               MOV      R0,SP
   \   00000076   CDD0               BEQ      ??AES_cfb1_encrypt_1
   \   00000078   0770               STRB     R7,[R0, #+0]
   \   0000007A   CDE7               B        ??AES_cfb1_encrypt_2
    211          	}
    212              }
   \                     ??AES_cfb1_encrypt_3:
   \   0000007C   05B0               ADD      SP,SP,#+20
   \   0000007E   F0BD               POP      {R4-R7,PC}       ;; return
    213          

   \                                 In segment CODE, align 4, keep-with-next
    214          void AES_cfb8_encrypt(const unsigned char *in, unsigned char *out,
    215          		      size_t length, const AES_KEY *key,
    216          		      unsigned char *ivec, int *num, const int enc)
    217              {
   \                     AES_cfb8_encrypt:
   \   00000000   F7B5               PUSH     {R0-R2,R4-R7,LR}
   \   00000002   089D               LDR      R5,[SP, #+32]
   \   00000004   0A9E               LDR      R6,[SP, #+40]
   \   00000006   1C00               MOVS     R4,R3
    218              unsigned int n;
    219          
    220              assert(in && out && key && ivec && num);
    221              assert(*num == 0);
    222          
    223              for(n=0 ; n < length ; ++n)
   \   00000008   0027               MOVS     R7,#+0
   \   0000000A   0CE0               B        ??AES_cfb8_encrypt_0
    224          	AES_cfbr_encrypt_block(&in[n],&out[n],8,key,ivec,enc);
   \                     ??AES_cfb8_encrypt_1:
   \   0000000C   3100               MOVS     R1,R6
   \   0000000E   2800               MOVS     R0,R5
   \   00000010   03B4               PUSH     {R0,R1}
   \   00000012   0398               LDR      R0,[SP, #+12]
   \   00000014   2300               MOVS     R3,R4
   \   00000016   0822               MOVS     R2,#+8
   \   00000018   C119               ADDS     R1,R0,R7
   \   0000001A   0298               LDR      R0,[SP, #+8]
   \   0000001C   C019               ADDS     R0,R0,R7
   \   0000001E   ........           BL       AES_cfbr_encrypt_block
   \   00000022   7F1C               ADDS     R7,R7,#+1
   \   00000024   02B0               ADD      SP,SP,#+8
   \                     ??AES_cfb8_encrypt_0:
   \   00000026   0298               LDR      R0,[SP, #+8]
   \   00000028   8742               CMP      R7,R0
   \   0000002A   EFD3               BCC      ??AES_cfb8_encrypt_1
    225              }
   \   0000002C   FEBD               POP      {R1-R7,PC}       ;; return
    226          

   Maximum stack usage in bytes:

     Function               CSTACK
     --------               ------
     AES_cfb128_encrypt        24
     AES_cfb1_encrypt          48
     AES_cfb8_encrypt          40
     AES_cfbr_encrypt_block    60


   Segment part sizes:

     Function/Label         Bytes
     --------------         -----
     AES_cfb128_encrypt      118
     AES_cfbr_encrypt_block  174
     AES_cfb1_encrypt        128
     AES_cfb8_encrypt         46
      Others                  56

 
 522 bytes in segment CODE
 
 466 bytes of CODE memory (+ 56 bytes shared)

Errors: none
Warnings: none
