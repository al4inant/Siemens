##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    05/Oct/2023  21:05:53 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\aes128_p #
#                       atch\ssl_ciph.c                                      #
#    Command line    =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\aes128_p #
#                       atch\ssl_ciph.c -D NEWSGOLD -D EL71v45 -lC           #
#                       D:\Users\alfinant\Documents\Siemens\Dev\IAR\aes128_p #
#                       atch\EL71v45\List\ -o D:\Users\alfinant\Documents\Si #
#                       emens\Dev\IAR\aes128_patch\EL71v45\Obj\ -z9          #
#                       --cpu_mode thumb --endian little --cpu ARM926EJ-S    #
#                       --stack_align 4 --interwork -e --enable_multibytes   #
#                       --fpu None --dlib_config D:\Users\alfinant\Documents #
#                       \Siemens\IAR\ARM\LIB\dl5tptinl8n.h -I                #
#                       D:\Users\alfinant\Documents\Siemens\IAR\ARM\INC\     #
#                       --inline_threshold=2                                 #
#    List file       =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\aes128_p #
#                       atch\EL71v45\List\ssl_ciph.lst                       #
#    Object file     =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\aes128_p #
#                       atch\EL71v45\Obj\ssl_ciph.r79                        #
#                                                                            #
#                                                                            #
##############################################################################

D:\Users\alfinant\Documents\Siemens\Dev\IAR\aes128_patch\ssl_ciph.c
      1          /* ssl/ssl_ciph.c */
      2          /* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
      3           * All rights reserved.
      4           *
      5           * This package is an SSL implementation written
      6           * by Eric Young (eay@cryptsoft.com).
      7           * The implementation was written so as to conform with Netscapes SSL.
      8           * 
      9           * This library is free for commercial and non-commercial use as long as
     10           * the following conditions are aheared to.  The following conditions
     11           * apply to all code found in this distribution, be it the RC4, RSA,
     12           * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
     13           * included with this distribution is covered by the same copyright terms
     14           * except that the holder is Tim Hudson (tjh@cryptsoft.com).
     15           * 
     16           * Copyright remains Eric Young's, and as such any Copyright notices in
     17           * the code are not to be removed.
     18           * If this package is used in a product, Eric Young should be given attribution
     19           * as the author of the parts of the library used.
     20           * This can be in the form of a textual message at program startup or
     21           * in documentation (online or textual) provided with the package.
     22           * 
     23           * Redistribution and use in source and binary forms, with or without
     24           * modification, are permitted provided that the following conditions
     25           * are met:
     26           * 1. Redistributions of source code must retain the copyright
     27           *    notice, this list of conditions and the following disclaimer.
     28           * 2. Redistributions in binary form must reproduce the above copyright
     29           *    notice, this list of conditions and the following disclaimer in the
     30           *    documentation and/or other materials provided with the distribution.
     31           * 3. All advertising materials mentioning features or use of this software
     32           *    must display the following acknowledgement:
     33           *    "This product includes cryptographic software written by
     34           *     Eric Young (eay@cryptsoft.com)"
     35           *    The word 'cryptographic' can be left out if the rouines from the library
     36           *    being used are not cryptographic related :-).
     37           * 4. If you include any Windows specific code (or a derivative thereof) from 
     38           *    the apps directory (application code) you must include an acknowledgement:
     39           *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
     40           * 
     41           * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
     42           * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     43           * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
     44           * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
     45           * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     46           * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
     47           * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     48           * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
     49           * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
     50           * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
     51           * SUCH DAMAGE.
     52           * 
     53           * The licence and distribution terms for any publically available version or
     54           * derivative of this code cannot be changed.  i.e. this code cannot simply be
     55           * copied and put under another distribution licence
     56           * [including the GNU Public Licence.]
     57           */
     58          /* ====================================================================
     59           * Copyright (c) 1998-2006 The OpenSSL Project.  All rights reserved.
     60           *
     61           * Redistribution and use in source and binary forms, with or without
     62           * modification, are permitted provided that the following conditions
     63           * are met:
     64           *
     65           * 1. Redistributions of source code must retain the above copyright
     66           *    notice, this list of conditions and the following disclaimer. 
     67           *
     68           * 2. Redistributions in binary form must reproduce the above copyright
     69           *    notice, this list of conditions and the following disclaimer in
     70           *    the documentation and/or other materials provided with the
     71           *    distribution.
     72           *
     73           * 3. All advertising materials mentioning features or use of this
     74           *    software must display the following acknowledgment:
     75           *    "This product includes software developed by the OpenSSL Project
     76           *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
     77           *
     78           * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
     79           *    endorse or promote products derived from this software without
     80           *    prior written permission. For written permission, please contact
     81           *    openssl-core@openssl.org.
     82           *
     83           * 5. Products derived from this software may not be called "OpenSSL"
     84           *    nor may "OpenSSL" appear in their names without prior written
     85           *    permission of the OpenSSL Project.
     86           *
     87           * 6. Redistributions of any form whatsoever must retain the following
     88           *    acknowledgment:
     89           *    "This product includes software developed by the OpenSSL Project
     90           *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
     91           *
     92           * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
     93           * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     94           * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
     95           * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
     96           * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     97           * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
     98           * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
     99           * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
    100           * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
    101           * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
    102           * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
    103           * OF THE POSSIBILITY OF SUCH DAMAGE.
    104           * ====================================================================
    105           *
    106           * This product includes cryptographic software written by Eric Young
    107           * (eay@cryptsoft.com).  This product includes software written by Tim
    108           * Hudson (tjh@cryptsoft.com).
    109           *
    110           */
    111          /* ====================================================================
    112           * Copyright (c) 1998-2006 The OpenSSL Project.  All rights reserved.
    113           *
    114           * Redistribution and use in source and binary forms, with or without
    115           * modification, are permitted provided that the following conditions
    116           * are met:
    117           *
    118           * 1. Redistributions of source code must retain the above copyright
    119           *    notice, this list of conditions and the following disclaimer. 
    120           *
    121           * 2. Redistributions in binary form must reproduce the above copyright
    122           *    notice, this list of conditions and the following disclaimer in
    123           *    the documentation and/or other materials provided with the
    124           *    distribution.
    125           *
    126           * 3. All advertising materials mentioning features or use of this
    127           *    software must display the following acknowledgment:
    128           *    "This product includes software developed by the OpenSSL Project
    129           *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
    130           *
    131           * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
    132           *    endorse or promote products derived from this software without
    133           *    prior written permission. For written permission, please contact
    134           *    openssl-core@openssl.org.
    135           *
    136           * 5. Products derived from this software may not be called "OpenSSL"
    137           *    nor may "OpenSSL" appear in their names without prior written
    138           *    permission of the OpenSSL Project.
    139           *
    140           * 6. Redistributions of any form whatsoever must retain the following
    141           *    acknowledgment:
    142           *    "This product includes software developed by the OpenSSL Project
    143           *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
    144           *
    145           * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
    146           * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    147           * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    148           * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
    149           * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    150           * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
    151           * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    152           * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
    153           * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
    154           * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
    155           * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
    156           * OF THE POSSIBILITY OF SUCH DAMAGE.
    157           * ====================================================================
    158           *
    159           * This product includes cryptographic software written by Eric Young
    160           * (eay@cryptsoft.com).  This product includes software written by Tim
    161           * Hudson (tjh@cryptsoft.com).
    162           *
    163           */
    164          /* ====================================================================
    165           * Copyright 2002 Sun Microsystems, Inc. ALL RIGHTS RESERVED.
    166           * ECC cipher suite support in OpenSSL originally developed by 
    167           * SUN MICROSYSTEMS, INC., and contributed to the OpenSSL project.
    168           */
    169          
    170          #include <openssl/ssl.h>

  	} X509_ALGOR;
  	  ^
"D:\Users\alfinant\Documents\Siemens\IAR\ARM\INC\openssl\x509.h",121  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  	} X509_NAME;
  	  ^
"D:\Users\alfinant\Documents\Siemens\IAR\ARM\INC\openssl\x509.h",167  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  	} X509;
  	  ^
"D:\Users\alfinant\Documents\Siemens\IAR\ARM\INC\openssl\x509.h",267  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  	} X509_CRL;
  	  ^
"D:\Users\alfinant\Documents\Siemens\IAR\ARM\INC\openssl\x509.h",339  Warning[Pe301]: 
          typedef name has already been declared (with same type)
    171          #include "ssl_locl.h"
    172          #include "defs.h"
    173          
    174          #define SSL_ENC_DES_IDX		0
    175          #define SSL_ENC_3DES_IDX	1
    176          #define SSL_ENC_RC4_IDX		2
    177          #define SSL_ENC_RC2_IDX		3
    178          #define SSL_ENC_AES128_IDX      3
    179          #define SSL_ENC_IDEA_IDX	4
    180          //#define SSL_ENC_AES256_IDX      4
    181          #define SSL_ENC_eFZA_IDX	5
    182          #define SSL_ENC_NULL_IDX	6
    183          #define SSL_ENC_NUM_IDX		7
    184          
    185          #define SSL_MD_MD5_IDX	0
    186          #define SSL_MD_SHA1_IDX	1
    187          #define SSL_MD_NUM_IDX	2
    188          
    189          

   \                                 In segment SSL_CIPHER_GET_EVP__CODE_AREA, align 4, keep-with-next
    190          EVP_CIPHER *load_aes_idea_cbc_ciphers(const char* idea_cbc) @ "SSL_CIPHER_GET_EVP__CODE_AREA"
    191          {
   \                     load_aes_idea_cbc_ciphers:
   \   00000000   30B5               PUSH     {R4,R5,LR}
    192            EVP_CIPHER *c = EVP_get_cipherbyname(SN_aes_128_cbc);
    193            ssl_cipher_methods[SSL_ENC_AES128_IDX]=(EVP_CIPHER*)c;
   \   00000002   044D               LDR      R5,??load_aes_idea_cbc_ciphers_0  ;; 0xffffffffa0e8030b
   \   00000004   0400               MOVS     R4,R0
   \   00000006   0448               LDR      R0,??load_aes_idea_cbc_ciphers_0+0x4  ;; `?<Constant "AES-128-CBC">`
   \   00000008   A847               BLX      R5
   \   0000000A   0449               LDR      R1,??load_aes_idea_cbc_ciphers_0+0x8  ;; 0xffffffffa8f56cd0
   \   0000000C   0860               STR      R0,[R1, #+0]
    194            
    195            return EVP_get_cipherbyname(idea_cbc);
   \   0000000E   2000               MOVS     R0,R4
   \   00000010   A847               BLX      R5
   \   00000012   30BD               POP      {R4,R5,PC}       ;; return
   \                     ??load_aes_idea_cbc_ciphers_0:
   \   00000014   0B03E8A0           DC32     0xffffffffa0e8030b
   \   00000018   ........           DC32     `?<Constant "AES-128-CBC">`
   \   0000001C   D06CF5A8           DC32     0xffffffffa8f56cd0
    196          }
    197          
    198          

   \                                 In segment CODE, align 4, keep-with-next
    199          int ssl_cipher_get_evp(SSL_SESSION *s, const EVP_CIPHER **enc,
    200          	     const EVP_MD **md, SSL_COMP **comp)
    201          	{
   \                     ssl_cipher_get_evp:
   \   00000000   F2B5               PUSH     {R1,R4-R7,LR}
   \   00000002   83B0               SUB      SP,SP,#+12
    202          	int i;
    203          	SSL_CIPHER *c;
    204          
    205          	c=s->cipher;
   \   00000004   A830               ADDS     R0,R0,#+168
   \   00000006   4568               LDR      R5,[R0, #+4]
   \   00000008   1400               MOVS     R4,R2
   \   0000000A   1F00               MOVS     R7,R3
    206          	if (c == NULL) return(0);
   \   0000000C   002D               CMP      R5,#+0
   \   0000000E   01D1               BNE      ??ssl_cipher_get_evp_0
   \                     ??ssl_cipher_get_evp_1:
   \   00000010   0020               MOVS     R0,#+0
   \   00000012   51E0               B        ??ssl_cipher_get_evp_2
    207          	if (comp != NULL)
   \                     ??ssl_cipher_get_evp_0:
   \   00000014   0026               MOVS     R6,#+0
   \   00000016   002F               CMP      R7,#+0
   \   00000018   10D0               BEQ      ??ssl_cipher_get_evp_3
    208          		{
    209          		SSL_COMP ctmp;
    210          
    211          		if (s->compress_meth == 0)
   \   0000001A   0068               LDR      R0,[R0, #+0]
   \   0000001C   0028               CMP      R0,#+0
   \   0000001E   0CD0               BEQ      ??ssl_cipher_get_evp_4
    212          			*comp=NULL;
    213          		else if (ssl_comp_methods == NULL)
    214          			{
    215          			/* bad */
    216          			*comp=NULL;
    217          			}
    218          		else
    219          			{
    220          
    221          			ctmp.id=s->compress_meth;
   \                     ??ssl_cipher_get_evp_5:
   \   00000020   0090               STR      R0,[SP, #+0]
   \   00000022   2E48               LDR      R0,??ssl_cipher_get_evp_6  ;; 0xffffffffa8f56b58
   \   00000024   6946               MOV      R1,SP
    222          			i=sk_SSL_COMP_find(ssl_comp_methods,&ctmp);
   \   00000026   ........           _BLF     -1594358091,??rT0xA0F806B5
    223          			if (i >= 0)
   \   0000002A   0028               CMP      R0,#+0
   \   0000002C   05D4               BMI      ??ssl_cipher_get_evp_4
    224          				*comp=sk_SSL_COMP_value(ssl_comp_methods,i);
   \   0000002E   0100               MOVS     R1,R0
   \   00000030   2A48               LDR      R0,??ssl_cipher_get_evp_6  ;; 0xffffffffa8f56b58
   \   00000032   ........           _BLF     -1594357843,??rT0xA0F807AD
   \   00000036   3860               STR      R0,[R7, #+0]
   \   00000038   00E0               B        ??ssl_cipher_get_evp_3
    225          			else
    226          				*comp=NULL;
   \                     ??ssl_cipher_get_evp_4:
   \   0000003A   3E60               STR      R6,[R7, #+0]
    227          			}
    228          		}
    229          
    230          	if ((enc == NULL) || (md == NULL)) return(0);
   \                     ??ssl_cipher_get_evp_3:
   \   0000003C   0398               LDR      R0,[SP, #+12]
   \   0000003E   0028               CMP      R0,#+0
   \   00000040   E6D0               BEQ      ??ssl_cipher_get_evp_1
   \   00000042   002C               CMP      R4,#+0
   \   00000044   E4D0               BEQ      ??ssl_cipher_get_evp_1
    231          
    232          	switch (c->algorithms & SSL_ENC_MASK)
   \   00000046   E968               LDR      R1,[R5, #+12]
   \   00000048   254A               LDR      R2,??ssl_cipher_get_evp_6+0x4  ;; 0x87f000
   \   0000004A   0320               MOVS     R0,#+3
   \   0000004C   0A40               ANDS     R2,R2,R1
   \   0000004E   8021               MOVS     R1,#+128
   \   00000050   4901               LSLS     R1,R1,#+5
   \   00000052   8A42               CMP      R2,R1
   \   00000054   12D0               BEQ      ??ssl_cipher_get_evp_7
   \   00000056   4900               LSLS     R1,R1,#+1
   \   00000058   8A42               CMP      R2,R1
   \   0000005A   2FD0               BEQ      ??ssl_cipher_get_evp_8
   \   0000005C   4900               LSLS     R1,R1,#+1
   \   0000005E   8A42               CMP      R2,R1
   \   00000060   2ED0               BEQ      ??ssl_cipher_get_evp_9
   \   00000062   4900               LSLS     R1,R1,#+1
   \   00000064   8A42               CMP      R2,R1
   \   00000066   0AD0               BEQ      ??ssl_cipher_get_evp_10
   \   00000068   4900               LSLS     R1,R1,#+1
   \   0000006A   8A42               CMP      R2,R1
   \   0000006C   2AD0               BEQ      ??ssl_cipher_get_evp_11
   \   0000006E   8900               LSLS     R1,R1,#+2
   \   00000070   8A42               CMP      R2,R1
   \   00000072   29D0               BEQ      ??ssl_cipher_get_evp_12
   \   00000074   4901               LSLS     R1,R1,#+5
   \   00000076   8A42               CMP      R2,R1
   \   00000078   29D0               BEQ      ??ssl_cipher_get_evp_13
   \   0000007A   2BE0               B        ??ssl_cipher_get_evp_14
    233          		{
    234          	case SSL_DES:
    235          		i=SSL_ENC_DES_IDX;
   \                     ??ssl_cipher_get_evp_7:
   \   0000007C   0020               MOVS     R0,#+0
    236          		break;
    237          	case SSL_3DES:
    238          		i=SSL_ENC_3DES_IDX;
    239          		break;
    240          	case SSL_RC4:
    241          		i=SSL_ENC_RC4_IDX;
    242          		break;
    243          	case SSL_RC2:
    244          		i=SSL_ENC_RC2_IDX;
    245          		break;
    246          	case SSL_IDEA:
    247          		i=SSL_ENC_IDEA_IDX;
    248          		break;
    249          	case SSL_eNULL:
    250          		i=SSL_ENC_NULL_IDX;
    251          		break;
    252          	case SSL_AES:
    253                    switch(c->alg_bits)
    254                    {
    255                    case 128: i=SSL_ENC_AES128_IDX; break;
    256                    //case 256: i=SSL_ENC_AES256_IDX; break;
    257                    default: i=-1; break;
    258                    }
    259                    break;
    260                          default:
    261          		i= -1;
    262          		break;
    263          		}
    264          
    265          	if ((i < 0) || (i > SSL_ENC_NUM_IDX))
    266          		*enc=NULL;
    267          	else
    268          		{
    269          		if (i == SSL_ENC_NULL_IDX)
    270          			*enc=EVP_enc_null();
    271          		else
    272          			*enc=ssl_cipher_methods[i];
   \                     ??ssl_cipher_get_evp_10:
   \   0000007E   1949               LDR      R1,??ssl_cipher_get_evp_6+0x8  ;; 0xffffffffa8f56cc4
   \   00000080   8000               LSLS     R0,R0,#+2
   \   00000082   0858               LDR      R0,[R1, R0]
   \                     ??ssl_cipher_get_evp_15:
   \   00000084   0399               LDR      R1,[SP, #+12]
   \   00000086   0860               STR      R0,[R1, #+0]
    273          		}
    274          
    275          	switch (c->algorithms & SSL_MAC_MASK)
   \   00000088   E868               LDR      R0,[R5, #+12]
   \   0000008A   C021               MOVS     R1,#+192
   \   0000008C   4903               LSLS     R1,R1,#+13
   \   0000008E   0140               ANDS     R1,R1,R0
   \   00000090   8020               MOVS     R0,#+128
   \   00000092   0003               LSLS     R0,R0,#+12
   \   00000094   8142               CMP      R1,R0
   \   00000096   03D0               BEQ      ??ssl_cipher_get_evp_16
   \   00000098   4000               LSLS     R0,R0,#+1
   \   0000009A   8142               CMP      R1,R0
   \   0000009C   1CD0               BEQ      ??ssl_cipher_get_evp_17
   \   0000009E   03E0               B        ??ssl_cipher_get_evp_18
    276          		{
    277          	case SSL_MD5:
    278          		i=SSL_MD_MD5_IDX;
   \                     ??ssl_cipher_get_evp_16:
   \   000000A0   0020               MOVS     R0,#+0
    279          		break;
    280          	case SSL_SHA1:
    281          		i=SSL_MD_SHA1_IDX;
    282          		break;
    283          	default:
    284          		i= -1;
    285          		break;
    286          		}
    287          	if ((i < 0) || (i > SSL_MD_NUM_IDX))
    288          		*md=NULL;
    289          	else
    290          		*md=ssl_digest_methods[i];
   \                     ??ssl_cipher_get_evp_19:
   \   000000A2   1149               LDR      R1,??ssl_cipher_get_evp_6+0xC  ;; 0xffffffffa8f56b60
   \   000000A4   8000               LSLS     R0,R0,#+2
   \   000000A6   0E58               LDR      R6,[R1, R0]
   \                     ??ssl_cipher_get_evp_18:
   \   000000A8   2660               STR      R6,[R4, #+0]
    291          
    292          	if ((*enc != NULL) && (*md != NULL))
   \   000000AA   0398               LDR      R0,[SP, #+12]
   \   000000AC   0068               LDR      R0,[R0, #+0]
   \   000000AE   0028               CMP      R0,#+0
   \   000000B0   AED0               BEQ      ??ssl_cipher_get_evp_1
   \   000000B2   002E               CMP      R6,#+0
   \   000000B4   ACD0               BEQ      ??ssl_cipher_get_evp_1
    293          		return(1);
   \   000000B6   0120               MOVS     R0,#+1
   \                     ??ssl_cipher_get_evp_2:
   \   000000B8   04B0               ADD      SP,SP,#+16
   \   000000BA   F0BD               POP      {R4-R7,PC}       ;; return
   \                     ??ssl_cipher_get_evp_8:
   \   000000BC   0120               MOVS     R0,#+1
   \   000000BE   DEE7               B        ??ssl_cipher_get_evp_10
   \                     ??ssl_cipher_get_evp_9:
   \   000000C0   0220               MOVS     R0,#+2
   \   000000C2   DCE7               B        ??ssl_cipher_get_evp_10
   \                     ??ssl_cipher_get_evp_11:
   \   000000C4   0420               MOVS     R0,#+4
   \   000000C6   DAE7               B        ??ssl_cipher_get_evp_10
   \                     ??ssl_cipher_get_evp_12:
   \   000000C8   ........           _BLF     -1595406881,??rT0xA0E805DF
   \   000000CC   DAE7               B        ??ssl_cipher_get_evp_15
   \                     ??ssl_cipher_get_evp_13:
   \   000000CE   E969               LDR      R1,[R5, #+28]
   \   000000D0   8029               CMP      R1,#+128
   \   000000D2   D4D0               BEQ      ??ssl_cipher_get_evp_10
   \                     ??ssl_cipher_get_evp_14:
   \   000000D4   0020               MOVS     R0,#+0
   \   000000D6   D5E7               B        ??ssl_cipher_get_evp_15
   \                     ??ssl_cipher_get_evp_17:
   \   000000D8   0120               MOVS     R0,#+1
   \   000000DA   E2E7               B        ??ssl_cipher_get_evp_19
   \                     ??ssl_cipher_get_evp_6:
   \   000000DC   586BF5A8           DC32     0xffffffffa8f56b58
   \   000000E0   00F08700           DC32     0x87f000
   \   000000E4   C46CF5A8           DC32     0xffffffffa8f56cc4
   \   000000E8   606BF5A8           DC32     0xffffffffa8f56b60
    294          	else
    295          		return(0);
    296          	}

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "AES-128-CBC">`:
   \   00000000   4145532D3132       DC8 "AES-128-CBC"
   \              382D43424300

   Maximum stack usage in bytes:

     Function                  CSTACK
     --------                  ------
     load_aes_idea_cbc_ciphers    12
     ssl_cipher_get_evp           36


   Segment part sizes:

     Function/Label            Bytes
     --------------            -----
     load_aes_idea_cbc_ciphers   32
     ssl_cipher_get_evp         236
     ?<Constant "AES-128-CBC">   12
      Others                     32

 
 268 bytes in segment CODE
  12 bytes in segment DATA_C
  32 bytes in segment SSL_CIPHER_GET_EVP__CODE_AREA
 
 268 bytes of CODE  memory (+ 32 bytes shared)
  12 bytes of CONST memory

Errors: none
Warnings: 4
