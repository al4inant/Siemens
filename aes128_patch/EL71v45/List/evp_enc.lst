##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    05/Oct/2023  21:05:53 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\aes128_p #
#                       atch\evp_enc.c                                       #
#    Command line    =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\aes128_p #
#                       atch\evp_enc.c -D NEWSGOLD -D EL71v45 -lC            #
#                       D:\Users\alfinant\Documents\Siemens\Dev\IAR\aes128_p #
#                       atch\EL71v45\List\ -o D:\Users\alfinant\Documents\Si #
#                       emens\Dev\IAR\aes128_patch\EL71v45\Obj\ -z9          #
#                       --cpu_mode thumb --endian little --cpu ARM926EJ-S    #
#                       --stack_align 4 --interwork -e --enable_multibytes   #
#                       --fpu None --dlib_config D:\Users\alfinant\Documents #
#                       \Siemens\IAR\ARM\LIB\dl5tptinl8n.h -I                #
#                       D:\Users\alfinant\Documents\Siemens\IAR\ARM\INC\     #
#                       --inline_threshold=2                                 #
#    List file       =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\aes128_p #
#                       atch\EL71v45\List\evp_enc.lst                        #
#    Object file     =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\aes128_p #
#                       atch\EL71v45\Obj\evp_enc.r79                         #
#                                                                            #
#                                                                            #
##############################################################################

D:\Users\alfinant\Documents\Siemens\Dev\IAR\aes128_patch\evp_enc.c
      1          #include <openssl/ssl.h>

  	} X509_ALGOR;
  	  ^
"D:\Users\alfinant\Documents\Siemens\IAR\ARM\INC\openssl\x509.h",121  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  	} X509_NAME;
  	  ^
"D:\Users\alfinant\Documents\Siemens\IAR\ARM\INC\openssl\x509.h",167  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  	} X509;
  	  ^
"D:\Users\alfinant\Documents\Siemens\IAR\ARM\INC\openssl\x509.h",267  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  	} X509_CRL;
  	  ^
"D:\Users\alfinant\Documents\Siemens\IAR\ARM\INC\openssl\x509.h",339  Warning[Pe301]: 
          typedef name has already been declared (with same type)
      2          #include <openssl/err.h>
      3          #include "defs.h"
      4          #include "evp_locl.h"
      5          
      6          

   \                                 In segment CODE, align 4, keep-with-next
      7          void EVP_CIPHER_CTX_init(EVP_CIPHER_CTX *ctx)
      8          	{
   \                     EVP_CIPHER_CTX_init:
   \   00000000   00B5               PUSH     {LR}
      9          	ClearMemory(ctx, sizeof(EVP_CIPHER_CTX)); //memset(ctx,0,sizeof(EVP_CIPHER_CTX));
   \   00000002   8821               MOVS     R1,#+136
   \   00000004   ........           _BLF     -1594113044,??rT0xA0FBC3EC
     10          	/* ctx->cipher=NULL; */
     11          	}
   \   00000008   00BD               POP      {PC}             ;; return
     12          

   \                                 In segment CODE, align 4, keep-with-next
     13          int EVP_CipherInit_ex(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher, ENGINE *impl,
     14          	     const unsigned char *key, const unsigned char *iv, int enc)
     15          	{
   \                     EVP_CipherInit_ex:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   079F               LDR      R7,[SP, #+28]
   \   00000004   0400               MOVS     R4,R0
   \   00000006   0E00               MOVS     R6,R1
     16          	if (enc == -1)
   \   00000008   0020               MOVS     R0,#+0
   \   0000000A   C043               MVNS     R0,R0
   \   0000000C   8742               CMP      R7,R0
   \   0000000E   01D1               BNE      ??EVP_CipherInit_ex_0
     17          		enc = ctx->encrypt;
   \   00000010   6768               LDR      R7,[R4, #+4]
   \   00000012   03E0               B        ??EVP_CipherInit_ex_1
     18          	else
     19          		{
     20          		if (enc)
   \                     ??EVP_CipherInit_ex_0:
   \   00000014   002F               CMP      R7,#+0
   \   00000016   00D0               BEQ      ??EVP_CipherInit_ex_2
     21          			enc = 1;
   \   00000018   0127               MOVS     R7,#+1
     22          		ctx->encrypt = enc;
   \                     ??EVP_CipherInit_ex_2:
   \   0000001A   6760               STR      R7,[R4, #+4]
     23          		}
     24          
     25          	if (cipher)
   \                     ??EVP_CipherInit_ex_1:
   \   0000001C   0025               MOVS     R5,#+0
   \   0000001E   002E               CMP      R6,#+0
   \   00000020   20D0               BEQ      ??EVP_CipherInit_ex_3
     26          		{
     27          		/* Ensure a context left lying around from last time is cleared
     28          		 * (the previous check attempted to avoid this if the same
     29          		 * ENGINE and EVP_CIPHER could be used). */
     30          		EVP_CIPHER_CTX_cleanup(ctx);
   \   00000022   2000               MOVS     R0,R4
   \   00000024   ........           BL       EVP_CIPHER_CTX_cleanup
     31          
     32          		/* Restore encrypt field: it is zeroed by cleanup */
     33          		ctx->encrypt = enc;
   \   00000028   6760               STR      R7,[R4, #+4]
     34          
     35          		ctx->cipher=cipher;
   \   0000002A   2660               STR      R6,[R4, #+0]
     36          		if (ctx->cipher->ctx_size)
   \   0000002C   F169               LDR      R1,[R6, #+28]
   \   0000002E   0029               CMP      R1,#+0
   \   00000030   07D0               BEQ      ??EVP_CipherInit_ex_4
     37          			{
     38          			ctx->cipher_data=/*OPENSSL_*/malloc(ctx->cipher->ctx_size);
   \   00000032   0800               MOVS     R0,R1
   \   00000034   ........           _BLF     -1610010799,??rT0xA0092F51
   \   00000038   E065               STR      R0,[R4, #+92]
     39          			if (!ctx->cipher_data)
   \   0000003A   0028               CMP      R0,#+0
   \   0000003C   02D1               BNE      ??EVP_CipherInit_ex_5
     40          				{
     41          				//EVPerr(EVP_F_EVP_CIPHERINIT, ERR_R_MALLOC_FAILURE);
     42          				return 0;
   \                     ??EVP_CipherInit_ex_6:
   \   0000003E   0020               MOVS     R0,#+0
   \   00000040   F8BD               POP      {R3-R7,PC}
     43          				}
     44          			}
     45          		else
     46          			{
     47          			ctx->cipher_data = NULL;
   \                     ??EVP_CipherInit_ex_4:
   \   00000042   E565               STR      R5,[R4, #+92]
     48          			}
     49          		ctx->key_len = cipher->key_len;
   \                     ??EVP_CipherInit_ex_5:
   \   00000044   B068               LDR      R0,[R6, #+8]
   \   00000046   6065               STR      R0,[R4, #+84]
     50          		ctx->flags = 0;
   \   00000048   A565               STR      R5,[R4, #+88]
     51          		if(ctx->cipher->flags & EVP_CIPH_CTRL_INIT)
   \   0000004A   2068               LDR      R0,[R4, #+0]
   \   0000004C   806A               LDR      R0,[R0, #+40]
   \   0000004E   4006               LSLS     R0,R0,#+25
   \   00000050   0BD5               BPL      ??EVP_CipherInit_ex_7
     52          			{
     53          			if(!EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_INIT, 0, NULL))
   \   00000052   0023               MOVS     R3,#+0
   \   00000054   1A00               MOVS     R2,R3
   \   00000056   1100               MOVS     R1,R2
   \   00000058   2000               MOVS     R0,R4
   \   0000005A   ........           BL       EVP_CIPHER_CTX_ctrl
   \   0000005E   0028               CMP      R0,#+0
   \   00000060   03D1               BNE      ??EVP_CipherInit_ex_7
   \   00000062   ECE7               B        ??EVP_CipherInit_ex_6
     54          				{
     55          				//EVPerr(EVP_F_EVP_CIPHERINIT, EVP_R_INITIALIZATION_ERROR);
     56          				return 0;
     57          				}
     58          			}
     59          		}
     60          	else if(!ctx->cipher)
   \                     ??EVP_CipherInit_ex_3:
   \   00000064   2068               LDR      R0,[R4, #+0]
   \   00000066   0028               CMP      R0,#+0
   \   00000068   E9D0               BEQ      ??EVP_CipherInit_ex_6
     61          		{
     62          		//EVPerr(EVP_F_EVP_CIPHERINIT, EVP_R_NO_CIPHER_SET);
     63          		return 0;
     64          		}
     65          
     66          	/* we assume block size is a power of 2 in *cryptUpdate */
     67          	__OPENSSL_assert(ctx->cipher->block_size == 1
     68          	    || ctx->cipher->block_size == 8
     69          	    || ctx->cipher->block_size == 16);
   \                     ??EVP_CipherInit_ex_7:
   \   0000006A   2068               LDR      R0,[R4, #+0]
   \   0000006C   244E               LDR      R6,??EVP_CipherInit_ex_8  ;; ??__FUNCTION__
   \   0000006E   4168               LDR      R1,[R0, #+4]
   \   00000070   0129               CMP      R1,#+1
   \   00000072   07D0               BEQ      ??EVP_CipherInit_ex_9
   \   00000074   0829               CMP      R1,#+8
   \   00000076   05D0               BEQ      ??EVP_CipherInit_ex_9
   \   00000078   1029               CMP      R1,#+16
   \   0000007A   03D0               BEQ      ??EVP_CipherInit_ex_9
   \   0000007C   4321               MOVS     R1,#+67
   \   0000007E   3000               MOVS     R0,R6
   \   00000080   ........           _BLF     __OpenSSLDie,??__OpenSSLDie??rT
     70          
     71          	if(!(EVP_CIPHER_CTX_flags(ctx) & EVP_CIPH_CUSTOM_IV)) {
   \                     ??EVP_CipherInit_ex_9:
   \   00000084   2068               LDR      R0,[R4, #+0]
   \   00000086   816A               LDR      R1,[R0, #+40]
   \   00000088   C906               LSLS     R1,R1,#+27
   \   0000008A   22D4               BMI      ??EVP_CipherInit_ex_10
     72          		switch(EVP_CIPHER_CTX_mode(ctx)) {
   \   0000008C   816A               LDR      R1,[R0, #+40]
   \   0000008E   4907               LSLS     R1,R1,#+29
   \   00000090   490F               LSRS     R1,R1,#+29
   \   00000092   0129               CMP      R1,#+1
   \   00000094   1DD9               BLS      ??EVP_CipherInit_ex_10
   \   00000096   891E               SUBS     R1,R1,#+2
   \   00000098   03D0               BEQ      ??EVP_CipherInit_ex_11
   \   0000009A   491E               SUBS     R1,R1,#+1
   \   0000009C   0129               CMP      R1,#+1
   \   0000009E   CED8               BHI      ??EVP_CipherInit_ex_6
     73          
     74          			case EVP_CIPH_STREAM_CIPHER:
     75          			case EVP_CIPH_ECB_MODE:
     76          			break;
     77          
     78          			case EVP_CIPH_CFB_MODE:
     79          			case EVP_CIPH_OFB_MODE:
     80          
     81          			ctx->num = 0;
   \   000000A0   E564               STR      R5,[R4, #+76]
     82          
     83          			case EVP_CIPH_CBC_MODE:
     84          
     85          			__OPENSSL_assert(EVP_CIPHER_CTX_iv_length(ctx) <= sizeof ctx->iv);
   \                     ??EVP_CipherInit_ex_11:
   \   000000A2   C068               LDR      R0,[R0, #+12]
   \   000000A4   1128               CMP      R0,#+17
   \   000000A6   03D3               BCC      ??EVP_CipherInit_ex_12
   \   000000A8   5521               MOVS     R1,#+85
   \   000000AA   3000               MOVS     R0,R6
   \   000000AC   ........           _BLF     __OpenSSLDie,??__OpenSSLDie??rT
     86          			if(iv) memcpy(ctx->oiv, iv, EVP_CIPHER_CTX_iv_length(ctx));
   \                     ??EVP_CipherInit_ex_12:
   \   000000B0   0698               LDR      R0,[SP, #+24]
   \   000000B2   144E               LDR      R6,??EVP_CipherInit_ex_8+0x4  ;; 0xffffffffa0fbc448
   \   000000B4   0028               CMP      R0,#+0
   \   000000B6   05D0               BEQ      ??EVP_CipherInit_ex_13
   \   000000B8   2068               LDR      R0,[R4, #+0]
   \   000000BA   0699               LDR      R1,[SP, #+24]
   \   000000BC   C268               LDR      R2,[R0, #+12]
   \   000000BE   2000               MOVS     R0,R4
   \   000000C0   0C30               ADDS     R0,R0,#+12
   \   000000C2   B047               BLX      R6
     87          			memcpy(ctx->iv, ctx->oiv, EVP_CIPHER_CTX_iv_length(ctx));
   \                     ??EVP_CipherInit_ex_13:
   \   000000C4   2068               LDR      R0,[R4, #+0]
   \   000000C6   2100               MOVS     R1,R4
   \   000000C8   C268               LDR      R2,[R0, #+12]
   \   000000CA   0C31               ADDS     R1,R1,#+12
   \   000000CC   2000               MOVS     R0,R4
   \   000000CE   1C30               ADDS     R0,R0,#+28
   \   000000D0   B047               BLX      R6
     88          			break;
     89          
     90          			default:
     91          			return 0;
     92          		}
     93          	}
     94          
     95          
     96          
     97          	if(key || (ctx->cipher->flags & EVP_CIPH_ALWAYS_CALL_INIT)) {
   \                     ??EVP_CipherInit_ex_10:
   \   000000D2   0098               LDR      R0,[SP, #+0]
   \   000000D4   2668               LDR      R6,[R4, #+0]
   \   000000D6   0028               CMP      R0,#+0
   \   000000D8   02D1               BNE      ??EVP_CipherInit_ex_14
   \   000000DA   B06A               LDR      R0,[R6, #+40]
   \   000000DC   8006               LSLS     R0,R0,#+26
   \   000000DE   07D5               BPL      ??EVP_CipherInit_ex_15
     98          		if(!ctx->cipher->init(ctx,key,iv,enc)) return 0;
   \                     ??EVP_CipherInit_ex_14:
   \   000000E0   069A               LDR      R2,[SP, #+24]
   \   000000E2   0099               LDR      R1,[SP, #+0]
   \   000000E4   3669               LDR      R6,[R6, #+16]
   \   000000E6   3B00               MOVS     R3,R7
   \   000000E8   2000               MOVS     R0,R4
   \   000000EA   B047               BLX      R6
   \   000000EC   0028               CMP      R0,#+0
   \   000000EE   A6D0               BEQ      ??EVP_CipherInit_ex_6
     99          	}
    100          	ctx->buf_len=0;
   \                     ??EVP_CipherInit_ex_15:
   \   000000F0   A560               STR      R5,[R4, #+8]
    101          	ctx->final_used=0;
   \   000000F2   2566               STR      R5,[R4, #+96]
    102          	ctx->block_mask=ctx->cipher->block_size-1;
   \   000000F4   2068               LDR      R0,[R4, #+0]
   \   000000F6   4068               LDR      R0,[R0, #+4]
   \   000000F8   401E               SUBS     R0,R0,#+1
   \   000000FA   6066               STR      R0,[R4, #+100]
    103          	return 1;
   \   000000FC   0120               MOVS     R0,#+1
   \   000000FE   F8BD               POP      {R3-R7,PC}       ;; return
   \                     ??EVP_CipherInit_ex_8:
   \   00000100   ........           DC32     ??__FUNCTION__
   \   00000104   48C4FBA0           DC32     0xffffffffa0fbc448
    104          	}
    105          

   \                                 In segment CODE, align 4, keep-with-next
    106          int EVP_CipherInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher,
    107          	     const unsigned char *key, const unsigned char *iv, int enc)
    108          	{
   \                     EVP_CipherInit:
   \   00000000   F4B5               PUSH     {R2,R4-R7,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
   \   00000006   069F               LDR      R7,[SP, #+24]
   \   00000008   1E00               MOVS     R6,R3
    109          	if (cipher)
   \   0000000A   002D               CMP      R5,#+0
   \   0000000C   01D0               BEQ      ??EVP_CipherInit_0
    110          		EVP_CIPHER_CTX_init(ctx);
   \   0000000E   ........           BL       EVP_CIPHER_CTX_init
    111          	return EVP_CipherInit_ex(ctx,cipher,NULL,key,iv,enc);
   \                     ??EVP_CipherInit_0:
   \   00000012   3900               MOVS     R1,R7
   \   00000014   3000               MOVS     R0,R6
   \   00000016   03B4               PUSH     {R0,R1}
   \   00000018   029B               LDR      R3,[SP, #+8]
   \   0000001A   0022               MOVS     R2,#+0
   \   0000001C   2000               MOVS     R0,R4
   \   0000001E   2900               MOVS     R1,R5
   \   00000020   ........           BL       EVP_CipherInit_ex
   \   00000024   FEBD               POP      {R1-R7,PC}       ;; return
    112          	}
    113          

   \                                 In segment CODE, align 4, keep-with-next
    114          int EVP_CIPHER_CTX_ctrl(EVP_CIPHER_CTX *ctx, int type, int arg, void *ptr)
    115          {
   \                     EVP_CIPHER_CTX_ctrl:
   \   00000000   30B5               PUSH     {R4,R5,LR}
    116          	int ret;
    117          	if(!ctx->cipher) {
   \   00000002   0468               LDR      R4,[R0, #+0]
   \   00000004   002C               CMP      R4,#+0
   \   00000006   02D0               BEQ      ??EVP_CIPHER_CTX_ctrl_0
    118          		//EVPerr(EVP_F_EVP_CIPHER_CTX_CTRL, EVP_R_NO_CIPHER_SET);
    119          		return 0;
    120          	}
    121          
    122          	if(!ctx->cipher->ctrl) {
   \                     ??EVP_CIPHER_CTX_ctrl_1:
   \   00000008   E56A               LDR      R5,[R4, #+44]
   \   0000000A   002D               CMP      R5,#+0
   \   0000000C   01D1               BNE      ??EVP_CIPHER_CTX_ctrl_2
    123          		//EVPerr(EVP_F_EVP_CIPHER_CTX_CTRL, EVP_R_CTRL_NOT_IMPLEMENTED);
    124          		return 0;
   \                     ??EVP_CIPHER_CTX_ctrl_0:
   \   0000000E   0020               MOVS     R0,#+0
   \   00000010   30BD               POP      {R4,R5,PC}
    125          	}
    126          
    127          	ret = ctx->cipher->ctrl(ctx, type, arg, ptr);
   \                     ??EVP_CIPHER_CTX_ctrl_2:
   \   00000012   2C00               MOVS     R4,R5
   \   00000014   A047               BLX      R4
    128          	if(ret == -1) {
   \   00000016   0021               MOVS     R1,#+0
   \   00000018   C943               MVNS     R1,R1
   \   0000001A   8842               CMP      R0,R1
   \   0000001C   00D1               BNE      ??EVP_CIPHER_CTX_ctrl_3
    129          		//EVPerr(EVP_F_EVP_CIPHER_CTX_CTRL, EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED);
    130          		return 0;
   \   0000001E   0020               MOVS     R0,#+0
    131          	}
    132          	return ret;
   \                     ??EVP_CIPHER_CTX_ctrl_3:
   \   00000020   30BD               POP      {R4,R5,PC}       ;; return
    133          }
    134          

   \                                 In segment CODE, align 4, keep-with-next
    135          int EVP_CIPHER_CTX_cleanup(EVP_CIPHER_CTX *c)
    136          	{
   \                     EVP_CIPHER_CTX_cleanup:
   \   00000000   30B5               PUSH     {R4,R5,LR}
    137          	if (c->cipher != NULL)
   \   00000002   ....               LDR      R5,??DataTable1  ;; 0xffffffffa0fbc3ec
   \   00000004   0400               MOVS     R4,R0
   \   00000006   2168               LDR      R1,[R4, #+0]
   \   00000008   0029               CMP      R1,#+0
   \   0000000A   0ED0               BEQ      ??EVP_CIPHER_CTX_cleanup_0
    138          		{
    139          		if(c->cipher->cleanup && !c->cipher->cleanup(c))
   \   0000000C   8869               LDR      R0,[R1, #+24]
   \   0000000E   0028               CMP      R0,#+0
   \   00000010   05D0               BEQ      ??EVP_CIPHER_CTX_cleanup_1
   \   00000012   8969               LDR      R1,[R1, #+24]
   \   00000014   2000               MOVS     R0,R4
   \   00000016   8847               BLX      R1
   \   00000018   0028               CMP      R0,#+0
   \   0000001A   00D1               BNE      ??EVP_CIPHER_CTX_cleanup_1
    140          			return 0;
   \   0000001C   30BD               POP      {R4,R5,PC}
    141          		/* Cleanse cipher context data */
    142          		if (c->cipher_data)
   \                     ??EVP_CIPHER_CTX_cleanup_1:
   \   0000001E   E06D               LDR      R0,[R4, #+92]
   \   00000020   0028               CMP      R0,#+0
   \   00000022   02D0               BEQ      ??EVP_CIPHER_CTX_cleanup_0
    143          			/*OPENSSL_cleanse*/ClearMemory(c->cipher_data, c->cipher->ctx_size);
   \   00000024   2168               LDR      R1,[R4, #+0]
   \   00000026   C969               LDR      R1,[R1, #+28]
   \   00000028   A847               BLX      R5
    144          		}
    145          	if (c->cipher_data)
   \                     ??EVP_CIPHER_CTX_cleanup_0:
   \   0000002A   E06D               LDR      R0,[R4, #+92]
   \   0000002C   0028               CMP      R0,#+0
   \   0000002E   01D0               BEQ      ??EVP_CIPHER_CTX_cleanup_2
    146          		/*OPENSSL_free*/mfree(c->cipher_data);
   \   00000030   ........           _BLF     -1610010733,??rT0xA0092F93
    147          	ClearMemory(c, sizeof(EVP_CIPHER_CTX)); //memset(c,0,sizeof(EVP_CIPHER_CTX));
   \                     ??EVP_CIPHER_CTX_cleanup_2:
   \   00000034   8821               MOVS     R1,#+136
   \   00000036   2000               MOVS     R0,R4
   \   00000038   A847               BLX      R5
    148          	return 1;
   \   0000003A   0120               MOVS     R0,#+1
   \   0000003C   30BD               POP      {R4,R5,PC}       ;; return
    149          	}

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ECC3FBA0           DC32     0xffffffffa0fbc3ec
    150          
    151          

   Maximum stack usage in bytes:

     Function               CSTACK
     --------               ------
     EVP_CIPHER_CTX_cleanup    12
     EVP_CIPHER_CTX_ctrl       12
     EVP_CIPHER_CTX_init        4
     EVP_CipherInit            32
     EVP_CipherInit_ex         24


   Segment part sizes:

     Function/Label         Bytes
     --------------         -----
     EVP_CIPHER_CTX_init      10
     EVP_CipherInit_ex       264
     EVP_CipherInit           38
     EVP_CIPHER_CTX_ctrl      34
     EVP_CIPHER_CTX_cleanup   62
     ??DataTable1              4
      Others                  88

 
 480 bytes in segment CODE
  20 bytes in segment DATA_C
 
 412 bytes of CODE  memory (+ 68 bytes shared)
  20 bytes of CONST memory

Errors: none
Warnings: 4
