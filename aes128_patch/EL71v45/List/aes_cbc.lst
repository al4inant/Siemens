##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    05/Oct/2023  21:05:52 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\aes128_p #
#                       atch\aes\aes_cbc.c                                   #
#    Command line    =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\aes128_p #
#                       atch\aes\aes_cbc.c -D NEWSGOLD -D EL71v45 -lC        #
#                       D:\Users\alfinant\Documents\Siemens\Dev\IAR\aes128_p #
#                       atch\EL71v45\List\ -o D:\Users\alfinant\Documents\Si #
#                       emens\Dev\IAR\aes128_patch\EL71v45\Obj\ -z9          #
#                       --cpu_mode thumb --endian little --cpu ARM926EJ-S    #
#                       --stack_align 4 --interwork -e --enable_multibytes   #
#                       --fpu None --dlib_config D:\Users\alfinant\Documents #
#                       \Siemens\IAR\ARM\LIB\dl5tptinl8n.h -I                #
#                       D:\Users\alfinant\Documents\Siemens\IAR\ARM\INC\     #
#                       --inline_threshold=2                                 #
#    List file       =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\aes128_p #
#                       atch\EL71v45\List\aes_cbc.lst                        #
#    Object file     =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\aes128_p #
#                       atch\EL71v45\Obj\aes_cbc.r79                         #
#                                                                            #
#                                                                            #
##############################################################################

D:\Users\alfinant\Documents\Siemens\Dev\IAR\aes128_patch\aes\aes_cbc.c
      1          /* crypto/aes/aes_cbc.c -*- mode:C; c-file-style: "eay" -*- */
      2          /* ====================================================================
      3           * Copyright (c) 1998-2002 The OpenSSL Project.  All rights reserved.
      4           *
      5           * Redistribution and use in source and binary forms, with or without
      6           * modification, are permitted provided that the following conditions
      7           * are met:
      8           *
      9           * 1. Redistributions of source code must retain the above copyright
     10           *    notice, this list of conditions and the following disclaimer. 
     11           *
     12           * 2. Redistributions in binary form must reproduce the above copyright
     13           *    notice, this list of conditions and the following disclaimer in
     14           *    the documentation and/or other materials provided with the
     15           *    distribution.
     16           *
     17           * 3. All advertising materials mentioning features or use of this
     18           *    software must display the following acknowledgment:
     19           *    "This product includes software developed by the OpenSSL Project
     20           *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
     21           *
     22           * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
     23           *    endorse or promote products derived from this software without
     24           *    prior written permission. For written permission, please contact
     25           *    openssl-core@openssl.org.
     26           *
     27           * 5. Products derived from this software may not be called "OpenSSL"
     28           *    nor may "OpenSSL" appear in their names without prior written
     29           *    permission of the OpenSSL Project.
     30           *
     31           * 6. Redistributions of any form whatsoever must retain the following
     32           *    acknowledgment:
     33           *    "This product includes software developed by the OpenSSL Project
     34           *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
     35           *
     36           * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
     37           * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     38           * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
     39           * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
     40           * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     41           * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
     42           * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
     43           * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     44           * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
     45           * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
     46           * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
     47           * OF THE POSSIBILITY OF SUCH DAMAGE.
     48           * ====================================================================
     49           *
     50           */
     51          
     52          #ifndef AES_DEBUG
     53          # ifndef NDEBUG
     54          #  define NDEBUG
     55          # endif
     56          #endif
     57          
     58          #include <openssl/ssl.h>

  	} X509_ALGOR;
  	  ^
"D:\Users\alfinant\Documents\Siemens\IAR\ARM\INC\openssl\x509.h",121  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  	} X509_NAME;
  	  ^
"D:\Users\alfinant\Documents\Siemens\IAR\ARM\INC\openssl\x509.h",167  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  	} X509;
  	  ^
"D:\Users\alfinant\Documents\Siemens\IAR\ARM\INC\openssl\x509.h",267  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  	} X509_CRL;
  	  ^
"D:\Users\alfinant\Documents\Siemens\IAR\ARM\INC\openssl\x509.h",339  Warning[Pe301]: 
          typedef name has already been declared (with same type)
     59          #include "../defs.h"
     60          #include "aes.h"
     61          #include "aes_locl.h"
     62          
     63          #if !defined(OPENSSL_FIPS_AES_ASM)

   \                                 In segment CODE, align 4, keep-with-next
     64          void AES_cbc_encrypt(const unsigned char *in, unsigned char *out,
     65          		     const unsigned long length, const AES_KEY *key,
     66          		     unsigned char *ivec, const int enc) {
   \                     AES_cbc_encrypt:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   84B0               SUB      SP,SP,#+16
   \   00000004   0400               MOVS     R4,R0
     67          
     68          	unsigned long n;
     69          	unsigned long len = length;
     70          	unsigned char tmp[AES_BLOCK_SIZE];
     71          	const unsigned char *iv = ivec;
   \   00000006   0A9F               LDR      R7,[SP, #+40]
   \   00000008   0D00               MOVS     R5,R1
   \   0000000A   1600               MOVS     R6,R2
   \   0000000C   002C               CMP      R4,#+0
   \   0000000E   05D0               BEQ      ??AES_cbc_encrypt_0
   \   00000010   002D               CMP      R5,#+0
   \   00000012   03D0               BEQ      ??AES_cbc_encrypt_0
   \   00000014   002B               CMP      R3,#+0
   \   00000016   01D0               BEQ      ??AES_cbc_encrypt_0
   \   00000018   002F               CMP      R7,#+0
   \   0000001A   03D1               BNE      ??AES_cbc_encrypt_1
   \                     ??AES_cbc_encrypt_0:
   \   0000001C   5348               LDR      R0,??AES_cbc_encrypt_2  ;; ??__FUNCTION__
   \   0000001E   4921               MOVS     R1,#+73
     72          
     73          	__OPENSSL_assert(in && out && key && ivec);
   \   00000020   ........           _BLF     __OpenSSLDie,??__OpenSSLDie??rT
   \                     ??AES_cbc_encrypt_1:
   \   00000024   0B98               LDR      R0,[SP, #+44]
   \   00000026   0128               CMP      R0,#+1
   \   00000028   19D0               BEQ      ??AES_cbc_encrypt_3
   \   0000002A   0028               CMP      R0,#+0
   \   0000002C   03D0               BEQ      ??AES_cbc_encrypt_4
   \   0000002E   4F48               LDR      R0,??AES_cbc_encrypt_2  ;; ??__FUNCTION__
   \   00000030   4A21               MOVS     R1,#+74
     74          	__OPENSSL_assert((AES_ENCRYPT == enc)||(AES_DECRYPT == enc));
   \   00000032   ........           _BLF     __OpenSSLDie,??__OpenSSLDie??rT
   \                     ??AES_cbc_encrypt_4:
   \   00000036   AC42               CMP      R4,R5
   \   00000038   71D0               BEQ      ??AES_cbc_encrypt_5
   \   0000003A   3FE0               B        ??AES_cbc_encrypt_6
     75          
     76          	if (AES_ENCRYPT == enc) {
     77          		while (len >= AES_BLOCK_SIZE) {
     78          			for(n=0; n < AES_BLOCK_SIZE; ++n)
     79          				out[n] = in[n] ^ iv[n];
     80          			AES_encrypt(out, out, key);
     81          			iv = out;
     82          			len -= AES_BLOCK_SIZE;
     83          			in += AES_BLOCK_SIZE;
     84          			out += AES_BLOCK_SIZE;
     85          		}
     86          		if (len) {
     87          			for(n=0; n < len; ++n)
     88          				out[n] = in[n] ^ iv[n];
     89          			for(n=len; n < AES_BLOCK_SIZE; ++n)
     90          				out[n] = iv[n];
     91          			AES_encrypt(out, out, key);
     92          			iv = out;
     93          		}
     94          		memcpy(ivec,iv,AES_BLOCK_SIZE);
     95          	} else if (in != out) {
   \                     ??AES_cbc_encrypt_7:
   \   0000003C   0020               MOVS     R0,#+0
   \                     ??AES_cbc_encrypt_8:
   \   0000003E   215C               LDRB     R1,[R4, R0]
   \   00000040   3A5C               LDRB     R2,[R7, R0]
   \   00000042   4A40               EORS     R2,R2,R1
   \   00000044   2A54               STRB     R2,[R5, R0]
   \   00000046   401C               ADDS     R0,R0,#+1
   \   00000048   1028               CMP      R0,#+16
   \   0000004A   F8D3               BCC      ??AES_cbc_encrypt_8
   \   0000004C   049A               LDR      R2,[SP, #+16]
   \   0000004E   2900               MOVS     R1,R5
   \   00000050   2800               MOVS     R0,R5
   \   00000052   ........           _BLF     AES_encrypt,??AES_encrypt??rT
   \   00000056   2F00               MOVS     R7,R5
   \   00000058   103E               SUBS     R6,R6,#+16
   \   0000005A   1034               ADDS     R4,R4,#+16
   \   0000005C   1035               ADDS     R5,R5,#+16
   \                     ??AES_cbc_encrypt_3:
   \   0000005E   102E               CMP      R6,#+16
   \   00000060   ECD2               BCS      ??AES_cbc_encrypt_7
   \   00000062   002E               CMP      R6,#+0
   \   00000064   14D0               BEQ      ??AES_cbc_encrypt_9
   \   00000066   0020               MOVS     R0,#+0
   \   00000068   04E0               B        ??AES_cbc_encrypt_10
   \                     ??AES_cbc_encrypt_11:
   \   0000006A   215C               LDRB     R1,[R4, R0]
   \   0000006C   3A5C               LDRB     R2,[R7, R0]
   \   0000006E   4A40               EORS     R2,R2,R1
   \   00000070   2A54               STRB     R2,[R5, R0]
   \   00000072   401C               ADDS     R0,R0,#+1
   \                     ??AES_cbc_encrypt_10:
   \   00000074   B042               CMP      R0,R6
   \   00000076   F8D3               BCC      ??AES_cbc_encrypt_11
   \   00000078   3000               MOVS     R0,R6
   \                     ??AES_cbc_encrypt_12:
   \   0000007A   395C               LDRB     R1,[R7, R0]
   \   0000007C   2954               STRB     R1,[R5, R0]
   \   0000007E   401C               ADDS     R0,R0,#+1
   \   00000080   1028               CMP      R0,#+16
   \   00000082   FAD3               BCC      ??AES_cbc_encrypt_12
   \   00000084   049A               LDR      R2,[SP, #+16]
   \   00000086   2900               MOVS     R1,R5
   \   00000088   2800               MOVS     R0,R5
   \   0000008A   ........           _BLF     AES_encrypt,??AES_encrypt??rT
   \   0000008E   2F00               MOVS     R7,R5
   \                     ??AES_cbc_encrypt_9:
   \   00000090   0A98               LDR      R0,[SP, #+40]
   \   00000092   1022               MOVS     R2,#+16
   \   00000094   3900               MOVS     R1,R7
   \   00000096   65E0               B.N      ??AES_cbc_encrypt_13
     96          		while (len >= AES_BLOCK_SIZE) {
     97          			AES_decrypt(in, out, key);
   \                     ??AES_cbc_encrypt_14:
   \   00000098   049A               LDR      R2,[SP, #+16]
   \   0000009A   2900               MOVS     R1,R5
   \   0000009C   2000               MOVS     R0,R4
   \   0000009E   ........           _BLF     AES_decrypt,??AES_decrypt??rT
     98          			for(n=0; n < AES_BLOCK_SIZE; ++n)
   \   000000A2   0020               MOVS     R0,#+0
     99          				out[n] ^= iv[n];
   \                     ??AES_cbc_encrypt_15:
   \   000000A4   3B5C               LDRB     R3,[R7, R0]
   \   000000A6   2918               ADDS     R1,R5,R0
   \   000000A8   0A78               LDRB     R2,[R1, #+0]
   \   000000AA   401C               ADDS     R0,R0,#+1
   \   000000AC   5340               EORS     R3,R3,R2
   \   000000AE   0B70               STRB     R3,[R1, #+0]
   \   000000B0   1028               CMP      R0,#+16
   \   000000B2   F7D3               BCC      ??AES_cbc_encrypt_15
    100          			iv = in;
   \   000000B4   2700               MOVS     R7,R4
    101          			len -= AES_BLOCK_SIZE;
   \   000000B6   103E               SUBS     R6,R6,#+16
    102          			in  += AES_BLOCK_SIZE;
   \   000000B8   1034               ADDS     R4,R4,#+16
    103          			out += AES_BLOCK_SIZE;
   \   000000BA   1035               ADDS     R5,R5,#+16
    104          		}
   \                     ??AES_cbc_encrypt_6:
   \   000000BC   102E               CMP      R6,#+16
   \   000000BE   EBD2               BCS      ??AES_cbc_encrypt_14
    105          		if (len) {
   \   000000C0   002E               CMP      R6,#+0
   \   000000C2   E5D0               BEQ      ??AES_cbc_encrypt_9
    106          			AES_decrypt(in,tmp,key);
   \   000000C4   049A               LDR      R2,[SP, #+16]
   \   000000C6   6946               MOV      R1,SP
   \   000000C8   2000               MOVS     R0,R4
   \   000000CA   ........           _BLF     AES_decrypt,??AES_decrypt??rT
    107          			for(n=0; n < len; ++n)
   \   000000CE   0020               MOVS     R0,#+0
   \   000000D0   05E0               B        ??AES_cbc_encrypt_16
    108          				out[n] = tmp[n] ^ iv[n];
   \                     ??AES_cbc_encrypt_17:
   \   000000D2   3A5C               LDRB     R2,[R7, R0]
   \   000000D4   6946               MOV      R1,SP
   \   000000D6   095C               LDRB     R1,[R1, R0]
   \   000000D8   4A40               EORS     R2,R2,R1
   \   000000DA   2A54               STRB     R2,[R5, R0]
   \   000000DC   401C               ADDS     R0,R0,#+1
   \                     ??AES_cbc_encrypt_16:
   \   000000DE   B042               CMP      R0,R6
   \   000000E0   F7D3               BCC      ??AES_cbc_encrypt_17
    109          			iv = in;
   \   000000E2   2700               MOVS     R7,R4
   \   000000E4   D4E7               B        ??AES_cbc_encrypt_9
    110          		}
    111          		memcpy(ivec,iv,AES_BLOCK_SIZE);
    112          	} else {
    113          		while (len >= AES_BLOCK_SIZE) {
    114          			memcpy(tmp, in, AES_BLOCK_SIZE);
   \                     ??AES_cbc_encrypt_18:
   \   000000E6   1022               MOVS     R2,#+16
   \   000000E8   2100               MOVS     R1,R4
   \   000000EA   6846               MOV      R0,SP
   \   000000EC   ........           _BLF     -1594112952,??rT0xA0FBC448
    115          			AES_decrypt(in, out, key);
   \   000000F0   049A               LDR      R2,[SP, #+16]
   \   000000F2   2900               MOVS     R1,R5
   \   000000F4   2000               MOVS     R0,R4
   \   000000F6   ........           _BLF     AES_decrypt,??AES_decrypt??rT
    116          			for(n=0; n < AES_BLOCK_SIZE; ++n)
   \   000000FA   0020               MOVS     R0,#+0
    117          				out[n] ^= ivec[n];
   \                     ??AES_cbc_encrypt_19:
   \   000000FC   0A9B               LDR      R3,[SP, #+40]
   \   000000FE   2918               ADDS     R1,R5,R0
   \   00000100   0A78               LDRB     R2,[R1, #+0]
   \   00000102   1B5C               LDRB     R3,[R3, R0]
   \   00000104   401C               ADDS     R0,R0,#+1
   \   00000106   5340               EORS     R3,R3,R2
   \   00000108   0B70               STRB     R3,[R1, #+0]
   \   0000010A   1028               CMP      R0,#+16
   \   0000010C   F6D3               BCC      ??AES_cbc_encrypt_19
    118          			memcpy(ivec, tmp, AES_BLOCK_SIZE);
   \   0000010E   0A98               LDR      R0,[SP, #+40]
   \   00000110   1022               MOVS     R2,#+16
   \   00000112   6946               MOV      R1,SP
   \   00000114   ........           _BLF     -1594112952,??rT0xA0FBC448
    119          			len -= AES_BLOCK_SIZE;
   \   00000118   103E               SUBS     R6,R6,#+16
    120          			in += AES_BLOCK_SIZE;
   \   0000011A   1034               ADDS     R4,R4,#+16
    121          			out += AES_BLOCK_SIZE;
   \   0000011C   1035               ADDS     R5,R5,#+16
    122          		}
   \                     ??AES_cbc_encrypt_5:
   \   0000011E   102E               CMP      R6,#+16
   \   00000120   E1D2               BCS      ??AES_cbc_encrypt_18
    123          		if (len) {
   \   00000122   002E               CMP      R6,#+0
   \   00000124   20D0               BEQ      ??AES_cbc_encrypt_20
    124          			memcpy(tmp, in, AES_BLOCK_SIZE);
   \   00000126   1022               MOVS     R2,#+16
   \   00000128   2100               MOVS     R1,R4
   \   0000012A   6846               MOV      R0,SP
   \   0000012C   ........           _BLF     -1594112952,??rT0xA0FBC448
    125          			AES_decrypt(tmp, out, key);
   \   00000130   049A               LDR      R2,[SP, #+16]
   \   00000132   2900               MOVS     R1,R5
   \   00000134   6846               MOV      R0,SP
   \   00000136   ........           _BLF     AES_decrypt,??AES_decrypt??rT
    126          			for(n=0; n < len; ++n)
   \   0000013A   0020               MOVS     R0,#+0
   \   0000013C   06E0               B        ??AES_cbc_encrypt_21
    127          				out[n] ^= ivec[n];
   \                     ??AES_cbc_encrypt_22:
   \   0000013E   0A9B               LDR      R3,[SP, #+40]
   \   00000140   2918               ADDS     R1,R5,R0
   \   00000142   0A78               LDRB     R2,[R1, #+0]
   \   00000144   1B5C               LDRB     R3,[R3, R0]
   \   00000146   401C               ADDS     R0,R0,#+1
   \   00000148   5340               EORS     R3,R3,R2
   \   0000014A   0B70               STRB     R3,[R1, #+0]
   \                     ??AES_cbc_encrypt_21:
   \   0000014C   B042               CMP      R0,R6
   \   0000014E   F6D3               BCC      ??AES_cbc_encrypt_22
    128          			for(n=len; n < AES_BLOCK_SIZE; ++n)
   \   00000150   3000               MOVS     R0,R6
    129          				out[n] = tmp[n];
   \                     ??AES_cbc_encrypt_23:
   \   00000152   6946               MOV      R1,SP
   \   00000154   095C               LDRB     R1,[R1, R0]
   \   00000156   2954               STRB     R1,[R5, R0]
   \   00000158   401C               ADDS     R0,R0,#+1
   \   0000015A   1028               CMP      R0,#+16
   \   0000015C   F9D3               BCC      ??AES_cbc_encrypt_23
    130          			memcpy(ivec, tmp, AES_BLOCK_SIZE);
   \   0000015E   0A98               LDR      R0,[SP, #+40]
   \   00000160   1022               MOVS     R2,#+16
   \   00000162   6946               MOV      R1,SP
   \                     ??AES_cbc_encrypt_13:
   \   00000164   ........           _BLF     -1594112952,??rT0xA0FBC448
    131          		}
    132          	}
    133          }
   \                     ??AES_cbc_encrypt_20:
   \   00000168   05B0               ADD      SP,SP,#+20
   \   0000016A   F0BD               POP      {R4-R7,PC}       ;; return
   \                     ??AES_cbc_encrypt_2:
   \   0000016C   ........           DC32     ??__FUNCTION__
    134          #endif

   Maximum stack usage in bytes:

     Function        CSTACK
     --------        ------
     AES_cbc_encrypt    40


   Segment part sizes:

     Function/Label  Bytes
     --------------  -----
     AES_cbc_encrypt  368
      Others           56

 
 408 bytes in segment CODE
  16 bytes in segment DATA_C
 
 368 bytes of CODE  memory (+ 40 bytes shared)
  16 bytes of CONST memory

Errors: none
Warnings: 4
