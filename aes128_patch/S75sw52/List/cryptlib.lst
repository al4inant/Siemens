##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    05/Feb/2023  19:18:55 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\aes128_p #
#                       atch\cryptlib.c                                      #
#    Command line    =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\aes128_p #
#                       atch\cryptlib.c -D NEWSGOLD -D S75v52 -lC            #
#                       D:\Users\alfinant\Documents\Siemens\Dev\IAR\aes128_p #
#                       atch\S75sw52\List\ -o D:\Users\alfinant\Documents\Si #
#                       emens\Dev\IAR\aes128_patch\S75sw52\Obj\ -z9          #
#                       --cpu_mode thumb --endian little --cpu ARM926EJ-S    #
#                       --stack_align 4 --interwork -e --enable_multibytes   #
#                       --fpu None --dlib_config D:\Users\alfinant\Documents #
#                       \Siemens\IAR\ARM\LIB\dl5tptinl8n.h -I                #
#                       D:\Users\alfinant\Documents\Siemens\IAR\ARM\INC\     #
#                       --inline_threshold=2                                 #
#    List file       =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\aes128_p #
#                       atch\S75sw52\List\cryptlib.lst                       #
#    Object file     =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\aes128_p #
#                       atch\S75sw52\Obj\cryptlib.r79                        #
#                                                                            #
#                                                                            #
##############################################################################

D:\Users\alfinant\Documents\Siemens\Dev\IAR\aes128_patch\cryptlib.c
      1          #include "defs.h"
      2          

   \                                 In segment CODE, align 4, keep-with-next
      3          void __OpenSSLDie(const char *function,int line)
      4          {
   \                     __OpenSSLDie:
   \   00000000   10B5               PUSH     {R4,LR}
      5            char s[256];
      6            
      7            snprintf(s, 255, "Function:%s,Line:%d\n", function, line);
   \   00000002   0B4C               LDR      R4,??__OpenSSLDie_0  ;; `?<Constant "Function:%s,Line:%d\\n">`
   \   00000004   C0B0               SUB      SP,SP,#+256
   \   00000006   02B4               PUSH     {R1}
   \   00000008   0300               MOVS     R3,R0
   \   0000000A   2200               MOVS     R2,R4
   \   0000000C   01A8               ADD      R0,SP,#+4
   \   0000000E   FF21               MOVS     R1,#+255
   \   00000010   ........           _BLF     -1594083535,??rT0xA0FC3731
      8            StoreErrString(s);
   \   00000014   01A8               ADD      R0,SP,#+4
   \   00000016   ........           _BLF     -1608717028,??rT0xA01CED1C
      9          
     10          #ifdef NEWSGOLD
     11            asm("SWI 4"); //Переключаемся в системный режим
   \   0000001A   04DF               SWI 4            
     12          #else
     13            asm("SWI 0");
     14          #endif
     15              StoreErrInfoAndAbort(0xFFFF,"\1\1OpenSSL internal error",2,2);
   \   0000001C   0548               LDR      R0,??__OpenSSLDie_0+0x4  ;; 0xffff
   \   0000001E   0223               MOVS     R3,#+2
   \   00000020   0222               MOVS     R2,#+2
   \   00000022   1834               ADDS     R4,R4,#+24
   \   00000024   2100               MOVS     R1,R4
   \   00000026   ........           _BLF     -1608716720,??rT0xA01CEE50
     16          }
   \   0000002A   41B0               ADD      SP,SP,#+260
   \   0000002C   10BD               POP      {R4,PC}          ;; return
   \   0000002E   C046               Nop      
   \                     ??__OpenSSLDie_0:
   \   00000030   ........           DC32     `?<Constant "Function:%s,Line:%d\\n">`
   \   00000034   FFFF0000           DC32     0xffff

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Function:%s,Line:%d\\n">`:
   \   00000000   46756E637469       DC8 "Function:%s,Line:%d\012"
   \              6F6E3A25732C
   \              4C696E653A25
   \              640A00      
   \   00000015   000000             DC8 0, 0, 0
   \   00000018   01014F70656E       DC8 "\001\001OpenSSL internal error"
   \              53534C20696E
   \              7465726E616C
   \              206572726F72
   \              00          
   \   00000031   000000             DC8 0, 0, 0

   Maximum stack usage in bytes:

     Function     CSTACK
     --------     ------
     __OpenSSLDie   268


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     __OpenSSLDie                     56
     ?<Constant "Function:%s,Line:%d\n">
                                      52
      Others                          48

 
 104 bytes in segment CODE
  52 bytes in segment DATA_C
 
 56 bytes of CODE  memory (+ 48 bytes shared)
 52 bytes of CONST memory

Errors: none
Warnings: none
