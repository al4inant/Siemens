//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   04/Jul/2013  20:08:49 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  S:\Users\alfin_000\Documents\Siemens\IAR\ARM\pwmgui /
//                       \main.c                                             /
//    Command line    =  S:\Users\alfin_000\Documents\Siemens\IAR\ARM\pwmgui /
//                       \main.c -D NEWSGOLD -lCN                            /
//                       S:\Users\alfin_000\Documents\Siemens\IAR\ARM\pwmgui /
//                       \Release_NSG\List\ -la S:\Users\alfin_000\Documents /
//                       \Siemens\IAR\ARM\pwmgui\Release_NSG\List\ -o        /
//                       S:\Users\alfin_000\Documents\Siemens\IAR\ARM\pwmgui /
//                       \Release_NSG\Obj\ -z9 --cpu_mode arm --endian       /
//                       little --cpu ARM926EJ-S --stack_align 4             /
//                       --interwork -e --fpu None --dlib_config             /
//                       S:\Users\alfin_000\Documents\Siemens\IAR\ARM\LIB\dl /
//                       5tpainl8n.h -I S:\Users\alfin_000\Documents\Siemens /
//                       \IAR\ARM\INC\ --inline_threshold=2                  /
//    List file       =  S:\Users\alfin_000\Documents\Siemens\IAR\ARM\pwmgui /
//                       \Release_NSG\List\main.s79                          /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)
        RSEG ELFBEGIN:DATA:REORDER:NOROOT(0)

        PUBWEAK `?*?DATA_ID`
??DataTable0 EQU 0
        MULTWEAK ??ElfKiller??rT
        MULTWEAK ??OnRedraw??rT
        MULTWEAK ??UpdateCSMname??rT
        MULTWEAK ??kill_data??rA
        MULTWEAK ??main??rT
        MULTWEAK ??method8??rT
        MULTWEAK ??method9??rT
        MULTWEAK ??onClose??rT
        MULTWEAK ??onCreate??rT
        MULTWEAK ??onFocus??rT
        MULTWEAK ??onUnfocus??rT
        PUBWEAK ?init?tab?DATA_I
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC DUTYCYCLE
        PUBLIC ElfKiller
        FUNCTION ElfKiller,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC FREQUENCY
        PUBLIC MAINCSM_ID
        PUBLIC MAINGUI_ID
        FUNCTION OnKey,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC OnRedraw
        FUNCTION OnRedraw,0603H
        LOCFRAME CSTACK, 60, STACK
        PUBLIC UpdateCSMname
        FUNCTION UpdateCSMname,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC cur_pos
        PUBLIC gui_methods
        PUBLIC main
        FUNCTION main,0a03H
        LOCFRAME CSTACK, 48, STACK
        FUNCTION maincsm_onclose,0603H
        LOCFRAME CSTACK, 8, STACK
        FUNCTION maincsm_oncreate,0603H
        LOCFRAME CSTACK, 16, STACK
        FUNCTION maincsm_onmessage,0603H
        PUBLIC method8
        FUNCTION method8,0603H
        PUBLIC method9
        FUNCTION method9,0603H
        PUBLIC minus11
        PUBLIC onClose
        FUNCTION onClose,0603H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC onCreate
        FUNCTION onCreate,0603H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC onFocus
        FUNCTION onFocus,0603H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC onUnfocus
        FUNCTION onUnfocus,0603H
        PUBLIC pwm
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
kill_data           SYMBOL "kill_data"
ElfKiller           SYMBOL "ElfKiller"
??ElfKiller??rT     SYMBOL "??rT", ElfKiller
OnRedraw            SYMBOL "OnRedraw"
??OnRedraw??rT      SYMBOL "??rT", OnRedraw
UpdateCSMname       SYMBOL "UpdateCSMname"
??UpdateCSMname??rT SYMBOL "??rT", UpdateCSMname
??kill_data??rA     SYMBOL "??rA", kill_data
main                SYMBOL "main"
??main??rT          SYMBOL "??rT", main
method8             SYMBOL "method8"
??method8??rT       SYMBOL "??rT", method8
method9             SYMBOL "method9"
??method9??rT       SYMBOL "??rT", method9
onClose             SYMBOL "onClose"
??onClose??rT       SYMBOL "??rT", onClose
onCreate            SYMBOL "onCreate"
??onCreate??rT      SYMBOL "??rT", onCreate
onFocus             SYMBOL "onFocus"
??onFocus??rT       SYMBOL "??rT", onFocus
onUnfocus           SYMBOL "onUnfocus"
??onUnfocus??rT     SYMBOL "??rT", onUnfocus

        EXTERN kill_data
        FUNCTION kill_data,0602H


        RSEG DATA_I:DATA:SORT:NOROOT(2)
pwm:
        DS8 4
        REQUIRE `?<Initializer for pwm>`
FREQUENCY:
        DS8 4
        REQUIRE `?<Initializer for FREQUENCY>`
DUTYCYCLE:
        DS8 4
        REQUIRE `?<Initializer for DUTYCYCLE>`

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
MAINCSM_ID:
        DS8 4

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
MAINGUI_ID:
        DS8 4

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
cur_pos:
        DS8 4

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??OnRedraw??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE OnRedraw

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function OnRedraw
        ARM
OnRedraw:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        MOV      R4,R0
        SWI      +33160
        MOV      R5,R0
        SWI      +33161
        MOV      R6,R0
        MOV      R0,#+1
        SWI      +302
        MOV      R7,R0
        MOV      R0,#+2
        SWI      +302
        PUSH     {R7}
        CFI CFA R13+24
        PUSH     {R0}
        CFI CFA R13+28
        SUB      R3,R6,#+1
        SUB      R2,R5,#+1
        MOV      R1,#+0
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+32
        PUSH     {R0}
        CFI CFA R13+36
        PUSH     {R0}
        CFI CFA R13+40
        SWI      +336
        LDR      R0,??OnRedraw_0  ;; pwm
        LDR      R3,[R0, #+8]
        LDR      R2,[R0, #+4]
        LDR      R0,[R4, #+52]
        LDR      R1,??OnRedraw_0+0x4  ;; `?<Constant "Frequency:\\n%dHz\\nDutyc...">`
        SWI      +292
        MOV      R0,#+23
        SWI      +302
        MOV      R6,R0
        MOV      R0,#+0
        SWI      +302
        PUSH     {R6}
        CFI CFA R13+44
        PUSH     {R0}
        CFI CFA R13+48
        MOV      R3,R5
        MOV      R2,#+20
        MOV      R1,#+15
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+52
        PUSH     {R0}
        CFI CFA R13+56
        MOV      R0,#+200
        PUSH     {R0}
        CFI CFA R13+60
        LDR      R0,[R4, #+52]
        SWI      +332
        ADD      SP,SP,#+40
        CFI CFA R13+20
        POP      {R4-R7,PC}       ;; return
        DATA
??OnRedraw_0:
        DC32     pwm
        DC32     `?<Constant "Frequency:\\n%dHz\\nDutyc...">`
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??onCreate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE onCreate

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function onCreate
        ARM
onCreate:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
        MOV      R0,#+80
        SWI      +293
        STR      R0,[R4, #+52]
        MOV      R0,#+1
        B        ?Subroutine14
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??onClose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE onClose

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function onClose
        ARM
onClose:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
        LDR      R0,[R4, #+52]
        SWI      +297
        MOV      R0,#+0
        CFI EndBlock cfiBlock5
        REQUIRE ?Subroutine14
        ;; // Fall through to label ?Subroutine14

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon1
        CFI NoFunction
        CFI CFA R13+8
        CFI R4 Frame(CFA, -8)
        CFI ?RET Frame(CFA, -4)
        ARM
?Subroutine14:
        STRB     R0,[R4, #+12]
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock6

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon0
        CFI NoFunction
        THUMB
??onFocus??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock7
        REQUIRE onFocus

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon1
        CFI Function onFocus
        ARM
onFocus:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
        SWI      +383
        MOV      R0,#+2
        B        ?Subroutine14
        CFI EndBlock cfiBlock8

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon0
        CFI NoFunction
        THUMB
??onUnfocus??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock9
        REQUIRE onUnfocus

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon1
        CFI Function onUnfocus
        ARM
onUnfocus:
        LDRB     R1,[R0, #+12]
        CMP      R1,#+2
        MOVEQ    R1,#+1
        STRBEQ   R1,[R0, #+12]
        BX       LR               ;; return
        CFI EndBlock cfiBlock10

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon0
        CFI NoFunction
        THUMB
??OnKey??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock11
        REQUIRE OnKey

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon1
        CFI Function OnKey
        ARM
OnKey:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        LDR      R2,[R1, #+4]
        MOV      R1,#+147
        LDR      R0,[R2, #+4]
        ORR      R1,R1,#0x100
        CMP      R0,R1
        BNE      ??OnKey_0
        LDR      R3,??DataTable1  ;; pwm
        LDR      R2,[R2, #+8]
        LDR      R0,[R3, #+8]
        LDR      R1,[R3, #+4]
        SUBS     R2,R2,#+4
        BEQ      ??OnKey_1
        SUBS     R2,R2,#+55
        BEQ      ??OnKey_2
        SUBS     R2,R2,#+1
        BEQ      ??OnKey_3
        SUBS     R2,R2,#+1
        BEQ      ??OnKey_4
        SUBS     R2,R2,#+1
        BNE      ??OnKey_5
        ADD      R1,R0,#+1
??OnKey_6:
        STR      R1,[R3, #+8]
        MOV      R2,#+0
        MOV      R1,R0
        LDR      R0,[R3, #+0]
        LDR      R3,??OnKey_7     ;; 0xffffffffa04ce69c
        BLX      R3
??OnKey_5:
        SWI      +370
??OnKey_0:
        MOV      R0,#+0
        POP      {PC}             ;; return
??OnKey_4:
        CMP      R0,#+0
        BEQ      ??OnKey_5
        SUB      R1,R0,#+1
        B        ??OnKey_6
??OnKey_2:
        ADD      R0,R1,#+1
??OnKey_8:
        STR      R0,[R3, #+4]
        LDR      R0,[R3, #+0]
        LDR      R3,??OnKey_7+0x4  ;; 0xffffffffa04ce600
        MOV      R2,#+0
        BLX      R3
        B        ??OnKey_5
??OnKey_3:
        CMP      R1,#+0
        BEQ      ??OnKey_5
        SUB      R0,R1,#+1
        B        ??OnKey_8
??OnKey_1:
        MOV      R0,#+1
        POP      {PC}
        DATA
??OnKey_7:
        DC32     0xffffffffa04ce69c
        DC32     0xffffffffa04ce600
        CFI EndBlock cfiBlock12

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon0
        CFI NoFunction
        THUMB
??method8??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock13
        REQUIRE method8

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon1
        CFI Function method8
        ARM
method8:
        B        ?Subroutine15
        CFI EndBlock cfiBlock14

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon0
        CFI NoFunction
        THUMB
??method9??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock15
        REQUIRE method9

        RSEG CODE:CODE:NOROOT(2)
        ARM
method9:
        REQUIRE ?Subroutine15
        ;; // Fall through to label ?Subroutine15

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon1
        CFI NoFunction
        ARM
?Subroutine15:
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock16

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_oncreate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock17
        REQUIRE maincsm_oncreate

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon1
        CFI Function maincsm_oncreate
        ARM
maincsm_oncreate:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R4,R0
        MOV      R0,#+56
        SWI      +20
        MOV      R5,R0
        MOV      R1,#+56
        SWI      +285
        SWI      +33161
        MOV      R6,R0
        SWI      +33160
        LDR      R2,??maincsm_oncreate_0  ;; ??Canvas
        SUB      R1,R6,#+1
        SUB      R0,R0,#+1
        MOV      R6,#+0
        STR      R6,[R2, #+0]
        STRH     R0,[R2, #+4]
        STRH     R1,[R2, #+6]
        STR      R2,[R5, #+0]
        MOV      R0,#+2
        STR      R0,[R5, #+48]
        ADD      R0,R2,#+8
        STR      R0,[R5, #+4]
        SWI      +32789
        STR      R0,[R5, #+32]
        STR      R6,[R4, #+16]
        STR      R6,[R4, #+20]
        MOV      R0,R5
        SWI      +311
        LDR      R1,??maincsm_oncreate_0+0x4  ;; MAINGUI_ID
        STR      R0,[R4, #+40]
        STR      R0,[R1, #+0]
        POP      {R4-R6,PC}       ;; return
        DATA
??maincsm_oncreate_0:
        DC32     ??Canvas
        DC32     MAINGUI_ID
        CFI EndBlock cfiBlock18

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon0
        CFI NoFunction
        THUMB
??ElfKiller??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock19
        REQUIRE ElfKiller

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon1
        CFI Function ElfKiller
        ARM
ElfKiller:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SWI      +32789
        MOV      R1,R0
        LDR      R0,??ElfKiller_0  ;; SFB(ELFBEGIN)
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        _BF      kill_data,??kill_data??rA  ;; tailcall
        DATA
??ElfKiller_0:
        DC32     SFB(ELFBEGIN)
        CFI EndBlock cfiBlock20

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_onclose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock21
        REQUIRE maincsm_onclose

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon1
        CFI Function maincsm_onclose
        ARM
maincsm_onclose:
        LDR      R1,??maincsm_onclose_0  ;; 0xffffffffa04ce574
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        LDR      R4,??DataTable1  ;; pwm
        LDR      R0,[R4, #+0]
        BLX      R1
        LDR      R0,[R4, #+0]
        LDR      R1,??maincsm_onclose_0+0x4  ;; 0xffffffffa04ce32c
        BLX      R1
        LDR      R0,[R4, #+0]
        LDR      R1,??maincsm_onclose_0+0x8  ;; 0xffffffffa04ce3d4
        BLX      R1
        LDR      R0,??maincsm_onclose_0+0xC  ;; ElfKiller
        SWI      +369
        POP      {R4,PC}          ;; return
        DATA
??maincsm_onclose_0:
        DC32     0xffffffffa04ce574
        DC32     0xffffffffa04ce32c
        DC32     0xffffffffa04ce3d4
        DC32     ElfKiller
        CFI EndBlock cfiBlock22

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable1:
        DC32     pwm

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_onmessage??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock23
        REQUIRE maincsm_onmessage

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon1
        CFI Function maincsm_onmessage
        ARM
maincsm_onmessage:
        LDR      R2,[R1, #+4]
        MOV      R3,#+14
        ORR      R3,R3,#0x6400
        CMP      R2,R3
        LDREQ    R1,[R1, #+12]
        LDREQ    R2,[R0, #+40]
        CMPEQ    R1,R2
        MVNEQ    R1,#+2
        STREQ    R1,[R0, #+16]
        MOV      R0,#+1
        BX       LR               ;; return
        CFI EndBlock cfiBlock24

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon0
        CFI NoFunction
        THUMB
??UpdateCSMname??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock25
        REQUIRE UpdateCSMname

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
maincsm_name_body:
        DS8 280

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "Frequency:\\n%dHz\\nDutyc...">`:
        DATA
        DC8 "Frequency:\012%dHz\012Dutycycle:\012%d%\012"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "i2c_tester">`:
        DATA
        DC8 "i2c_tester"
        DC8 0
        DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
        DC32 44, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
        DC16 139
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
minus11:
        DATA
        DC32 -11

        RSEG DATA_C:CONST:SORT:NOROOT(2)
??Canvas:
        DATA
        DC16 0, 0, 0, 0
gui_methods:
        DC32 OnRedraw, onCreate, onClose, onFocus, onUnfocus, OnKey, 0H
        DC32 kill_data, method8, method9, 0H

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock26 Using cfiCommon1
        CFI Function UpdateCSMname
        ARM
UpdateCSMname:
        LDR      R0,??UpdateCSMname_0  ;; `?<Constant "i2c_tester">`
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R1,R0
        ADD      R0,R0,#+52
        SWI      +292
        POP      {PC}             ;; return
        DATA
??UpdateCSMname_0:
        DC32     `?<Constant "i2c_tester">`
        CFI EndBlock cfiBlock26

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock27 Using cfiCommon0
        CFI NoFunction
        THUMB
??main??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock27
        REQUIRE main

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock28 Using cfiCommon1
        CFI Function main
        ARM
main:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SUB      SP,SP,#+44
        CFI CFA R13+48
        MOV      R1,#+44
        MOV      R0,SP
        SWI      +285
        SWI      +326
        BL       UpdateCSMname
        LDR      R0,??main_0      ;; `?<Constant "i2c_tester">` + 12
        MOV      R2,#+0
        MOV      R1,SP
        SWI      +263
        LDR      R1,??main_0+0x4  ;; MAINCSM_ID
        STR      R0,[R1, #+0]
        SWI      +327
        MOV      R0,#+0
        ADD      SP,SP,#+44
        CFI CFA R13+4
        POP      {PC}             ;; return
        DATA
??main_0:
        DC32     `?<Constant "i2c_tester">` + 12
        DC32     MAINCSM_ID
        CFI EndBlock cfiBlock28

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock29 Using cfiCommon1
        CFI NoFunction
        ARM
??kill_data??rA:
        LDR      R12,??Subroutine16_0  ;; kill_data
        BX       R12
        DATA
??Subroutine16_0:
        DC32     kill_data
        CFI EndBlock cfiBlock29

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for pwm>`:
        DATA
        DC8 0, 0, 0, 0
`?<Initializer for FREQUENCY>`:
        DC32 1
`?<Initializer for DUTYCYCLE>`:
        DC32 0

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        RSEG ELFBEGIN:DATA:REORDER:NOROOT(0)

        END
// 
// 956 bytes in segment CODE
// 160 bytes in segment DATA_C
//  12 bytes in segment DATA_I
//  12 bytes in segment DATA_ID
// 292 bytes in segment DATA_Z
//  24 bytes in segment INITTAB
// 
// 888 bytes of CODE  memory (+ 92 bytes shared)
// 172 bytes of CONST memory
// 304 bytes of DATA  memory
//
//Errors: none
//Warnings: none
