##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    04/Jul/2013  20:08:49 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  S:\Users\alfin_000\Documents\Siemens\IAR\ARM\pwmgui\ #
#                       main.c                                               #
#    Command line    =  S:\Users\alfin_000\Documents\Siemens\IAR\ARM\pwmgui\ #
#                       main.c -D NEWSGOLD -lCN S:\Users\alfin_000\Documents #
#                       \Siemens\IAR\ARM\pwmgui\Release_NSG\List\ -la        #
#                       S:\Users\alfin_000\Documents\Siemens\IAR\ARM\pwmgui\ #
#                       Release_NSG\List\ -o S:\Users\alfin_000\Documents\Si #
#                       emens\IAR\ARM\pwmgui\Release_NSG\Obj\ -z9            #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --fpu None            #
#                       --dlib_config S:\Users\alfin_000\Documents\Siemens\I #
#                       AR\ARM\LIB\dl5tpainl8n.h -I                          #
#                       S:\Users\alfin_000\Documents\Siemens\IAR\ARM\INC\    #
#                       --inline_threshold=2                                 #
#    List file       =  S:\Users\alfin_000\Documents\Siemens\IAR\ARM\pwmgui\ #
#                       Release_NSG\List\main.lst                            #
#    Object file     =  S:\Users\alfin_000\Documents\Siemens\IAR\ARM\pwmgui\ #
#                       Release_NSG\Obj\main.r79                             #
#                                                                            #
#                                                                            #
##############################################################################

S:\Users\alfin_000\Documents\Siemens\IAR\ARM\pwmgui\main.c
      1          #include <swilib.h>
      2          #include "rect_patcher.h"
      3          #include "gpio_nsg.h"
      4          //#include <nu_swilib.h>
      5          //#include "i2clib.h"
      6          
      7          #define CapCom_RegClient       ((int(*)(char* name, char channel)) 0xA04CE1C8)
      8          #define CapCom_UnRegClient     ((int(*)(unsigned id)) 0xA04CE3D4)
      9          #define CapCom_ConnectTimer    ((int(*)(unsigned id, int frequency, int dutycycle))0xA04CE25C)
     10          #define CapCom_DisconnectTimer ((int(*)(unsigned id)) 0xA04CE32C)
     11          #define CapCom_TimerOn         ((int(*)(unsigned id)) 0xA04CE454)
     12          #define CapCom_TimerOff        ((int(*)(unsigned id)) 0xA04CE574)
     13          #define CapCom_TimerOn_CSS     ((int(*)(unsigned id)) 0xA04CE4E4) 
     14          #define CapCom_SetFreq         ((int(*)(unsigned id, int frequency, int zero)) 0xA04CE600)
     15          #define CapCom_SetDutycycle    ((int(*)(unsigned id, int dutycycle, int zero)) 0xA04CE69C)
     16          #define CapCom_SetDutycycle2   ((int(*)(unsigned id, int dutycycle, int zero)) 0xA04CE73C) 
     17          
     18          #define SetClkState            ((int(*)(unsigned port_id,int))0xA04D0728)
     19          #define delay_ms               ((void(*)(int ms))0xA0018510)
     20          

   \                                 In segment DATA_I, align 4, align-sorted
     21          unsigned pwm;
   \                     pwm:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for pwm>`
     22          int FREQUENCY=1; 
   \                     FREQUENCY:
   \   00000004                      DS8 4
   \   00000008                      REQUIRE `?<Initializer for FREQUENCY>`
     23          int DUTYCYCLE=0;
   \                     DUTYCYCLE:
   \   00000008                      DS8 4
   \   0000000C                      REQUIRE `?<Initializer for DUTYCYCLE>`
     24          
     25          

   \                                 In segment DATA_C, align 4, align-sorted
     26          const int minus11=-11;
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11

   \                                 In segment DATA_Z, align 4, align-sorted
     27          unsigned int MAINCSM_ID = 0;
   \                     MAINCSM_ID:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     28          unsigned int MAINGUI_ID = 0;
   \                     MAINGUI_ID:
   \   00000000                      DS8 4
     29          
     30          
     31          typedef struct
     32          {
     33            CSM_RAM csm;
     34            int gui_id;
     35          }MAIN_CSM;
     36          
     37          typedef struct
     38          {
     39            GUI gui;
     40            WSHDR *ws1;
     41          }MAIN_GUI;
     42          
     43          enum { POS_REG, POS_DAT };

   \                                 In segment DATA_Z, align 4, align-sorted
     44          int cur_pos=POS_REG;
   \                     cur_pos:
   \   00000000                      DS8 4
     45          
     46          

   \                                 In segment CODE, align 4, keep-with-next
     47          void OnRedraw(MAIN_GUI *data)
     48          {
   \                     OnRedraw:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     49            int scr_w=ScreenW();
   \   00000008   888100EF           SWI      +33160
   \   0000000C   0050A0E1           MOV      R5,R0
     50            int scr_h=ScreenH();
   \   00000010   898100EF           SWI      +33161
   \   00000014   0060A0E1           MOV      R6,R0
     51            
     52          
     53          DrawRoundedFrame(0,YDISP,scr_w-1,scr_h-1,0,0,0,GetPaletteAdrByColorIndex(2),GetPaletteAdrByColorIndex(1));
   \   00000018   0100A0E3           MOV      R0,#+1
   \   0000001C   2E0100EF           SWI      +302
   \   00000020   0070A0E1           MOV      R7,R0
   \   00000024   0200A0E3           MOV      R0,#+2
   \   00000028   2E0100EF           SWI      +302
   \   0000002C   80002DE9           PUSH     {R7}
   \   00000030   01002DE9           PUSH     {R0}
   \   00000034   013046E2           SUB      R3,R6,#+1
   \   00000038   012045E2           SUB      R2,R5,#+1
   \   0000003C   0010A0E3           MOV      R1,#+0
   \   00000040   0000A0E3           MOV      R0,#+0
   \   00000044   01002DE9           PUSH     {R0}
   \   00000048   01002DE9           PUSH     {R0}
   \   0000004C   01002DE9           PUSH     {R0}
   \   00000050   500100EF           SWI      +336
     54           
     55           wsprintf(data->ws1,
     56                    "Frequency:\n"
     57                      "%dHz\n"
     58                       "Dutycycle:\n"
     59                         "%d%\n"
     60                           ,FREQUENCY,DUTYCYCLE);
   \   00000054   5C009FE5           LDR      R0,??OnRedraw_0  ;; pwm
   \   00000058   083090E5           LDR      R3,[R0, #+8]
   \   0000005C   042090E5           LDR      R2,[R0, #+4]
   \   00000060   340094E5           LDR      R0,[R4, #+52]
   \   00000064   50109FE5           LDR      R1,??OnRedraw_0+0x4  ;; `?<Constant "Frequency:\\n%dHz\\nDutyc...">`
   \   00000068   240100EF           SWI      +292
     61            DrawString(data->ws1,15,20+YDISP,scr_w,200,
     62                       FONT_LARGE,0,GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(23));
   \   0000006C   1700A0E3           MOV      R0,#+23
   \   00000070   2E0100EF           SWI      +302
   \   00000074   0060A0E1           MOV      R6,R0
   \   00000078   0000A0E3           MOV      R0,#+0
   \   0000007C   2E0100EF           SWI      +302
   \   00000080   40002DE9           PUSH     {R6}
   \   00000084   01002DE9           PUSH     {R0}
   \   00000088   0530A0E1           MOV      R3,R5
   \   0000008C   1420A0E3           MOV      R2,#+20
   \   00000090   0F10A0E3           MOV      R1,#+15
   \   00000094   0000A0E3           MOV      R0,#+0
   \   00000098   01002DE9           PUSH     {R0}
   \   0000009C   01002DE9           PUSH     {R0}
   \   000000A0   C800A0E3           MOV      R0,#+200
   \   000000A4   01002DE9           PUSH     {R0}
   \   000000A8   340094E5           LDR      R0,[R4, #+52]
   \   000000AC   4C0100EF           SWI      +332
   \   000000B0   28D08DE2           ADD      SP,SP,#+40
     63            
     64          }
   \   000000B4   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??OnRedraw_0:
   \   000000B8   ........           DC32     pwm
   \   000000BC   ........           DC32     `?<Constant "Frequency:\\n%dHz\\nDutyc...">`
     65          

   \                                 In segment CODE, align 4, keep-with-next
     66          void onCreate(MAIN_GUI *data, void *(*malloc_adr)(int))
     67          {
   \                     onCreate:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     68          
     69            data->ws1=AllocWS(80);
   \   00000008   5000A0E3           MOV      R0,#+80
   \   0000000C   250100EF           SWI      +293
   \   00000010   340084E5           STR      R0,[R4, #+52]
     70            data->gui.state=1;
   \   00000014   0100A0E3           MOV      R0,#+1
   \   00000018   ........           B        ?Subroutine14
     71          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine14:
   \   00000000   0C00C4E5           STRB     R0,[R4, #+12]
   \   00000004   1080BDE8           POP      {R4,PC}          ;; return
     72          

   \                                 In segment CODE, align 4, keep-with-next
     73          void onClose(MAIN_GUI *data, void (*mfree_adr)(void *))
     74          {
   \                     onClose:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     75            FreeWS(data->ws1);
   \   00000008   340094E5           LDR      R0,[R4, #+52]
   \   0000000C   290100EF           SWI      +297
     76            data->gui.state=0;
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014                      REQUIRE ?Subroutine14
   \   00000014                      ;; // Fall through to label ?Subroutine14
     77          }
     78          

   \                                 In segment CODE, align 4, keep-with-next
     79          void onFocus(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))
     80          { 
   \                     onFocus:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     81            DisableIDLETMR();
   \   00000008   7F0100EF           SWI      +383
     82            data->gui.state=2;
   \   0000000C   0200A0E3           MOV      R0,#+2
   \   00000010   ........           B        ?Subroutine14
     83          }
     84          

   \                                 In segment CODE, align 4, keep-with-next
     85          void onUnfocus(MAIN_GUI *data, void (*mfree_adr)(void *))
     86          {
     87            if (data->gui.state!=2) return;
   \                     onUnfocus:
   \   00000000   0C10D0E5           LDRB     R1,[R0, #+12]
   \   00000004   020051E3           CMP      R1,#+2
     88            data->gui.state=1;
   \   00000008   0110A003           MOVEQ    R1,#+1
   \   0000000C   0C10C005           STRBEQ   R1,[R0, #+12]
     89          }
   \   00000010   1EFF2FE1           BX       LR               ;; return
     90          

   \                                 In segment CODE, align 4, keep-with-next
     91          static int OnKey(MAIN_GUI *data, GUI_MSG *msg)
     92          {
   \                     OnKey:
   \   00000000   00402DE9           PUSH     {LR}
     93            if (msg->gbsmsg->msg==KEY_DOWN)
   \   00000004   042091E5           LDR      R2,[R1, #+4]
   \   00000008   9310A0E3           MOV      R1,#+147
   \   0000000C   040092E5           LDR      R0,[R2, #+4]
   \   00000010   401F81E3           ORR      R1,R1,#0x100
   \   00000014   010050E1           CMP      R0,R1
   \   00000018   1500001A           BNE      ??OnKey_0
     94            {
     95              switch(msg->gbsmsg->submess)
   \   0000001C   ........           LDR      R3,??DataTable1  ;; pwm
   \   00000020   082092E5           LDR      R2,[R2, #+8]
   \   00000024   080093E5           LDR      R0,[R3, #+8]
   \   00000028   041093E5           LDR      R1,[R3, #+4]
   \   0000002C   042052E2           SUBS     R2,R2,#+4
   \   00000030   2000000A           BEQ      ??OnKey_1
   \   00000034   372052E2           SUBS     R2,R2,#+55
   \   00000038   1300000A           BEQ      ??OnKey_2
   \   0000003C   012052E2           SUBS     R2,R2,#+1
   \   00000040   1800000A           BEQ      ??OnKey_3
   \   00000044   012052E2           SUBS     R2,R2,#+1
   \   00000048   0B00000A           BEQ      ??OnKey_4
   \   0000004C   012052E2           SUBS     R2,R2,#+1
   \   00000050   0600001A           BNE      ??OnKey_5
     96              {
     97              case RIGHT_BUTTON: CapCom_SetDutycycle(pwm, DUTYCYCLE++, 0);
   \   00000054   011080E2           ADD      R1,R0,#+1
   \                     ??OnKey_6:
   \   00000058   081083E5           STR      R1,[R3, #+8]
   \   0000005C   0020A0E3           MOV      R2,#+0
   \   00000060   0010A0E1           MOV      R1,R0
   \   00000064   000093E5           LDR      R0,[R3, #+0]
   \   00000068   50309FE5           LDR      R3,??OnKey_7     ;; 0xffffffffa04ce69c
   \   0000006C   33FF2FE1           BLX      R3
     98              break;     
     99              case LEFT_BUTTON: if(DUTYCYCLE != NULL) CapCom_SetDutycycle(pwm, DUTYCYCLE--, 0);
    100              break;  
    101              case UP_BUTTON: CapCom_SetFreq(pwm, FREQUENCY++, 0);
    102              break;         
    103              case DOWN_BUTTON: if(FREQUENCY != NULL) CapCom_SetFreq(pwm, FREQUENCY--, 0); 
    104              break;  
    105              case RIGHT_SOFT:
    106              return (1);
    107              }
    108            REDRAW();
   \                     ??OnKey_5:
   \   00000070   720100EF           SWI      +370
    109            }
    110          
    111            return(0);
   \                     ??OnKey_0:
   \   00000074   0000A0E3           MOV      R0,#+0
   \   00000078   0080BDE8           POP      {PC}             ;; return
   \                     ??OnKey_4:
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   FAFFFF0A           BEQ      ??OnKey_5
   \   00000084   011040E2           SUB      R1,R0,#+1
   \   00000088   F2FFFFEA           B        ??OnKey_6
   \                     ??OnKey_2:
   \   0000008C   010081E2           ADD      R0,R1,#+1
   \                     ??OnKey_8:
   \   00000090   040083E5           STR      R0,[R3, #+4]
   \   00000094   000093E5           LDR      R0,[R3, #+0]
   \   00000098   24309FE5           LDR      R3,??OnKey_7+0x4  ;; 0xffffffffa04ce600
   \   0000009C   0020A0E3           MOV      R2,#+0
   \   000000A0   33FF2FE1           BLX      R3
   \   000000A4   F1FFFFEA           B        ??OnKey_5
   \                     ??OnKey_3:
   \   000000A8   000051E3           CMP      R1,#+0
   \   000000AC   EFFFFF0A           BEQ      ??OnKey_5
   \   000000B0   010041E2           SUB      R0,R1,#+1
   \   000000B4   F5FFFFEA           B        ??OnKey_8
   \                     ??OnKey_1:
   \   000000B8   0100A0E3           MOV      R0,#+1
   \   000000BC   0080BDE8           POP      {PC}
   \                     ??OnKey_7:
   \   000000C0   9CE64CA0           DC32     0xffffffffa04ce69c
   \   000000C4   00E64CA0           DC32     0xffffffffa04ce600
    112          }
    113          
    114          extern void kill_data(void *p, void (*func_p)(void *));
    115          

   \                                 In segment CODE, align 4, keep-with-next
    116          int method8(void){return(0);}
   \                     method8:
   \   00000000   ........           B        ?Subroutine15

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine15:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
    117          int method9(void){return(0);}
   \                     method9:
   \   00000000                      REQUIRE ?Subroutine15
   \   00000000                      ;; // Fall through to label ?Subroutine15
    118          const void * const gui_methods[11]={
    119            (void *)OnRedraw,
    120            (void *)onCreate,
    121            (void *)onClose,
    122            (void *)onFocus,
    123            (void *)onUnfocus,
    124            (void *)OnKey,
    125            0,
    126            (void *)kill_data,
    127            (void *)method8,
    128            (void *)method9,
    129            0
    130          };
    131          
    132          

   \                                 In segment CODE, align 4, keep-with-next
    133          static void maincsm_oncreate(CSM_RAM *data)
    134          {
   \                     maincsm_oncreate:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    135            static const RECT Canvas={0,0,0,0};
    136            MAIN_GUI *main_gui=malloc(sizeof(MAIN_GUI));
   \   00000008   3800A0E3           MOV      R0,#+56
   \   0000000C   140000EF           SWI      +20
   \   00000010   0050A0E1           MOV      R5,R0
    137            MAIN_CSM *csm=(MAIN_CSM *)data;
    138            zeromem(main_gui,sizeof(MAIN_GUI));
   \   00000014   3810A0E3           MOV      R1,#+56
   \   00000018   1D0100EF           SWI      +285
    139            patch_rect((RECT*)&Canvas,0,YDISP,ScreenW()-1,ScreenH()-1);
   \   0000001C   898100EF           SWI      +33161
   \   00000020   0060A0E1           MOV      R6,R0
   \   00000024   888100EF           SWI      +33160
   \   00000028   50209FE5           LDR      R2,??maincsm_oncreate_0  ;; ??Canvas
   \   0000002C   011046E2           SUB      R1,R6,#+1
   \   00000030   010040E2           SUB      R0,R0,#+1
   \   00000034   0060A0E3           MOV      R6,#+0
   \   00000038   006082E5           STR      R6,[R2, #+0]
   \   0000003C   B400C2E1           STRH     R0,[R2, #+4]
   \   00000040   B610C2E1           STRH     R1,[R2, #+6]
    140            main_gui->gui.canvas=(void *)(&Canvas);
   \   00000044   002085E5           STR      R2,[R5, #+0]
    141            main_gui->gui.flag30=2;
   \   00000048   0200A0E3           MOV      R0,#+2
   \   0000004C   300085E5           STR      R0,[R5, #+48]
    142            main_gui->gui.methods=(void *)gui_methods;
   \   00000050   080082E2           ADD      R0,R2,#+8
   \   00000054   040085E5           STR      R0,[R5, #+4]
    143            main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
   \   00000058   158000EF           SWI      +32789
   \   0000005C   200085E5           STR      R0,[R5, #+32]
    144            csm->csm.state=0;
   \   00000060   106084E5           STR      R6,[R4, #+16]
    145            csm->csm.unk1=0;
   \   00000064   146084E5           STR      R6,[R4, #+20]
    146            MAINGUI_ID=csm->gui_id=CreateGUI(main_gui);
   \   00000068   0500A0E1           MOV      R0,R5
   \   0000006C   370100EF           SWI      +311
   \   00000070   0C109FE5           LDR      R1,??maincsm_oncreate_0+0x4  ;; MAINGUI_ID
   \   00000074   280084E5           STR      R0,[R4, #+40]
   \   00000078   000081E5           STR      R0,[R1, #+0]
    147          }
   \   0000007C   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??maincsm_oncreate_0:
   \   00000080   ........           DC32     ??Canvas
   \   00000084   ........           DC32     MAINGUI_ID

   \                                 In segment DATA_C, align 4, align-sorted
   \                     ??Canvas:
   \   00000000   000000000000       DC16 0, 0, 0, 0
   \              0000        
   \                     gui_methods:
   \   00000008   ............       DC32 OnRedraw, onCreate, onClose, onFocus, onUnfocus, OnKey, 0H
   \              ............
   \              ............
   \              ............
   \              00000000    
   \   00000024   ............       DC32 kill_data, method8, method9, 0H
   \              ............
   \              00000000    
    148          
    149          #pragma segment="ELFBEGIN"

   \                                 In segment CODE, align 4, keep-with-next
    150          void ElfKiller(void)
    151          {
   \                     ElfKiller:
   \   00000000   00402DE9           PUSH     {LR}
    152            kill_data(__segment_begin("ELFBEGIN"),(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??ElfKiller_0  ;; SFB(ELFBEGIN)
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??ElfKiller_0:
   \   00000018   ........           DC32     SFB(ELFBEGIN)
    153          }
    154          

   \                                 In segment CODE, align 4, keep-with-next
    155          static void maincsm_onclose(CSM_RAM *data)
    156          {
    157            CapCom_TimerOff(pwm);
   \                     maincsm_onclose:
   \   00000000   30109FE5           LDR      R1,??maincsm_onclose_0  ;; 0xffffffffa04ce574
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   ........           LDR      R4,??DataTable1  ;; pwm
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   31FF2FE1           BLX      R1
    158            CapCom_DisconnectTimer(pwm);
   \   00000014   000094E5           LDR      R0,[R4, #+0]
   \   00000018   1C109FE5           LDR      R1,??maincsm_onclose_0+0x4  ;; 0xffffffffa04ce32c
   \   0000001C   31FF2FE1           BLX      R1
    159            CapCom_UnRegClient(pwm);
   \   00000020   000094E5           LDR      R0,[R4, #+0]
   \   00000024   14109FE5           LDR      R1,??maincsm_onclose_0+0x8  ;; 0xffffffffa04ce3d4
   \   00000028   31FF2FE1           BLX      R1
    160            SUBPROC((void *)ElfKiller);
   \   0000002C   10009FE5           LDR      R0,??maincsm_onclose_0+0xC  ;; ElfKiller
   \   00000030   710100EF           SWI      +369
    161          }
   \   00000034   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??maincsm_onclose_0:
   \   00000038   74E54CA0           DC32     0xffffffffa04ce574
   \   0000003C   2CE34CA0           DC32     0xffffffffa04ce32c
   \   00000040   D4E34CA0           DC32     0xffffffffa04ce3d4
   \   00000044   ........           DC32     ElfKiller
    162          

   \                                 In segment CODE, align 4, keep-with-next
    163          static int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
    164          {
    165             MAIN_CSM *csm=(MAIN_CSM*)data;
    166            if ((msg->msg==MSG_GUI_DESTROYED)&&((int)msg->data0==csm->gui_id))
   \                     maincsm_onmessage:
   \   00000000   042091E5           LDR      R2,[R1, #+4]
   \   00000004   0E30A0E3           MOV      R3,#+14
   \   00000008   643C83E3           ORR      R3,R3,#0x6400
   \   0000000C   030052E1           CMP      R2,R3
   \   00000010   0C109105           LDREQ    R1,[R1, #+12]
   \   00000014   28209005           LDREQ    R2,[R0, #+40]
   \   00000018   02005101           CMPEQ    R1,R2
    167            {
    168              csm->csm.state=-3;
   \   0000001C   0210E003           MVNEQ    R1,#+2
   \   00000020   10108005           STREQ    R1,[R0, #+16]
    169            }
    170            return(1);
   \   00000024   0100A0E3           MOV      R0,#+1
   \   00000028   1EFF2FE1           BX       LR               ;; return
    171          }
    172          

   \                                 In segment DATA_Z, align 4, align-sorted
    173          static unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280
    174          
    175          static const struct
    176          {
    177            CSM_DESC maincsm;
    178            WSHDR maincsm_name;

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "i2c_tester">`:
   \   00000000   6932635F7465       DC8 "i2c_tester"
   \              7374657200  
   \   0000000B   00                 DC8 0
   \   0000000C   ............       DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
   \              ....00000000
   \              000000000000
   \              000000000000
   \              ........    
   \   00000028   2C0000000100       DC32 44, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              0000........
   \              ........CCCC
   \              AA5555AA3333
   \              00000000    
   \   00000044   8B00               DC16 139
   \   00000046   0000               DC8 0, 0
    179          }MAINCSM =
    180          {
    181            {
    182            maincsm_onmessage,
    183            maincsm_oncreate,
    184          #ifdef NEWSGOLD
    185            0,
    186            0,
    187            0,
    188            0,
    189          #endif
    190            maincsm_onclose,
    191            sizeof(MAIN_CSM),
    192            1,
    193            &minus11
    194            },
    195            {
    196              maincsm_name_body,
    197              NAMECSM_MAGIC1,
    198              NAMECSM_MAGIC2,
    199              0x0,
    200              139
    201            }
    202          };
    203          

   \                                 In segment CODE, align 4, keep-with-next
    204          void UpdateCSMname(void)
    205          {
    206            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"i2c_tester");
   \                     UpdateCSMname:
   \   00000000   10009FE5           LDR      R0,??UpdateCSMname_0  ;; `?<Constant "i2c_tester">`
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   340080E2           ADD      R0,R0,#+52
   \   00000010   240100EF           SWI      +292
    207          }
   \   00000014   0080BDE8           POP      {PC}             ;; return
   \                     ??UpdateCSMname_0:
   \   00000018   ........           DC32     `?<Constant "i2c_tester">`
    208          
    209          

   \                                 In segment CODE, align 4, keep-with-next
    210          int main(char *exename, char *fname)
    211          { 
   \                     main:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
    212            /* GPIO_USART0_RXD = 0x30;
    213             SetClkState(0xA55A0002,6);
    214             pwm = CapCom_RegClient("__PWM__", 0x2); 
    215             CapCom_ConnectTimer(pwm, 1, 0 );
    216             CapCom_TimerOn(pwm);
    217          */   
    218             MAIN_CSM main_csm;
    219             zeromem(&main_csm, sizeof(MAIN_CSM));
   \   00000008   2C10A0E3           MOV      R1,#+44
   \   0000000C   0D00A0E1           MOV      R0,SP
   \   00000010   1D0100EF           SWI      +285
    220             LockSched();
   \   00000014   460100EF           SWI      +326
    221             UpdateCSMname();
   \   00000018   ........           BL       UpdateCSMname
    222             MAINCSM_ID=CreateCSM(&MAINCSM.maincsm,&main_csm,0);
   \   0000001C   20009FE5           LDR      R0,??main_0      ;; `?<Constant "i2c_tester">` + 12
   \   00000020   0020A0E3           MOV      R2,#+0
   \   00000024   0D10A0E1           MOV      R1,SP
   \   00000028   070100EF           SWI      +263
   \   0000002C   14109FE5           LDR      R1,??main_0+0x4  ;; MAINCSM_ID
   \   00000030   000081E5           STR      R0,[R1, #+0]
    223             UnlockSched();
   \   00000034   470100EF           SWI      +327
    224             return 0;
   \   00000038   0000A0E3           MOV      R0,#+0
   \   0000003C   2CD08DE2           ADD      SP,SP,#+44
   \   00000040   0080BDE8           POP      {PC}             ;; return
   \                     ??main_0:
   \   00000044   ........           DC32     `?<Constant "i2c_tester">` + 12
   \   00000048   ........           DC32     MAINCSM_ID
    225          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     pwm

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for pwm>`:
   \   00000000   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for FREQUENCY>`:
   \   00000004   01000000           DC32 1
   \                     `?<Initializer for DUTYCYCLE>`:
   \   00000008   00000000           DC32 0

   \                                 In segment ELFBEGIN, align 1

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Frequency:\\n%dHz\\nDutyc...">`:
   \   00000000   467265717565       DC8 "Frequency:\012%dHz\012Dutycycle:\012%d%\012"
   \              6E63793A0A25
   \              64487A0A4475
   \              74796379636C
   \              653A0A256425
   \              0A00        
    226          
    227          
    228          

   Maximum stack usage in bytes:

     Function          CSTACK
     --------          ------
     ElfKiller             4
     OnKey                 4
     OnRedraw             60
     UpdateCSMname         4
     main                 48
     maincsm_onclose       8
     maincsm_oncreate     16
     maincsm_onmessage     0
     method8               0
     method9               0
     onClose               8
     onCreate              8
     onFocus               8
     onUnfocus             0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     pwm                              12
     minus11                           4
     MAINCSM_ID                        4
     MAINGUI_ID                        4
     cur_pos                           4
     OnRedraw                        192
     onCreate                         28
     ?Subroutine14                     8
     onClose                          20
     onFocus                          20
     onUnfocus                        20
     OnKey                           200
     method8                           4
     ?Subroutine15                     8
     method9                           0
     maincsm_oncreate                136
     Canvas                           52
     ElfKiller                        28
     maincsm_onclose                  72
     maincsm_onmessage                44
     maincsm_name_body               280
     ?<Constant "i2c_tester">         72
     UpdateCSMname                    28
     main                             76
     ??DataTable1                      4
     ?<Initializer for pwm>           12
     ?<Constant "Frequency:\n%dHz\nDutyc...">
                                      32
      Others                          92

 
 956 bytes in segment CODE
 160 bytes in segment DATA_C
  12 bytes in segment DATA_I
  12 bytes in segment DATA_ID
 292 bytes in segment DATA_Z
  24 bytes in segment INITTAB
 
 888 bytes of CODE  memory (+ 92 bytes shared)
 172 bytes of CONST memory
 304 bytes of DATA  memory

Errors: none
Warnings: none
