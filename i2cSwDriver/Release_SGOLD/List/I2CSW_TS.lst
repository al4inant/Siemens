##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    10/Dec/2015  20:12:59 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  arm                                                  #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  E:\Users\alfinant\Documents\Siemens\alfinant\i2cSwDr #
#                       iver\I2CSW_TS.C                                      #
#    Command line    =  E:\Users\alfinant\Documents\Siemens\alfinant\i2cSwDr #
#                       iver\I2CSW_TS.C -D SGOLD -lCN                        #
#                       E:\Users\alfinant\Documents\Siemens\alfinant\i2cSwDr #
#                       iver\Release_SGOLD\List\ -o                          #
#                       E:\Users\alfinant\Documents\Siemens\alfinant\i2cSwDr #
#                       iver\Release_SGOLD\Obj\ -s9 --no_unroll --cpu_mode   #
#                       arm --endian little --cpu ARM926EJ-S --stack_align   #
#                       4 -e --fpu None --dlib_config                        #
#                       E:\Users\alfinant\Documents\Siemens\IAR\ARM\LIB\dl5t #
#                       pannl8n.h -I E:\Users\alfinant\Documents\Siemens\IAR #
#                       \ARM\INC\ --inline_threshold=2                       #
#    List file       =  E:\Users\alfinant\Documents\Siemens\alfinant\i2cSwDr #
#                       iver\Release_SGOLD\List\I2CSW_TS.lst                 #
#    Object file     =  E:\Users\alfinant\Documents\Siemens\alfinant\i2cSwDr #
#                       iver\Release_SGOLD\Obj\I2CSW_TS.r79                  #
#                                                                            #
#                                                                            #
##############################################################################

E:\Users\alfinant\Documents\Siemens\alfinant\i2cSwDriver\I2CSW_TS.C
      1          #include "I2C_SW.H"
      2          

   \                                 In segment CODE, align 4, keep-with-next
      3          unsigned int i2cWrite(unsigned char address,signed char sub_addr,
      4          			 char *buffer, unsigned int count)
      5          {
   \                     i2cWrite:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
      6          	unsigned int i;
      7                  
      8                  I2cInit();          /* лишней иницализацией соединение не испортишь:) */
   \   00000014   ........           _BLF     I2cInit,??I2cInit??rA
      9                  
     10          	I2cStart();                            /* START condition */
   \   00000018   ........           _BLF     I2cStart,??I2cStart??rA
     11          
     12                  if (I2cMasterWrite(address << 1))      /* device write address */
   \   0000001C   8400A0E1           LSL      R0,R4,#+1
   \   00000020   FF0000E2           AND      R0,R0,#0xFF
   \   00000024   ........           _BLF     I2cMasterWrite,??I2cMasterWrite??rA
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0200000A           BEQ      ??i2cWrite_0
     13          	{
     14          	   I2cStop();
   \                     ??i2cWrite_1:
   \   00000030   ........           _BLF     I2cStop,??I2cStop??rA
     15          	   return(1);	
   \   00000034   0100A0E3           MOV      R0,#+1
   \   00000038   F080BDE8           POP      {R4-R7,PC}
     16                  }
     17                                                         /* check for any sub-address */
     18                  if (sub_addr != -1)
   \                     ??i2cWrite_0:
   \   0000003C   0000E0E3           MVN      R0,#+0
   \   00000040   000055E1           CMP      R5,R0
   \   00000044   0300000A           BEQ      ??i2cWrite_2
     19          	{
     20                     if (I2cMasterWrite(sub_addr))       /* memory word address */	
   \   00000048   FF0005E2           AND      R0,R5,#0xFF
   \   0000004C   ........           _BLF     I2cMasterWrite,??I2cMasterWrite??rA
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   F5FFFF1A           BNE      ??i2cWrite_1
     21                 	   {
     22                        I2cStop();
     23          	      return(1);
     24          	   }
     25                  }
     26          
     27          	for (i=0; i < count; i++)              /* byte of data to be sent */
   \                     ??i2cWrite_2:
   \   00000058   0040A0E3           MOV      R4,#+0
   \   0000005C   040000EA           B        ??i2cWrite_3
     28          	{
     29          	   if (I2cMasterWrite(buffer[i]))           
   \                     ??i2cWrite_4:
   \   00000060   0600D4E7           LDRB     R0,[R4, +R6]
   \   00000064   ........           _BLF     I2cMasterWrite,??I2cMasterWrite??rA
   \   00000068   000050E3           CMP      R0,#+0
   \   0000006C   EFFFFF1A           BNE      ??i2cWrite_1
     30          	   {
     31          	      I2cStop();
     32          	      return(1);
     33          	   }
     34          	}
   \   00000070   014084E2           ADD      R4,R4,#+1
   \                     ??i2cWrite_3:
   \   00000074   070054E1           CMP      R4,R7
   \   00000078   F8FFFF3A           BCC      ??i2cWrite_4
     35          
     36          	I2cStop();                 	/* STOP condition */
   \   0000007C   ........           _BLF     I2cStop,??I2cStop??rA
     37          	return(0);
   \   00000080   0000A0E3           MOV      R0,#+0
   \   00000084   F080BDE8           POP      {R4-R7,PC}       ;; return
     38          }
     39          

   \                                 In segment CODE, align 4, keep-with-next
     40          unsigned int i2cRead(unsigned char address,signed char sub_addr,
     41          			 char *buffer,unsigned int count)
     42          {
   \                     i2cRead:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
     43          	unsigned int i;
     44                  
     45                  I2cInit();          /* лишним инитом соединение не испортишь:) */
   \   00000014   ........           _BLF     I2cInit,??I2cInit??rA
     46          
     47           	I2cStart();         /* START condition */
   \   00000018   ........           _BLF     I2cStart,??I2cStart??rA
     48                  
     49                  if(sub_addr != -1)  /* check for any sub-address/word address */
   \   0000001C   0000E0E3           MVN      R0,#+0
   \   00000020   000055E1           CMP      R5,R0
   \   00000024   0C00000A           BEQ      ??i2cRead_0
     50                  {
     51                     if (I2cMasterWrite(address << 1))  /* device write address */
   \   00000028   8400A0E1           LSL      R0,R4,#+1
   \   0000002C   FF0000E2           AND      R0,R0,#0xFF
   \   00000030   ........           _BLF     I2cMasterWrite,??I2cMasterWrite??rA
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0200000A           BEQ      ??i2cRead_1
     52                     {
     53                        I2cStop();
   \                     ??i2cRead_2:
   \   0000003C   ........           _BLF     I2cStop,??I2cStop??rA
     54                        return(1);
   \   00000040   0100A0E3           MOV      R0,#+1
   \   00000044   F080BDE8           POP      {R4-R7,PC}
     55                     }
     56                    
     57                    if (I2cMasterWrite(sub_addr))   /* memory word address */
   \                     ??i2cRead_1:
   \   00000048   FF0005E2           AND      R0,R5,#0xFF
   \   0000004C   ........           _BLF     I2cMasterWrite,??I2cMasterWrite??rA
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   F8FFFF1A           BNE      ??i2cRead_2
     58                    {
     59                        I2cStop();
     60                        return(1);
     61                    }
     62                    
     63                    I2cStart();                     /* START condition */
   \   00000058   ........           _BLF     I2cStart,??I2cStart??rA
     64                  }
     65                  
     66                  if (I2cMasterWrite((address << 1)+1)) /* device read address */
   \                     ??i2cRead_0:
   \   0000005C   0100A0E3           MOV      R0,#+1
   \   00000060   840080E0           ADD      R0,R0,R4, LSL #+1
   \   00000064   FF0000E2           AND      R0,R0,#0xFF
   \   00000068   ........           _BLF     I2cMasterWrite,??I2cMasterWrite??rA
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   F1FFFF1A           BNE      ??i2cRead_2
     67                  {
     68                     I2cStop();
     69                     return(1);
     70          	}
     71                  
     72                  for (i=0; i<count-1; i++)        /* number of bytes to be read */
   \   00000074   0040A0E3           MOV      R4,#+0
   \   00000078   015057E2           SUBS     R5,R7,#+1
   \   0000007C   0400001A           BNE      ??i2cRead_3
   \   00000080   050000EA           B        ??i2cRead_4
     73          	{
     74              	   *buffer = I2cMasterRead(0);
   \                     ??i2cRead_5:
   \   00000084   0000A0E3           MOV      R0,#+0
   \   00000088   ........           _BLF     I2cMasterRead,??I2cMasterRead??rA
   \   0000008C   ........           STRB     R0,[R6], #+1
     75          	   buffer++;
     76          	}
   \   00000090   014084E2           ADD      R4,R4,#+1
   \                     ??i2cRead_3:
   \   00000094   050054E1           CMP      R4,R5
   \   00000098   F9FFFF3A           BCC      ??i2cRead_5
     77          		
     78                  *buffer = I2cMasterRead(1);     /* last byte read with "HIGH" acknowlege */
   \                     ??i2cRead_4:
   \   0000009C   0100A0E3           MOV      R0,#+1
   \   000000A0   ........           _BLF     I2cMasterRead,??I2cMasterRead??rA
   \   000000A4   0000C6E5           STRB     R0,[R6, #+0]
     79          				 		
     80          	I2cStop();                      /* STOP condition */
   \   000000A8   ........           _BLF     I2cStop,??I2cStop??rA
     81                  return(0);
   \   000000AC   0000A0E3           MOV      R0,#+0
   \   000000B0   F080BDE8           POP      {R4-R7,PC}       ;; return
     82          
     83          }

   Maximum stack usage in bytes:

     Function CSTACK
     -------- ------
     i2cRead     20
     i2cWrite    20


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     i2cWrite        136
     i2cRead         180
      Others          60

 
 376 bytes in segment CODE
 
 316 bytes of CODE memory (+ 60 bytes shared)

Errors: none
Warnings: none
