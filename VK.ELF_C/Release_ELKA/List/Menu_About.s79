//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   16/Feb/2023  22:41:15 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_ /
//                       C\Menu_About.c                                      /
//    Command line    =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_ /
//                       C\Menu_About.c -D NEWSGOLD -D ELKA -D DEBUG -lCN    /
//                       D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_ /
//                       C\Release_ELKA\List\ -la                            /
//                       D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_ /
//                       C\Release_ELKA\List\ -o D:\Users\alfinant\Documents /
//                       \Siemens\Dev\IAR\VK.ELF_C\Release_ELKA\Obj\ -z9     /
//                       --cpu_mode arm --endian little --cpu ARM926EJ-S     /
//                       --stack_align 4 --interwork --diag_suppress Pe301   /
//                       -e --fpu None --dlib_config                         /
//                       D:\Users\alfinant\Documents\Siemens\IAR\ARM\LIB\dl5 /
//                       tpainl8n.h -I D:\Users\alfinant\Documents\Siemens\I /
//                       AR\ARM\INC\ --inline_threshold=2                    /
//    List file       =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_ /
//                       C\Release_ELKA\List\Menu_About.s79                  /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME Menu_About

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__dlib_file_descriptor", "0"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        PUBWEAK `?*?DATA_ID`
??DataTable0 EQU 0
        MULTWEAK ??DisableDynTheme??rA
        MULTWEAK ??EnableDynTheme??rA
        MULTWEAK ??LoadDynTheme??rA
        MULTWEAK ??OpenAboutMenu??rT
        MULTWEAK ??patch_header??rA
        PUBWEAK ?init?tab?DATA_I
        FUNCTION MyOnRedraw,0603H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC OpenAboutMenu
        FUNCTION OpenAboutMenu,0201H
        LOCFRAME CSTACK, 152, STACK
        FUNCTION gHook,0603H
        LOCFRAME CSTACK, 16, STACK
gui_id  EQU 0
        FUNCTION onKey,0603H
        PUBWEAK patch_header
        FUNCTION patch_header,0203H
        LOCFRAME CSTACK, 8, STACK
        FUNCTION proc3,0601H
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
DisableDynTheme     SYMBOL "DisableDynTheme"
EnableDynTheme      SYMBOL "EnableDynTheme"
LoadDynTheme        SYMBOL "LoadDynTheme"
??DisableDynTheme??rA SYMBOL "??rA", DisableDynTheme
??EnableDynTheme??rA SYMBOL "??rA", EnableDynTheme
??LoadDynTheme??rA  SYMBOL "??rA", LoadDynTheme
OpenAboutMenu       SYMBOL "OpenAboutMenu"
??OpenAboutMenu??rT SYMBOL "??rT", OpenAboutMenu
patch_header        SYMBOL "patch_header"
??patch_header??rA  SYMBOL "??rA", patch_header

        EXTERN APP_DIR
        EXTERN DisableDynTheme
        FUNCTION DisableDynTheme,0200H
        EXTERN EnableDynTheme
        FUNCTION EnableDynTheme,0200H
        EXTERN LoadDynTheme
        FUNCTION LoadDynTheme,0200H


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function patch_header
        ARM
// __??Code32?? __code __interwork __atpcs void patch_header(HEADER_DESC const *)
patch_header:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
        MOV      R0,#+0
        STRH     R0,[R4, #+0]
        MOV      R0,#+24
        STRH     R0,[R4, #+2]
        SWI      +33160
        SUB      R0,R0,#+1
        STRH     R0,[R4, #+4]
        SWI      +33162
        ADD      R0,R0,#+23
        STRH     R0,[R4, #+6]
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock0

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI NoFunction
        THUMB
??proc3??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock1
        REQUIRE proc3

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "">`:
        DATA
        DC8 ""

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "\\315\\340\\347\\340\\344">`:
        DATA
        DC8 "\315\340\347\340\344"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "\\n\\n\\n\\n\\n\\nVK ELF\\n%t 5.68\\n...">`:
        DATA
        DC8 "\012\012\012\012\012\012VK ELF\012%t 5.68\012rev. %s"
        DC8 0, 0, 0
        DC8 "\342\345\360\361\350\377 \340\357\350"
        DC8 0
        DC8 "Feb 16 2023"
        DC8 "%simg\\%about.png"
        DC8 0, 0, 0
        DC8 "%simg\\%about_h.png"
        DC8 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
percent_t:
        DATA
        DC8 "%t"
        DC8 0
        DC8 "\316\341 \375\353\374\364\345"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
mmenusoftkeys:
        DATA
        DC32 0, 1, 2

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function proc3
        ARM
proc3:
        BX       LR               ;; return
        CFI EndBlock cfiBlock2

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI NoFunction
        THUMB
??onKey??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock3
        REQUIRE onKey

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function onKey
        ARM
onKey:
        LDRSH    R0,[R1, #+2]
        CMP      R0,#+1
        BNE      ??onKey_0
??onKey_1:
        MOV      R0,#+0
        BX       LR
??onKey_0:
        LDR      R0,[R1, #+4]
        MOV      R2,#+147
        LDR      R1,[R0, #+4]
        ORR      R2,R2,#0x100
        CMP      R1,R2
        ADDNE    R2,R2,#+2
        CMPNE    R1,R2
        LDREQ    R0,[R0, #+8]
        CMPEQ    R0,#+4
        BNE      ??onKey_1
        MOV      R0,#+1
        BX       LR               ;; return
        CFI EndBlock cfiBlock4

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI NoFunction
        THUMB
??gHook??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock5
        REQUIRE gHook

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function gHook
        ARM
gHook:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R4,R0
        LDR      R5,??gHook_0     ;; tv_desc
        CMP      R1,#+2
        BNE      ??gHook_1
        _BLF     LoadDynTheme,??LoadDynTheme??rA
        LDR      R0,[R5, #+76]
        CMP      R0,#+0
        ADDNE    R0,R5,#+180
        STRNE    R0,[R5, #+60]
        MOV      R0,R4
        SWI      +686
        MOV      R4,R0
        MOV      R0,#+32
        SWI      +293
        LDR      R1,??gHook_0+0x4  ;; percent_t
        MOV      R5,R0
        ADD      R2,R1,#+4
        SWI      +292
        SWI      +32789
        MOV      R6,R0
        SWI      +32788
        MOV      R3,R6
        MOV      R2,R0
        MOV      R1,R5
        MOV      R0,R4
        SWI      +687
        POP      {R4-R6,PC}
??gHook_1:
        CMP      R1,#+9
        BEQ      ??gHook_2
??gHook_3:
        CMP      R1,#+10
        BNE      ??gHook_4
        _BLF     EnableDynTheme,??EnableDynTheme??rA
        SWI      +383
        POP      {R4-R6,PC}
??gHook_4:
        CMP      R1,#+3
        POPNE    {R4-R6,PC}
        LDR      R0,[R5, #+72]
        MOV      R4,#+0
        CMP      R0,#+0
        BEQ      ??gHook_5
        LDR      R0,[R0, #+8]
        SWI      +21
        LDR      R0,[R5, #+72]
        SWI      +21
        STR      R4,[R5, #+72]
??gHook_5:
        LDR      R0,[R5, #+76]
        CMP      R0,#+0
        BEQ      ??gHook_2
        LDR      R0,[R0, #+8]
        SWI      +21
        LDR      R0,[R5, #+76]
        SWI      +21
        STR      R4,[R5, #+76]
??gHook_2:
        _BLF     DisableDynTheme,??DisableDynTheme??rA
        POP      {R4-R6,PC}       ;; return
        DATA
??gHook_0:
        DC32     tv_desc
        DC32     percent_t
        CFI EndBlock cfiBlock6

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI NoFunction
        THUMB
??MyOnRedraw??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock7
        REQUIRE MyOnRedraw

        RSEG DATA_I:DATA:SORT:NOROOT(2)
tv_desc:
        DS8 52
        REQUIRE `?<Initializer for tv_desc>`
        DS8 20
        REQUIRE `?<Initializer for hdr>`
        DS8 4
        REQUIRE `?<Initializer for img_logo>`
        DS8 4
        REQUIRE `?<Initializer for img_icon>`
        DS8 4
        REQUIRE `?<Initializer for OnRedraw>`
        DS8 96
        REQUIRE `?<Initializer for gui_methods_copy>`
        DS8 4
        REQUIRE `?<Initializer for header_icon>`

        RSEG DATA_I:DATA:SORT:NOROOT(2)
sk:
        DS8 24
        REQUIRE `?<Initializer for sk>`

        RSEG DATA_I:DATA:SORT:NOROOT(2)
skt:
        DS8 8
        REQUIRE `?<Initializer for skt>`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function MyOnRedraw
        ARM
MyOnRedraw:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        LDR      R4,??DataTable1  ;; tv_desc
        LDR      R1,[R4, #+80]
        BLX      R1
        LDR      R0,[R4, #+72]
        CMP      R0,#+0
        POPEQ    {R4,R5,PC}
        SWI      +33160
        LDR      R1,[R4, #+72]
        LDRH     R1,[R1, #+0]
        LSR      R1,R1,#+1
        RSB      R5,R1,R0, ASR #+1
        LDR      R0,[R4, #+32]
        SWI      +453
        LDRSH    R1,[R4, #+26]
        LDR      R2,[R4, #+72]
        ADD      R1,R0,R1
        MOV      R0,R5
        SWI      +933
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock8

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI NoFunction
        THUMB
??OpenAboutMenu??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock9
        REQUIRE OpenAboutMenu

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function OpenAboutMenu
        ARM
OpenAboutMenu:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        LDR      R5,??DataTable1  ;; tv_desc
        LDR      R6,??OpenAboutMenu_0  ;; `?<Constant "\\n\\n\\n\\n\\n\\nVK ELF\\n%t 5.68\\n...">`
        SUB      SP,SP,#+128
        CFI CFA R13+152
        SWI      +32789
        MOV      R4,R0
        SWI      +32788
        MOV      R1,R4
        SWI      +726
        MOV      R4,R0
        MOV      R1,R5
        SWI      +727
        ADD      R0,R5,#+52
        _BLF     patch_header,??patch_header??rA
        SWI      +32788
        MOV      R2,R0
        ADD      R1,R5,#+52
        MOV      R0,R4
        SWI      +678
        ADD      R0,R5,#+52
        _BLF     patch_header,??patch_header??rA
        MOV      R0,#+256
        SWI      +293
        MOV      R7,R0
        MOV      R1,#+6
        ORR      R1,R1,#0xE000
        SWI      +28
        MOV      R1,#+128
        ORR      R1,R1,#0x8000
        MOV      R0,R7
        SWI      +28
        MOV      R1,#+100
        ORR      R1,R1,#0x8000
        MOV      R0,R7
        SWI      +28
        MOV      R1,#+18
        ORR      R1,R1,#0xE000
        MOV      R0,R7
        SWI      +28
        ADD      R3,R6,#+44
        ADD      R2,R6,#+32
        MOV      R1,R6
        MOV      R0,R7
        SWI      +534
        SWI      +32789
        MOV      R8,R0
        SWI      +32788
        MOV      R3,R8
        MOV      R2,R0
        MOV      R1,R7
        LDR      R7,??OpenAboutMenu_0+0x4  ;; APP_DIR
        MOV      R0,R4
        SWI      +728
        LDR      R1,[R4, #+4]
        MOV      R2,#+96
        ADD      R0,R5,#+84
        SWI      +286
        LDR      R0,[R5, #+84]
        MOV      R3,R7
        STR      R0,[R5, #+80]
        LDR      R0,??OpenAboutMenu_0+0x8  ;; MyOnRedraw
        ADD      R2,R6,#+56
        STR      R0,[R5, #+84]
        ADD      R0,R5,#+84
        STR      R0,[R4, #+4]
        MOV      R1,#+127
        MOV      R0,SP
        SWI      +283
        MOV      R1,#+2
        MOV      R0,SP
        SWI      +489
        STR      R0,[R5, #+72]
        MOV      R3,R7
        ADD      R2,R6,#+76
        MOV      R1,#+127
        MOV      R0,SP
        SWI      +283
        MOV      R1,#+2
        MOV      R0,SP
        SWI      +489
        STR      R0,[R5, #+76]
        MOV      R1,R0
        CMP      R1,#+0
        BEQ      ??OpenAboutMenu_1
        MOV      R2,#+0
        MOV      R0,#+116
        ORR      R0,R0,#0x4E00
        SWI      +495
??OpenAboutMenu_1:
        MOV      R0,R4
        SWI      +311
        ADD      SP,SP,#+128
        CFI CFA R13+24
        POP      {R4-R8,PC}       ;; return
        DATA
??OpenAboutMenu_0:
        DC32     `?<Constant "\\n\\n\\n\\n\\n\\nVK ELF\\n%t 5.68\\n...">`
        DC32     APP_DIR
        DC32     MyOnRedraw
        CFI EndBlock cfiBlock10

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable1:
        DC32     tv_desc

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon0
        CFI NoFunction
        ARM
??LoadDynTheme??rA:
        LDR      R12,??Subroutine5_0  ;; LoadDynTheme
        BX       R12
        DATA
??Subroutine5_0:
        DC32     LoadDynTheme
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        ARM
??DisableDynTheme??rA:
        LDR      R12,??Subroutine6_0  ;; DisableDynTheme
        BX       R12
        DATA
??Subroutine6_0:
        DC32     DisableDynTheme
        CFI EndBlock cfiBlock12

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon0
        CFI NoFunction
        ARM
??EnableDynTheme??rA:
        LDR      R12,??Subroutine7_0  ;; EnableDynTheme
        BX       R12
        DATA
??Subroutine7_0:
        DC32     EnableDynTheme
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        ARM
??patch_header??rA:
        LDR      R12,??Subroutine8_0  ;; patch_header
        BX       R12
        DATA
??Subroutine8_0:
        DC32     patch_header
        CFI EndBlock cfiBlock14

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for tv_desc>`:
        DATA
        DC32 8, onKey, gHook, proc3, mmenusoftkeys, skt
        DC16 4, 56, 239, 287
        DC32 8, 100, 101, 0, 2
`?<Initializer for hdr>`:
        DC16 0, 0, 0, 0
        DC32 0H, 0, 2147483647
`?<Initializer for img_logo>`:
        DC32 0H
`?<Initializer for img_icon>`:
        DC32 0H
`?<Initializer for OnRedraw>`:
        DC8 0, 0, 0, 0
`?<Initializer for gui_methods_copy>`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
`?<Initializer for header_icon>`:
        DC32 20084

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for sk>`:
        DATA
        DC16 24, 0
        DC32 `?<Constant "">`
        DC16 1, 0
        DC32 `?<Constant "\\315\\340\\347\\340\\344">`
        DC16 0, 0
        DC32 -1

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for skt>`:
        DATA
        DC32 sk, 0

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        END
// 
// 888 bytes in segment CODE
// 133 bytes in segment DATA_C
// 216 bytes in segment DATA_I
// 216 bytes in segment DATA_ID
//  12 bytes in segment INITTAB
// 
// 768 bytes of CODE  memory (+ 132 bytes shared)
// 349 bytes of CONST memory
// 216 bytes of DATA  memory
//
//Errors: none
//Warnings: 1
