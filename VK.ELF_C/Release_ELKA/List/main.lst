##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    16/Feb/2023  22:41:17 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \main.c                                              #
#    Command line    =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \main.c -D NEWSGOLD -D ELKA -D DEBUG -lCN            #
#                       D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \Release_ELKA\List\ -la D:\Users\alfinant\Documents\ #
#                       Siemens\Dev\IAR\VK.ELF_C\Release_ELKA\List\ -o       #
#                       D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \Release_ELKA\Obj\ -z9 --cpu_mode arm --endian       #
#                       little --cpu ARM926EJ-S --stack_align 4 --interwork  #
#                       --diag_suppress Pe301 -e --fpu None --dlib_config    #
#                       D:\Users\alfinant\Documents\Siemens\IAR\ARM\LIB\dl5t #
#                       painl8n.h -I D:\Users\alfinant\Documents\Siemens\IAR #
#                       \ARM\INC\ --inline_threshold=2                       #
#    List file       =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \Release_ELKA\List\main.lst                          #
#    Object file     =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \Release_ELKA\Obj\main.r79                           #
#                                                                            #
#                                                                            #
##############################################################################

D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C\main.c
      1          //$PROJ_DIR$\Send_S75.cmd $TARGET_PATH$
      2          #include <siemens\swilib.h>
      3          #include "conf_loader.h"
      4          #include "string_util.h"
      5          #include <siemens/xtask_ipc.h>
      6          #include "anim_widget.h"
      7          #include "dyn_images.h"
      8          #include "dyn_theme.h"
      9          
     10          #include "buffer.h"
     11          #include "socket_work.h"
     12          #include "ssl_work.h"
     13          #include "cookie.h"
     14          #include "http.h"
     15          #include "main.h"
     16          #include "vk_api.h"
     17          #include "auth.h"
     18          #include "process.h"
     19          
     20          static const char percent_t[]="%t";
     21          
     22          extern const unsigned int RECONNECT_TIME;
     23          extern int CreateMainMenu();
     24          extern int CreateLoginDialog();
     25          extern void RefreshDialogsMenu();
     26          extern void RefreshGroupsMenu();
     27          
     28          static int auth_state = 0;
     29          static int ena_statistic=0;
     30          
     31          static GBSTMR tmr_check_new_msg;
     32          
     33          //IPC
     34          const char ipc_my_name[]=IPC_VK_NAME;
     35          const char ipc_xtask_name[]=IPC_XTASK_NAME;
     36          IPC_REQ ipc;
     37          static const int minus11=-11;
     38          
     39          int maincsm_id;
     40          MAIN_CSM* csm;
     41          
     42          extern const char APP_DIR[];
     43          
     44          extern char logmsg[];
     45          extern void SMART_REDRAW();
     46          
     47          //******************************************************************************
     48          

   \                                 In segment CODE, align 4, keep-with-next
     49          void tmr_check_new_msg_handler()
     50          {
   \                     tmr_check_new_msg_handler:
   \   00000000   71402DE9           PUSH     {R0,R4-R6,LR}
     51            if (ena_statistic == 0)
   \   00000004   9C409FE5           LDR      R4,??tmr_check_new_msg_handler_0+0x4  ;; HttpSendReq
   \   00000008   ........           LDR      R5,??DataTable42  ;; ipc
   \   0000000C   ........           LDR      R6,??DataTable35  ;; INET_PROCESS
   \   00000010   0C0095E5           LDR      R0,[R5, #+12]
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0500001A           BNE      ??tmr_check_new_msg_handler_1
     52            {
     53              INET_PROCESS = ENABLE_STATISTIC; 
   \   0000001C   0800A0E3           MOV      R0,#+8
   \   00000020   000086E5           STR      R0,[R6, #+0]
     54              SUBPROC((void *)HttpSendReq, url_stats_track_visitor());    
   \   00000024   ........           _BLF     url_stats_track_visitor,??url_stats_track_visitor??rA
   \   00000028   0010A0E1           MOV      R1,R0
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   710100EF           SWI      +369
     55            }
     56                
     57            if (INET_PROCESS == 0)
   \                     ??tmr_check_new_msg_handler_1:
   \   00000034   000096E5           LDR      R0,[R6, #+0]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   1000001A           BNE      ??tmr_check_new_msg_handler_2
     58            {
     59              if (lp_ts == 0)
   \   00000040   64009FE5           LDR      R0,??tmr_check_new_msg_handler_0+0x8  ;; lp_ts
   \   00000044   000090E5           LDR      R0,[R0, #+0]
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0500001A           BNE      ??tmr_check_new_msg_handler_3
     60              {
     61                INET_PROCESS = GET_LONG_POOL_SERVER;
   \   00000050   0A00A0E3           MOV      R0,#+10
   \   00000054   000086E5           STR      R0,[R6, #+0]
     62                SUBPROC((void *)HttpSendReq, url_messages_getLongPollServer(1, 0));//params: (bool need_pts, int group_id)
   \   00000058   0010A0E3           MOV      R1,#+0
   \   0000005C   0100A0E3           MOV      R0,#+1
   \   00000060   ........           _BLF     url_messages_getLongPollServer,??url_messages_getLongPollServer??rA
   \   00000064   030000EA           B        ??tmr_check_new_msg_handler_4
     63              }
     64              else
     65              {
     66                INET_PROCESS = CHECK_NEW_MESSAGES; 
   \                     ??tmr_check_new_msg_handler_3:
   \   00000068   0B00A0E3           MOV      R0,#+11
   \   0000006C   000086E5           STR      R0,[R6, #+0]
     67                SUBPROC((void *)HttpSendReq, url_messages_getLongPollHistory(""));
   \   00000070   0B0F8FE2           ADR      R0,??tmr_check_new_msg_handler_0  ;; ""
   \   00000074   ........           _BLF     url_messages_getLongPollHistory,??url_messages_getLongPollHistory??rA
   \                     ??tmr_check_new_msg_handler_4:
   \   00000078   0010A0E1           MOV      R1,R0
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   710100EF           SWI      +369
     68              }
     69            }
     70            
     71            GBS_StartTimerProc(&tmr_check_new_msg, 216*RECONNECT_TIME, tmr_check_new_msg_handler);  
   \                     ??tmr_check_new_msg_handler_2:
   \   00000084   24009FE5           LDR      R0,??tmr_check_new_msg_handler_0+0xC  ;; RECONNECT_TIME
   \   00000088   24209FE5           LDR      R2,??tmr_check_new_msg_handler_0+0x10  ;; tmr_check_new_msg_handler
   \   0000008C   000090E5           LDR      R0,[R0, #+0]
   \   00000090   D830A0E3           MOV      R3,#+216
   \   00000094   930001E0           MUL      R1,R3,R0
   \   00000098   180085E2           ADD      R0,R5,#+24
   \   0000009C   4D0000EF           SWI      +77
     72          }
   \   000000A0   7180BDE8           POP      {R0,R4-R6,PC}    ;; return
   \                     ??tmr_check_new_msg_handler_0:
   \   000000A4   00000000           DC8      "",+0,+0,+0
   \   000000A8   ........           DC32     HttpSendReq
   \   000000AC   ........           DC32     lp_ts
   \   000000B0   ........           DC32     RECONNECT_TIME
   \   000000B4   ........           DC32     tmr_check_new_msg_handler
     73          
     74          //******************************************************************************
     75          //by KreN 27.09.2007
     76          //============================ воспроизведение звука ===========================
     77          extern const int soundEnabled;
     78          extern const int sndVolume;
     79          

   \                                 In segment CODE, align 4, keep-with-next
     80          int Play(const char *fname)
     81          {
   \                     Play:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   D0D04DE2           SUB      SP,SP,#+208
   \   00000008   0060A0E1           MOV      R6,R0
     82            if (!IsCalling() && soundEnabled)
   \   0000000C   6E0000EF           SWI      +110
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   4500001A           BNE      ??Play_0
   \   00000018   1C019FE5           LDR      R0,??Play_1      ;; soundEnabled
   \   0000001C   000090E5           LDR      R0,[R0, #+0]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   4100000A           BEQ      ??Play_0
     83            {
     84              FSTATS fstats;
     85              unsigned int err;
     86              if (GetFileStats(fname,&fstats,&err)!=-1)
   \   00000028   0D20A0E1           MOV      R2,SP
   \   0000002C   A8108DE2           ADD      R1,SP,#+168
   \   00000030   0600A0E1           MOV      R0,R6
   \   00000034   840000EF           SWI      +132
   \   00000038   010070E3           CMN      R0,#+1
   \   0000003C   3900000A           BEQ      ??Play_2
     87              {
     88                PLAYFILE_OPT _sfo1;
     89                WSHDR* sndPath=AllocWS(128);
   \   00000040   8000A0E3           MOV      R0,#+128
   \   00000044   250100EF           SWI      +293
   \   00000048   0040A0E1           MOV      R4,R0
     90                WSHDR* sndFName=AllocWS(128);
   \   0000004C   8000A0E3           MOV      R0,#+128
   \   00000050   250100EF           SWI      +293
   \   00000054   0050A0E1           MOV      R5,R0
     91                char s[128];
     92                const char *p=strrchr(fname,'\\')+1;
   \   00000058   5C10A0E3           MOV      R1,#+92
   \   0000005C   0600A0E1           MOV      R0,R6
   \   00000060   170100EF           SWI      +279
   \   00000064   017080E2           ADD      R7,R0,#+1
     93                str_2ws(sndFName,p,128);
   \   00000068   8020A0E3           MOV      R2,#+128
   \   0000006C   0710A0E1           MOV      R1,R7
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   6C0100EF           SWI      +364
     94                strncpy(s,fname,p-fname);
   \   00000078   067047E0           SUB      R7,R7,R6
   \   0000007C   0720A0E1           MOV      R2,R7
   \   00000080   0610A0E1           MOV      R1,R6
   \   00000084   28008DE2           ADD      R0,SP,#+40
   \   00000088   160100EF           SWI      +278
     95                s[p-fname]='\0';
   \   0000008C   0060A0E3           MOV      R6,#+0
   \   00000090   28008DE2           ADD      R0,SP,#+40
   \   00000094   0060C7E7           STRB     R6,[R7, +R0]
     96                str_2ws(sndPath,s,128);
   \   00000098   8020A0E3           MOV      R2,#+128
   \   0000009C   28108DE2           ADD      R1,SP,#+40
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   6C0100EF           SWI      +364
     97          
     98                zeromem(&_sfo1,sizeof(PLAYFILE_OPT));
   \   000000A8   2410A0E3           MOV      R1,#+36
   \   000000AC   04008DE2           ADD      R0,SP,#+4
   \   000000B0   1D0100EF           SWI      +285
     99                _sfo1.repeat_num=1;
    100                _sfo1.time_between_play=0;
    101                _sfo1.play_first=0;
    102                _sfo1.volume=sndVolume;
   \   000000B4   84209FE5           LDR      R2,??Play_1+0x4  ;; sndVolume
   \   000000B8   0100A0E3           MOV      R0,#+1
   \   000000BC   B400CDE1           STRH     R0,[SP, #+4]
   \   000000C0   08608DE5           STR      R6,[SP, #+8]
   \   000000C4   0C608DE5           STR      R6,[SP, #+12]
   \   000000C8   002092E5           LDR      R2,[R2, #+0]
    103          #ifdef NEWSGOLD
    104                _sfo1.unk6=1;
    105                _sfo1.unk7=1;
    106                _sfo1.unk9=2;
   \   000000CC   0210A0E3           MOV      R1,#+2
   \   000000D0   10208DE5           STR      R2,[SP, #+16]
   \   000000D4   18008DE5           STR      R0,[SP, #+24]
   \   000000D8   1C008DE5           STR      R0,[SP, #+28]
   \   000000DC   24108DE5           STR      R1,[SP, #+36]
    107                PlayFile(0x10, sndPath, sndFName, GBS_GetCurCepid(), MSG_PLAYFILE_REPORT, &_sfo1);
   \   000000E0   450100EF           SWI      +325
   \   000000E4   04108DE2           ADD      R1,SP,#+4
   \   000000E8   02002DE9           PUSH     {R1}
   \   000000EC   0030A0E1           MOV      R3,R0
   \   000000F0   0520A0E1           MOV      R2,R5
   \   000000F4   1000A0E3           MOV      R0,#+16
   \   000000F8   BC10A0E3           MOV      R1,#+188
   \   000000FC   701C81E3           ORR      R1,R1,#0x7000
   \   00000100   02002DE9           PUSH     {R1}
   \   00000104   0410A0E1           MOV      R1,R4
   \   00000108   4A0000EF           SWI      +74
    108          #else
    109          #ifdef X75
    110                _sfo1.unk4=0x80000000;
    111                _sfo1.unk5=1;
    112                PlayFile(0xC, sndPath, sndFName, 0,GBS_GetCurCepid(), MSG_PLAYFILE_REPORT, &_sfo1);
    113          #else
    114                _sfo1.unk5=1;
    115                PlayFile(0xC, sndPath, sndFName, GBS_GetCurCepid(), MSG_PLAYFILE_REPORT, &_sfo1);
    116          #endif
    117          #endif
    118                FreeWS(sndPath);
   \   0000010C   0400A0E1           MOV      R0,R4
   \   00000110   290100EF           SWI      +297
    119                FreeWS(sndFName);
   \   00000114   0500A0E1           MOV      R0,R5
   \   00000118   290100EF           SWI      +297
    120                return 1;
   \   0000011C   0100A0E3           MOV      R0,#+1
   \   00000120   08D08DE2           ADD      SP,SP,#+8
   \   00000124   020000EA           B        ??Play_3
    121              }else return 0;
   \                     ??Play_2:
   \   00000128   0000A0E3           MOV      R0,#+0
   \   0000012C   000000EA           B        ??Play_3
    122            }else return 2; 
   \                     ??Play_0:
   \   00000130   0200A0E3           MOV      R0,#+2
   \                     ??Play_3:
   \   00000134   D0D08DE2           ADD      SP,SP,#+208      ;; stack cleaning
   \   00000138   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??Play_1:
   \   0000013C   ........           DC32     soundEnabled
   \   00000140   ........           DC32     sndVolume
    123          }
    124          
    125          //******************************************************************************
    126          

   \                                 In segment CODE, align 4, keep-with-next
    127          void LoadUserPhoto()
    128          {//Obs функции с асинхронным выполнением из SUBPROC работать не будут
   \                     LoadUserPhoto:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    129            char fname[128];
    130            FSTATS stat;
    131            unsigned  err;
    132            LIST_HEAD *iter;
    133          
    134            if (csm->list == 0)
   \   00000004   ........           LDR      R4,??DataTable42  ;; ipc
   \   00000008   ACD04DE2           SUB      SP,SP,#+172
   \   0000000C   140094E5           LDR      R0,[R4, #+20]
   \   00000010   380090E5           LDR      R0,[R0, #+56]
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   3A00000A           BEQ      ??LoadUserPhoto_0
    135              return;
    136           
    137            list_for_each(iter, csm->list)
   \   0000001C   005090E5           LDR      R5,[R0, #+0]
   \   00000020   EC709FE5           LDR      R7,??LoadUserPhoto_1+0x8  ;; `?<Constant ".png">`
   \   00000024   000000EA           B        ??LoadUserPhoto_2
   \                     ??LoadUserPhoto_3:
   \   00000028   005095E5           LDR      R5,[R5, #+0]
   \                     ??LoadUserPhoto_2:
   \   0000002C   140094E5           LDR      R0,[R4, #+20]
   \   00000030   381090E5           LDR      R1,[R0, #+56]
   \   00000034   010055E1           CMP      R5,R1
   \   00000038   3000000A           BEQ      ??LoadUserPhoto_4
    138            {
    139              VkUser *entry = NULL;
    140              
    141              if (csm->list == &dialogs)
   \   0000003C   ........           LDR      R0,??DataTable9  ;; dialogs
   \   00000040   000051E1           CMP      R1,R0
   \   00000044   F7FFFF1A           BNE      ??LoadUserPhoto_3
    142              {
    143                VkDialog *dialog = list_entry(iter, VkDialog, list);
    144                if (dialog->user)
   \   00000048   1C0095E5           LDR      R0,[R5, #+28]
   \   0000004C   000050E3           CMP      R0,#+0
    145                  entry = dialog->user;
    146                else
    147                  if (dialog->group)
   \   00000050   20009505           LDREQ    R0,[R5, #+32]
   \   00000054   00005003           CMPEQ    R0,#+0
    148                    entry =(VkUser*) dialog->group;//структуры совместимы-все продумано;)
   \   00000058   0060A011           MOVNE    R6,R0
    149              }
    150              
    151              if (entry && entry->has_photo && entry->photo_50_img == 0 && entry->deactivated == 0)
   \   0000005C   00005613           CMPNE    R6,#+0
   \   00000060   1C009615           LDRNE    R0,[R6, #+28]
   \   00000064   00005013           CMPNE    R0,#+0
   \   00000068   EEFFFF0A           BEQ      ??LoadUserPhoto_3
   \   0000006C   240096E5           LDR      R0,[R6, #+36]
   \   00000070   000050E3           CMP      R0,#+0
   \   00000074   14009605           LDREQ    R0,[R6, #+20]
   \   00000078   00005003           CMPEQ    R0,#+0
   \   0000007C   E9FFFF1A           BNE      ??LoadUserPhoto_3
    152              {
    153              //ищем в папке cache 
    154              const char *ext = strstr(entry->photo_50, ".png") ? "png" : "jpg";
   \   00000080   200096E5           LDR      R0,[R6, #+32]
   \   00000084   0710A0E1           MOV      R1,R7
   \   00000088   180100EF           SWI      +280
    155              snprintf(fname, 127, "%scache\\%d.%s", APP_DIR, entry->id, ext);
   \   0000008C   ........           LDR      R3,??DataTable32  ;; APP_DIR
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   1C0F8F12           ADRNE    R0,??LoadUserPhoto_1  ;; "png"
   \   00000098   1C0F8F02           ADREQ    R0,??LoadUserPhoto_1+0x4  ;; "jpg"
   \   0000009C   01002DE9           PUSH     {R0}
   \   000000A0   080096E5           LDR      R0,[R6, #+8]
   \   000000A4   082087E2           ADD      R2,R7,#+8
   \   000000A8   01002DE9           PUSH     {R0}
   \   000000AC   7F10A0E3           MOV      R1,#+127
   \   000000B0   0C008DE2           ADD      R0,SP,#+12
   \   000000B4   1B0100EF           SWI      +283
    156              
    157              if (GetFileStats(fname, &stat, &err) != -1)
   \   000000B8   08208DE2           ADD      R2,SP,#+8
   \   000000BC   8C108DE2           ADD      R1,SP,#+140
   \   000000C0   0C008DE2           ADD      R0,SP,#+12
   \   000000C4   840000EF           SWI      +132
   \   000000C8   010070E3           CMN      R0,#+1
   \   000000CC   08D08DE2           ADD      SP,SP,#+8
   \   000000D0   D4FFFF0A           BEQ      ??LoadUserPhoto_3
    158              {
    159          #ifdef ELKA
    160                csm->obj = CreateIMGHDRFromFileAsync(fname, 0x8072, 50, 50);
   \   000000D4   3230A0E3           MOV      R3,#+50
   \   000000D8   3220A0E3           MOV      R2,#+50
   \   000000DC   7210A0E3           MOV      R1,#+114
   \   000000E0   801C81E3           ORR      R1,R1,#0x8000
   \   000000E4   04008DE2           ADD      R0,SP,#+4
   \   000000E8   ........           _BLF     CreateIMGHDRFromFileAsync,??CreateIMGHDRFromFileAsync??rA
   \   000000EC   141094E5           LDR      R1,[R4, #+20]
   \   000000F0   3C0081E5           STR      R0,[R1, #+60]
    161          #else
    162                csm->obj = CreateIMGHDRFromFileAsync(fname, 0x8072, 32, 32);
    163          #endif
    164                csm->user = entry;
   \   000000F4   140094E5           LDR      R0,[R4, #+20]
   \   000000F8   306080E5           STR      R6,[R0, #+48]
    165                return;
   \   000000FC   010000EA           B        ??LoadUserPhoto_0
    166              }
    167              }
    168            }
    169            csm->list = 0;
   \                     ??LoadUserPhoto_4:
   \   00000100   0010A0E3           MOV      R1,#+0
   \   00000104   381080E5           STR      R1,[R0, #+56]
    170          }
   \                     ??LoadUserPhoto_0:
   \   00000108   ........           B        ?Subroutine24
   \                     ??LoadUserPhoto_1:
   \   0000010C   706E6700           DC8      "png"
   \   00000110   6A706700           DC8      "jpg"
   \   00000114   ........           DC32     `?<Constant ".png">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine24:
   \   00000000   ACD08DE2           ADD      SP,SP,#+172      ;; stack cleaning
   \   00000004   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??Subroutine24_0:
   \   00000008   ........           DC32     LoadImages
   \   0000000C   ........           DC32     LoadSmiles
    171          
    172          

   \                                 In segment CODE, align 4, keep-with-next
    173          static void SaveDialogs(char *data, int len)
    174          {
    175            char fname[256];
    176            int f;
    177            unsigned  err;
    178             
    179            snprintf(fname, 255, "%sdialogs.json", APP_DIR);
   \                     SaveDialogs:
   \   00000000   ........           LDR      R3,??DataTable32  ;; APP_DIR
   \   00000004   ........           LDR      R2,??DataTable11  ;; `?<Constant "%sdialogs.json">`
   \   00000008   ........           B        ?Subroutine25
    180            if ((f=fopen(fname, A_ReadWrite+A_Create+A_Truncate+A_BIN, P_WRITE+P_READ, &err))!=-1)
    181            {
    182              fwrite(f, data, len, &err);
    183              fclose(f, &err);
    184            }
    185          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine25:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   41DF4DE2           SUB      SP,SP,#+260
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   FF10A0E3           MOV      R1,#+255
   \   00000014   04008DE2           ADD      R0,SP,#+4
   \   00000018   1B0100EF           SWI      +283
   \   0000001C   0D30A0E1           MOV      R3,SP
   \   00000020   602FA0E3           MOV      R2,#+384
   \   00000024   0210A0E3           MOV      R1,#+2
   \   00000028   831C81E3           ORR      R1,R1,#0x8300
   \   0000002C   04008DE2           ADD      R0,SP,#+4
   \   00000030   0A0000EF           SWI      +10
   \   00000034   0060A0E1           MOV      R6,R0
   \   00000038   010076E3           CMN      R6,#+1
   \   0000003C   0600000A           BEQ      ??Subroutine25_0
   \   00000040   0D30A0E1           MOV      R3,SP
   \   00000044   0520A0E1           MOV      R2,R5
   \   00000048   0410A0E1           MOV      R1,R4
   \   0000004C   0C0000EF           SWI      +12
   \   00000050   0D10A0E1           MOV      R1,SP
   \   00000054   0600A0E1           MOV      R0,R6
   \   00000058   0D0000EF           SWI      +13
   \                     ??Subroutine25_0:
   \   0000005C   41DF8DE2           ADD      SP,SP,#+260      ;; stack cleaning
   \   00000060   7080BDE8           POP      {R4-R6,PC}       ;; return
    186          

   \                                 In segment CODE, align 4, keep-with-next
    187          static void SaveGroups(char *data, int len)
    188          {
    189            char fname[256];
    190            int f;
    191            unsigned  err;
    192             
    193            snprintf(fname, 255, "%sgroups.json", APP_DIR);
   \                     SaveGroups:
   \   00000000   ........           LDR      R3,??DataTable32  ;; APP_DIR
   \   00000004   ........           LDR      R2,??DataTable13  ;; `?<Constant "%sgroups.json">`
   \   00000008                      REQUIRE ?Subroutine25
   \   00000008                      ;; // Fall through to label ?Subroutine25
    194            if ((f=fopen(fname, A_ReadWrite+A_Create+A_Truncate+A_BIN, P_WRITE+P_READ, &err))!=-1)
    195            {
    196              fwrite(f, data, len, &err);
    197              fclose(f, &err);
    198            }
    199          }
    200          

   \                                 In segment CODE, align 4, keep-with-next
    201          void LoadSavedDialogs()
    202          {
    203            FSTATS stat;
    204            int f;
    205            int fsize = 0;
    206            unsigned  err;
    207            char *data = NULL;
    208            char path[128];
    209          
    210            if (!list_empty(&dialogs))//
   \                     LoadSavedDialogs:
   \   00000000   ........           LDR      R0,??DataTable9  ;; dialogs
   \   00000004   70402DE9           PUSH     {R4-R6,LR}
   \   00000008   B0D04DE2           SUB      SP,SP,#+176
   \   0000000C   001090E5           LDR      R1,[R0, #+0]
   \   00000010   000051E1           CMP      R1,R0
   \   00000014   2700001A           BNE      ??LoadSavedDialogs_0
    211              return;
    212            
    213            snprintf(path, 127, "%sdialogs.json", APP_DIR);
   \   00000018   ........           LDR      R3,??DataTable32  ;; APP_DIR
   \   0000001C   ........           LDR      R2,??DataTable11  ;; `?<Constant "%sdialogs.json">`
   \   00000020   7F10A0E3           MOV      R1,#+127
   \   00000024   08008DE2           ADD      R0,SP,#+8
   \   00000028   1B0100EF           SWI      +283
    214            GetFileStats(path, &stat, &err);
   \   0000002C   0D20A0E1           MOV      R2,SP
   \   00000030   88108DE2           ADD      R1,SP,#+136
   \   00000034   08008DE2           ADD      R0,SP,#+8
   \   00000038   840000EF           SWI      +132
    215            
    216            if ((fsize = stat.size) > 0)
   \   0000003C   8C409DE5           LDR      R4,[SP, #+140]
   \   00000040   010054E3           CMP      R4,#+1
   \   00000044   1B0000BA           BLT      ??LoadSavedDialogs_0
    217            {
    218              if ((f=fopen(path, A_ReadOnly+A_BIN, P_READ, &err))!= -1)
   \   00000048   0D30A0E1           MOV      R3,SP
   \   0000004C   8020A0E3           MOV      R2,#+128
   \   00000050   801CA0E3           MOV      R1,#+32768
   \   00000054   08008DE2           ADD      R0,SP,#+8
   \   00000058   0A0000EF           SWI      +10
   \   0000005C   0050A0E1           MOV      R5,R0
   \   00000060   010075E3           CMN      R5,#+1
   \   00000064   1300000A           BEQ      ??LoadSavedDialogs_0
    219              {
    220                data = malloc(fsize);
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   140000EF           SWI      +20
   \   00000070   0060A0E1           MOV      R6,R0
    221                fread(f, data, fsize, &err);
   \   00000074   0D30A0E1           MOV      R3,SP
   \   00000078   0420A0E1           MOV      R2,R4
   \   0000007C   0610A0E1           MOV      R1,R6
   \   00000080   0500A0E1           MOV      R0,R5
   \   00000084   0B0000EF           SWI      +11
    222                fclose(f, &err);
   \   00000088   0D10A0E1           MOV      R1,SP
   \   0000008C   0500A0E1           MOV      R0,R5
   \   00000090   0D0000EF           SWI      +13
    223              }
    224            }
    225            if (data)
   \   00000094   000056E3           CMP      R6,#+0
   \   00000098   0600000A           BEQ      ??LoadSavedDialogs_0
    226            {
    227              int count;
    228              parse_answer_messages_getConversations(data, &count);
   \   0000009C   04108DE2           ADD      R1,SP,#+4
   \   000000A0   0600A0E1           MOV      R0,R6
   \   000000A4   ........           _BLF     parse_answer_messages_getConversations,??parse_answer_messages_getConversations??rA
    229              mfree(data);
   \   000000A8   0600A0E1           MOV      R0,R6
   \   000000AC   150000EF           SWI      +21
    230              AnimWidget_Close();
   \   000000B0   ........           _BLF     AnimWidget_Close,??AnimWidget_Close??rA
    231              RefreshDialogsMenu();
   \   000000B4   ........           _BLF     RefreshDialogsMenu,??RefreshDialogsMenu??rA
   \                     ??LoadSavedDialogs_0:
   \   000000B8   ........           B        ?Subroutine26
    232            }
    233          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine26:
   \   00000000   B0D08DE2           ADD      SP,SP,#+176      ;; stack cleaning
   \   00000004   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??Subroutine26_0:
   \   00000008   ........           DC32     my_groups
    234          

   \                                 In segment CODE, align 4, keep-with-next
    235          void LoadSavedGroups()
    236          {
    237            FSTATS stat;
    238            int f;
    239            int fsize = 0;
    240            unsigned  err;
    241            char *data = NULL;
    242            char path[128];
    243          
    244            if (!list_empty(&my_groups))//
   \                     LoadSavedGroups:
   \   00000000   ........           LDR      R0,??Subroutine26_0  ;; my_groups
   \   00000004   70402DE9           PUSH     {R4-R6,LR}
   \   00000008   B0D04DE2           SUB      SP,SP,#+176
   \   0000000C   001090E5           LDR      R1,[R0, #+0]
   \   00000010   000051E1           CMP      R1,R0
   \   00000014   2700001A           BNE      ??LoadSavedGroups_0
    245              return;
    246            
    247            snprintf(path, 127, "%sgroups.json", APP_DIR);
   \   00000018   ........           LDR      R3,??DataTable32  ;; APP_DIR
   \   0000001C   ........           LDR      R2,??DataTable13  ;; `?<Constant "%sgroups.json">`
   \   00000020   7F10A0E3           MOV      R1,#+127
   \   00000024   08008DE2           ADD      R0,SP,#+8
   \   00000028   1B0100EF           SWI      +283
    248            GetFileStats(path, &stat, &err);
   \   0000002C   0D20A0E1           MOV      R2,SP
   \   00000030   88108DE2           ADD      R1,SP,#+136
   \   00000034   08008DE2           ADD      R0,SP,#+8
   \   00000038   840000EF           SWI      +132
    249            
    250            if ((fsize = stat.size) > 0)
   \   0000003C   8C409DE5           LDR      R4,[SP, #+140]
   \   00000040   010054E3           CMP      R4,#+1
   \   00000044   1A0000BA           BLT      ??LoadSavedGroups_1
    251            {
    252              if ((f=fopen(path, A_ReadOnly+A_BIN, P_READ, &err))!= -1)
   \   00000048   0D30A0E1           MOV      R3,SP
   \   0000004C   8020A0E3           MOV      R2,#+128
   \   00000050   801CA0E3           MOV      R1,#+32768
   \   00000054   08008DE2           ADD      R0,SP,#+8
   \   00000058   0A0000EF           SWI      +10
   \   0000005C   0050A0E1           MOV      R5,R0
   \   00000060   010075E3           CMN      R5,#+1
   \   00000064   1200000A           BEQ      ??LoadSavedGroups_1
    253              {
    254                data = malloc(fsize);
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   140000EF           SWI      +20
   \   00000070   0060A0E1           MOV      R6,R0
    255                fread(f, data, fsize, &err);
   \   00000074   0D30A0E1           MOV      R3,SP
   \   00000078   0420A0E1           MOV      R2,R4
   \   0000007C   0610A0E1           MOV      R1,R6
   \   00000080   0500A0E1           MOV      R0,R5
   \   00000084   0B0000EF           SWI      +11
    256                fclose(f, &err);
   \   00000088   0D10A0E1           MOV      R1,SP
   \   0000008C   0500A0E1           MOV      R0,R5
   \   00000090   0D0000EF           SWI      +13
    257              }
    258            }
    259            if (data)
   \   00000094   000056E3           CMP      R6,#+0
   \   00000098   0500000A           BEQ      ??LoadSavedGroups_1
    260            {
    261              int count;
    262              parse_answer_groups_get(data,&count);
   \   0000009C   04108DE2           ADD      R1,SP,#+4
   \   000000A0   0600A0E1           MOV      R0,R6
   \   000000A4   ........           _BLF     parse_answer_groups_get,??parse_answer_groups_get??rA
    263              mfree(data);
   \   000000A8   0600A0E1           MOV      R0,R6
   \   000000AC   150000EF           SWI      +21
    264              RefreshGroupsMenu();
   \   000000B0   ........           _BLF     RefreshGroupsMenu,??RefreshGroupsMenu??rA
    265            }
    266            AnimWidget_Close();
   \                     ??LoadSavedGroups_1:
   \   000000B4   ........           _BLF     AnimWidget_Close,??AnimWidget_Close??rA
    267          }
   \                     ??LoadSavedGroups_0:
   \   000000B8                      REQUIRE ?Subroutine26
   \   000000B8                      ;; // Fall through to label ?Subroutine26
    268          

   \                                 In segment CODE, align 4, keep-with-next
    269          static void save_token()
    270          {
    271            char fname[256];
    272            int f;
    273            unsigned  err;
    274             
    275            snprintf(fname, 255, "%stoken", APP_DIR);
   \                     save_token:
   \   00000000   ........           LDR      R3,??DataTable32  ;; APP_DIR
   \   00000004   ........           LDR      R2,??DataTable33  ;; `?<Constant "%stoken">`
   \   00000008   30402DE9           PUSH     {R4,R5,LR}
   \   0000000C   41DF4DE2           SUB      SP,SP,#+260
   \   00000010   FF10A0E3           MOV      R1,#+255
   \   00000014   04008DE2           ADD      R0,SP,#+4
   \   00000018   1B0100EF           SWI      +283
    276            if ((f=fopen(fname, A_ReadWrite+A_Create+A_Truncate+A_BIN, P_WRITE+P_READ, &err))!=-1)
   \   0000001C   0D30A0E1           MOV      R3,SP
   \   00000020   602FA0E3           MOV      R2,#+384
   \   00000024   0210A0E3           MOV      R1,#+2
   \   00000028   831C81E3           ORR      R1,R1,#0x8300
   \   0000002C   04008DE2           ADD      R0,SP,#+4
   \   00000030   0A0000EF           SWI      +10
   \   00000034   0040A0E1           MOV      R4,R0
   \   00000038   010074E3           CMN      R4,#+1
   \   0000003C   0A00000A           BEQ      ??save_token_0
    277            {
    278              fwrite(f, ACCESS_TOKEN, strlen(ACCESS_TOKEN), &err);
   \   00000040   ........           LDR      R5,??DataTable34  ;; ACCESS_TOKEN
   \   00000044   0500A0E1           MOV      R0,R5
   \   00000048   1B0000EF           SWI      +27
   \   0000004C   0020A0E1           MOV      R2,R0
   \   00000050   0D30A0E1           MOV      R3,SP
   \   00000054   0510A0E1           MOV      R1,R5
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   0C0000EF           SWI      +12
    279              fclose(f, &err);
   \   00000060   0D10A0E1           MOV      R1,SP
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   0D0000EF           SWI      +13
    280            }
    281          }
   \                     ??save_token_0:
   \   0000006C   41DF8DE2           ADD      SP,SP,#+260      ;; stack cleaning
   \   00000070   3080BDE8           POP      {R4,R5,PC}       ;; return
    282          

   \                                 In segment CODE, align 4, keep-with-next
    283          static void del_token()
    284          {
    285            char fname[256];
    286            int f;
    287            unsigned  err;
    288            
    289            ACCESS_TOKEN[0] = '\0';
   \                     del_token:
   \   00000000   ........           LDR      R0,??DataTable34  ;; ACCESS_TOKEN
    290            snprintf(fname, 255, "%stoken", APP_DIR);
   \   00000004   ........           LDR      R3,??DataTable32  ;; APP_DIR
   \   00000008   ........           LDR      R2,??DataTable33  ;; `?<Constant "%stoken">`
   \   0000000C   00402DE9           PUSH     {LR}
   \   00000010   41DF4DE2           SUB      SP,SP,#+260
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   0010C0E5           STRB     R1,[R0, #+0]
   \   0000001C   FF10A0E3           MOV      R1,#+255
   \   00000020   04008DE2           ADD      R0,SP,#+4
   \   00000024   1B0100EF           SWI      +283
    291            if ((f=fopen(fname, A_ReadWrite+A_Truncate+A_BIN, P_WRITE+P_READ, &err)) != -1)//чистим содержимое файла
   \   00000028   0D30A0E1           MOV      R3,SP
   \   0000002C   602FA0E3           MOV      R2,#+384
   \   00000030   0210A0E3           MOV      R1,#+2
   \   00000034   821C81E3           ORR      R1,R1,#0x8200
   \   00000038   04008DE2           ADD      R0,SP,#+4
   \   0000003C   0A0000EF           SWI      +10
   \   00000040   010070E3           CMN      R0,#+1
   \   00000044   0100000A           BEQ      ??del_token_0
    292              fclose(f, &err);
   \   00000048   0D10A0E1           MOV      R1,SP
   \   0000004C   0D0000EF           SWI      +13
    293            //unlink(fname, &err); //или удаляем файл
    294          }
   \                     ??del_token_0:
   \   00000050   41DF8DE2           ADD      SP,SP,#+260      ;; stack cleaning
   \   00000054   0080BDE8           POP      {PC}             ;; return
    295          

   \                                 In segment CODE, align 4, keep-with-next
    296          void Logout()
    297          {
    298            auth_state = 0;
    299            INET_PROCESS= 0;
   \                     Logout:
   \   00000000   ........           LDR      R0,??DataTable35  ;; INET_PROCESS
   \   00000004   10402DE9           PUSH     {R4,LR}
    300            GBS_DelTimer(&tmr_check_new_msg);
   \   00000008   ........           LDR      R4,??DataTable42  ;; ipc
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   001080E5           STR      R1,[R0, #+0]
   \   00000014   180084E2           ADD      R0,R4,#+24
   \   00000018   8C0100EF           SWI      +396
    301            del_token();
   \   0000001C   ........           BL       del_token
    302            end_ssl_work();//закрываем все соед-я
   \   00000020   ........           _BLF     end_ssl_work,??end_ssl_work??rA
    303            if (!IsGuiOnTop(csm->maingui_id))
   \   00000024   140094E5           LDR      R0,[R4, #+20]
   \   00000028   280090E5           LDR      R0,[R0, #+40]
   \   0000002C   350100EF           SWI      +309
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0100001A           BNE      ??Logout_0
    304              GeneralFuncF1(1);//закрываем текущий гуи,если он не главный
   \   00000038   0100A0E3           MOV      R0,#+1
   \   0000003C   3B0100EF           SWI      +315
    305            GeneralFunc_flag1(csm->maingui_id, 1);//закрываем главное меню
   \                     ??Logout_0:
   \   00000040   140094E5           LDR      R0,[R4, #+20]
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   280090E5           LDR      R0,[R0, #+40]
   \   0000004C   3D0100EF           SWI      +317
    306            csm->maingui_id = CreateLoginDialog();//открываем диалог логина
   \   00000050   ........           _BLF     CreateLoginDialog,??CreateLoginDialog??rA
   \   00000054   141094E5           LDR      R1,[R4, #+20]
   \   00000058   280081E5           STR      R0,[R1, #+40]
    307          }
   \   0000005C   1080BDE8           POP      {R4,PC}          ;; return
    308          

   \                                 In segment CODE, align 4, keep-with-next
    309          static void DoError(int err)
    310          {
   \                     DoError:
   \   00000000   00402DE9           PUSH     {LR}
    311            if (err == 5)//ошибка авторизации
   \   00000004   050050E3           CMP      R0,#+5
   \   00000008   0100001A           BNE      ??DoError_0
    312              Logout();    
   \   0000000C   0040BDE8           POP      {LR}             ;; Pop
   \   00000010   ........           B        Logout           ;; tailcall
    313          //  else if (err == 14)//ned_captcha
    314          //  {
    315          //    
    316          //  }
    317            else if (err == -1)//cJSON parse error
   \                     ??DoError_0:
   \   00000014   ........           LDR      R2,??DataTable35  ;; INET_PROCESS
   \   00000018   2C109FE5           LDR      R1,??DoError_1   ;; `?<Constant "cJSON parse error">`
   \   0000001C   0030A0E3           MOV      R3,#+0
   \   00000020   010070E3           CMN      R0,#+1
   \   00000024   003082E5           STR      R3,[R2, #+0]
   \   00000028   0400000A           BEQ      ??DoError_2
    318            {
    319                INET_PROCESS=0;
    320                ShowMSG(1, (int)"cJSON parse error");
    321              }
    322            else
    323            {
    324              INET_PROCESS = 0;
    325              sprintf(logmsg, "Error=%d", err);
   \   0000002C   0020A0E1           MOV      R2,R0
   \   00000030   ........           LDR      R0,??DataTable47  ;; logmsg
   \   00000034   141081E2           ADD      R1,R1,#+20
   \   00000038   160000EF           SWI      +22
    326              ShowMSG(1, (int)err_msg);
   \   0000003C   0C109FE5           LDR      R1,??DoError_1+0x4  ;; err_msg
   \                     ??DoError_2:
   \   00000040   0100A0E3           MOV      R0,#+1
   \   00000044   480100EF           SWI      +328
    327            }
    328          }
   \   00000048   0080BDE8           POP      {PC}             ;; return
   \                     ??DoError_1:
   \   0000004C   ........           DC32     `?<Constant "cJSON parse error">`
   \   00000050   ........           DC32     err_msg
    329          
    330          extern void set_DialogsCount(int count);
    331          extern void set_GroupsCount(int count);
    332          extern int get_DialogsCount();
    333          extern int get_GroupsCount();
    334          

   \                                 In segment CODE, align 4, keep-with-next
    335          static void MainProcess(char *data)
    336          {
   \                     MainProcess:
   \   00000000   F34F2DE9           PUSH     {R0,R1,R4-R11,LR}
    337            WSHDR ws;
    338            unsigned short wsbody[128];
    339            
    340            int f;
    341            FSTATS stat;
    342            unsigned  err;
    343            
    344            char* ext;
    345            char fname[128];
    346            
    347            int count = 0;
    348            
    349            switch (INET_PROCESS)
   \   00000004   ........           LDR      R4,??DataTable47  ;; logmsg
   \   00000008   ........           LDR      R10,??DataTable35  ;; INET_PROCESS
   \   0000000C   D4519FE5           LDR      R5,??MainProcess_0  ;; `?<Constant "TEST_SSL_CON ok!">`
   \   00000010   00009AE5           LDR      R0,[R10, #+0]
   \   00000014   ........           LDR      R6,??DataTable42  ;; ipc
   \   00000018   ........           LDR      R7,??DataTable46  ;; HTTP_HEADER_LENGTH
   \   0000001C   C8819FE5           LDR      R8,??MainProcess_0+0x4  ;; recv_buf
   \   00000020   ........           LDR      R9,??DataTable48  ;; HTTP_CONTENT_LENGTH
   \   00000024   0010A0E3           MOV      R1,#+0
   \   00000028   04108DE5           STR      R1,[SP, #+4]
   \   0000002C   00B0A0E3           MOV      R11,#+0
   \   00000030   060050E2           SUBS     R0,R0,#+6
   \   00000034   0E00000A           BEQ      ??MainProcess_1
   \   00000038   020050E2           SUBS     R0,R0,#+2
   \   0000003C   2800000A           BEQ      ??MainProcess_2
   \   00000040   020050E2           SUBS     R0,R0,#+2
   \   00000044   2900000A           BEQ      ??MainProcess_3
   \   00000048   020050E2           SUBS     R0,R0,#+2
   \   0000004C   3100000A           BEQ      ??MainProcess_4
   \   00000050   090050E2           SUBS     R0,R0,#+9
   \   00000054   4900000A           BEQ      ??MainProcess_5
   \   00000058   0C0050E2           SUBS     R0,R0,#+12
   \   0000005C   F38FBD18           POPNE    {R0,R1,R4-R11,PC}
    350            {
    351          //-------------------------------- AUTH_DIRECT --------------------------------    
    352            case TEST_SSL_CON:
    353          #ifdef DEBUG   
    354              sprintf(logmsg, "TEST_SSL_CON ok!");
   \   00000060   0510A0E1           MOV      R1,R5
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   160000EF           SWI      +22
    355              SMART_REDRAW();
   \   0000006C   ........           _BLF     SMART_REDRAW,??SMART_REDRAW??rA
    356          #endif     
    357              INET_PROCESS = 0;
   \   00000070   5A0000EA           B        ??MainProcess_6
    358              break;
    359              
    360            case AUTH_DIRECT:
    361              
    362              err = parse_answer_auth_direct();
   \                     ??MainProcess_1:
   \   00000074   ........           _BLF     parse_answer_auth_direct,??parse_answer_auth_direct??rA
   \   00000078   00008DE5           STR      R0,[SP, #+0]
    363              
    364              AnimWidget_Close();
   \   0000007C   ........           _BLF     AnimWidget_Close,??AnimWidget_Close??rA
    365              
    366              if (err) {
   \   00000080   00009DE5           LDR      R0,[SP, #+0]
   \   00000084   000050E3           CMP      R0,#+0
   \   00000088   1D00001A           BNE      ??MainProcess_7
    367                DoError(err); return;
    368              }
    369              
    370              save_token();//Токен получен! Сохраняем в файл.
   \   0000008C   ........           BL       save_token
    371          #ifdef DEBUG   
    372              sprintf(logmsg, "Token readed!");
   \   00000090   141085E2           ADD      R1,R5,#+20
   \   00000094   0400A0E1           MOV      R0,R4
   \   00000098   160000EF           SWI      +22
    373              SMART_REDRAW();
   \   0000009C   ........           _BLF     SMART_REDRAW,??SMART_REDRAW??rA
    374          #endif    
    375              end_ssl_work();//Закрываем все соед-я
   \   000000A0   ........           _BLF     end_ssl_work,??end_ssl_work??rA
    376              Cookies_SaveAndFree();//Куки не нужны???;
   \   000000A4   ........           _BLF     Cookies_SaveAndFree,??Cookies_SaveAndFree??rA
    377              if (!IsGuiOnTop(csm->maingui_id))
   \   000000A8   140096E5           LDR      R0,[R6, #+20]
   \   000000AC   280090E5           LDR      R0,[R0, #+40]
   \   000000B0   350100EF           SWI      +309
   \   000000B4   000050E3           CMP      R0,#+0
   \   000000B8   0100001A           BNE      ??MainProcess_8
    378                GeneralFuncF1(1);//если вдруг открыт debug_gui
   \   000000BC   0100A0E3           MOV      R0,#+1
   \   000000C0   3B0100EF           SWI      +315
    379              GeneralFunc_flag1(csm->maingui_id, 1);//закрываем диалог логина
   \                     ??MainProcess_8:
   \   000000C4   140096E5           LDR      R0,[R6, #+20]
   \   000000C8   0110A0E3           MOV      R1,#+1
   \   000000CC   280090E5           LDR      R0,[R0, #+40]
   \   000000D0   3D0100EF           SWI      +317
    380              csm->maingui_id = CreateMainMenu();
   \   000000D4   ........           _BLF     CreateMainMenu,??CreateMainMenu??rA
   \   000000D8   141096E5           LDR      R1,[R6, #+20]
   \   000000DC   280081E5           STR      R0,[R1, #+40]
    381              INET_PROCESS = 0;
   \                     ??MainProcess_9:
   \   000000E0   3E0000EA           B        ??MainProcess_6
    382              break;
    383          //---------------------------  ENABLE_STATISTIC --------------------------------     
    384            case ENABLE_STATISTIC:
    385              ena_statistic = 1;
   \                     ??MainProcess_2:
   \   000000E4   0100A0E3           MOV      R0,#+1
   \   000000E8   0C0086E5           STR      R0,[R6, #+12]
    386              INET_PROCESS = 0;
   \   000000EC   3B0000EA           B        ??MainProcess_6
    387              //tmr_check_new_msg_handler();
    388              break;
    389              
    390          //--------------------------- GET_LONG_POOL_SERVER------------------------------    
    391            case GET_LONG_POOL_SERVER:
    392              
    393              parse_answer_messages_getLongPollServer(&err);
   \                     ??MainProcess_3:
   \   000000F0   0D00A0E1           MOV      R0,SP
   \   000000F4   ........           _BLF     parse_answer_messages_getLongPollServer,??parse_answer_messages_getLongPollServer??rA
    394              
    395              if (err) {
   \   000000F8   00009DE5           LDR      R0,[SP, #+0]
   \   000000FC   000050E3           CMP      R0,#+0
   \   00000100   0100000A           BEQ      ??MainProcess_10
    396                DoError(err); return;
   \                     ??MainProcess_7:
   \   00000104   ........           BL       DoError
   \   00000108   F38FBDE8           POP      {R0,R1,R4-R11,PC}
    397              }
    398              
    399              INET_PROCESS = 0;
   \                     ??MainProcess_10:
   \   0000010C   00B08AE5           STR      R11,[R10, #+0]
    400              tmr_check_new_msg_handler();
   \   00000110   ........           BL       tmr_check_new_msg_handler
   \   00000114   F38FBDE8           POP      {R0,R1,R4-R11,PC}
    401              break;
    402              
    403          //----------------------------- LOAD_DIALOGS -----------------------------------  
    404            case LOAD_DIALOGS:
    405          
    406                if (get_DialogsCount() == 0)
   \                     ??MainProcess_4:
   \   00000118   ........           _BLF     get_DialogsCount,??get_DialogsCount??rA
   \   0000011C   000050E3           CMP      R0,#+0
   \   00000120   0800001A           BNE      ??MainProcess_11
    407                {
    408                  SaveDialogs(recv_buf+HTTP_HEADER_LENGTH, HTTP_CONTENT_LENGTH);//Для отладки
   \   00000124   000097E5           LDR      R0,[R7, #+0]
   \   00000128   002098E5           LDR      R2,[R8, #+0]
   \   0000012C   001099E5           LDR      R1,[R9, #+0]
   \   00000130   020080E0           ADD      R0,R0,R2
   \   00000134   ........           BL       SaveDialogs
    409                  LockSched();
   \   00000138   460100EF           SWI      +326
    410                  del_Dialogs();
   \   0000013C   ........           _BLF     del_Dialogs,??del_Dialogs??rA
    411                  RefreshDialogsMenu();
   \   00000140   ........           _BLF     RefreshDialogsMenu,??RefreshDialogsMenu??rA
    412                  UnlockSched();
   \   00000144   470100EF           SWI      +327
    413                } 
    414                
    415                err = parse_answer_messages_getConversations(recv_buf+HTTP_HEADER_LENGTH, &count);
   \                     ??MainProcess_11:
   \   00000148   000097E5           LDR      R0,[R7, #+0]
   \   0000014C   002098E5           LDR      R2,[R8, #+0]
   \   00000150   04108DE2           ADD      R1,SP,#+4
   \   00000154   020080E0           ADD      R0,R0,R2
   \   00000158   ........           _BLF     parse_answer_messages_getConversations,??parse_answer_messages_getConversations??rA
   \   0000015C   00008DE5           STR      R0,[SP, #+0]
    416                set_DialogsCount(count);
   \   00000160   04009DE5           LDR      R0,[SP, #+4]
   \   00000164   ........           _BLF     set_DialogsCount,??set_DialogsCount??rA
    417              
    418              AnimWidget_Close();
   \   00000168   ........           _BLF     AnimWidget_Close,??AnimWidget_Close??rA
    419              
    420              if (err) {
   \   0000016C   00009DE5           LDR      R0,[SP, #+0]
   \   00000170   000050E3           CMP      R0,#+0
   \   00000174   E2FFFF1A           BNE      ??MainProcess_7
    421                DoError(err); return;
    422              }
    423              
    424              RefreshDialogsMenu();
   \   00000178   ........           _BLF     RefreshDialogsMenu,??RefreshDialogsMenu??rA
    425              
    426          /*    
    427              if (total_unread_messages > prev_unread_messages)
    428              {
    429                snprintf(fname, 127, "%ssounds\\message.wav", APP_DIR);
    430                Play(fname);
    431              }
    432          
    433              char* ids = create_noninfo_users_ids(&dialogs);//создаем список id у которых нет инфы
    434              
    435              if (ids)
    436              {
    437                process=LOAD_USERS_INFO;
    438                SUBPROC((void*)HttpSendReq, users_get(id_list, "photo_50"));
    439                mfree((void*)ids);
    440                return;
    441              }
    442              
    443             //если в списке есть сообщение от группы
    444              id_list=create_noninfo_groups_ids(csm->dialogs_list);
    445              
    446              if (id_list)
    447              {
    448                process=LOAD_GROUPS_INFO;
    449                SUBPROC((void*)HttpSendReq, groups_getById(id_list, "photo_50"));
    450                mfree((void*)id_list);
    451                return;
    452              }
    453           */   
    454              //на всех есть инфа
    455              INET_PROCESS = 0;
   \   0000017C   170000EA           B        ??MainProcess_6
    456              //GBS_StartTimerProc(&tmr_check_new_msg, 216*RECONNECT_TIME, tmr_check_new_msg_handler);      
    457              break;
    458          //----------------------------- LOAD_USERS_INFO --------------------------------   
    459          
    460          /*  case LOAD_USERS_INFO:
    461              
    462              err = parse_answer_users_get(recv_buf+HTTP_HEADER_LENGTH, &csm->dialogs_list);
    463              
    464              if (err) {
    465                checkError(err); return;
    466              }
    467              
    468              RefreshDialogsMenu();
    469              RecountFriendsMenu();
    470              
    471              id_list=create_noninfo_groups_ids(csm->dialogs_list);
    472              //если в списке есть сообщение от группы
    473              if (id_list)
    474              {
    475                process=LOAD_GROUPS_INFO;
    476                SUBPROC((void*)HttpSendReq, groups_getById(id_list, "photo_50"));
    477                mfree((void*)id_list);
    478                return;
    479              }
    480              //ищем авки в кэше
    481              process=LOAD_USERS_PHOTO;
    482              csm->cl=csm->dialogs_list;
    483              csm->c=csm->cl;    
    484              goto load_users_photo;
    485          
    486          //----------------------------- LOAD_GROUPS_INFO -------------------------------- 
    487            case LOAD_GROUPS_INFO:  
    488             
    489              err=parse_answer_groups_get(&csm->dialogs_list);
    490              
    491              if (err) {
    492                checkError(err); return;
    493              }
    494              
    495              RefreshDialogsMenu();    
    496              
    497              process=LOAD_USERS_PHOTO;
    498              csm->cl=csm->dialogs_list;
    499              csm->c=csm->cl;
    500              
    501          //------------------------------ LOAD_USERS_PHOTO-------------------------------  
    502            case LOAD_USERS_PHOTO:
    503          load_users_photo:  
    504              //сначало ищем в кэше
    505              while (csm->c)
    506              {
    507                if (csm->c->photo==NULL)
    508                {
    509                  ext="jpg";
    510                  if (strstr(csm->c->photo_url, ".png"))
    511                    ext="png";
    512                  
    513                  snprintf(fname, 127, "%scache\\%d.%s", APP_DIR, csm->c->user_id, ext);
    514                  if (GetFileStats(fname, &stat, &err) != -1)
    515                  {
    516          #ifdef ELKA
    517                    csm->obj=CreateIMGHDRFromFileAsync(fname, 0x8072, 50, 50);
    518          #else
    519                    csm->obj=CreateIMGHDRFromFileAsync(fname, 0x8072, 32, 32);
    520          #endif
    521                    return;
    522                  }
    523                }
    524                csm->c=csm->c->next;
    525              }
    526              process=0;
    527              break;
    528           
    529            case LOAD_USERS_PHOTO_FROM_INET:    
    530              
    531              while (csm->c)
    532              {
    533                if (csm->c->photo==NULL && csm->c->photo_url  && csm->c->flag_load_photo)
    534                {
    535                  if (strcmp(csm->c->photo_url, HTTP_URL)==0)//если заказывали загрузку в интернете
    536                  {
    537                    if (strstr(HTTP_CONTENT_TYPE, "image/"))
    538                    {
    539                      CreateLocalWS(&ws, wsbody, 127);
    540                      ext="jpg";
    541                      if (strstr(HTTP_CONTENT_TYPE, "image/png"))
    542                        ext="png";
    543                      wsprintf(&ws, ext);
    544                      snprintf(fname, 127, "%scache\\%d.%s", APP_DIR, csm->c->user_id, ext);
    545                      
    546                      if((f=fopen(fname, A_ReadWrite+A_Create+A_Truncate+A_BIN, P_WRITE+P_READ, &err))!=-1)
    547                      {
    548                        fwrite(f, recv_buf+HTTP_HEADER_LENGTH, HTTP_CONTENT_LENGTH, &err);
    549                        fclose(f, &err);
    550                      }
    551                      
    552                      csm->obj=CreateIMGHDRFromMemoryAsync(GetExtUid_ws(&ws), recv_buf+HTTP_HEADER_LENGTH, HTTP_CONTENT_LENGTH, 0x8072);
    553                      return;
    554                    }
    555                  }
    556                  else//заказываем авку
    557                  {
    558                    SUBPROC((void*)HttpSendReq, csm->c->photo_url);
    559                    return;
    560                  }
    561                }
    562                csm->c=csm->c->next;
    563              }
    564              //все аватарки загружены
    565              process=0;
    566              break;
    567              
    568          //---------------------------- CHECK_NEW_MESSAGES ------------------------------
    569             
    570            case CHECK_NEW_MESSAGES:
    571              
    572              prev_unread_messages=total_unread_messages;
    573              prev_dialogs_count=CLIST_GetCount(csm->dialogs_list);
    574              
    575              err = parse_answer_messages_getLongPollHistory(&count);//errors 10-ts устарел, 907,908-pts надо обновить
    576              
    577              if (err == 10 || 907 || 908)
    578              {
    579                process = GET_LONG_POOL_SERVER;
    580                SUBPROC((void *)HttpSendReq, messages_getLongPollServer(1, 0));//params: (bool need_pts, int group_id)
    581                return;
    582              }
    583              
    584              if (err) {
    585                checkError(err); return;
    586              }
    587              
    588              if (count)//(total_unread_messages > prev_unread_messages)
    589              { 
    590                //юзается для обновлнения меню
    591                RefreshDialogsMenu();
    592                RecountFriendsMenu();
    593                
    594                if (IsGuiOnTop(csm->chat_gui_id))//открыт чат
    595                { 
    596                  if (csm->chat_c->msglist==NULL)//значит чат открыт из списка друзей
    597                    csm->chat_c=csm->dialogs_list;
    598                  
    599                  if (out)//получили отправиленное сообщение
    600                  {
    601                    snprintf(fname, 127, "%ssounds\\bb3.wav", APP_DIR);
    602                    Play(fname);
    603                  }
    604                  CreateChat(csm->chat_c);
    605                }
    606                
    607                if (out==0)
    608                {
    609                  snprintf(fname, 127, "%ssounds\\bb2.wav", APP_DIR);
    610                  Play(fname);
    611                }
    612                
    613                if (CLIST_GetCount(csm->dialogs_list) > prev_dialogs_count)//если в списке появился новый контакт
    614                {
    615                  RefreshDialogsMenu();
    616                  
    617                  process=LOAD_USERS_INFO;//запускаем процесс получения инфы о контакте
    618                  csm->c=csm->dialogs_list;
    619                  id_list=create_noninfo_users_ids(csm->dialogs_list);
    620                  if (id_list)
    621                  {
    622                    SUBPROC((void*)HttpSendReq, users_get(id_list, "photo_50"));
    623                    mfree((void*)id_list);
    624                    return;
    625                  }
    626                }
    627              }
    628              process=0;
    629              break;
    630          
    631          //------------------------------------------------------------------------------
    632            case LOAD_HISTORY:
    633          
    634              err=parse_answer_messages_getHistory(&count);
    635              
    636              if (err) {
    637                checkError(err); return;
    638              }
    639              
    640              if (IsGuiOnTop(csm->chat_gui_id))
    641                CreateChat(csm->chat_c);
    642          
    643              process=0;
    644              break;
    645          //------------------------------------------------------------------------------    
    646            case  DELETE_DIALOG:
    647              
    648              err=parse_answer_messages_deleteDialog(&user_id);
    649                  
    650              if (err) {
    651                checkError(err); return;
    652              }
    653              
    654              c=FindContactById(csm->dialogs_list, user_id);
    655              if (c)
    656                FreeMSGLIST(c);//удаляем все сообщения
    657              
    658              if (IsGuiOnTop(csm->chat_gui_id))
    659                CreateChat(csm->chat_c);
    660              else
    661              {
    662                if (c)
    663                  DeleteContact(&csm->dialogs_list, user_id);
    664                
    665                RefreshDialogsMenu();
    666              }
    667              
    668              process=0;
    669              break;
    670          //------------------------------------------------------------------------------    
    671            case LOAD_FRIENDS:
    672              
    673              err=parse_answer_friends_get();
    674              
    675              if (err) {
    676                checkError(err); return;
    677              }
    678              
    679              AnimWidget_Close();
    680              RecountFriendsMenu();
    681          
    682              process=LOAD_USERS_PHOTO;
    683              csm->cl=csm->friends_list;
    684              csm->c=csm->cl;
    685              MainProcess();
    686              break;
    687              */
    688          //------------------------------- LOAD_GROUPS ---------------------------------- 
    689            case LOAD_GROUPS:  
    690          
    691              if (get_GroupsCount() == 0)
   \                     ??MainProcess_5:
   \   00000180   ........           _BLF     get_GroupsCount,??get_GroupsCount??rA
   \   00000184   000050E3           CMP      R0,#+0
   \   00000188   0700001A           BNE      ??MainProcess_12
    692                {
    693                  SaveGroups(recv_buf+HTTP_HEADER_LENGTH, HTTP_CONTENT_LENGTH);
   \   0000018C   000097E5           LDR      R0,[R7, #+0]
   \   00000190   002098E5           LDR      R2,[R8, #+0]
   \   00000194   001099E5           LDR      R1,[R9, #+0]
   \   00000198   020080E0           ADD      R0,R0,R2
   \   0000019C   ........           BL       SaveGroups
    694                  LockSched();
   \   000001A0   460100EF           SWI      +326
    695                  RefreshGroupsMenu();
   \   000001A4   ........           _BLF     RefreshGroupsMenu,??RefreshGroupsMenu??rA
    696                  UnlockSched();
   \   000001A8   470100EF           SWI      +327
    697                } 
    698              
    699              err=parse_answer_groups_get(recv_buf+HTTP_HEADER_LENGTH, &count);//count вернет кол-во групп пользователя
   \                     ??MainProcess_12:
   \   000001AC   000097E5           LDR      R0,[R7, #+0]
   \   000001B0   002098E5           LDR      R2,[R8, #+0]
   \   000001B4   04108DE2           ADD      R1,SP,#+4
   \   000001B8   020080E0           ADD      R0,R0,R2
   \   000001BC   ........           _BLF     parse_answer_groups_get,??parse_answer_groups_get??rA
   \   000001C0   00008DE5           STR      R0,[SP, #+0]
    700              set_GroupsCount(count);
   \   000001C4   04009DE5           LDR      R0,[SP, #+4]
   \   000001C8   ........           _BLF     set_GroupsCount,??set_GroupsCount??rA
    701              
    702              AnimWidget_Close();
   \   000001CC   ........           _BLF     AnimWidget_Close,??AnimWidget_Close??rA
    703               
    704              if (err) {
   \   000001D0   00009DE5           LDR      R0,[SP, #+0]
   \   000001D4   000050E3           CMP      R0,#+0
   \   000001D8   C9FFFF1A           BNE      ??MainProcess_7
    705                DoError(err); return;
    706              }
    707              
    708              RefreshGroupsMenu();   
   \   000001DC   ........           _BLF     RefreshGroupsMenu,??RefreshGroupsMenu??rA
    709              INET_PROCESS = 0;
   \                     ??MainProcess_6:
   \   000001E0   00B08AE5           STR      R11,[R10, #+0]
   \   000001E4   F38FBDE8           POP      {R0,R1,R4-R11,PC}  ;; return
   \                     ??MainProcess_0:
   \   000001E8   ........           DC32     `?<Constant "TEST_SSL_CON ok!">`
   \   000001EC   ........           DC32     recv_buf
    710              
    711              //ищем авки в кэше
    712              //process=LOAD_USERS_PHOTO;
    713              //csm->cl=csm->groups_list;
    714              //csm->c=csm->cl;    
    715              //goto load_users_photo;  
    716              //break;
    717           //-----------------------------------------------------------------------------   
    718          /*  case LOAD_WALL:
    719              
    720              err=parse_answer_wall_get(&count);
    721              
    722              if (err) {
    723                checkError(err); return;
    724              }
    725              
    726              AnimWidget_Close();
    727              extern void Wall_Refresh();
    728              GetProfile();
    729              Wall_Refresh();
    730              process=0;
    731              break;
    732              
    733              case LOAD_ATTACH_PHOTO:
    734                process=0;
    735                if (strstr(HTTP_CONTENT_TYPE, "image/"))
    736                {
    737                  ext="jpg";
    738                  if (strstr(HTTP_CONTENT_TYPE, "image/png"))
    739                    ext="png";
    740          
    741                  snprintf(fname, 127, "%scache\\attachment.%s", APP_DIR, ext);
    742                  
    743                  if((f=fopen(fname, A_ReadWrite+A_Create+A_Truncate+A_BIN, P_WRITE+P_READ, &err))!=-1)
    744                  {
    745                    fwrite(f, recv_buf+HTTP_HEADER_LENGTH, HTTP_CONTENT_LENGTH, &err);
    746                    fclose(f, &err);
    747                  }
    748                  AnimWidget_Close();
    749                  CreateLocalWS(&ws, wsbody, 127);
    750                  wsprintf(&ws, fname);
    751                  ExecuteFile (&ws, 0, 0); 
    752                }
    753                break;
    754              */
    755            }
    756          
    757          }
    758          

   \                                 In segment CODE, align 4, keep-with-next
    759          static void maincsm_oncreate(CSM_RAM *data)
    760          {
    761            csm=(MAIN_CSM*)data;
   \                     maincsm_oncreate:
   \   00000000   ........           LDR      R3,??DataTable50  ;; ipc
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   140083E5           STR      R0,[R3, #+20]
    762            ipc.name_to=ipc_my_name;
   \   0000000C   ........           LDR      R0,??DataTable45  ;; ipc_my_name
    763            ipc.name_from=ipc_my_name;
    764            ipc.data=(void *)-1;
    765            GBS_SendMessage(MMI_CEPID, MSG_IPC, IPC_CHECK_DOUBLERUN, &ipc);
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000083E5           STR      R0,[R3, #+0]
   \   00000018   040083E5           STR      R0,[R3, #+4]
   \   0000001C   0000E0E3           MVN      R0,#+0
   \   00000020   080083E5           STR      R0,[R3, #+8]
   \   00000024   B010A0E3           MOV      R1,#+176
   \   00000028   DE1C81E3           ORR      R1,R1,#0xDE00
   \   0000002C   0900A0E3           MOV      R0,#+9
   \   00000030   420C80E3           ORR      R0,R0,#0x4200
   \   00000034   000100EF           SWI      +256
    766          }
   \   00000038   0080BDE8           POP      {PC}             ;; return
    767          
    768          extern void kill_data(void *p, void (*func_p)(void *));
    769          #pragma segment="ELFBEGIN"

   \                                 In segment CODE, align 4, keep-with-next
    770          void ElfKiller(void)
    771          {
   \                     ElfKiller:
   \   00000000   00402DE9           PUSH     {LR}
    772            kill_data(__segment_begin("ELFBEGIN"),(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??ElfKiller_0  ;; SFB(ELFBEGIN)
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??ElfKiller_0:
   \   00000018   ........           DC32     SFB(ELFBEGIN)
    773          }
    774          
    775          //******************************************************************************
    776          

   \                                 In segment CODE, align 4, keep-with-next
    777          static void maincsm_onclose(CSM_RAM *data)
    778          {
   \                     maincsm_onclose:
   \   00000000   00402DE9           PUSH     {LR}
    779            AnimWidget_Close();
   \   00000004   ........           _BLF     AnimWidget_Close,??AnimWidget_Close??rA
    780            GBS_DelTimer(&tmr_check_new_msg);
   \   00000008   40009FE5           LDR      R0,??maincsm_onclose_0  ;; ipc + 24
   \   0000000C   8C0100EF           SWI      +396
    781            end_socket_work();
   \   00000010   ........           _BLF     end_socket_work,??end_socket_work??rA
    782            end_ssl_work();
   \   00000014   ........           _BLF     end_ssl_work,??end_ssl_work??rA
    783            del_Dialogs();  
   \   00000018   ........           _BLF     del_Dialogs,??del_Dialogs??rA
    784            del_Profiles();
   \   0000001C   ........           _BLF     del_Profiles,??del_Profiles??rA
    785            del_Groups();
   \   00000020   ........           _BLF     del_Groups,??del_Groups??rA
    786            //del_Friends();
    787            //SUBPROC((void*)Cookies_Free);
    788            SUBPROC((void*)Cookies_SaveAndFree);
   \   00000024   ........           LDR      R0,??DataTable54  ;; Cookies_SaveAndFree
   \   00000028   710100EF           SWI      +369
    789            SUBPROC((void*)FreeDynTheme);
   \   0000002C   20009FE5           LDR      R0,??maincsm_onclose_0+0x4  ;; FreeDynTheme
   \   00000030   710100EF           SWI      +369
    790            SUBPROC((void*)PNGLIST_Free);
   \   00000034   1C009FE5           LDR      R0,??maincsm_onclose_0+0x8  ;; PNGLIST_Free
   \   00000038   710100EF           SWI      +369
    791            SUBPROC((void*)FreeDynSmiles);
   \   0000003C   18009FE5           LDR      R0,??maincsm_onclose_0+0xC  ;; FreeDynSmiles
   \   00000040   710100EF           SWI      +369
    792            SUBPROC((void *)ElfKiller);
   \   00000044   14009FE5           LDR      R0,??maincsm_onclose_0+0x10  ;; ElfKiller
   \   00000048   710100EF           SWI      +369
    793          }
   \   0000004C   0080BDE8           POP      {PC}             ;; return
   \                     ??maincsm_onclose_0:
   \   00000050   ........           DC32     ipc + 24
   \   00000054   ........           DC32     FreeDynTheme
   \   00000058   ........           DC32     PNGLIST_Free
   \   0000005C   ........           DC32     FreeDynSmiles
   \   00000060   ........           DC32     ElfKiller
    794          
    795          //******************************************************************************
    796          

   \                                 In segment CODE, align 4, keep-with-next
    797          void startApp(CSM_RAM *data)
    798          {
    799            FSTATS stat;
    800            int f;
    801            int fsize=0;
    802            unsigned  err;
    803            char path[128];
    804            
    805            snprintf(path, 127, "%stoken", APP_DIR);
   \                     startApp:
   \   00000000   ........           LDR      R3,??DataTable32  ;; APP_DIR
   \   00000004   ........           LDR      R2,??DataTable33  ;; `?<Constant "%stoken">`
   \   00000008   F0402DE9           PUSH     {R4-R7,LR}
    806            GetFileStats(path, &stat, &err);
    807            
    808            ACCESS_TOKEN[0] = '\0';
   \   0000000C   ........           LDR      R5,??DataTable34  ;; ACCESS_TOKEN
   \   00000010   ACD04DE2           SUB      SP,SP,#+172
   \   00000014   7F10A0E3           MOV      R1,#+127
   \   00000018   04008DE2           ADD      R0,SP,#+4
   \   0000001C   1B0100EF           SWI      +283
   \   00000020   0D20A0E1           MOV      R2,SP
   \   00000024   84108DE2           ADD      R1,SP,#+132
   \   00000028   04008DE2           ADD      R0,SP,#+4
   \   0000002C   840000EF           SWI      +132
   \   00000030   0040A0E3           MOV      R4,#+0
   \   00000034   0040C5E5           STRB     R4,[R5, #+0]
    809            if ((fsize = stat.size) > 0)
   \   00000038   88609DE5           LDR      R6,[SP, #+136]
   \   0000003C   010056E3           CMP      R6,#+1
   \   00000040   0F0000BA           BLT      ??startApp_0
    810            {
    811              if ((f=fopen(path, A_ReadOnly+A_BIN, P_READ, &err))!= -1)
   \   00000044   0D30A0E1           MOV      R3,SP
   \   00000048   8020A0E3           MOV      R2,#+128
   \   0000004C   801CA0E3           MOV      R1,#+32768
   \   00000050   04008DE2           ADD      R0,SP,#+4
   \   00000054   0A0000EF           SWI      +10
   \   00000058   0070A0E1           MOV      R7,R0
   \   0000005C   010077E3           CMN      R7,#+1
   \   00000060   0700000A           BEQ      ??startApp_0
    812              {
    813                fread(f, ACCESS_TOKEN, fsize, &err);
   \   00000064   0D30A0E1           MOV      R3,SP
   \   00000068   0620A0E1           MOV      R2,R6
   \   0000006C   0510A0E1           MOV      R1,R5
   \   00000070   0B0000EF           SWI      +11
    814                ACCESS_TOKEN[fsize] = '\0';
   \   00000074   0540C6E7           STRB     R4,[R6, +R5]
    815                fclose(f, &err);
   \   00000078   0D10A0E1           MOV      R1,SP
   \   0000007C   0700A0E1           MOV      R0,R7
   \   00000080   0D0000EF           SWI      +13
    816              }
    817            }
    818            
    819            LoadDynTheme();
    820            SUBPROC((void*)LoadImages);
    821            SUBPROC((void*)LoadSmiles); 
    822            
    823            if (strlen(ACCESS_TOKEN))
   \                     ??startApp_0:
   \   00000084   ........           LDR      R6,??DataTable35  ;; INET_PROCESS
   \   00000088   ........           LDR      R7,??DataTable42  ;; ipc
   \   0000008C   ........           _BLF     LoadDynTheme,??LoadDynTheme??rA
   \   00000090   ........           LDR      R0,??Subroutine24_0  ;; LoadImages
   \   00000094   710100EF           SWI      +369
   \   00000098   ........           LDR      R0,??Subroutine24_0+0x4  ;; LoadSmiles
   \   0000009C   710100EF           SWI      +369
   \   000000A0   0500A0E1           MOV      R0,R5
   \   000000A4   1B0000EF           SWI      +27
   \   000000A8   000050E3           CMP      R0,#+0
   \   000000AC   0400000A           BEQ      ??startApp_1
    824            {
    825              auth_state = 1;
    826              csm->maingui_id = CreateMainMenu();
   \   000000B0   ........           _BLF     CreateMainMenu,??CreateMainMenu??rA
   \   000000B4   141097E5           LDR      R1,[R7, #+20]
   \   000000B8   280081E5           STR      R0,[R1, #+40]
    827              INET_PROCESS = 0;
   \   000000BC   004086E5           STR      R4,[R6, #+0]
   \   000000C0   030000EA           B        ??startApp_2
    828              //GBS_StartTimerProc(&tmr_check_new_msg, 216*RECONNECT_TIME, tmr_check_new_msg_handler);
    829            }
    830            else
    831            {
    832              auth_state = 0;
    833              INET_PROCESS = 0;
   \                     ??startApp_1:
   \   000000C4   004086E5           STR      R4,[R6, #+0]
    834              csm->maingui_id = CreateLoginDialog();
   \   000000C8   ........           _BLF     CreateLoginDialog,??CreateLoginDialog??rA
   \   000000CC   141097E5           LDR      R1,[R7, #+20]
   \   000000D0   280081E5           STR      R0,[R1, #+40]
    835              //SUBPROC((void*)Cookies_Load);
    836            }
    837          }
   \                     ??startApp_2:
   \   000000D4                      REQUIRE ?Subroutine24
   \   000000D4                      ;; // Fall through to label ?Subroutine24
    838          

   \                                 In segment CODE, align 4, keep-with-next
    839          void CheckDoubleRun(CSM_RAM *data)
    840          {
   \                     CheckDoubleRun:
   \   00000000   10402DE9           PUSH     {R4,LR}
    841            int csm_id;
    842            if ((csm_id=(int)(ipc.data))!=-1)
   \   00000004   ........           LDR      R4,??DataTable50  ;; ipc
   \   00000008   081094E5           LDR      R1,[R4, #+8]
   \   0000000C   010071E3           CMN      R1,#+1
   \   00000010   1000000A           BEQ      ??CheckDoubleRun_0
    843            {
    844              ipc.name_to=ipc_xtask_name;
   \   00000014   ........           LDR      R0,??DataTable45  ;; ipc_my_name
    845              ipc.name_from=ipc_my_name;
    846              ipc.data=(void *)csm_id;
   \   00000018   081084E5           STR      R1,[R4, #+8]
   \   0000001C   582080E2           ADD      R2,R0,#+88
   \   00000020   002084E5           STR      R2,[R4, #+0]
   \   00000024   040084E5           STR      R0,[R4, #+4]
    847              GBS_SendMessage(MMI_CEPID,MSG_IPC,IPC_XTASK_SHOW_CSM,&ipc);
   \   00000028   0430A0E1           MOV      R3,R4
   \   0000002C   0220A0E3           MOV      R2,#+2
   \   00000030   B010A0E3           MOV      R1,#+176
   \   00000034   DE1C81E3           ORR      R1,R1,#0xDE00
   \   00000038   0900A0E3           MOV      R0,#+9
   \   0000003C   420C80E3           ORR      R0,R0,#0x4200
   \   00000040   000100EF           SWI      +256
    848              LockSched();
   \   00000044   460100EF           SWI      +326
    849              CloseCSM(maincsm_id);
   \   00000048   100094E5           LDR      R0,[R4, #+16]
   \   0000004C   FC0100EF           SWI      +508
    850              UnlockSched();
   \   00000050   470100EF           SWI      +327
   \   00000054   1080BDE8           POP      {R4,PC}
    851            }
    852            else
    853              startApp(data);
   \                     ??CheckDoubleRun_0:
   \   00000058   1040BDE8           POP      {R4,LR}          ;; Pop
   \   0000005C   ........           B        startApp         ;; tailcall
    854          }
    855          
    856          //******************************************************************************
    857          

   \                                 In segment CODE, align 4, keep-with-next
    858          static int HandleObsFrameUpdate(HObj obj)
    859          {
   \                     HandleObsFrameUpdate:
   \   00000000   F1412DE9           PUSH     {R0,R4-R8,LR}
    860            IMGHDR *temp;
    861            IMGHDR *img;
    862             
    863            unsigned err = Obs_Output_GetPictstruct(csm->obj, &temp);
   \   00000004   ........           LDR      R5,??DataTable42  ;; ipc
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   140095E5           LDR      R0,[R5, #+20]
   \   00000010   0D10A0E1           MOV      R1,SP
   \   00000014   3C0090E5           LDR      R0,[R0, #+60]
    864            
    865            if (err == 0)
   \   00000018   0060A0E3           MOV      R6,#+0
   \   0000001C   5F0200EF           SWI      +607
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   2200001A           BNE      ??HandleObsFrameUpdate_0
    866            {
    867              img = malloc(sizeof(IMGHDR));
   \   00000028   0C00A0E3           MOV      R0,#+12
   \   0000002C   140000EF           SWI      +20
   \   00000030   0070A0E1           MOV      R7,R0
    868              img->w = temp->w;
   \   00000034   00009DE5           LDR      R0,[SP, #+0]
   \   00000038   B000D0E1           LDRH     R0,[R0, #+0]
   \   0000003C   B000C7E1           STRH     R0,[R7, #+0]
    869              img->h = temp->h;
   \   00000040   00009DE5           LDR      R0,[SP, #+0]
   \   00000044   B200D0E1           LDRH     R0,[R0, #+2]
   \   00000048   B200C7E1           STRH     R0,[R7, #+2]
    870              img->bpnum = (char)temp->bpnum;// читаем только один байт
   \   0000004C   00009DE5           LDR      R0,[SP, #+0]
   \   00000050   040090E5           LDR      R0,[R0, #+4]
   \   00000054   FF0000E2           AND      R0,R0,#0xFF
   \   00000058   040087E5           STR      R0,[R7, #+4]
    871              int len = CalcBitmapSize(temp->w, temp->h,(char)temp->bpnum);
   \   0000005C   00009DE5           LDR      R0,[SP, #+0]
   \   00000060   042090E5           LDR      R2,[R0, #+4]
   \   00000064   F210D0E1           LDRSH    R1,[R0, #+2]
   \   00000068   F000D0E1           LDRSH    R0,[R0, #+0]
   \   0000006C   FF2002E2           AND      R2,R2,#0xFF
   \   00000070   580200EF           SWI      +600
   \   00000074   0080A0E1           MOV      R8,R0
    872              img->bitmap = malloc(len);
   \   00000078   140000EF           SWI      +20
   \   0000007C   080087E5           STR      R0,[R7, #+8]
    873              memcpy(img->bitmap, temp->bitmap, len);
   \   00000080   00009DE5           LDR      R0,[SP, #+0]
   \   00000084   0820A0E1           MOV      R2,R8
   \   00000088   081090E5           LDR      R1,[R0, #+8]
   \   0000008C   080097E5           LDR      R0,[R7, #+8]
   \   00000090   1E0100EF           SWI      +286
    874                  
    875              if (img)
   \   00000094   000057E3           CMP      R7,#+0
   \   00000098   0500000A           BEQ      ??HandleObsFrameUpdate_0
    876              {
    877                if (csm->user)
   \   0000009C   140095E5           LDR      R0,[R5, #+20]
   \   000000A0   301090E5           LDR      R1,[R0, #+48]
   \   000000A4   000051E3           CMP      R1,#+0
    878                {
    879                  csm->user->photo_50_img = img;
   \   000000A8   24708115           STRNE    R7,[R1, #+36]
    880                  csm->user = 0;
   \   000000AC   30608015           STRNE    R6,[R0, #+48]
    881                }
    882                
    883                RefreshDialogsMenu();//надо сделать универсальную функцию...
   \   000000B0   ........           _BLF     RefreshDialogsMenu,??RefreshDialogsMenu??rA
    884          //        RecountFriendsMenu();
    885          //        RefreshGroupsMenu();
    886                  
    887                     /* int id=0;
    888                      if (IsGuiOnTop(csm->dialogs_menu_gui_id))
    889                        id=csm->dialogs_menu_gui_id;
    890                      else
    891                        if (IsGuiOnTop(csm->friends_menu_gui_id))
    892                          id=csm->friends_menu_gui_id;
    893                      if (id)
    894                      {
    895                        GUI* gui=FindGUIbyId(csm->dialogs_menu_gui_id, 0);
    896                        RefreshMenuItem(gui, GetContactN(csm->cl, csm->c));
    897                      } 
    898                      */
    899                
    900              }
    901            }
    902            
    903            Obs_DestroyObject(obj);
   \                     ??HandleObsFrameUpdate_0:
   \   000000B4   0400A0E1           MOV      R0,R4
   \   000000B8   5A0200EF           SWI      +602
    904            csm->obj = NULL;
   \   000000BC   140095E5           LDR      R0,[R5, #+20]
   \   000000C0   3C6080E5           STR      R6,[R0, #+60]
    905          /*  
    906            csm->user = list_entry(csm->user->list.next, VkUser, list);
    907            ipc.name_to = ipc_my_name;
    908            ipc.name_from = ipc_my_name;
    909            ipc.data = 0;
    910            GBS_SendMessage(MMI_CEPID, MSG_IPC, IPC_RUN_MAIN_PROCESS, &ipc);//продолжаем процесс 
    911            */
    912            return (0);
   \   000000C4   0000A0E3           MOV      R0,#+0
   \   000000C8   F281BDE8           POP      {R1,R4-R8,PC}    ;; return
    913          }
    914          

   \                                 In segment CODE, align 4, keep-with-next
    915          static int HandleObsError(HObj obj, int err)
    916          {
   \                     HandleObsError:
   \   00000000   10402DE9           PUSH     {R4,LR}
    917            Obs_DestroyObject(csm->obj);
   \   00000004   ........           LDR      R4,??DataTable50  ;; ipc
   \   00000008   140094E5           LDR      R0,[R4, #+20]
   \   0000000C   3C0090E5           LDR      R0,[R0, #+60]
   \   00000010   5A0200EF           SWI      +602
    918            csm->obj=NULL;
   \   00000014   141094E5           LDR      R1,[R4, #+20]
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   3C0081E5           STR      R0,[R1, #+60]
    919            
    920            csm->user = list_entry(csm->user->list.next, VkUser, list);
   \   00000020   141094E5           LDR      R1,[R4, #+20]
    921            ipc.name_to = ipc_my_name;
    922            ipc.name_from = ipc_my_name;
    923            ipc.data = 0;
    924            GBS_SendMessage(MMI_CEPID, MSG_IPC, IPC_RUN_MAIN_PROCESS, &ipc); 
   \   00000024   0430A0E1           MOV      R3,R4
   \   00000028   302091E5           LDR      R2,[R1, #+48]
   \   0000002C   002092E5           LDR      R2,[R2, #+0]
   \   00000030   302081E5           STR      R2,[R1, #+48]
   \   00000034   ........           LDR      R1,??DataTable45  ;; ipc_my_name
   \   00000038   080084E5           STR      R0,[R4, #+8]
   \   0000003C   001084E5           STR      R1,[R4, #+0]
   \   00000040   041084E5           STR      R1,[R4, #+4]
   \   00000044   0420A0E3           MOV      R2,#+4
   \   00000048   B010A0E3           MOV      R1,#+176
   \   0000004C   DE1C81E3           ORR      R1,R1,#0xDE00
   \   00000050   0900A0E3           MOV      R0,#+9
   \   00000054   420C80E3           ORR      R0,R0,#0x4200
   \   00000058   000100EF           SWI      +256
    925            return(0);
   \   0000005C   0000A0E3           MOV      R0,#+0
   \   00000060   1080BDE8           POP      {R4,PC}          ;; return
    926          }

   \                                 In segment DATA_I, align 4, align-sorted
   \                     ipc:
   \   00000000                      DS8 12
   \   0000000C                      REQUIRE `?<Initializer for ipc>`
   \   0000000C                      DS8 4
   \   00000010                      REQUIRE `?<Initializer for ena_statistic>`
   \                     maincsm_id:
   \   00000010                      DS8 4
   \   00000014                      REQUIRE `?<Initializer for maincsm_id>`
   \                     csm:
   \   00000014                      DS8 4
   \   00000018                      REQUIRE `?<Initializer for csm>`
   \   00000018                      DS8 16
   \   00000028                      REQUIRE `?<Initializer for tmr_check_new_msg>`
   \   00000028                      DS8 24
   \   00000040                      REQUIRE `?<Initializer for ObsEventsHandlers>`
    927          
    928          static OBSevent ObsEventsHandlers[]={
    929            OBS_EV_FrameUpdate, (void*) HandleObsFrameUpdate,
    930            OBS_EV_Error, (void*) HandleObsError,
    931            OBS_EV_EndList, 0
    932          };
    933          
    934          //******************************************************************************
    935          

   \                                 In segment CODE, align 4, keep-with-next
    936          static int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
    937          {
   \                     maincsm_onmessage:
   \   00000000   F1412DE9           PUSH     {R0,R4-R8,LR}
    938            //IPC
    939              if (msg->msg==MSG_IPC)
   \   00000004   ........           LDR      R5,??DataTable42  ;; ipc
   \   00000008   0070A0E1           MOV      R7,R0
   \   0000000C   ........           LDR      R6,??DataTable45  ;; ipc_my_name
   \   00000010   0140A0E1           MOV      R4,R1
   \   00000014   040094E5           LDR      R0,[R4, #+4]
   \   00000018   B010A0E3           MOV      R1,#+176
   \   0000001C   DE1C81E3           ORR      R1,R1,#0xDE00
   \   00000020   010050E1           CMP      R0,R1
   \   00000024   2000001A           BNE      ??maincsm_onmessage_1
    940              {
    941                if (msg->submess!=392305998)
   \   00000028   080094E5           LDR      R0,[R4, #+8]
   \   0000002C   6C119FE5           LDR      R1,??maincsm_onmessage_2  ;; 0x17621d4e
   \   00000030   010050E1           CMP      R0,R1
    942                {
    943                  IPC_REQ *ipc_req;
    944                  if ((ipc_req=(IPC_REQ*)msg->data0))
   \   00000034   0C809415           LDRNE    R8,[R4, #+12]
   \   00000038   00005813           CMPNE    R8,#+0
   \   0000003C   2700000A           BEQ      ??maincsm_onmessage_3
    945                  {
    946                    if (stricmp(ipc_req->name_to,ipc_my_name)==0)
   \   00000040   000098E5           LDR      R0,[R8, #+0]
   \   00000044   0610A0E1           MOV      R1,R6
   \   00000048   ........           _BLF     stricmp,??stricmp??rA
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   1500001A           BNE      ??maincsm_onmessage_1
    947                    {
    948                      switch (msg->submess)
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   010040E2           SUB      R0,R0,#+1
   \   0000005C   030050E3           CMP      R0,#+3
   \   00000060   1100008A           BHI      ??maincsm_onmessage_1
   \   00000064   011F8FE2           ADR      R1,??maincsm_onmessage_0
   \   00000068   0010D1E7           LDRB     R1,[R1, R0]
   \   0000006C   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??maincsm_onmessage_0:
   \   00000070   000D0E0A           DC8      +0,+13,+14,+10
    949                      {
    950                      case IPC_CHECK_DOUBLERUN:
    951          	    //Если приняли свое собственное сообщение, значит запускаем чекер
    952          	    if (ipc_req->name_from==ipc_my_name) SUBPROC((void *)CheckDoubleRun, data);
   \                     ??maincsm_onmessage_4:
   \   00000074   040098E5           LDR      R0,[R8, #+4]
   \   00000078   060050E1           CMP      R0,R6
   \   0000007C   0300001A           BNE      ??maincsm_onmessage_5
   \   00000080   1C019FE5           LDR      R0,??maincsm_onmessage_2+0x4  ;; CheckDoubleRun
   \   00000084   0710A0E1           MOV      R1,R7
   \   00000088   710100EF           SWI      +369
   \   0000008C   060000EA           B        ??maincsm_onmessage_1
    953                      else ipc_req->data=(void *)maincsm_id;
   \                     ??maincsm_onmessage_5:
   \   00000090   100095E5           LDR      R0,[R5, #+16]
   \   00000094   080088E5           STR      R0,[R8, #+8]
   \   00000098   030000EA           B        ??maincsm_onmessage_1
    954          	    break;
    955                      
    956                      case IPC_RUN_MAIN_PROCESS:
    957                        MainProcess(ipc_req->data);
   \                     ??maincsm_onmessage_6:
   \   0000009C   080098E5           LDR      R0,[R8, #+8]
   \   000000A0   ........           BL       MainProcess
   \   000000A4   000000EA           B        ??maincsm_onmessage_1
    958                        break;
    959                      
    960                      case IPC_SHOW_CAPTCHA:
    961                        //csm->maingui_id=CreateLoginDialog();//
    962                        AnimWidget_Close();
   \                     ??maincsm_onmessage_7:
   \   000000A8   ........           _BLF     AnimWidget_Close,??AnimWidget_Close??rA
    963                        break;
    964                      }
    965                    }
    966                  }
    967                }
    968              }
    969             
    970            if (msg->msg==MSG_HELPER_TRANSLATOR)
   \                     ??maincsm_onmessage_1:
   \   000000AC   040094E5           LDR      R0,[R4, #+4]
   \   000000B0   AE10A0E3           MOV      R1,#+174
   \   000000B4   DE1C81E3           ORR      R1,R1,#0xDE00
   \   000000B8   010050E1           CMP      R0,R1
   \   000000BC   0900001A           BNE      ??maincsm_onmessage_8
    971            {
    972              if (strncmp(HTTP_URL, "https://", 8)==0)
   \   000000C0   ........           LDR      R0,??DataTable49  ;; HTTP_URL
   \   000000C4   0820A0E3           MOV      R2,#+8
   \   000000C8   041086E2           ADD      R1,R6,#+4
   \   000000CC   150100EF           SWI      +277
   \   000000D0   000050E3           CMP      R0,#+0
   \   000000D4   0100001A           BNE      ??maincsm_onmessage_3
    973                ssl_socket_msg_handler(msg);
   \   000000D8   0400A0E1           MOV      R0,R4
   \   000000DC   ........           _BLF     ssl_socket_msg_handler,??ssl_socket_msg_handler??rA
    974             // else
    975               // socket_msg_handler(msg);
    976              return(1);
   \                     ??maincsm_onmessage_3:
   \   000000E0   0100A0E3           MOV      R0,#+1
   \   000000E4   F281BDE8           POP      {R1,R4-R8,PC}    ;; return
    977            }
    978            
    979            if ((msg->msg==MSG_GUI_DESTROYED)&&((int)msg->data0==csm->maingui_id))
   \                     ??maincsm_onmessage_8:
   \   000000E8   0C1094E5           LDR      R1,[R4, #+12]
   \   000000EC   142095E5           LDR      R2,[R5, #+20]
   \   000000F0   0E30A0E3           MOV      R3,#+14
   \   000000F4   643C83E3           ORR      R3,R3,#0x6400
   \   000000F8   030050E1           CMP      R0,R3
   \   000000FC   0400001A           BNE      ??maincsm_onmessage_9
   \   00000100   280092E5           LDR      R0,[R2, #+40]
   \   00000104   000051E1           CMP      R1,R0
   \   00000108   F4FFFF1A           BNE      ??maincsm_onmessage_3
    980            {
    981              csm->csm.state=-3;
   \   0000010C   0200E0E3           MVN      R0,#+2
   \   00000110   100082E5           STR      R0,[R2, #+16]
    982            }
    983          //------------------------------------------------------------------------------  
    984            if (msg->msg==0x8072)//)Obs_Ms
   \                     ??maincsm_onmessage_9:
   \   00000114   040094E5           LDR      R0,[R4, #+4]
   \   00000118   7230A0E3           MOV      R3,#+114
   \   0000011C   803C83E3           ORR      R3,R3,#0x8000
   \   00000120   030050E1           CMP      R0,R3
   \   00000124   0800001A           BNE      ??maincsm_onmessage_10
    985            {
    986              if (csm->obj && (HObj)msg->data0==csm->obj)
   \   00000128   3C0092E5           LDR      R0,[R2, #+60]
   \   0000012C   000050E3           CMP      R0,#+0
   \   00000130   EAFFFF0A           BEQ      ??maincsm_onmessage_3
   \   00000134   000051E1           CMP      R1,R0
   \   00000138   E8FFFF1A           BNE      ??maincsm_onmessage_3
    987                Obs_TranslateMessageGBS(msg, ObsEventsHandlers);
   \   0000013C   281085E2           ADD      R1,R5,#+40
   \   00000140   0400A0E1           MOV      R0,R4
   \   00000144   640200EF           SWI      +612
   \   00000148   040000EA           B        ??maincsm_onmessage_11
    988            }
    989            else
    990              if (msg->msg==0x8055)//)Msg for AnimWidget
   \                     ??maincsm_onmessage_10:
   \   0000014C   1D1043E2           SUB      R1,R3,#+29
   \   00000150   010050E1           CMP      R0,R1
   \   00000154   0100001A           BNE      ??maincsm_onmessage_11
    991                AnimWidgetHandler(msg);
   \   00000158   0400A0E1           MOV      R0,R4
   \   0000015C   ........           _BLF     AnimWidgetHandler,??AnimWidgetHandler??rA
    992              
    993            if(msg->msg == MSG_RECONFIGURE_REQ) 
   \                     ??maincsm_onmessage_11:
   \   00000160   040094E5           LDR      R0,[R4, #+4]
   \   00000164   AF10A0E3           MOV      R1,#+175
   \   00000168   DE1C81E3           ORR      R1,R1,#0xDE00
   \   0000016C   010050E1           CMP      R0,R1
   \   00000170   DAFFFF1A           BNE      ??maincsm_onmessage_3
    994            {
    995              extern const char *successed_config_filename;
    996              if (stricmp(successed_config_filename,(char *)msg->data0)==0)
   \   00000174   2C009FE5           LDR      R0,??maincsm_onmessage_2+0x8  ;; successed_config_filename
   \   00000178   0C1094E5           LDR      R1,[R4, #+12]
   \   0000017C   000090E5           LDR      R0,[R0, #+0]
   \   00000180   ........           _BLF     stricmp,??stricmp??rA
   \   00000184   000050E3           CMP      R0,#+0
   \   00000188   D4FFFF1A           BNE      ??maincsm_onmessage_3
    997              {
    998                InitConfig();
   \   0000018C   ........           _BLF     InitConfig,??InitConfig??rA
    999                ShowMSG(0x11,(int)"VK.ELF:\nконфиг обновлен!");
   \   00000190   101086E2           ADD      R1,R6,#+16
   \   00000194   1100A0E3           MOV      R0,#+17
   \   00000198   480100EF           SWI      +328
   \   0000019C   CFFFFFEA           B        ??maincsm_onmessage_3
   \                     ??maincsm_onmessage_2:
   \   000001A0   4E1D6217           DC32     0x17621d4e
   \   000001A4   ........           DC32     CheckDoubleRun
   \   000001A8   ........           DC32     successed_config_filename
   1000              }
   1001            }
   1002            
   1003          #ifdef EL71  
   1004            if (msg->msg==0x1AB) //SLIDER.Сообщение приходит только для активного CSM
   1005              switch(msg->submess)
   1006              {
   1007              case 3://закрыт    
   1008                break;
   1009              case 4://открыт     
   1010                break;
   1011              case 5://вверх       
   1012                break;
   1013              case 6://вниз
   1014                ipc.name_to=ipc_xtask_name;
   1015                ipc.name_from=ipc_my_name;
   1016                ipc.data=(void*)maincsm_id;
   1017                GBS_SendMessage(MMI_CEPID,MSG_IPC,IPC_XTASK_IDLE,&ipc);
   1018                break;
   1019              }
   1020          #endif  
   1021            
   1022            return(1);
   1023          }
   1024          
   1025          //******************************************************************************
   1026          

   \                                 In segment CODE, align 4, keep-with-next
   1027          static int socket_data_read_handler(CONNDATA *conn)
   1028          {
   \                     socket_data_read_handler:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   1029            char s[32];
   1030            
   1031            if (HTTP_HEADER_LENGTH == 0 && conn->TOTALRECEIVED)
   \   00000004   ........           LDR      R4,??DataTable45  ;; ipc_my_name
   \   00000008   ........           LDR      R6,??DataTable46  ;; HTTP_HEADER_LENGTH
   \   0000000C   20D04DE2           SUB      SP,SP,#+32
   \   00000010   0050A0E1           MOV      R5,R0
   \   00000014   000096E5           LDR      R0,[R6, #+0]
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0900001A           BNE      ??socket_data_read_handler_0
   \   00000020   6C0095E5           LDR      R0,[R5, #+108]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0600000A           BEQ      ??socket_data_read_handler_0
   1032            {
   1033              if (ParseHeader() == 0)
   \   0000002C   ........           _BLF     ParseHeader,??ParseHeader??rA
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0300001A           BNE      ??socket_data_read_handler_0
   1034              {
   1035                sprintf(logmsg, "Получен не HTTP формат");
   \   00000038   ........           LDR      R0,??DataTable47  ;; logmsg
   \   0000003C   2C1084E2           ADD      R1,R4,#+44
   \   00000040   160000EF           SWI      +22
   1036                SMART_REDRAW();
   \   00000044   ........           _BLF     SMART_REDRAW,??SMART_REDRAW??rA
   1037              }
   1038            }
   1039             
   1040            if (conn->TOTALRECEIVED >= HTTP_HEADER_LENGTH + HTTP_CONTENT_LENGTH)//все данные получены
   \                     ??socket_data_read_handler_0:
   \   00000048   ........           LDR      R2,??DataTable48  ;; HTTP_CONTENT_LENGTH
   \   0000004C   6C0095E5           LDR      R0,[R5, #+108]
   \   00000050   001096E5           LDR      R1,[R6, #+0]
   \   00000054   002092E5           LDR      R2,[R2, #+0]
   \   00000058   011082E0           ADD      R1,R2,R1
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   2B0000BA           BLT      ??socket_data_read_handler_1
   1041            {
   1042              
   1043              if (HTTP_CONNECTION == 0)
   \   00000064   B4009FE5           LDR      R0,??socket_data_read_handler_2  ;; HTTP_CONNECTION
   \   00000068   000090E5           LDR      R0,[R0, #+0]
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   0A00001A           BNE      ??socket_data_read_handler_3
   1044              {
   1045                if (strncmp(HTTP_URL, "https://", 8)==0)
   \   00000074   ........           LDR      R0,??DataTable49  ;; HTTP_URL
   \   00000078   0820A0E3           MOV      R2,#+8
   \   0000007C   041084E2           ADD      R1,R4,#+4
   \   00000080   150100EF           SWI      +277
   \   00000084   000050E3           CMP      R0,#+0
   \   00000088   0200001A           BNE      ??socket_data_read_handler_4
   1046                  end_ssl(conn);
   \   0000008C   0500A0E1           MOV      R0,R5
   \   00000090   ........           _BLF     end_ssl,??end_ssl??rA
   \   00000094   010000EA           B        ??socket_data_read_handler_3
   1047                else
   1048                  end_socket(conn->sock);
   \                     ??socket_data_read_handler_4:
   \   00000098   4C0095E5           LDR      R0,[R5, #+76]
   \   0000009C   ........           _BLF     end_socket,??end_socket??rA
   1049              }
   1050              
   1051              if (HTTP_STATUS == 200 || HTTP_STATUS == 401)
   \                     ??socket_data_read_handler_3:
   \   000000A0   7C009FE5           LDR      R0,??socket_data_read_handler_2+0x4  ;; HTTP_STATUS
   \   000000A4   002090E5           LDR      R2,[R0, #+0]
   \   000000A8   0000A0E3           MOV      R0,#+0
   \   000000AC   C80052E3           CMP      R2,#+200
   \   000000B0   9110A013           MOVNE    R1,#+145
   \   000000B4   401F8113           ORRNE    R1,R1,#0x100
   \   000000B8   01005211           CMPNE    R2,R1
   \   000000BC   0A00001A           BNE      ??socket_data_read_handler_5
   1052                {
   1053                  ipc.name_to = ipc_my_name;
   \   000000C0   ........           LDR      R3,??DataTable50  ;; ipc
   1054                  ipc.name_from = ipc_my_name;
   1055                  ipc.data = 0;
   1056                  GBS_SendMessage(MMI_CEPID, MSG_IPC, IPC_RUN_MAIN_PROCESS, &ipc);        
   \   000000C4   0420A0E3           MOV      R2,#+4
   \   000000C8   004083E5           STR      R4,[R3, #+0]
   \   000000CC   044083E5           STR      R4,[R3, #+4]
   \   000000D0   080083E5           STR      R0,[R3, #+8]
   \   000000D4   B010A0E3           MOV      R1,#+176
   \   000000D8   DE1C81E3           ORR      R1,R1,#0xDE00
   \   000000DC   0900A0E3           MOV      R0,#+9
   \   000000E0   420C80E3           ORR      R0,R0,#0x4200
   \   000000E4   000100EF           SWI      +256
   \   000000E8   070000EA           B        ??socket_data_read_handler_6
   1057                }
   1058              else
   1059              {
   1060                INET_PROCESS = 0;
   \                     ??socket_data_read_handler_5:
   \   000000EC   ........           LDR      R1,??DataTable53  ;; INET_PROCESS
   \   000000F0   000081E5           STR      R0,[R1, #+0]
   1061                sprintf(s, "Bad HTTP status: %d", HTTP_STATUS);
   \   000000F4   441084E2           ADD      R1,R4,#+68
   \   000000F8   0D00A0E1           MOV      R0,SP
   \   000000FC   160000EF           SWI      +22
   1062                ShowMSG(1,(int)s);
   \   00000100   0D10A0E1           MOV      R1,SP
   \   00000104   0100A0E3           MOV      R0,#+1
   \   00000108   480100EF           SWI      +328
   1063              }
   1064              
   1065              return (1);
   \                     ??socket_data_read_handler_6:
   \   0000010C   0100A0E3           MOV      R0,#+1
   \   00000110   000000EA           B        ??socket_data_read_handler_7
   1066            }
   1067            return (0);
   \                     ??socket_data_read_handler_1:
   \   00000114   0000A0E3           MOV      R0,#+0
   \                     ??socket_data_read_handler_7:
   \   00000118   20D08DE2           ADD      SP,SP,#+32       ;; stack cleaning
   \   0000011C   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??socket_data_read_handler_2:
   \   00000120   ........           DC32     HTTP_CONNECTION
   \   00000124   ........           DC32     HTTP_STATUS
   1068          }
   1069          
   1070          //------------------------------------------------------------------------------
   1071          

   \                                 In segment CODE, align 4, keep-with-next
   1072          static void socket_remote_closed_handler(short sock)
   1073          {
   1074              INET_PROCESS=0;
   \                     socket_remote_closed_handler:
   \   00000000   ........           LDR      R0,??DataTable53  ;; INET_PROCESS
   \   00000004   0010A0E3           MOV      R1,#+0
   \   00000008   001080E5           STR      R1,[R0, #+0]
   1075              //повторяем предыдущий запрос
   1076              //if (strncmp(HTTP_URL, "https://", 8)==0)
   1077                //SUBPROC((void*)send_ssl_answer, 0);
   1078              //else
   1079                //SUBPROC((void*)send_answer, 0);
   1080          }
   \   0000000C   1EFF2FE1           BX       LR               ;; return
   1081          
   1082          //------------------------------------------------------------------------------
   1083          

   \                                 In segment CODE, align 4, keep-with-next
   1084          static void socket_error_handler(int err)
   1085          {
   \                     socket_error_handler:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1086            AnimWidget_Close();
   \   00000008   ........           _BLF     AnimWidget_Close,??AnimWidget_Close??rA
   1087            //send_req2(HTTP_URL, 1);
   1088            switch(err)
   \   0000000C   ........           LDR      R0,??DataTable53  ;; INET_PROCESS
   \   00000010   54109FE5           LDR      R1,??socket_error_handler_1  ;; `?<Constant "ERROR_READ_TIMEOUT">`
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   024044E2           SUB      R4,R4,#+2
   \   0000001C   080054E3           CMP      R4,#+8
   \   00000020   1080BD88           POPHI    {R4,PC}
   \   00000024   013F8FE2           ADR      R3,??socket_error_handler_0
   \   00000028   0430D3E7           LDRB     R3,[R3, R4]
   \   0000002C   03F18FE0           ADD      PC,PC,R3, LSL #+2
   \                     ??socket_error_handler_0:
   \   00000030   060A0D0D           DC8      +6,+10,+13,+13
   \   00000034   020D0402           DC8      +2,+13,+4,+2
   \   00000038   02000000           DC8      +2,+0,+0,+0
   1089            {
   1090            case ERROR_SSL_CONNECTION:
   1091              INET_PROCESS=0;
   \                     ??socket_error_handler_2:
   \   0000003C   002080E5           STR      R2,[R0, #+0]
   \   00000040   1080BDE8           POP      {R4,PC}
   1092              break;
   1093              
   1094            case ERROR_SSL_CONNECT_TIMEOUT:
   1095              INET_PROCESS=0;
   1096              break;
   1097              
   1098            case ERROR_WRITE:
   1099              INET_PROCESS=0;
   1100              //ShowMSG(1, (int)"ERROR_WRITE");
   1101              break;
   1102              
   1103            case ERROR_READ_TIMEOUT:
   1104              INET_PROCESS=0;
   \                     ??socket_error_handler_3:
   \   00000044   002080E5           STR      R2,[R0, #+0]
   1105              ShowMSG(1, (int)"ERROR_READ_TIMEOUT");
   \   00000048   000000EA           B        ??socket_error_handler_4
   1106              break;  
   1107              
   1108            case CONNECT_FAULT:
   1109              ShowMSG(1, (int)"CONNECT_FAULT");
   \                     ??socket_error_handler_5:
   \   0000004C   141081E2           ADD      R1,R1,#+20
   \                     ??socket_error_handler_4:
   \   00000050   0100A0E3           MOV      R0,#+1
   \   00000054   480100EF           SWI      +328
   \   00000058   1080BDE8           POP      {R4,PC}
   1110              break;
   1111              
   1112            case ERROR_CREATE_SOCK:
   1113              ShowMSG(1, (int)"ERROR_CREATE_SOCK");    
   \                     ??socket_error_handler_6:
   \   0000005C   241081E2           ADD      R1,R1,#+36
   \   00000060   0100A0E3           MOV      R0,#+1
   \   00000064   480100EF           SWI      +328
   1114              break;
   1115              
   1116            case WAITING_FOR_GPRS_UP:
   1117              //ShowMSG(1, (int)"WAITING_FOR_GPRS_UP"); 
   1118              break;
   1119              
   1120            case GPRS_OFFLINE:
   1121              break;
   1122              
   1123            case GPRS_ONLINE:
   1124              //ShowMSG(1, (int)"GPRS_ONLINE"); 
   1125              break;     
   1126            }
   1127           
   1128          }
   \                     ??socket_error_handler_7:
   \   00000068   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??socket_error_handler_1:
   \   0000006C   ........           DC32     `?<Constant "ERROR_READ_TIMEOUT">`
   1129          
   1130          //******************************************************************************
   1131          

   \                                 In segment DATA_Z, align 4, align-sorted
   1132          static unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280

   \                                 In segment DATA_C, align 4, align-sorted
   \                     percent_t:
   \   00000000   257400             DC8 "%t"
   \   00000003   00                 DC8 0
   \   00000004   C2EAEEEDF2E0       DC8 "\302\352\356\355\362\340\352\362\345"
   \              EAF2E500    
   \   0000000E   0000               DC8 0, 0
   \   00000010   ............       DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
   \              ....00000000
   \              000000000000
   \              000000000000
   \              ........    
   \   0000002C   400000000100       DC32 64, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              0000........
   \              ........CCCC
   \              AA5555AA3333
   \              00000000    
   \   00000048   8B00               DC16 139
   \   0000004A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     ipc_my_name:
   \   00000000   564B00             DC8 "VK"
   \   00000003   00                 DC8 0
   \   00000004   68747470733A       DC8 "https://"
   \              2F2F00      
   \   0000000D   000000             DC8 0, 0, 0
   \   00000010   564B2E454C46       DC8 "VK.ELF:\012\352\356\355\364\350\343 \356\341\355\356\342\353\345\355!"
   \              3A0AEAEEEDF4
   \              E8E320EEE1ED
   \              EEE2EBE5ED21
   \              00          
   \   00000029   000000             DC8 0, 0, 0
   \   0000002C   CFEEEBF3F7E5       DC8 "\317\356\353\363\367\345\355 \355\345 HTTP \364\356\360\354\340\362"
   \              ED20EDE52048
   \              54545020F4EE
   \              F0ECE0F200  
   \   00000043   00                 DC8 0
   \   00000044   426164204854       DC8 "Bad HTTP status: %d"
   \              545020737461
   \              7475733A2025
   \              6400        
   \                     ipc_xtask_name:
   \   00000058   585461736B00       DC8 "XTask"
   \   0000005E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11
   1133          
   1134          static const struct
   1135          {
   1136            CSM_DESC maincsm;
   1137            WSHDR maincsm_name;
   1138          }MAINCSM =
   1139          {
   1140            {
   1141            maincsm_onmessage,
   1142            maincsm_oncreate,
   1143          #ifdef NEWSGOLD
   1144            0,
   1145            0,
   1146            0,
   1147            0,
   1148          #endif
   1149            maincsm_onclose,
   1150            sizeof(MAIN_CSM),
   1151            1,
   1152            &minus11
   1153            },
   1154            {
   1155              maincsm_name_body,
   1156              NAMECSM_MAGIC1,
   1157              NAMECSM_MAGIC2,
   1158              0x0,
   1159              139
   1160            }
   1161          };
   1162          
   1163          static void UpdateCSMname(void)
   1164          {
   1165            wsprintf((WSHDR *)(&MAINCSM.maincsm_name), percent_t,"Вконтакте");
   1166          }
   1167          
   1168          //******************************************************************************
   1169          

   \                                 In segment CODE, align 4, keep-with-next
   1170          int main(char *exename, char *fname)
   1171          {
   1172            MAIN_CSM main_csm;
   1173          
   1174            socket_work_init((void*)socket_error_handler, (void*)socket_data_read_handler, (void*)socket_remote_closed_handler);
   \                     main:
   \   00000000   60209FE5           LDR      R2,??main_0      ;; socket_remote_closed_handler
   \   00000004   60109FE5           LDR      R1,??main_0+0x4  ;; socket_data_read_handler
   \   00000008   60009FE5           LDR      R0,??main_0+0x8  ;; socket_error_handler
   \   0000000C   10402DE9           PUSH     {R4,LR}
   1175            
   1176            InitConfig();
   1177            zeromem(&main_csm, sizeof(MAIN_CSM));
   1178            LockSched();
   1179            UpdateCSMname();
   \   00000010   5C409FE5           LDR      R4,??main_0+0xC  ;; percent_t
   \   00000014   40D04DE2           SUB      SP,SP,#+64
   \   00000018   ........           _BLF     socket_work_init,??socket_work_init??rA
   \   0000001C   ........           _BLF     InitConfig,??InitConfig??rA
   \   00000020   4010A0E3           MOV      R1,#+64
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   1D0100EF           SWI      +285
   \   0000002C   460100EF           SWI      +326
   \   00000030   042084E2           ADD      R2,R4,#+4
   \   00000034   0410A0E1           MOV      R1,R4
   \   00000038   380084E2           ADD      R0,R4,#+56
   \   0000003C   240100EF           SWI      +292
   1180            maincsm_id=CreateCSM(&MAINCSM.maincsm,&main_csm, 0);
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   0D10A0E1           MOV      R1,SP
   \   00000048   100084E2           ADD      R0,R4,#+16
   \   0000004C   070100EF           SWI      +263
   \   00000050   20109FE5           LDR      R1,??main_0+0x10  ;; ipc + 16
   \   00000054   000081E5           STR      R0,[R1, #+0]
   1181            UnlockSched();
   \   00000058   470100EF           SWI      +327
   1182          
   1183            return 0;
   \   0000005C   0000A0E3           MOV      R0,#+0
   \   00000060   40D08DE2           ADD      SP,SP,#+64
   \   00000064   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??main_0:
   \   00000068   ........           DC32     socket_remote_closed_handler
   \   0000006C   ........           DC32     socket_data_read_handler
   \   00000070   ........           DC32     socket_error_handler
   \   00000074   ........           DC32     percent_t
   \   00000078   ........           DC32     ipc + 16
   1184          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   ........           DC32     dialogs

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   ........           DC32     `?<Constant "%sdialogs.json">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   ........           DC32     `?<Constant "%sgroups.json">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable32:
   \   00000000   ........           DC32     APP_DIR

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable33:
   \   00000000   ........           DC32     `?<Constant "%stoken">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable34:
   \   00000000   ........           DC32     ACCESS_TOKEN

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable35:
   \   00000000   ........           DC32     INET_PROCESS

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable42:
   \   00000000   ........           DC32     ipc

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable45:
   \   00000000   ........           DC32     ipc_my_name

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable46:
   \   00000000   ........           DC32     HTTP_HEADER_LENGTH

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable47:
   \   00000000   ........           DC32     logmsg

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable48:
   \   00000000   ........           DC32     HTTP_CONTENT_LENGTH

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable49:
   \   00000000   ........           DC32     HTTP_URL

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable50:
   \   00000000   ........           DC32     ipc

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable53:
   \   00000000   ........           DC32     INET_PROCESS

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable54:
   \   00000000   ........           DC32     Cookies_SaveAndFree

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for ipc>`:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \                     `?<Initializer for ena_statistic>`:
   \   0000000C   00000000           DC32 0
   \                     `?<Initializer for maincsm_id>`:
   \   00000010   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for csm>`:
   \   00000014   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for tmr_check_new_msg>`:
   \   00000018   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for ObsEventsHandlers>`:
   \   00000028   0A000000....       DC32 10, HandleObsFrameUpdate, 12, HandleObsError, 102, 0H
   \              ....0C000000
   \              ........6600
   \              000000000000

   \                                 In segment ELFBEGIN, align 1

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   6A706700           DC8 "jpg"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%stoken">`:
   \   00000000   2573746F6B65       DC8 "%stoken"
   \              6E00        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "cJSON parse error">`:
   \   00000000   634A534F4E20       DC8 "cJSON parse error"
   \              706172736520
   \              6572726F7200
   \   00000012   0000               DC8 0, 0
   \   00000014   4572726F723D       DC8 "Error=%d"
   \              256400      
   \   0000001D   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "TEST_SSL_CON ok!">`:
   \   00000000   544553545F53       DC8 "TEST_SSL_CON ok!"
   \              534C5F434F4E
   \              206F6B2100  
   \   00000011   000000             DC8 0, 0, 0
   \   00000014   546F6B656E20       DC8 "Token readed!"
   \              726561646564
   \              2100        
   \   00000022   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "ERROR_READ_TIMEOUT">`:
   \   00000000   4552524F525F       DC8 "ERROR_READ_TIMEOUT"
   \              524541445F54
   \              494D454F5554
   \              00          
   \   00000013   00                 DC8 0
   \   00000014   434F4E4E4543       DC8 "CONNECT_FAULT"
   \              545F4641554C
   \              5400        
   \   00000022   0000               DC8 0, 0
   \   00000024   4552524F525F       DC8 "ERROR_CREATE_SOCK"
   \              435245415445
   \              5F534F434B00
   \   00000036   0000               DC8 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   00                 DC8 ""

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant ".png">`:
   \   00000000   2E706E6700         DC8 ".png"
   \   00000005   000000             DC8 0, 0, 0
   \   00000008   257363616368       DC8 "%scache\\%d.%s"
   \              655C25642E25
   \              7300        
   \   00000016   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   706E6700           DC8 "png"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%sdialogs.json">`:
   \   00000000   25736469616C       DC8 "%sdialogs.json"
   \              6F67732E6A73
   \              6F6E00      
   \   0000000F   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%sgroups.json">`:
   \   00000000   257367726F75       DC8 "%sgroups.json"
   \              70732E6A736F
   \              6E00        
   \   0000000E   0000               DC8 0, 0
   1185          
   1186          //******************************************************************************
   1187          
   1188          //E:\Users\alfinant7\Documents\Siemens\Dev\IAR\VK.ELF_C\Send_S75.cmd

   Maximum stack usage in bytes:

     Function                     CSTACK
     --------                     ------
     CheckDoubleRun                   8
     DoError                          4
     ElfKiller                        4
     HandleObsError                   8
     HandleObsFrameUpdate            28
     LoadSavedDialogs               192
     LoadSavedGroups                192
     LoadUserPhoto                  200
     Logout                           8
     MainProcess                     44
     Play                           236
     SaveDialogs                    276
     SaveGroups                     276
     del_token                      264
     main                            72
     maincsm_onclose                  4
     maincsm_oncreate                 4
     maincsm_onmessage               28
     save_token                     272
     socket_data_read_handler        48
     socket_error_handler             8
     socket_remote_closed_handler     0
     startApp                       192
     tmr_check_new_msg_handler       20


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     tmr_check_new_msg_handler       184
     Play                            324
     LoadUserPhoto                   280
     ?Subroutine24                    16
     SaveDialogs                      12
     ?Subroutine25                   100
     SaveGroups                        8
     LoadSavedDialogs                188
     ?Subroutine26                    12
     LoadSavedGroups                 184
     save_token                      116
     del_token                        88
     Logout                           96
     DoError                          84
     MainProcess                     496
     maincsm_oncreate                 60
     ElfKiller                        28
     maincsm_onclose                 100
     startApp                        212
     CheckDoubleRun                   96
     HandleObsFrameUpdate            204
     HandleObsError                  100
     ipc                              64
     maincsm_onmessage               428
     socket_data_read_handler        296
     socket_remote_closed_handler     16
     socket_error_handler            112
     maincsm_name_body               280
     percent_t                        76
     ipc_my_name                      96
     minus11                           4
     main                            124
     ??DataTable9                      4
     ??DataTable11                     4
     ??DataTable13                     4
     ??DataTable32                     4
     ??DataTable33                     4
     ??DataTable34                     4
     ??DataTable35                     4
     ??DataTable42                     4
     ??DataTable45                     4
     ??DataTable46                     4
     ??DataTable47                     4
     ??DataTable48                     4
     ??DataTable49                     4
     ??DataTable50                     4
     ??DataTable53                     4
     ??DataTable54                     4
     ?<Initializer for ipc>           64
     ?<Constant "jpg">                 4
     ?<Constant "%stoken">             8
     ?<Constant "cJSON parse error">
                                      32
     ?<Constant "TEST_SSL_CON ok!">   36
     ?<Constant "ERROR_READ_TIMEOUT">
                                      56
     ?<Constant "">                    1
     ?<Constant ".png">               24
     ?<Constant "png">                 4
     ?<Constant "%sdialogs.json">     16
     ?<Constant "%sgroups.json">      16
      Others                         524

 
 4 528 bytes in segment CODE
   373 bytes in segment DATA_C
    64 bytes in segment DATA_I
    64 bytes in segment DATA_ID
   280 bytes in segment DATA_Z
    24 bytes in segment INITTAB
 
 4 028 bytes of CODE  memory (+ 524 bytes shared)
   437 bytes of CONST memory
   344 bytes of DATA  memory

Errors: none
Warnings: 8
