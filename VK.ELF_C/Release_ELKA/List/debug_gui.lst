##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    16/Feb/2023  22:41:14 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \debug_gui.c                                         #
#    Command line    =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \debug_gui.c -D NEWSGOLD -D ELKA -D DEBUG -lCN       #
#                       D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \Release_ELKA\List\ -la D:\Users\alfinant\Documents\ #
#                       Siemens\Dev\IAR\VK.ELF_C\Release_ELKA\List\ -o       #
#                       D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \Release_ELKA\Obj\ -z9 --cpu_mode arm --endian       #
#                       little --cpu ARM926EJ-S --stack_align 4 --interwork  #
#                       --diag_suppress Pe301 -e --fpu None --dlib_config    #
#                       D:\Users\alfinant\Documents\Siemens\IAR\ARM\LIB\dl5t #
#                       painl8n.h -I D:\Users\alfinant\Documents\Siemens\IAR #
#                       \ARM\INC\ --inline_threshold=2                       #
#    List file       =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \Release_ELKA\List\debug_gui.lst                     #
#    Object file     =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \Release_ELKA\Obj\debug_gui.r79                      #
#                                                                            #
#                                                                            #
##############################################################################

D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C\debug_gui.c
      1          #include <siemens\swilib.h>
      2          #include "rect_patcher.h"
      3          
      4          #include "socket_work.h"
      5          #include "ssl_work.h"
      6          #include "http.h"
      7          #include "cookie.h"
      8          #include "process.h"
      9          #include "main.h"
     10          #include "buffer.h"
     11          

   \                                 In segment DATA_Z, align 4, align-sorted
     12          char logmsg[256];
   \                     logmsg:
   \   00000000                      DS8 256

   \                                 In segment DATA_C, align 4, align-sorted
     13          static const char percent_t[]="%t";
   \                     percent_t:
   \   00000000   257400             DC8 "%t"
   \   00000003   00                 DC8 0
   \   00000004   52783A25642C       DC8 "Rx:%d, Tx:%d\012"
   \              2054783A2564
   \              0A00        
   \   00000012   0000               DC8 0, 0
   \   00000014   52786275663A       DC8 "Rxbuf: %X\012"
   \              2025580A00  
   \   0000001F   00                 DC8 0
   \   00000020   2D686F73743A       DC8 "-host: %s\012"
   \              2025730A00  
   \   0000002B   00                 DC8 0
   \   0000002C   2D736F636B5F       DC8 "-sock_st=%d, ssl_st=%d\012"
   \              73743D25642C
   \              2073736C5F73
   \              743D25640A00
   \   00000044   2D73736C2068       DC8 "-ssl handshake OK\012"
   \              616E64736861
   \              6B65204F4B0A
   \              00          
   \   00000057   00                 DC8 0
   \   00000058   2D6369706865       DC8 "-cipher %s\012"
   \              722025730A00
   \   00000064   2D4C4F473A3C       DC8 "-LOG:<%s>\012"
   \              25733E0A00  
   \   0000006F   00                 DC8 0
   \   00000070   4578697400         DC8 "Exit"
   \   00000075   000000             DC8 0, 0, 0
     14          
     15          typedef struct
     16          {
     17            GUI gui;
     18            WSHDR *ws1;
     19          }MAIN_GUI;
     20          

   \                                 In segment DATA_Z, align 4, align-sorted
     21          static int gui_id = NULL;
   \                     gui_id:
   \   00000000                      DS8 4
     22          

   \                                 In segment CODE, align 4, keep-with-next
     23          void SMART_REDRAW()
     24          {
   \                     SMART_REDRAW:
   \   00000000   10402DE9           PUSH     {R4,LR}
     25            if(gui_id == 0)
   \   00000004   ........           LDR      R4,??DataTable2  ;; gui_id
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   1080BD08           POPEQ    {R4,PC}
     26              return;
     27            
     28            LockSched();
   \   00000014   460100EF           SWI      +326
     29            if (IsGuiOnTop(gui_id))
   \   00000018   000094E5           LDR      R0,[R4, #+0]
   \   0000001C   350100EF           SWI      +309
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0000000A           BEQ      ??SMART_REDRAW_0
     30              REDRAW();
   \   00000028   720100EF           SWI      +370
     31            UnlockSched();
   \                     ??SMART_REDRAW_0:
   \   0000002C   470100EF           SWI      +327
     32          }
   \   00000030   1080BDE8           POP      {R4,PC}          ;; return
     33          
     34          //******************************************************************************
     35          

   \                                 In segment CODE, align 4, keep-with-next
     36          static void OnRedraw(MAIN_GUI *data)
     37          {
   \                     OnRedraw:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     38          #ifdef ELKA
     39            DisableIconBar(1);
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   3B0200EF           SWI      +571
     40          #endif
     41            int scr_w=ScreenW();
   \   00000010   888100EF           SWI      +33160
   \   00000014   0050A0E1           MOV      R5,R0
     42            int scr_h=ScreenH();
   \   00000018   898100EF           SWI      +33161
   \   0000001C   0060A0E1           MOV      R6,R0
     43            char color[]={0x5D, 0x80, 0xA6, 0x64};
     44            unsigned long RX=ALLTOTALRECEIVED; unsigned long TX=ALLTOTALSENDED;
   \   00000020   C0019FE5           LDR      R0,??OnRedraw_0  ;; ALLTOTALRECEIVED
   \   00000024   008090E5           LDR      R8,[R0, #+0]
   \   00000028   BC019FE5           LDR      R0,??OnRedraw_0+0x4  ;; ALLTOTALSENDED
   \   0000002C   009090E5           LDR      R9,[R0, #+0]
     45            //const char *cipher_name;
     46            
     47            CONNDATA *conn = CONNDATA_getTop();
   \   00000030   ........           _BLF     CONNDATA_getTop,??CONNDATA_getTop??rA
   \   00000034   00A0A0E1           MOV      R10,R0
     48            
     49          //  if (conn && conn->ssl && conn->ssl->session && conn->ssl->session->cipher)
     50          //    cipher_name=conn->ssl->session->cipher->name;
     51          
     52            //DrawRoundedFrame(0,0/*YDISP*/,scr_w-1,scr_h-1,0,0,0,color,color);
     53            DrawRoundedFrame(0,0/*YDISP*/,scr_w-1,scr_h-1,0,0,0,GetPaletteAdrByColorIndex(1),GetPaletteAdrByColorIndex(1));
   \   00000038   0100A0E3           MOV      R0,#+1
   \   0000003C   2E0100EF           SWI      +302
   \   00000040   0070A0E1           MOV      R7,R0
   \   00000044   0100A0E3           MOV      R0,#+1
   \   00000048   2E0100EF           SWI      +302
   \   0000004C   80002DE9           PUSH     {R7}
     54            
     55            data->ws1->wsbody[0]='\0';
     56            
     57            wstrcatprintf(data->ws1, "Rx:%d, Tx:%d\n", RX, TX);
   \   00000050   98719FE5           LDR      R7,??OnRedraw_0+0x8  ;; percent_t
   \   00000054   01002DE9           PUSH     {R0}
   \   00000058   013046E2           SUB      R3,R6,#+1
   \   0000005C   012045E2           SUB      R2,R5,#+1
   \   00000060   0010A0E3           MOV      R1,#+0
   \   00000064   0000A0E3           MOV      R0,#+0
   \   00000068   01002DE9           PUSH     {R0}
   \   0000006C   01002DE9           PUSH     {R0}
   \   00000070   01002DE9           PUSH     {R0}
   \   00000074   500100EF           SWI      +336
   \   00000078   340094E5           LDR      R0,[R4, #+52]
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   001090E5           LDR      R1,[R0, #+0]
   \   00000084   0930A0E1           MOV      R3,R9
   \   00000088   B020C1E1           STRH     R2,[R1, #+0]
   \   0000008C   0820A0E1           MOV      R2,R8
   \   00000090   041087E2           ADD      R1,R7,#+4
   \   00000094   160200EF           SWI      +534
     58            wstrcatprintf(data->ws1, "Rxbuf: %X\n", recv_buf);
   \   00000098   54019FE5           LDR      R0,??OnRedraw_0+0xC  ;; recv_buf
   \   0000009C   141087E2           ADD      R1,R7,#+20
   \   000000A0   002090E5           LDR      R2,[R0, #+0]
   \   000000A4   340094E5           LDR      R0,[R4, #+52]
   \   000000A8   160200EF           SWI      +534
     59            
     60            if (conn)
   \   000000AC   00005AE3           CMP      R10,#+0
   \   000000B0   14D08DE2           ADD      SP,SP,#+20
   \   000000B4   1500000A           BEQ      ??OnRedraw_1
     61              wstrcatprintf(data->ws1, "-host: %s\n", conn->hostname);
   \   000000B8   340094E5           LDR      R0,[R4, #+52]
   \   000000BC   0C208AE2           ADD      R2,R10,#+12
   \   000000C0   201087E2           ADD      R1,R7,#+32
   \   000000C4   160200EF           SWI      +534
     62            
     63            if (conn)
     64              wstrcatprintf(data->ws1, "-sock_st=%d, ssl_st=%d\n", conn->sock_state, conn->ssl_state);
   \   000000C8   94309AE5           LDR      R3,[R10, #+148]
   \   000000CC   54209AE5           LDR      R2,[R10, #+84]
   \   000000D0   340094E5           LDR      R0,[R4, #+52]
   \   000000D4   2C1087E2           ADD      R1,R7,#+44
   \   000000D8   160200EF           SWI      +534
   \   000000DC   94009AE5           LDR      R0,[R10, #+148]
   \   000000E0   010050E3           CMP      R0,#+1
   \   000000E4   0900001A           BNE      ??OnRedraw_1
     65            
     66            if (conn && conn->ssl_state == 1)
     67            {
     68              wstrcatprintf(data->ws1, "-ssl handshake OK\n");
   \   000000E8   340094E5           LDR      R0,[R4, #+52]
   \   000000EC   441087E2           ADD      R1,R7,#+68
   \   000000F0   160200EF           SWI      +534
     69              wstrcatprintf(data->ws1, "-cipher %s\n", conn->ssl->session->cipher->name);
   \   000000F4   90009AE5           LDR      R0,[R10, #+144]
   \   000000F8   581087E2           ADD      R1,R7,#+88
   \   000000FC   B00090E5           LDR      R0,[R0, #+176]
   \   00000100   AC0090E5           LDR      R0,[R0, #+172]
   \   00000104   042090E5           LDR      R2,[R0, #+4]
   \   00000108   340094E5           LDR      R0,[R4, #+52]
   \   0000010C   160200EF           SWI      +534
     70            }
     71            wstrcatprintf(data->ws1, "-LOG:<%s>\n", logmsg);
   \                     ??OnRedraw_1:
   \   00000110   340094E5           LDR      R0,[R4, #+52]
   \   00000114   DC209FE5           LDR      R2,??OnRedraw_0+0x10  ;; logmsg
   \   00000118   641087E2           ADD      R1,R7,#+100
   \   0000011C   160200EF           SWI      +534
     72          
     73          /*  
     74            wsprintf(data->ws1,
     75                    // "State: %d\n"
     76                       "Rx:%d,Tx:%d\n"
     77                         "%s\n"//host
     78                           "%t\n"//logmsg
     79                             "cipher: %s\n"//cipher name
     80                             "recv_buf: %X\n"
     81                               "send_buf: %X\n"
     82                                 "http_stat: %d, proc:%d\n"
     83                                   "connect_state: %d\n"
     84                                     "http_content_len: %d\n"
     85                                     "ssl_write: %d\n"
     86                                       "ssl_read: %d\n"
     87                                         "ssl_con: %d\n"
     88                                           "sess_list: %X\n"
     89              ,RX,TX, host, logmsg, cipher_name, recv_buf, send_buf, HTTP_STATUS, INET_PROCESS, connect_state, HTTP_CONTENT_LENGTH, ssl_write_err, ssl_read_err, ssl_con_err, &connect_list);
     90          */  
     91            DrawString(data->ws1, 3, 3+0/*YDISP*/, scr_w-4, scr_h-4-GetFontYSIZE(FONT_MEDIUM_BOLD),
     92                       FONT_SMALL, 0, GetPaletteAdrByColorIndex(0), GetPaletteAdrByColorIndex(23));
   \   00000120   1700A0E3           MOV      R0,#+23
   \   00000124   2E0100EF           SWI      +302
   \   00000128   0080A0E1           MOV      R8,R0
   \   0000012C   0000A0E3           MOV      R0,#+0
   \   00000130   2E0100EF           SWI      +302
   \   00000134   0090A0E1           MOV      R9,R0
   \   00000138   0500A0E3           MOV      R0,#+5
   \   0000013C   C50100EF           SWI      +453
   \   00000140   00012DE9           PUSH     {R8}
   \   00000144   00022DE9           PUSH     {R9}
   \   00000148   0010A0E3           MOV      R1,#+0
   \   0000014C   02002DE9           PUSH     {R1}
   \   00000150   046046E2           SUB      R6,R6,#+4
   \   00000154   000046E0           SUB      R0,R6,R0
   \   00000158   04A045E2           SUB      R10,R5,#+4
   \   0000015C   0810A0E3           MOV      R1,#+8
   \   00000160   02002DE9           PUSH     {R1}
   \   00000164   01002DE9           PUSH     {R0}
   \   00000168   0A30A0E1           MOV      R3,R10
   \   0000016C   0320A0E3           MOV      R2,#+3
   \   00000170   340094E5           LDR      R0,[R4, #+52]
   \   00000174   0310A0E3           MOV      R1,#+3
   \   00000178   4C0100EF           SWI      +332
     93          
     94           // wsprintf(data->ws1,_percent_t,"Login");
     95           // DrawString(data->ws1,3,scr_h-4-GetFontYSIZE(FONT_MEDIUM_BOLD),scr_w>>1,scr_h-4,
     96                       //FONT_MEDIUM_BOLD,TEXT_ALIGNLEFT,GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(23));
     97            wsprintf(data->ws1, percent_t, "Exit");
   \   0000017C   340094E5           LDR      R0,[R4, #+52]
   \   00000180   702087E2           ADD      R2,R7,#+112
   \   00000184   0710A0E1           MOV      R1,R7
   \   00000188   240100EF           SWI      +292
     98            DrawString(data->ws1,scr_w>>1,scr_h-4-GetFontYSIZE(FONT_MEDIUM_BOLD),scr_w-4,scr_h-4,
     99                       FONT_MEDIUM_BOLD,TEXT_ALIGNRIGHT,GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(23));  
   \   0000018C   1700A0E3           MOV      R0,#+23
   \   00000190   2E0100EF           SWI      +302
   \   00000194   0070A0E1           MOV      R7,R0
   \   00000198   0000A0E3           MOV      R0,#+0
   \   0000019C   2E0100EF           SWI      +302
   \   000001A0   0080A0E1           MOV      R8,R0
   \   000001A4   0500A0E3           MOV      R0,#+5
   \   000001A8   C50100EF           SWI      +453
   \   000001AC   80002DE9           PUSH     {R7}
   \   000001B0   00012DE9           PUSH     {R8}
   \   000001B4   0410A0E3           MOV      R1,#+4
   \   000001B8   02002DE9           PUSH     {R1}
   \   000001BC   0A30A0E1           MOV      R3,R10
   \   000001C0   002046E0           SUB      R2,R6,R0
   \   000001C4   0510A0E3           MOV      R1,#+5
   \   000001C8   02002DE9           PUSH     {R1}
   \   000001CC   0610A0E1           MOV      R1,R6
   \   000001D0   02002DE9           PUSH     {R1}
   \   000001D4   340094E5           LDR      R0,[R4, #+52]
   \   000001D8   C510A0E1           ASR      R1,R5,#+1
   \   000001DC   4C0100EF           SWI      +332
   \   000001E0   28D08DE2           ADD      SP,SP,#+40
    100          }
   \   000001E4   F087BDE8           POP      {R4-R10,PC}      ;; return
   \                     ??OnRedraw_0:
   \   000001E8   ........           DC32     ALLTOTALRECEIVED
   \   000001EC   ........           DC32     ALLTOTALSENDED
   \   000001F0   ........           DC32     percent_t
   \   000001F4   ........           DC32     recv_buf
   \   000001F8   ........           DC32     logmsg
    101          
    102          //******************************************************************************
    103          

   \                                 In segment CODE, align 4, keep-with-next
    104          static void onCreate(MAIN_GUI *data, void *(*malloc_adr)(int))
    105          {
   \                     onCreate:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    106            data->ws1 = AllocWS(256);
   \   00000008   400FA0E3           MOV      R0,#+256
   \   0000000C   250100EF           SWI      +293
   \   00000010   340084E5           STR      R0,[R4, #+52]
    107            data->gui.state = 1;
   \   00000014   0100A0E3           MOV      R0,#+1
   \   00000018   0C00C4E5           STRB     R0,[R4, #+12]
    108          
    109          }
   \   0000001C   1080BDE8           POP      {R4,PC}          ;; return
    110          

   \                                 In segment CODE, align 4, keep-with-next
    111          static void onClose(MAIN_GUI *data, void (*mfree_adr)(void *))
    112          {
   \                     onClose:
   \   00000000   10402DE9           PUSH     {R4,LR}
    113            data->gui.state = 0;
   \   00000004   0040A0E3           MOV      R4,#+0
   \   00000008   0C40C0E5           STRB     R4,[R0, #+12]
    114            FreeWS(data->ws1);
   \   0000000C   340090E5           LDR      R0,[R0, #+52]
   \   00000010   290100EF           SWI      +297
    115            gui_id = NULL;
   \   00000014   ........           LDR      R0,??DataTable2  ;; gui_id
   \   00000018   004080E5           STR      R4,[R0, #+0]
    116          }
   \   0000001C   1080BDE8           POP      {R4,PC}          ;; return
    117          

   \                                 In segment CODE, align 4, keep-with-next
    118          static void onFocus(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))
    119          {
   \                     onFocus:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    120          #ifdef ELKA
    121            DisableIconBar(1);
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   3B0200EF           SWI      +571
    122          #endif
    123            DisableIDLETMR();
   \   00000010   7F0100EF           SWI      +383
    124            data->gui.state = 2;
   \   00000014   0200A0E3           MOV      R0,#+2
   \   00000018   0C00C4E5           STRB     R0,[R4, #+12]
    125            DirectRedrawGUI();
   \   0000001C   3F0100EF           SWI      +319
    126          }
   \   00000020   1080BDE8           POP      {R4,PC}          ;; return
    127          

   \                                 In segment CODE, align 4, keep-with-next
    128          static void onUnfocus(MAIN_GUI *data, void (*mfree_adr)(void *))
    129          {
   \                     onUnfocus:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    130          #ifdef ELKA
    131            DisableIconBar(0);
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   3B0200EF           SWI      +571
    132          #endif
    133            if (data->gui.state != 2)
   \   00000010   0C00D4E5           LDRB     R0,[R4, #+12]
   \   00000014   020050E3           CMP      R0,#+2
    134              return;
    135            data->gui.state = 1;
   \   00000018   0100A003           MOVEQ    R0,#+1
   \   0000001C   0C00C405           STRBEQ   R0,[R4, #+12]
    136          }
   \   00000020   1080BDE8           POP      {R4,PC}          ;; return
    137          
    138          //******************************************************************************

   \                                 In segment CODE, align 4, keep-with-next
    139          static int OnKey(MAIN_GUI *data, GUI_MSG *msg)
    140          { 
   \                     OnKey:
   \   00000000   00402DE9           PUSH     {LR}
    141            if (msg->gbsmsg->msg==KEY_DOWN)
   \   00000004   040091E5           LDR      R0,[R1, #+4]
   \   00000008   9320A0E3           MOV      R2,#+147
   \   0000000C   041090E5           LDR      R1,[R0, #+4]
   \   00000010   402F82E3           ORR      R2,R2,#0x100
   \   00000014   020051E1           CMP      R1,R2
   \   00000018   0500001A           BNE      ??OnKey_0
    142            {
    143              switch(msg->gbsmsg->submess)
   \   0000001C   080090E5           LDR      R0,[R0, #+8]
   \   00000020   040050E2           SUBS     R0,R0,#+4
   \   00000024   0500000A           BEQ      ??OnKey_1
   \   00000028   2C0050E2           SUBS     R0,R0,#+44
   \   0000002C   0000001A           BNE      ??OnKey_0
    144              {
    145              case '0':
    146                SMART_REDRAW();
   \   00000030   ........           BL       SMART_REDRAW
    147                break;
    148                
    149              case '5':
    150              break;
    151              
    152              case '6':
    153               // CreateAccessDialog(NULL);
    154                break;
    155          
    156              case GREEN_BUTTON:
    157                break;
    158          
    159              case LEFT_SOFT:
    160                break;
    161          
    162              case RIGHT_SOFT:
    163                return (1);
    164              }
    165            }
    166            SMART_REDRAW();
   \                     ??OnKey_0:
   \   00000034   ........           BL       SMART_REDRAW
    167            return(0);
   \   00000038   0000A0E3           MOV      R0,#+0
   \   0000003C   0080BDE8           POP      {PC}             ;; return
   \                     ??OnKey_1:
   \   00000040   0100A0E3           MOV      R0,#+1
   \   00000044   0080BDE8           POP      {PC}
    168          }
    169          
    170          //******************************************************************************
    171          extern void kill_data(void *p, void (*func_p)(void *));

   \                                 In segment CODE, align 4, keep-with-next
    172          int method8(void){return(0);}
   \                     method8:
   \   00000000   ........           B        ?Subroutine10

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine10:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
    173          int method9(void){return(0);}
   \                     method9:
   \   00000000                      REQUIRE ?Subroutine10
   \   00000000                      ;; // Fall through to label ?Subroutine10
    174          

   \                                 In segment DATA_C, align 4, align-sorted
    175          const void * const gui_methods[11]={
    176            (void *)OnRedraw,
    177            (void *)onCreate,
    178            (void *)onClose,
    179            (void *)onFocus,
    180            (void *)onUnfocus,
    181            (void *)OnKey,
    182            0,
    183            (void *)kill_data,
    184            (void *)method8,
    185            (void *)method9,
    186            0
    187          };
    188          
    189          static const RECT Canvas={0,0,0,0};
   \                     Canvas:
   \   00000000   000000000000       DC16 0, 0, 0, 0
   \              0000        
   \                     gui_methods:
   \   00000008   ............       DC32 OnRedraw, onCreate, onClose, onFocus, onUnfocus, OnKey, 0H
   \              ............
   \              ............
   \              ............
   \              00000000    
   \   00000024   ............       DC32 kill_data, method8, method9, 0H
   \              ............
   \              00000000    
    190          

   \                                 In segment CODE, align 4, keep-with-next
    191          int CreateDebugGUI()
    192          {
   \                     CreateDebugGUI:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    193            MAIN_GUI *gui = malloc(sizeof(MAIN_GUI));
   \   00000004   3800A0E3           MOV      R0,#+56
   \   00000008   140000EF           SWI      +20
   \   0000000C   0040A0E1           MOV      R4,R0
    194            zeromem(gui, sizeof(MAIN_GUI));
   \   00000010   3810A0E3           MOV      R1,#+56
   \   00000014   1D0100EF           SWI      +285
    195            patch_rect((RECT*)&Canvas, 0, YDISP, ScreenW()-1, ScreenH()-1);
   \   00000018   898100EF           SWI      +33161
   \   0000001C   0050A0E1           MOV      R5,R0
   \   00000020   888100EF           SWI      +33160
   \   00000024   48309FE5           LDR      R3,??CreateDebugGUI_0  ;; Canvas
   \   00000028   011045E2           SUB      R1,R5,#+1
   \   0000002C   010040E2           SUB      R0,R0,#+1
   \   00000030   0020A0E3           MOV      R2,#+0
   \   00000034   B020C3E1           STRH     R2,[R3, #+0]
   \   00000038   1850A0E3           MOV      R5,#+24
   \   0000003C   B250C3E1           STRH     R5,[R3, #+2]
   \   00000040   B400C3E1           STRH     R0,[R3, #+4]
   \   00000044   B610C3E1           STRH     R1,[R3, #+6]
    196            gui->gui.canvas = (void *)(&Canvas);
   \   00000048   003084E5           STR      R3,[R4, #+0]
    197            gui->gui.flag30 = 0;
   \   0000004C   302084E5           STR      R2,[R4, #+48]
    198            gui->gui.methods = (void *)gui_methods;
   \   00000050   080083E2           ADD      R0,R3,#+8
   \   00000054   040084E5           STR      R0,[R4, #+4]
    199            gui->gui.item_ll.data_mfree = (void (*)(void *))mfree_adr();
   \   00000058   158000EF           SWI      +32789
   \   0000005C   200084E5           STR      R0,[R4, #+32]
    200            return (gui_id = CreateGUI(gui));
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   370100EF           SWI      +311
   \   00000068   ........           LDR      R1,??DataTable2  ;; gui_id
   \   0000006C   000081E5           STR      R0,[R1, #+0]
   \   00000070   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??CreateDebugGUI_0:
   \   00000074   ........           DC32     Canvas
    201          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     gui_id
    202          

   Maximum stack usage in bytes:

     Function       CSTACK
     --------       ------
     CreateDebugGUI    12
     OnKey              4
     OnRedraw          72
     SMART_REDRAW       8
     method8            0
     method9            0
     onClose            8
     onCreate           8
     onFocus            8
     onUnfocus          8


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     logmsg          256
     percent_t       120
     gui_id            4
     SMART_REDRAW     52
     OnRedraw        508
     onCreate         32
     onClose          32
     onFocus          36
     onUnfocus        36
     OnKey            72
     method8           4
     ?Subroutine10     8
     method9           0
     Canvas           52
     CreateDebugGUI  120
     ??DataTable2      4
      Others          64

 
 956 bytes in segment CODE
 172 bytes in segment DATA_C
 260 bytes in segment DATA_Z
  12 bytes in segment INITTAB
 
 904 bytes of CODE  memory (+ 64 bytes shared)
 172 bytes of CONST memory
 260 bytes of DATA  memory

Errors: none
Warnings: 1
