##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    16/Feb/2023  22:41:18 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \string_util.c                                       #
#    Command line    =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \string_util.c -D NEWSGOLD -D ELKA -D DEBUG -lCN     #
#                       D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \Release_ELKA\List\ -la D:\Users\alfinant\Documents\ #
#                       Siemens\Dev\IAR\VK.ELF_C\Release_ELKA\List\ -o       #
#                       D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \Release_ELKA\Obj\ -z9 --cpu_mode arm --endian       #
#                       little --cpu ARM926EJ-S --stack_align 4 --interwork  #
#                       --diag_suppress Pe301 -e --fpu None --dlib_config    #
#                       D:\Users\alfinant\Documents\Siemens\IAR\ARM\LIB\dl5t #
#                       painl8n.h -I D:\Users\alfinant\Documents\Siemens\IAR #
#                       \ARM\INC\ --inline_threshold=2                       #
#    List file       =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \Release_ELKA\List\string_util.lst                   #
#    Object file     =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \Release_ELKA\Obj\string_util.r79                    #
#                                                                            #
#                                                                            #
##############################################################################

D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C\string_util.c
      1          #include <siemens\swilib.h>
      2          #include "string_util.h"
      3          
      4          /////////////////////////////////////////// Разный стафф для замены спецсимволов
      5          
      6          // Структура, описывающая, что на что менять
      7          typedef struct
      8          {
      9            char mask[7];
     10            char replace;
     11          }REPL_ARRAY;
     12          
     13          // Сами замены и их количество

   \                                 In segment DATA_C, align 4, align-sorted
     14          const int Repl_chars_count = 6;
   \                     Repl_chars_count:
   \   00000000   06000000           DC32 6

   \                                 In segment DATA_I, align 4, align-sorted
     15          REPL_ARRAY Repl_chars[] = {"&apos;\0",0x27,
   \                     Repl_chars:
   \   00000000                      DS8 48
   \   00000030                      REQUIRE `?<Initializer for Repl_chars>`
     16                                     "&#39;\0\0",0x27,//added 25.09.2017 by alfinant
     17                                     "&quot;\0",'"',
     18                                     "&lt;\0\0\0", '<',
     19                                     "&gt;\0\0\0", '>',
     20                                     "&amp;\0\0", '&',
     21          };
     22          
     23          /*
     24           * UTF8 -> UTF16
     25           */

   \                                 In segment CODE, align 4, keep-with-next
     26          int utf8_2unicode(const char **res, const char *str)
     27          {
   \                     utf8_2unicode:
   \   00000000   11002DE9           PUSH     {R0,R4}
     28            int zz=0;
   \   00000004   0030A0E3           MOV      R3,#+0
   \   00000008   00308DE5           STR      R3,[SP, #+0]
     29            int c=*str++;
   \   0000000C   ........           LDRB     R2,[R1], #+1
     30            char *s=(char *)&zz;
     31            *res=NULL;
   \   00000010   003080E5           STR      R3,[R0, #+0]
     32            if ((c >> 7) == 0x0)
   \   00000014   C233B0E1           ASRS     R3,R2,#+7
     33            {
     34              zz=c;
   \   00000018   00208D05           STREQ    R2,[SP, #+0]
   \   0000001C   1E00000A           BEQ      ??utf8_2unicode_0
     35            }
     36            else if ((c >> 5) == 0x6)
   \   00000020   C232A0E1           ASR      R3,R2,#+5
   \   00000024   060053E3           CMP      R3,#+6
   \   00000028   0900001A           BNE      ??utf8_2unicode_1
     37            {
     38              s[1] = ((c & 0x1f) >> 2);
   \   0000002C   1FC002E2           AND      R12,R2,#0x1F
   \   00000030   4CC1A0E1           ASR      R12,R12,#+2
   \   00000034   01C0CDE5           STRB     R12,[SP, #+1]
     39              s[0] = c << 6;
   \   00000038   0223A0E1           LSL      R2,R2,#+6
   \   0000003C   0020CDE5           STRB     R2,[SP, #+0]
     40              c = *str++;
   \   00000040   ........           LDRB     R2,[R1], #+1
     41              s[0] |= (c & 0x3f);
   \   00000044   00C0DDE5           LDRB     R12,[SP, #+0]
   \   00000048   3F2002E2           AND      R2,R2,#0x3F
   \   0000004C   0C2082E1           ORR      R2,R2,R12
   \   00000050   100000EA           B        ??utf8_2unicode_2
     42            }
     43            else if ((c >> 4) == 0xe)
   \                     ??utf8_2unicode_1:
   \   00000054   4232A0E1           ASR      R3,R2,#+4
   \   00000058   0E0053E3           CMP      R3,#+14
   \   0000005C   0E00001A           BNE      ??utf8_2unicode_0
     44            {
     45              s[1] = c << 4;
   \   00000060   0222A0E1           LSL      R2,R2,#+4
   \   00000064   0120CDE5           STRB     R2,[SP, #+1]
     46              c = *str++;
   \   00000068   ........           LDRB     R2,[R1], #+1
     47              s[1] |= ((c >> 2) & 0xf);
   \   0000006C   01C0DDE5           LDRB     R12,[SP, #+1]
   \   00000070   4241A0E1           ASR      R4,R2,#+2
   \   00000074   0F4004E2           AND      R4,R4,#0xF
   \   00000078   0C4084E1           ORR      R4,R4,R12
   \   0000007C   0140CDE5           STRB     R4,[SP, #+1]
     48              s[0] = c << 6;
   \   00000080   0223A0E1           LSL      R2,R2,#+6
   \   00000084   0020CDE5           STRB     R2,[SP, #+0]
     49              c = *str++;
   \   00000088   ........           LDRB     R2,[R1], #+1
     50              s[0] |= (c & 0x3f);
   \   0000008C   0040DDE5           LDRB     R4,[SP, #+0]
   \   00000090   3F2002E2           AND      R2,R2,#0x3F
   \   00000094   042082E1           ORR      R2,R2,R4
   \                     ??utf8_2unicode_2:
   \   00000098   0020CDE5           STRB     R2,[SP, #+0]
     51            }
     52            *res=str;
   \                     ??utf8_2unicode_0:
   \   0000009C   001080E5           STR      R1,[R0, #+0]
     53            return zz;
   \   000000A0   00009DE5           LDR      R0,[SP, #+0]
   \   000000A4   1200BDE8           POP      {R1,R4}
   \   000000A8   1EFF2FE1           BX       LR               ;; return
     54          }
     55          
     56          /*
     57              Получить спецсимвол по его маске
     58          IN: mask_begin - строка символов
     59              out_ofs - число, к которому прибавится длина обработанной последовательности
     60          OUT: out_ofs - смещение в строке, откуда начинаются необработанные данные
     61              <return> - спецсимвол
     62          */

   \                                 In segment CODE, align 4, keep-with-next
     63          char GetSpecialSym(char *mask_begin, int *out_ofs)
     64          {
   \                     GetSpecialSym:
   \   00000000   F7412DE9           PUSH     {R0-R2,R4-R8,LR}
   \   00000004   0050A0E1           MOV      R5,R0
     65            int i=0;
     66            int replen;
     67            char rep_ex[10];
     68            if(*mask_begin!='&')return *(mask_begin);
   \   00000008   0000D5E5           LDRB     R0,[R5, #+0]
   \   0000000C   0140A0E1           MOV      R4,R1
   \   00000010   260050E3           CMP      R0,#+38
   \   00000014   0100000A           BEQ      ??GetSpecialSym_0
   \                     ??GetSpecialSym_1:
   \   00000018   0000D5E5           LDRB     R0,[R5, #+0]
   \   0000001C   FE81BDE8           POP      {R1-R8,PC}
     69            for(i=0;i<Repl_chars_count;i++)
   \                     ??GetSpecialSym_0:
   \   00000020   0060A0E3           MOV      R6,#+0
   \   00000024   020000EA           B        ??GetSpecialSym_2
   \                     ??GetSpecialSym_3:
   \   00000028   016086E2           ADD      R6,R6,#+1
   \   0000002C   060056E3           CMP      R6,#+6
   \   00000030   F8FFFFAA           BGE      ??GetSpecialSym_1
     70            {
     71              replen = strlen(Repl_chars[i].mask);  // Определяем длину очередной маски
   \                     ??GetSpecialSym_2:
   \   00000034   ........           LDR      R0,??DataTable2  ;; Repl_chars
   \   00000038   867180E0           ADD      R7,R0,R6, LSL #+3
   \   0000003C   0700A0E1           MOV      R0,R7
   \   00000040   1B0000EF           SWI      +27
   \   00000044   0080A0E1           MOV      R8,R0
     72              zeromem(rep_ex,10);
   \   00000048   0A10A0E3           MOV      R1,#+10
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   1D0100EF           SWI      +285
     73              strncpy(rep_ex,mask_begin,replen);    // Копируем строку такой длины с текущей позиции
   \   00000054   0820A0E1           MOV      R2,R8
   \   00000058   0510A0E1           MOV      R1,R5
   \   0000005C   0D00A0E1           MOV      R0,SP
   \   00000060   160100EF           SWI      +278
     74              if(!strcmp(rep_ex,Repl_chars[i].mask))// Если совпало с очередной маской
   \   00000064   0710A0E1           MOV      R1,R7
   \   00000068   0D00A0E1           MOV      R0,SP
   \   0000006C   190000EF           SWI      +25
   \   00000070   000050E3           CMP      R0,#+0
   \   00000074   EBFFFF1A           BNE      ??GetSpecialSym_3
     75              {
     76                *out_ofs+=replen-1;                   // Увеличиваем обработанную длину на длину маски
   \   00000078   000094E5           LDR      R0,[R4, #+0]
   \   0000007C   011048E2           SUB      R1,R8,#+1
   \   00000080   000081E0           ADD      R0,R1,R0
   \   00000084   000084E5           STR      R0,[R4, #+0]
     77                return Repl_chars[i].replace;       // Возвращаем символ для замены
   \   00000088   0700D7E5           LDRB     R0,[R7, #+7]
   \   0000008C   FE81BDE8           POP      {R1-R8,PC}       ;; return
     78              }
     79            }
     80            return *(mask_begin);       //  Масок не нашлось, возвращаем как есть
     81          }
     82          

   \                                 In segment CODE, align 4, keep-with-next
     83          int GetSpecialSymMaskN(char sym)
     84          {
     85            for(int i=0; i<Repl_chars_count; i++)
   \                     GetSpecialSymMaskN:
   \   00000000   0010A0E3           MOV      R1,#+0
     86              if(Repl_chars[i].replace==sym)
   \                     ??GetSpecialSymMaskN_0:
   \   00000004   ........           LDR      R2,??DataTable2  ;; Repl_chars
   \   00000008   812182E0           ADD      R2,R2,R1, LSL #+3
   \   0000000C   0720D2E5           LDRB     R2,[R2, #+7]
   \   00000010   000052E1           CMP      R2,R0
     87                return i;
   \   00000014   0100A001           MOVEQ    R0,R1
   \   00000018   1EFF2F01           BXEQ     LR
   \   0000001C   011081E2           ADD      R1,R1,#+1
   \   00000020   060051E3           CMP      R1,#+6
   \   00000024   F6FFFFBA           BLT      ??GetSpecialSymMaskN_0
     88            return -1;
   \   00000028   0000E0E3           MVN      R0,#+0
   \   0000002C   1EFF2FE1           BX       LR               ;; return
     89          }
     90          

   \                                 In segment CODE, align 4, keep-with-next
     91          char * Replace_Special_Syms(char * unrep_str)
     92          {
   \                     Replace_Special_Syms:
   \   00000000   F1412DE9           PUSH     {R0,R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     93            unsigned int unrep_len=strlen(unrep_str);
   \   00000008   1B0000EF           SWI      +27
   \   0000000C   0050A0E1           MOV      R5,R0
     94            char *rep_buffer = malloc(unrep_len+1);
   \   00000010   017085E2           ADD      R7,R5,#+1
   \   00000014   0700A0E1           MOV      R0,R7
   \   00000018   140000EF           SWI      +20
   \   0000001C   0060A0E1           MOV      R6,R0
     95            zeromem(rep_buffer, unrep_len+1);
   \   00000020   0710A0E1           MOV      R1,R7
   \   00000024   1D0100EF           SWI      +285
     96            char tmp=0;
     97            unsigned int rpl_c=0;
   \   00000028   0070A0E3           MOV      R7,#+0
     98            for(int j=0;j<unrep_len;j++)
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   060000EA           B        ??Replace_Special_Syms_0
     99            {
    100              tmp = *(unrep_str+j);
    101              tmp = GetSpecialSym(unrep_str+j,&j);
    102              //ShowMSG(1,(int)"fnd");
    103              rep_buffer[rpl_c++]=tmp;
   \                     ??Replace_Special_Syms_1:
   \   00000034   0D10A0E1           MOV      R1,SP
   \   00000038   040080E0           ADD      R0,R0,R4
   \   0000003C   ........           BL       GetSpecialSym
   \   00000040   0600C7E7           STRB     R0,[R7, +R6]
    104            }
   \   00000044   00109DE5           LDR      R1,[SP, #+0]
   \   00000048   0870A0E1           MOV      R7,R8
   \   0000004C   011081E2           ADD      R1,R1,#+1
   \                     ??Replace_Special_Syms_0:
   \   00000050   00108DE5           STR      R1,[SP, #+0]
   \   00000054   00009DE5           LDR      R0,[SP, #+0]
   \   00000058   018087E2           ADD      R8,R7,#+1
   \   0000005C   050050E1           CMP      R0,R5
   \   00000060   F3FFFF3A           BCC      ??Replace_Special_Syms_1
    105            rep_buffer = realloc(rep_buffer,rpl_c+1);
   \   00000064   0810A0E1           MOV      R1,R8
   \   00000068   0600A0E1           MOV      R0,R6
   \   0000006C   BA0000EF           SWI      +186
    106            return rep_buffer;
   \   00000070   F281BDE8           POP      {R1,R4-R8,PC}    ;; return
    107          }
    108          

   \                                 In segment CODE, align 4, keep-with-next
    109          char * Mask_Special_Syms(const char * unrep_str)
    110          {
   \                     Mask_Special_Syms:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    111            unsigned int unrep_len = strlen(unrep_str);
    112            unsigned int rep_buffer_size = unrep_len*2+16;
    113            char *rep_buffer = malloc(rep_buffer_size);
   \   00000008   0060A0E3           MOV      R6,#+0
    114            unsigned int c_pos = 0;
    115            for(int i=0; i<unrep_len; i++)
   \   0000000C   0090A0E3           MOV      R9,#+0
   \   00000010   1B0000EF           SWI      +27
   \   00000014   0050A0E1           MOV      R5,R0
   \   00000018   1000A0E3           MOV      R0,#+16
   \   0000001C   857080E0           ADD      R7,R0,R5, LSL #+1
   \   00000020   0700A0E1           MOV      R0,R7
   \   00000024   140000EF           SWI      +20
   \   00000028   0080A0E1           MOV      R8,R0
   \   0000002C   0B0000EA           B        ??Mask_Special_Syms_0
    116            {
    117              int n=GetSpecialSymMaskN(unrep_str[i]);
    118              if(n!=-1)
    119              {
    120                strcpy(rep_buffer+c_pos, Repl_chars[n].mask);
    121                c_pos += strlen(Repl_chars[n].mask);
    122              }
    123              else
    124              {
    125                rep_buffer[c_pos++] = unrep_str[i];
   \                     ??Mask_Special_Syms_1:
   \   00000030   0400D9E7           LDRB     R0,[R9, +R4]
   \   00000034   0B60A0E1           MOV      R6,R11
   \   00000038   0000CAE5           STRB     R0,[R10, #+0]
    126              }
    127              if (c_pos+10>rep_buffer_size)
   \                     ??Mask_Special_Syms_2:
   \   0000003C   0A0086E2           ADD      R0,R6,#+10
   \   00000040   000057E1           CMP      R7,R0
   \   00000044   0400002A           BCS      ??Mask_Special_Syms_3
    128              {
    129                rep_buffer_size *= 2;
   \   00000048   8770A0E1           LSL      R7,R7,#+1
    130                rep_buffer = realloc(rep_buffer, rep_buffer_size);
   \   0000004C   0710A0E1           MOV      R1,R7
   \   00000050   0800A0E1           MOV      R0,R8
   \   00000054   BA0000EF           SWI      +186
   \   00000058   0080A0E1           MOV      R8,R0
    131              }
   \                     ??Mask_Special_Syms_3:
   \   0000005C   019089E2           ADD      R9,R9,#+1
   \                     ??Mask_Special_Syms_0:
   \   00000060   08A086E0           ADD      R10,R6,R8
   \   00000064   01B086E2           ADD      R11,R6,#+1
   \   00000068   050059E1           CMP      R9,R5
   \   0000006C   0C00002A           BCS      ??Mask_Special_Syms_4
   \   00000070   0400D9E7           LDRB     R0,[R9, +R4]
   \   00000074   ........           BL       GetSpecialSymMaskN
   \   00000078   010070E3           CMN      R0,#+1
   \   0000007C   EBFFFF0A           BEQ      ??Mask_Special_Syms_1
   \   00000080   ........           LDR      R1,??DataTable2  ;; Repl_chars
   \   00000084   80B181E0           ADD      R11,R1,R0, LSL #+3
   \   00000088   0B10A0E1           MOV      R1,R11
   \   0000008C   0A00A0E1           MOV      R0,R10
   \   00000090   1A0000EF           SWI      +26
   \   00000094   0B00A0E1           MOV      R0,R11
   \   00000098   1B0000EF           SWI      +27
   \   0000009C   066080E0           ADD      R6,R0,R6
   \   000000A0   E5FFFFEA           B        ??Mask_Special_Syms_2
    132            }
    133            rep_buffer[c_pos] = '\0';
   \                     ??Mask_Special_Syms_4:
   \   000000A4   0000A0E3           MOV      R0,#+0
   \   000000A8   0000CAE5           STRB     R0,[R10, #+0]
    134            rep_buffer = realloc(rep_buffer, c_pos+1);
   \   000000AC   0B10A0E1           MOV      R1,R11
   \   000000B0   0800A0E1           MOV      R0,R8
   \   000000B4   ........           B        ?Subroutine30
    135            return rep_buffer;
    136          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine30:
   \   00000000   BA0000EF           SWI      +186
   \   00000004   F08FBDE8           POP      {R4-R11,PC}      ;; return
    137          
    138          /* Вернуть значение параметра по имени параметра из строки вида:
    139           nonce="2444323444",qop="auth",charset=utf-8,algorithm=md5-sess
    140          
    141          IN: ch - строка
    142              req - имя требуемого параметра
    143              cut_quotes - обрезать ли кавычки, если параметр в кавычках
    144          OUT: Искомое значение; нужно освободить память!
    145          */

   \                                 In segment CODE, align 4, keep-with-next
    146          char *Get_Param_Value(char *ch, char *req, char cut_quotes)
    147          {
   \                     Get_Param_Value:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0050A0E1           MOV      R5,R0
   \   00000008   0140A0E1           MOV      R4,R1
   \   0000000C   0260A0E1           MOV      R6,R2
    148          //  char ch[]="nonce=\"2444323444\",qop=\"auth\",charset=utf-8,algorithm=md5-sess";
    149          //  char req[]="qop";
    150            char *n_displace = strstr(ch, req);     // начало строки с именем параметра
   \   00000010   180100EF           SWI      +280
   \   00000014   0070A0E1           MOV      R7,R0
    151            char *eq=n_displace + strlen(req);
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   1B0000EF           SWI      +27
   \   00000020   074080E0           ADD      R4,R0,R7
    152            if(!(eq[0]=='='))return NULL;
   \   00000024   ........           LDRB     R0,[R4], #+1
   \   00000028   3D0050E3           CMP      R0,#+61
   \   0000002C   0000A013           MOVNE    R0,#+0
   \   00000030   F080BD18           POPNE    {R4-R7,PC}
    153            eq+=1;
    154            char *zpt= strchr(n_displace,',');
   \   00000034   2C10A0E3           MOV      R1,#+44
   \   00000038   0700A0E1           MOV      R0,R7
   \   0000003C   180000EF           SWI      +24
    155            if(!zpt)zpt=ch+strlen(ch);
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   0200001A           BNE      ??Get_Param_Value_0
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   1B0000EF           SWI      +27
   \   00000050   050080E0           ADD      R0,R0,R5
    156            int len;
    157            char *val;
    158            if(cut_quotes)
   \                     ??Get_Param_Value_0:
   \   00000054   045040E0           SUB      R5,R0,R4
   \   00000058   000056E3           CMP      R6,#+0
   \   0000005C   0A00000A           BEQ      ??Get_Param_Value_1
    159            {
    160              len=zpt-eq-2;
   \   00000060   025045E2           SUB      R5,R5,#+2
    161              val=malloc(len+1);
   \   00000064   010085E2           ADD      R0,R5,#+1
   \   00000068   140000EF           SWI      +20
    162              for(int i=0;i<len;i++) val[i]=*(eq+i+1);
   \   0000006C   0010A0E3           MOV      R1,#+0
   \                     ??Get_Param_Value_2:
   \   00000070   050051E1           CMP      R1,R5
   \   00000074   0D0000AA           BGE      ??Get_Param_Value_3
   \   00000078   042081E0           ADD      R2,R1,R4
   \   0000007C   0120D2E5           LDRB     R2,[R2, #+1]
   \   00000080   0020C1E7           STRB     R2,[R1, +R0]
   \   00000084   011081E2           ADD      R1,R1,#+1
   \   00000088   F8FFFFEA           B        ??Get_Param_Value_2
    163            }
    164            else
    165            {
    166              len=zpt-eq;
    167              val=malloc(len+1);
   \                     ??Get_Param_Value_1:
   \   0000008C   010085E2           ADD      R0,R5,#+1
   \   00000090   140000EF           SWI      +20
    168              for(int i=0;i<len;i++) val[i]=*(eq+i);
   \   00000094   0010A0E3           MOV      R1,#+0
   \   00000098   020000EA           B        ??Get_Param_Value_4
   \                     ??Get_Param_Value_5:
   \   0000009C   0420D1E7           LDRB     R2,[R1, +R4]
   \   000000A0   0020C1E7           STRB     R2,[R1, +R0]
   \   000000A4   011081E2           ADD      R1,R1,#+1
   \                     ??Get_Param_Value_4:
   \   000000A8   050051E1           CMP      R1,R5
   \   000000AC   FAFFFFBA           BLT      ??Get_Param_Value_5
    169            }
    170            val[len]=0x0;
   \                     ??Get_Param_Value_3:
   \   000000B0   0010A0E3           MOV      R1,#+0
   \   000000B4   0010C5E7           STRB     R1,[R5, +R0]
    171            return val;
   \   000000B8   F080BDE8           POP      {R4-R7,PC}       ;; return
    172          }
    173          
    174          
    175          /*
    176            Преобразование буфера данных из кодировки UTF-8 в ANSI
    177          IN:
    178            - tmp_out: куда положить результат. Буфер уже должен существовать
    179                       и в нем должно быть достаточно места
    180            - UTF8_str: откуда брать данные для преобразования
    181            - size: сколько длина буфера для преобразования (UTF8_str)
    182            - fact - куда положить итоговый размер данных в буфере
    183          
    184          OUT:  результирующий буфер.
    185          */

   \                                 In segment CODE, align 4, keep-with-next
    186          void* convUTF8_to_ANSI(char* tmp_out, char *UTF8_str, unsigned int size, int* fact)
    187          {
   \                     convUTF8_to_ANSI:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0350A0E1           MOV      R5,R3
    188            // Рассматривая строку UTF8 как обычную, определяем её длину
    189            if(!UTF8_str)return NULL;
   \   0000000C   000051E3           CMP      R1,#+0
   \   00000010   0100001A           BNE      ??convUTF8_to_ANSI_0
   \                     ??convUTF8_to_ANSI_1:
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   F080BDE8           POP      {R4-R7,PC}
    190            int st_len = size;
    191          
    192            // Выделяем память - на всякий случай столько же. Это предельный случай,
    193            // когда весь поступивший буфер - на русском языке. Реально будет, скорее всего,
    194            // занято меньше, посему в конце сделаем realloc
    195            int lastchar = 0;
   \                     ??convUTF8_to_ANSI_0:
   \   0000001C   0060A0E3           MOV      R6,#+0
    196            int dummy;
    197            char chr, chr2, chr3;
    198            for(int i=0;i<st_len;i++)
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   040000EA           B        ??convUTF8_to_ANSI_2
    199            {
    200            chr = (*(UTF8_str+i));
    201          
    202          	if (chr<0x80)
    203                  {
    204                    *(tmp_out+lastchar)=chr;
    205                    lastchar++;
    206                    goto L_END_CYCLE;
    207                  }
    208          	if (chr<0xc0)
    209                  {
    210                    ShowMSG(1,(int)"Bad UTF-8 Encoding encountered (chr<0xC0)");
    211                    mfree(tmp_out);
    212                    return NULL;
    213                  }
    214          	
    215                  chr2 = *(UTF8_str+i+1);
    216          
    217                  if (chr2<0x80)
    218                  {
    219                    ShowMSG(1,(int)"Bad UTF-8 Encoding encountered (chr2<0x80)");
    220                    mfree(tmp_out);
    221                    return NULL;
    222                  }
    223          	
    224          	if (chr<0xe0) {
    225          	    // cx, dx
    226          	    char test1 = (chr & 0x1f)<<6;
    227                      char test2 = chr2 & 0x3f;
    228                      *(tmp_out+lastchar)= test1 | test2 + 127 + 0x31;
    229                      i++;
    230                      lastchar++;
    231                      goto L_END_CYCLE;
    232          	}
    233          	if (chr<0xf0) {
    234          	    // cx, dx
    235          	    chr3= *(UTF8_str+i+2);
    236          
    237          	    if (chr3<0x80)
    238                      {
    239                        ShowMSG(1,(int)"Bad UTF-8 Encoding encountered");
    240                        mfree(tmp_out);
    241                        return NULL;
    242                      }
    243          	    else
    244                      {
    245                        *(tmp_out+lastchar) =  ((chr & 0x0f)<<12) | ((chr2 &0x3f) <<6) | (chr3 &0x3f);
   \                     ??convUTF8_to_ANSI_3:
   \   00000028   3F3003E2           AND      R3,R3,#0x3F
   \   0000002C   0E3383E1           ORR      R3,R3,LR, LSL #+6
   \   00000030   0430C6E7           STRB     R3,[R6, +R4]
    246                        i=i+2;
   \   00000034   020080E2           ADD      R0,R0,#+2
    247                      }
    248          	}
    249          
    250            L_END_CYCLE:
    251              dummy++;
   \                     ??convUTF8_to_ANSI_4:
   \   00000038   010080E2           ADD      R0,R0,#+1
   \                     ??convUTF8_to_ANSI_2:
   \   0000003C   020050E1           CMP      R0,R2
   \   00000040   230000AA           BGE      ??convUTF8_to_ANSI_5
   \   00000044   01C0D0E7           LDRB     R12,[R0, +R1]
   \   00000048   013086E2           ADD      R3,R6,#+1
   \   0000004C   80005CE3           CMP      R12,#+128
   \   00000050   0200002A           BCS      ??convUTF8_to_ANSI_6
   \   00000054   04C0C6E7           STRB     R12,[R6, +R4]
   \                     ??convUTF8_to_ANSI_7:
   \   00000058   0360A0E1           MOV      R6,R3
   \   0000005C   F5FFFFEA           B        ??convUTF8_to_ANSI_4
   \                     ??convUTF8_to_ANSI_6:
   \   00000060   C0005CE3           CMP      R12,#+192
   \   00000064   0500002A           BCS      ??convUTF8_to_ANSI_8
   \   00000068   ........           LDR      R1,??DataTable6  ;; `?<Constant "Bad UTF-8 Encoding en...">`
   \                     ??convUTF8_to_ANSI_9:
   \   0000006C   0100A0E3           MOV      R0,#+1
   \   00000070   480100EF           SWI      +328
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   150000EF           SWI      +21
   \   0000007C   E4FFFFEA           B        ??convUTF8_to_ANSI_1
   \                     ??convUTF8_to_ANSI_8:
   \   00000080   01E080E0           ADD      LR,R0,R1
   \   00000084   01E0DEE5           LDRB     LR,[LR, #+1]
   \   00000088   80005EE3           CMP      LR,#+128
   \   0000008C   ........           LDRCC    R1,??DataTable7  ;; `?<Constant "Bad UTF-8 Encoding en...">` + 44
   \   00000090   F5FFFF3A           BCC      ??convUTF8_to_ANSI_9
   \   00000094   E0005CE3           CMP      R12,#+224
   \   00000098   0500002A           BCS      ??convUTF8_to_ANSI_10
   \   0000009C   3F700EE2           AND      R7,LR,#0x3F
   \   000000A0   B07087E2           ADD      R7,R7,#+176
   \   000000A4   0C7387E1           ORR      R7,R7,R12, LSL #+6
   \   000000A8   0470C6E7           STRB     R7,[R6, +R4]
   \   000000AC   010080E2           ADD      R0,R0,#+1
   \   000000B0   E8FFFFEA           B        ??convUTF8_to_ANSI_7
   \                     ??convUTF8_to_ANSI_10:
   \   000000B4   F0005CE3           CMP      R12,#+240
   \   000000B8   DEFFFF2A           BCS      ??convUTF8_to_ANSI_4
   \   000000BC   013080E0           ADD      R3,R0,R1
   \   000000C0   0230D3E5           LDRB     R3,[R3, #+2]
   \   000000C4   800053E3           CMP      R3,#+128
   \   000000C8   D6FFFF2A           BCS      ??convUTF8_to_ANSI_3
   \   000000CC   ........           LDR      R1,??DataTable8  ;; `?<Constant "Bad UTF-8 Encoding en...">` + 88
   \   000000D0   E5FFFFEA           B        ??convUTF8_to_ANSI_9
    252            }
    253            tmp_out = realloc(tmp_out,lastchar);
   \                     ??convUTF8_to_ANSI_5:
   \   000000D4   0610A0E1           MOV      R1,R6
   \   000000D8   0400A0E1           MOV      R0,R4
   \   000000DC   BA0000EF           SWI      +186
    254            *fact = lastchar;
   \   000000E0   006085E5           STR      R6,[R5, #+0]
    255            return tmp_out;
   \   000000E4   F080BDE8           POP      {R4-R7,PC}       ;; return
    256          }
    257          
    258          // Преобразование в нижний регистр

   \                                 In segment CODE, align 4, keep-with-next
    259          char* str2lower(char *st)
    260          {
   \                     str2lower:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    261            unsigned int len = strlen(st);
   \   00000008   1B0000EF           SWI      +27
    262            for(int i=0;i<len;i++)
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   090000EA           B        ??str2lower_0
    263            {
    264              char sym = *(st+i);
    265              if(sym<0x80)
    266              {
    267                if(st[i]>='A' && st[i]<='Z') st[i] += ('a' - 'A');
    268                continue;
    269              }
    270              if(sym<0xe0)
   \                     ??str2lower_1:
   \   00000014   E00052E3           CMP      R2,#+224
   \   00000018   0600002A           BCS      ??str2lower_2
    271              {
    272                i++;
   \   0000001C   011081E2           ADD      R1,R1,#+1
    273                if(st[i] >= 0x90 && st[i]<=0xAF) st[i]+= (0xB0 - 0x90);
   \   00000020   0420D1E7           LDRB     R2,[R1, +R4]
   \   00000024   900052E3           CMP      R2,#+144
   \   00000028   0200003A           BCC      ??str2lower_2
   \   0000002C   B00052E3           CMP      R2,#+176
   \                     ??str2lower_3:
   \   00000030   20208232           ADDCC    R2,R2,#+32
   \   00000034   0420C137           STRBCC   R2,[R1, +R4]
    274              }
   \                     ??str2lower_2:
   \   00000038   011081E2           ADD      R1,R1,#+1
   \                     ??str2lower_0:
   \   0000003C   000051E1           CMP      R1,R0
   \   00000040   0600002A           BCS      ??str2lower_4
   \   00000044   0420D1E7           LDRB     R2,[R1, +R4]
   \   00000048   800052E3           CMP      R2,#+128
   \   0000004C   F0FFFF2A           BCS      ??str2lower_1
   \   00000050   410052E3           CMP      R2,#+65
   \   00000054   F7FFFF3A           BCC      ??str2lower_2
   \   00000058   5B0052E3           CMP      R2,#+91
   \   0000005C   F3FFFFEA           B        ??str2lower_3
    275            }
    276            return st;
   \                     ??str2lower_4:
   \   00000060   ........           B        ?Subroutine31
    277          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine31:
   \   00000000   0400A0E1           MOV      R0,R4
   \   00000004   1080BDE8           POP      {R4,PC}          ;; return
    278          
    279          ////////////////////////////////////////////////////////////////////////////////
    280          #pragma inline

   \                                 In segment CODE, align 4, keep-with-next
    281          int tolower(int C)
    282          {
    283          //  if ((C>='A' && C<='Z')) C-='A'-'a';
    284              if(C<0x80)
   \                     tolower:
   \   00000000   201080E2           ADD      R1,R0,#+32
   \   00000004   800050E3           CMP      R0,#+128
   \   00000008   040000AA           BGE      ??tolower_0
    285              {
    286                if(C>='A' && C<='Z') C += ('a' - 'A');
   \   0000000C   410050E3           CMP      R0,#+65
   \   00000010   1EFF2FB1           BXLT     LR
   \   00000014   5B0050E3           CMP      R0,#+91
   \   00000018   0100A0B1           MOVLT    R0,R1
    287                return C;
   \   0000001C   1EFF2FE1           BX       LR               ;; return
    288              }
    289                if(C >= 0x90 && C<=0xAF) C+= (0xB0 - 0x90);
   \                     ??tolower_0:
   \   00000020   900050E3           CMP      R0,#+144
   \   00000024   1EFF2FB1           BXLT     LR
   \   00000028   B00050E3           CMP      R0,#+176
   \   0000002C   1EFF2FA1           BXGE     LR
   \   00000030   0100A0E1           MOV      R0,R1
   \   00000034   1EFF2FE1           BX       LR
    290            return(C);
    291          }
    292          
    293          
    294          // Аналог strcmp, но без чувствительности к регистру

   \                                 In segment CODE, align 4, keep-with-next
    295          int stricmp(const char *s, const char *d)
    296          {
   \                     stricmp:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    297            int cs;
    298            int ds;
    299            do
    300            {
    301              cs=tolower(*s++);
   \                     ??stricmp_0:
   \   0000000C   ........           LDRB     R0,[R4], #+1
   \   00000010   ........           _BLF     tolower,??tolower??rA
   \   00000014   0060A0E1           MOV      R6,R0
    302              ds=tolower(*d++);
   \   00000018   ........           LDRB     R0,[R5], #+1
   \   0000001C   ........           _BLF     tolower,??tolower??rA
    303              cs-=ds;
   \   00000020   001056E0           SUBS     R1,R6,R0
    304              if (cs) break;
   \   00000024   0100001A           BNE      ??stricmp_1
    305            }
    306            while(ds);
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   F6FFFF1A           BNE      ??stricmp_0
    307            return(cs);
   \                     ??stricmp_1:
   \   00000030   0100A0E1           MOV      R0,R1
   \   00000034   7080BDE8           POP      {R4-R6,PC}       ;; return
    308          }
    309          

   \                                 In segment CODE, align 4, keep-with-next
    310          int strnicmp(const char *s1, const char *s2, size_t len)
    311          {
   \                     strnicmp:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
    312          	/* Yes, Virginia, it had better be unsigned */
    313          	unsigned int c1, c2;
    314          
    315          	c1 = 0;	c2 = 0;
   \   00000010   0070A0E3           MOV      R7,#+0
   \   00000014   0080A0E3           MOV      R8,#+0
    316          	if (len) {
   \   00000018   1000000A           BEQ      ??strnicmp_0
    317          		do {
    318          			c1 = *s1; c2 = *s2;
   \                     ??strnicmp_1:
   \   0000001C   ........           LDRB     R7,[R4], #+1
   \   00000020   ........           LDRB     R8,[R5], #+1
    319          			s1++; s2++;
    320          			if (!c1)
   \   00000024   000057E3           CMP      R7,#+0
    321          				break;
    322          			if (!c2)
   \   00000028   00005813           CMPNE    R8,#+0
   \   0000002C   0B00000A           BEQ      ??strnicmp_0
    323          				break;
    324          			if (c1 == c2)
   \   00000030   080057E1           CMP      R7,R8
   \   00000034   0700000A           BEQ      ??strnicmp_2
    325          				continue;
    326          			c1 = tolower(c1);
   \   00000038   0700A0E1           MOV      R0,R7
   \   0000003C   ........           _BLF     tolower,??tolower??rA
   \   00000040   0070A0E1           MOV      R7,R0
    327          			c2 = tolower(c2);
   \   00000044   0800A0E1           MOV      R0,R8
   \   00000048   ........           _BLF     tolower,??tolower??rA
   \   0000004C   0080A0E1           MOV      R8,R0
    328          			if (c1 != c2)
   \   00000050   080057E1           CMP      R7,R8
   \   00000054   0100001A           BNE      ??strnicmp_0
    329          				break;
    330          		} while (--len);
   \                     ??strnicmp_2:
   \   00000058   016056E2           SUBS     R6,R6,#+1
   \   0000005C   EEFFFF1A           BNE      ??strnicmp_1
    331          	}
    332          	return c1 - c2;
   \                     ??strnicmp_0:
   \   00000060   080047E0           SUB      R0,R7,R8
   \   00000064   F081BDE8           POP      {R4-R8,PC}       ;; return
    333          }
    334          
    335          // Аналог strstr, но без чувствительности к регистру
    336          /*
    337           * Find the first occurrence of find in s.
    338           */

   \                                 In segment CODE, align 4, keep-with-next
    339          char *stristr(const char *s, const char *find)
    340          {
   \                     stristr:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    341              char c, sc;
    342              size_t len;
    343          
    344              if ((c = tolower((unsigned char)(*find++))) != 0) {
   \   0000000C   ........           LDRB     R0,[R5], #+1
   \   00000010   ........           _BLF     tolower,??tolower??rA
   \   00000014   FF6010E2           ANDS     R6,R0,#0xFF
   \   00000018   1000000A           BEQ      ??stristr_0
    345                  len = strlen(find);
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   1B0000EF           SWI      +27
   \   00000024   0070A0E1           MOV      R7,R0
    346                  do {
    347                      do {
    348                          if ((sc = tolower((unsigned char)(*s++))) == 0)
   \                     ??stristr_1:
   \   00000028   ........           LDRB     R0,[R4], #+1
   \   0000002C   ........           _BLF     tolower,??tolower??rA
   \   00000030   000CB0E1           MOVS     R0,R0, LSL #+24
    349                              return (NULL);
   \   00000034   0000A003           MOVEQ    R0,#+0
   \   00000038   F080BD08           POPEQ    {R4-R7,PC}
    350                      } while (sc != c);
   \   0000003C   200C56E1           CMP      R6,R0, LSR #+24
   \   00000040   F8FFFF1A           BNE      ??stristr_1
    351                  } while (strnicmp(s, find, len) != 0);
   \   00000044   0720A0E1           MOV      R2,R7
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           BL       strnicmp
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   F2FFFF1A           BNE      ??stristr_1
    352                  s--;
   \   0000005C   014044E2           SUB      R4,R4,#+1
    353              }
    354              return ((char *)s);
   \                     ??stristr_0:
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   F080BDE8           POP      {R4-R7,PC}       ;; return
    355          }
    356          ////////////////////////////////////////////////////////////////////////////////
    357          
    358          /*
    359          // Аналог strstr, но без чувствительности к регистру
    360          char *stristr(char *haystack, char *needle)
    361          {
    362            if(!haystack || !needle)return NULL;
    363            char *i_haystack = malloc(strlen(haystack)+1);
    364            char *i_needle = malloc(strlen(needle)+1);
    365            strcpy(i_haystack, haystack);
    366            strcpy(i_needle, needle);
    367            str2lower(i_haystack);
    368            str2lower(i_needle);
    369            // Сравниваем уже строки в нижнем регистре и считаем смещение
    370            char *q = strstr(i_haystack, i_needle);
    371            mfree(i_haystack);
    372            mfree(i_needle);
    373            if(!q)  // Значит, нет подстроки
    374            {
    375              return NULL;
    376            }
    377            int delta = q - i_haystack;
    378            return haystack + delta;  // Есть подстрока, очевидно, по тому же смещению
    379          }
    380          
    381          // Аналог strcmp, но без чувствительности к регистру
    382          int stricmp(char *str1, char *str2)
    383          {
    384            if(!str1 || !str2)return NULL;
    385            char *i_str1 = malloc(strlen(str1)+1);
    386            char *i_str2 = malloc(strlen(str2)+1);
    387            strcpy(i_str1, str1);
    388            strcpy(i_str2, str2);
    389            str2lower(i_str1);
    390            str2lower(i_str2);
    391            // Сравниваем уже строки в нижнем регистре
    392            int res= strcmp(i_str1, i_str2);
    393            mfree(i_str1);
    394            mfree(i_str2);
    395            return res;
    396          }
    397          */

   \                                 In segment CODE, align 4, keep-with-next
    398          char* str2lower_ANSI(char *st)
    399          {
   \                     str2lower_ANSI:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    400            unsigned int len = strlen(st);
   \   00000008   1B0000EF           SWI      +27
    401            for(int i=0;i<len;i++)
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   010000EA           B        ??str2lower_ANSI_0
    402            {
    403              char sym = *(st+i);
    404              char *cc = st+i;
    405              *cc= sym>='A' && sym<='Z' ? sym + ('a' - 'A') : sym >= 'А' && sym <= 'Я'? sym + ('а' - 'А') : sym;
   \                     ??str2lower_ANSI_1:
   \   00000014   0420C1E7           STRB     R2,[R1, +R4]
   \   00000018   011081E2           ADD      R1,R1,#+1
   \                     ??str2lower_ANSI_0:
   \   0000001C   000051E1           CMP      R1,R0
   \   00000020   0B00002A           BCS      ??str2lower_ANSI_2
   \   00000024   0420D1E7           LDRB     R2,[R1, +R4]
   \   00000028   410052E3           CMP      R2,#+65
   \   0000002C   0300003A           BCC      ??str2lower_ANSI_3
   \   00000030   5B0052E3           CMP      R2,#+91
   \   00000034   0100002A           BCS      ??str2lower_ANSI_3
   \                     ??str2lower_ANSI_4:
   \   00000038   202082E2           ADD      R2,R2,#+32
   \   0000003C   F4FFFFEA           B        ??str2lower_ANSI_1
   \                     ??str2lower_ANSI_3:
   \   00000040   C00052E3           CMP      R2,#+192
   \   00000044   F2FFFF3A           BCC      ??str2lower_ANSI_1
   \   00000048   E00052E3           CMP      R2,#+224
   \   0000004C   F0FFFF2A           BCS      ??str2lower_ANSI_1
   \   00000050   F8FFFFEA           B        ??str2lower_ANSI_4
    406            }
    407            return st;
   \                     ??str2lower_ANSI_2:
   \   00000054                      REQUIRE ?Subroutine31
   \   00000054                      ;; // Fall through to label ?Subroutine31
    408          }
    409          
    410          
    411          // Строковый вариант

   \                                 In segment CODE, align 4, keep-with-next
    412          char* convUTF8_to_ANSI_STR(char *UTF8_str)
    413          {
   \                     convUTF8_to_ANSI_STR:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
    414            // Рассматривая строку UTF8 как обычную, определяем её длину
    415            if(!UTF8_str)return NULL;
   \   00000008   0100001A           BNE      ??convUTF8_to_ANSI_STR_0
   \                     ??convUTF8_to_ANSI_STR_1:
   \   0000000C   0000A0E3           MOV      R0,#+0
   \   00000010   F081BDE8           POP      {R4-R8,PC}
    416            int st_len = strlen(UTF8_str);
   \                     ??convUTF8_to_ANSI_STR_0:
   \   00000014   1B0000EF           SWI      +27
   \   00000018   0050A0E1           MOV      R5,R0
    417          
    418            // Выделяем память - на всякий случай дохера
    419            int lastchar = 0;
   \   0000001C   0060A0E3           MOV      R6,#+0
    420            int dummy;
    421            char* tmp_out = malloc(st_len+1);
   \   00000020   018085E2           ADD      R8,R5,#+1
   \   00000024   0800A0E1           MOV      R0,R8
   \   00000028   140000EF           SWI      +20
   \   0000002C   0070A0E1           MOV      R7,R0
    422            zeromem(tmp_out,st_len+1);
   \   00000030   0810A0E1           MOV      R1,R8
   \   00000034   1D0100EF           SWI      +285
    423            char chr, chr2, chr3;
    424            for(int i=0;i<st_len;i++)
   \   00000038   0000A0E3           MOV      R0,#+0
   \   0000003C   040000EA           B        ??convUTF8_to_ANSI_STR_2
    425            {
    426            chr = (*(UTF8_str+i));
    427          
    428          	if (chr<0x80)
    429                  {
    430                    *(tmp_out+lastchar)=chr;
    431                    lastchar++;
    432                    goto L_END_CYCLE;
    433                  }
    434          	if (chr<0xc0)
    435                  {
    436                    ShowMSG(1,(int)"Bad UTF-8 Encoding encountered (chr<0xC0)");
    437                    mfree(tmp_out);
    438                    return NULL;
    439                  }
    440          	
    441                  chr2 = *(UTF8_str+i+1);
    442          
    443                  if (chr2<0x80)
    444                  {
    445                    ShowMSG(1,(int)"Bad UTF-8 Encoding encountered (chr2<0x80)");
    446                    mfree(tmp_out);
    447                    return NULL;
    448                  }
    449          	
    450          	if (chr<0xe0) {
    451          	    // cx, dx
    452                            if ((chr == 0xD0)&&(chr2 == 0x81)){*(tmp_out+lastchar) = 0xA8;}//Ё
    453                       else if ((chr == 0xD0)&&(chr2 == 0x86)){*(tmp_out+lastchar) = 0xB2;}//І
    454                       else if ((chr == 0xD0)&&(chr2 == 0x87)){*(tmp_out+lastchar) = 0xAF;}//Ї
    455                       else if ((chr == 0xD0)&&(chr2 == 0x84)){*(tmp_out+lastchar) = 0xAA;}//Є
    456                       else if ((chr == 0xD1)&&(chr2 == 0x91)){*(tmp_out+lastchar) = 0xB8;}//ё
    457                       else if ((chr == 0xD1)&&(chr2 == 0x96)){*(tmp_out+lastchar) = 0xB3;}//і
    458                       else if ((chr == 0xD1)&&(chr2 == 0x97)){*(tmp_out+lastchar) = 0xBF;}//ї
    459                       else if ((chr == 0xD1)&&(chr2 == 0x94)){*(tmp_out+lastchar) = 0xBA;}//є
    460                       else if ((chr == 0xD2)&&(chr2 == 0x91)){*(tmp_out+lastchar) = 0xE3;}//ґ->г
    461                       else if ((chr == 0xD2)&&(chr2 == 0x90)){*(tmp_out+lastchar) = 0xC3;}//Ґ->Г
    462                       else
    463                    {
    464          	    char test1 = (chr & 0x1f)<<6;
    465                      char test2 = chr2 & 0x3f;
    466                      *(tmp_out+lastchar)= test1 | test2 + 127 + 0x31;
    467                    }
    468                      i++;
    469                      lastchar++;
    470                      goto L_END_CYCLE;
    471          	}
    472          	if (chr<0xf0) {
    473          	    // cx, dx
    474          	    chr3= *(UTF8_str+i+2);
    475          
    476          	    if (chr3<0x80)
    477                      {
    478                        ShowMSG(1,(int)"Bad UTF-8 Encoding encountered");
    479                        mfree(tmp_out);
    480                        return NULL;
    481                      }
    482          	    else
    483                      {
    484                        *(tmp_out+lastchar) =  ((chr & 0x0f)<<12) | ((chr2 &0x3f) <<6) | (chr3 &0x3f);
   \                     ??convUTF8_to_ANSI_STR_3:
   \   00000040   3F1001E2           AND      R1,R1,#0x3F
   \   00000044   031381E1           ORR      R1,R1,R3, LSL #+6
   \   00000048   0710C6E7           STRB     R1,[R6, +R7]
    485                        i=i+2;
   \   0000004C   020080E2           ADD      R0,R0,#+2
    486                      }
    487          	}
    488          
    489            L_END_CYCLE:
    490              dummy++;
   \                     ??convUTF8_to_ANSI_STR_4:
   \   00000050   010080E2           ADD      R0,R0,#+1
   \                     ??convUTF8_to_ANSI_STR_2:
   \   00000054   050050E1           CMP      R0,R5
   \   00000058   4B0000AA           BGE      ??convUTF8_to_ANSI_STR_5
   \   0000005C   0410D0E7           LDRB     R1,[R0, +R4]
   \   00000060   012086E2           ADD      R2,R6,#+1
   \   00000064   800051E3           CMP      R1,#+128
   \   00000068   0200002A           BCS      ??convUTF8_to_ANSI_STR_6
   \   0000006C   0710C6E7           STRB     R1,[R6, +R7]
   \                     ??convUTF8_to_ANSI_STR_7:
   \   00000070   0260A0E1           MOV      R6,R2
   \   00000074   F5FFFFEA           B        ??convUTF8_to_ANSI_STR_4
   \                     ??convUTF8_to_ANSI_STR_6:
   \   00000078   C00051E3           CMP      R1,#+192
   \   0000007C   0500002A           BCS      ??convUTF8_to_ANSI_STR_8
   \   00000080   ........           LDR      R1,??DataTable6  ;; `?<Constant "Bad UTF-8 Encoding en...">`
   \                     ??convUTF8_to_ANSI_STR_9:
   \   00000084   0100A0E3           MOV      R0,#+1
   \   00000088   480100EF           SWI      +328
   \   0000008C   0700A0E1           MOV      R0,R7
   \   00000090   150000EF           SWI      +21
   \   00000094   DCFFFFEA           B        ??convUTF8_to_ANSI_STR_1
   \                     ??convUTF8_to_ANSI_STR_8:
   \   00000098   043080E0           ADD      R3,R0,R4
   \   0000009C   0130D3E5           LDRB     R3,[R3, #+1]
   \   000000A0   800053E3           CMP      R3,#+128
   \   000000A4   ........           LDRCC    R1,??DataTable7  ;; `?<Constant "Bad UTF-8 Encoding en...">` + 44
   \   000000A8   F5FFFF3A           BCC      ??convUTF8_to_ANSI_STR_9
   \   000000AC   E00051E3           CMP      R1,#+224
   \   000000B0   2D00002A           BCS      ??convUTF8_to_ANSI_STR_10
   \   000000B4   D00051E3           CMP      R1,#+208
   \   000000B8   0C00001A           BNE      ??convUTF8_to_ANSI_STR_11
   \   000000BC   810053E3           CMP      R3,#+129
   \   000000C0   A810A003           MOVEQ    R1,#+168
   \   000000C4   2500000A           BEQ      ??convUTF8_to_ANSI_STR_12
   \   000000C8   860053E3           CMP      R3,#+134
   \   000000CC   B210A003           MOVEQ    R1,#+178
   \   000000D0   2200000A           BEQ      ??convUTF8_to_ANSI_STR_12
   \   000000D4   870053E3           CMP      R3,#+135
   \   000000D8   AF10A003           MOVEQ    R1,#+175
   \   000000DC   1F00000A           BEQ      ??convUTF8_to_ANSI_STR_12
   \   000000E0   840053E3           CMP      R3,#+132
   \   000000E4   1A00001A           BNE      ??convUTF8_to_ANSI_STR_13
   \   000000E8   AA10A0E3           MOV      R1,#+170
   \   000000EC   1B0000EA           B        ??convUTF8_to_ANSI_STR_12
   \                     ??convUTF8_to_ANSI_STR_11:
   \   000000F0   D10051E3           CMP      R1,#+209
   \   000000F4   0300001A           BNE      ??convUTF8_to_ANSI_STR_14
   \   000000F8   910053E3           CMP      R3,#+145
   \   000000FC   0700001A           BNE      ??convUTF8_to_ANSI_STR_15
   \   00000100   B810A0E3           MOV      R1,#+184
   \   00000104   150000EA           B        ??convUTF8_to_ANSI_STR_12
   \                     ??convUTF8_to_ANSI_STR_14:
   \   00000108   D20051E3           CMP      R1,#+210
   \   0000010C   1000001A           BNE      ??convUTF8_to_ANSI_STR_13
   \   00000110   910053E3           CMP      R3,#+145
   \   00000114   0B00001A           BNE      ??convUTF8_to_ANSI_STR_16
   \   00000118   E310A0E3           MOV      R1,#+227
   \   0000011C   0F0000EA           B        ??convUTF8_to_ANSI_STR_12
   \                     ??convUTF8_to_ANSI_STR_15:
   \   00000120   960053E3           CMP      R3,#+150
   \   00000124   B310A003           MOVEQ    R1,#+179
   \   00000128   0C00000A           BEQ      ??convUTF8_to_ANSI_STR_12
   \   0000012C   970053E3           CMP      R3,#+151
   \   00000130   BF10A003           MOVEQ    R1,#+191
   \   00000134   0900000A           BEQ      ??convUTF8_to_ANSI_STR_12
   \   00000138   940053E3           CMP      R3,#+148
   \   0000013C   0400001A           BNE      ??convUTF8_to_ANSI_STR_13
   \   00000140   BA10A0E3           MOV      R1,#+186
   \   00000144   050000EA           B        ??convUTF8_to_ANSI_STR_12
   \                     ??convUTF8_to_ANSI_STR_16:
   \   00000148   900053E3           CMP      R3,#+144
   \   0000014C   C310A003           MOVEQ    R1,#+195
   \   00000150   0200000A           BEQ      ??convUTF8_to_ANSI_STR_12
   \                     ??convUTF8_to_ANSI_STR_13:
   \   00000154   3F3003E2           AND      R3,R3,#0x3F
   \   00000158   B03083E2           ADD      R3,R3,#+176
   \   0000015C   011383E1           ORR      R1,R3,R1, LSL #+6
   \                     ??convUTF8_to_ANSI_STR_12:
   \   00000160   0710C6E7           STRB     R1,[R6, +R7]
   \   00000164   010080E2           ADD      R0,R0,#+1
   \   00000168   C0FFFFEA           B        ??convUTF8_to_ANSI_STR_7
   \                     ??convUTF8_to_ANSI_STR_10:
   \   0000016C   F00051E3           CMP      R1,#+240
   \   00000170   B6FFFF2A           BCS      ??convUTF8_to_ANSI_STR_4
   \   00000174   041080E0           ADD      R1,R0,R4
   \   00000178   0210D1E5           LDRB     R1,[R1, #+2]
   \   0000017C   800051E3           CMP      R1,#+128
   \   00000180   AEFFFF2A           BCS      ??convUTF8_to_ANSI_STR_3
   \   00000184   ........           LDR      R1,??DataTable8  ;; `?<Constant "Bad UTF-8 Encoding en...">` + 88
   \   00000188   BDFFFFEA           B        ??convUTF8_to_ANSI_STR_9
    491            }
    492            st_len = strlen(tmp_out);
   \                     ??convUTF8_to_ANSI_STR_5:
   \   0000018C   0700A0E1           MOV      R0,R7
   \   00000190   1B0000EF           SWI      +27
    493            tmp_out = realloc(tmp_out,st_len+1);
   \   00000194   011080E2           ADD      R1,R0,#+1
   \   00000198   0700A0E1           MOV      R0,R7
   \   0000019C   BA0000EF           SWI      +186
    494            return tmp_out;
   \   000001A0   F081BDE8           POP      {R4-R8,PC}       ;; return
    495          }
    496          
    497          
    498          
    499          // Готовимся к отказу от ANSI вообще. Пока не используется, скоро, наверное, будет...
    500          
    501          /* UTF-8 to UTF-16 conversion.  Surrogates are handeled properly, e.g.
    502           * a single 4-byte UTF-8 character is encoded into a surrogate pair.
    503           * On the other hand, if the UTF-8 string contains surrogate values, this
    504           * is considered an error and returned as such.
    505           *
    506           * The destination array must be able to hold as many Unicode-16 characters
    507           * as there are ASCII characters in the UTF-8 string.  This in case all UTF-8
    508           * characters are ASCII characters.  No more will be needed.
    509           *
    510           * Copyright (c) 2000 Morten Rolland, Screen Media
    511           */
    512          

   \                                 In segment CODE, align 4, keep-with-next
    513          int utf8_to_utf16(char *utf8, int cc, char *unicode16)
    514          {
   \                     utf8_to_utf16:
   \   00000000   F0002DE9           PUSH     {R4-R7}
    515          	int count = 0;
   \   00000004   0030A0E3           MOV      R3,#+0
   \   00000008   010000EA           B        ??utf8_to_utf16_0
    516          	unsigned char c0, c1;
    517          	unsigned long scalar;
    518          
    519          	while(--cc >= 0) {
    520          		c0 = *utf8++;
    521          		/*DPRINTF("Trying: %02x\n",c0);*/
    522          
    523          		if ( c0 < 0x80 ) {
    524          			/* Plain ASCII character, simple translation :-) */
    525          			*unicode16++ = c0;
   \                     ??utf8_to_utf16_1:
   \   0000000C   ........           STRB     R12,[R2], #+1
    526          			count++;
   \                     ??utf8_to_utf16_2:
   \   00000010   0430A0E1           MOV      R3,R4
    527          			continue;
    528          		}
   \                     ??utf8_to_utf16_0:
   \   00000014   011051E2           SUBS     R1,R1,#+1
   \   00000018   3A00004A           BMI      ??utf8_to_utf16_3
   \   0000001C   ........           LDRB     R12,[R0], #+1
   \   00000020   014083E2           ADD      R4,R3,#+1
   \   00000024   80005CE3           CMP      R12,#+128
   \   00000028   F7FFFF3A           BCC      ??utf8_to_utf16_1
    529          
    530          		if ( (c0 & 0xc0) == 0x80 )
   \   0000002C   C0500CE2           AND      R5,R12,#0xC0
   \   00000030   800055E3           CMP      R5,#+128
   \   00000034   0100001A           BNE      ??utf8_to_utf16_4
    531          			/* Illegal; starts with 10xxxxxx */
    532          			return -1;
   \                     ??utf8_to_utf16_5:
   \   00000038   0000E0E3           MVN      R0,#+0
   \   0000003C   320000EA           B        ??utf8_to_utf16_6
    533          
    534          		/* c0 must be 11xxxxxx if we get here => at least 2 bytes */
    535          		scalar = c0;
    536          		if(--cc < 0)
   \                     ??utf8_to_utf16_4:
   \   00000040   011051E2           SUBS     R1,R1,#+1
   \   00000044   FBFFFF4A           BMI      ??utf8_to_utf16_5
    537          			return -1;
    538          		c1 = *utf8++;
   \   00000048   ........           LDRB     R6,[R0], #+1
    539          		/*DPRINTF("c1=%02x\n",c1);*/
    540          		if ( (c1 & 0xc0) != 0x80 )
   \   0000004C   C07006E2           AND      R7,R6,#0xC0
   \   00000050   800057E3           CMP      R7,#+128
   \   00000054   F7FFFF1A           BNE      ??utf8_to_utf16_5
    541          			/* Bad byte */
    542          			return -1;
    543          		scalar <<= 6;
    544          		scalar |= (c1 & 0x3f);
   \   00000058   3F6006E2           AND      R6,R6,#0x3F
   \   0000005C   0C5386E1           ORR      R5,R6,R12, LSL #+6
    545          
    546          		if ( !(c0 & 0x20) ) {
   \   00000060   20001CE3           TST      R12,#0x20
   \   00000064   0300001A           BNE      ??utf8_to_utf16_7
    547          			/* Two bytes UTF-8 */
    548          			if ( scalar < 0x80 )
   \   00000068   800055E3           CMP      R5,#+128
   \   0000006C   F1FFFF3A           BCC      ??utf8_to_utf16_5
    549          				return -1;	/* Overlong encoding */
    550          			*unicode16++ = scalar & 0x7ff;
   \                     ??utf8_to_utf16_8:
   \   00000070   ........           STRB     R5,[R2], #+1
    551          			count++;
   \   00000074   E5FFFFEA           B        ??utf8_to_utf16_2
    552          			continue;
    553          		}
    554          
    555          		/* c0 must be 111xxxxx if we get here => at least 3 bytes */
    556          		if(--cc < 0)
   \                     ??utf8_to_utf16_7:
   \   00000078   011051E2           SUBS     R1,R1,#+1
   \   0000007C   EDFFFF4A           BMI      ??utf8_to_utf16_5
    557          			return -1;
    558          		c1 = *utf8++;
   \   00000080   ........           LDRB     R6,[R0], #+1
    559          		/*DPRINTF("c1=%02x\n",c1);*/
    560          		if ( (c1 & 0xc0) != 0x80 )
   \   00000084   C07006E2           AND      R7,R6,#0xC0
   \   00000088   800057E3           CMP      R7,#+128
   \   0000008C   E9FFFF1A           BNE      ??utf8_to_utf16_5
    561          			/* Bad byte */
    562          			return -1;
    563          		scalar <<= 6;
    564          		scalar |= (c1 & 0x3f);
   \   00000090   3F6006E2           AND      R6,R6,#0x3F
   \   00000094   055386E1           ORR      R5,R6,R5, LSL #+6
    565          
    566          		if ( !(c0 & 0x10) ) {
   \   00000098   10001CE3           TST      R12,#0x10
   \   0000009C   0600001A           BNE      ??utf8_to_utf16_9
    567          			/*DPRINTF("####\n");*/
    568          			/* Three bytes UTF-8 */
    569          			if ( scalar < 0x800 )
   \   000000A0   800E55E3           CMP      R5,#+2048
   \   000000A4   E3FFFF3A           BCC      ??utf8_to_utf16_5
    570          				return -1;	/* Overlong encoding */
    571          			if ( scalar >= 0xd800 && scalar < 0xe000 )
   \   000000A8   D80C55E3           CMP      R5,#+55296
   \   000000AC   EFFFFF3A           BCC      ??utf8_to_utf16_8
   \   000000B0   E00C55E3           CMP      R5,#+57344
   \   000000B4   EDFFFF2A           BCS      ??utf8_to_utf16_8
   \   000000B8   DEFFFFEA           B        ??utf8_to_utf16_5
    572          				return -1;	/* UTF-16 high/low halfs */
    573          			*unicode16++ = scalar & 0xffff;
    574          			count++;
    575          			continue;
    576          		}
    577          
    578          		/* c0 must be 1111xxxx if we get here => at least 4 bytes */
    579          		c1 = *utf8++;
   \                     ??utf8_to_utf16_9:
   \   000000BC   ........           LDRB     R6,[R0], #+1
    580          		if(--cc < 0)
   \   000000C0   011051E2           SUBS     R1,R1,#+1
   \   000000C4   DBFFFF4A           BMI      ??utf8_to_utf16_5
    581          			return -1;
    582          		/*DPRINTF("c1=%02x\n",c1);*/
    583          		if ( (c1 & 0xc0) != 0x80 )
   \   000000C8   C04006E2           AND      R4,R6,#0xC0
   \   000000CC   800054E3           CMP      R4,#+128
    584          			/* Bad byte */
    585          			return -1;
    586          		scalar <<= 6;
    587          		scalar |= (c1 & 0x3f);
   \   000000D0   3F400602           ANDEQ    R4,R6,#0x3F
   \   000000D4   05538401           ORREQ    R5,R4,R5, LSL #+6
    588          
    589          		if ( !(c0 & 0x08) ) {
   \   000000D8   08001C03           TSTEQ    R12,#0x8
   \   000000DC   D5FFFF1A           BNE      ??utf8_to_utf16_5
    590          			/* Four bytes UTF-8, needs encoding as surrogates */
    591          			if ( scalar < 0x10000 )
   \   000000E0   400B55E3           CMP      R5,#+65536
   \   000000E4   D3FFFF3A           BCC      ??utf8_to_utf16_5
    592          				return -1;	/* Overlong encoding */
    593          			scalar -= 0x10000;
   \   000000E8   FF44A0E3           MOV      R4,#-16777216
   \   000000EC   FF4884E3           ORR      R4,R4,#0xFF0000
   \   000000F0   055084E0           ADD      R5,R4,R5
    594          			*unicode16++ = ((scalar >> 10) & 0x3ff) + 0xd800;
   \   000000F4   2545A0E1           LSR      R4,R5,#+10
   \   000000F8   ........           STRB     R4,[R2], #+1
    595          			*unicode16++ = (scalar & 0x3ff) + 0xdc00;
   \   000000FC   ........           STRB     R5,[R2], #+1
    596          			count += 2;
   \   00000100   023083E2           ADD      R3,R3,#+2
    597          			continue;
   \   00000104   C2FFFFEA           B        ??utf8_to_utf16_0
    598          		}
    599          
    600          		return -1;	/* No support for more than four byte UTF-8 */
    601          	}
    602          	return count;
   \                     ??utf8_to_utf16_3:
   \   00000108   0300A0E1           MOV      R0,R3
   \                     ??utf8_to_utf16_6:
   \   0000010C   F000BDE8           POP      {R4-R7}
   \   00000110   1EFF2FE1           BX       LR               ;; return
    603          }
    604          
    605          
    606          
    607          
    608          /*
    609          Следующая функция взята из файла:
    610          http://www.cs.umd.edu/projects/hpsl/chaos/ResearchAreas/ic/dist/InterComm-1.5.tar.gz/InterComm/src/ezxml/ezxml.c
    611          
    612          В функции отключена проверка на UNICODE LE / BE, ибо в Сименсе используется только LE
    613          */
    614          #define EZXML_BUFSIZE 1024
    615          /* converts a UTF-16 string to UTF-8, returns a new string the must be freed or NULL if no conversion was needed*/
    616          //char *ezxml_to_utf8(char **s, size_t *len) - оригинальный заголовок

   \                                 In segment CODE, align 4, keep-with-next
    617          char *utf16_to_utf8(char **s, size_t *len)
    618          {
   \                     utf16_to_utf8:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0150A0E1           MOV      R5,R1
    619              char *u;
    620              size_t l = 0, sl, max = *len;
   \   00000008   009095E5           LDR      R9,[R5, #+0]
   \   0000000C   0040A0E1           MOV      R4,R0
    621              long c, c2;
    622              int b, be = 0;//be = (**s == '\xFE') ? 1 : (**s == '\xFF') ? 0 : -1; - отключение проверки!!!
    623          
    624              if (be == -1) return NULL; /* not UTF-16*/
    625          
    626              u = malloc(max); zeromem(u, max);
   \   00000010   0900A0E1           MOV      R0,R9
   \   00000014   140000EF           SWI      +20
   \   00000018   00A0A0E1           MOV      R10,R0
   \   0000001C   0910A0E1           MOV      R1,R9
   \   00000020   1D0100EF           SWI      +285
   \   00000024   00B0A0E3           MOV      R11,#+0
    627              //    for (sl = 2; sl < *len - 1; sl += 2) {      // Второй фикс: у нас строка на 2 байта больше
    628                  for (sl = 2; sl <= *len ; sl += 2) {
   \   00000028   0270A0E3           MOV      R7,#+2
   \   0000002C   0A0000EA           B        ??utf16_to_utf8_0
    629                c = (be) ? ((long)(*s)[sl] << 8) | (*s)[sl + 1] : /* big-endian*/
    630          	((long)(*s)[sl + 1] << 8) | (*s)[sl];  /* little-endian*/
    631                if (c >= 0xD800 && c <= 0xDFFF && (sl += 2) < *len - 1) { /* high-half*/
    632          	c2 = (be) ? ((long)(*s)[sl] << 8) | (*s)[sl + 1] : /* big-endian*/
    633          	  ((long)(*s)[sl + 1] << 8) | (*s)[sl];  /* little-endian*/
    634                      c = (((c & 0x3FF) << 10) | (c2 & 0x3FF)) + 0x10000;
    635                  }
    636          
    637                  while (l + 6 > max) u = realloc(u, max += EZXML_BUFSIZE);
    638                  if (c < 0x80) u[l++] = c; /* US-ASCII subset*/
    639                  else { /* multi-byte UTF-8 sequence*/
    640          	  for (b = 0, c2 = c; c2; c2 /= 2) b++; /* bits in c*/
    641          	  b = (b - 2) / 5; /* bytes in payload;*/
    642          	  u[l++] = (0xFF << (7 - b)) | (c >> (6 * b)); /*head*/
    643          	  while (b) u[l++] = 0x80 | ((c >> (6 * --b)) & 0x3F); /* payload*/
   \                     ??utf16_to_utf8_1:
   \   00000030   011041E2           SUB      R1,R1,#+1
   \   00000034   0100A0E1           MOV      R0,R1
   \   00000038   920000E0           MUL      R0,R2,R0
   \   0000003C   5800A0E1           ASR      R0,R8,R0
   \   00000040   3F0000E2           AND      R0,R0,#0x3F
   \   00000044   800080E3           ORR      R0,R0,#0x80
   \   00000048   0A00CBE7           STRB     R0,[R11, +R10]
   \   0000004C   01B08BE2           ADD      R11,R11,#+1
   \                     ??utf16_to_utf8_2:
   \   00000050   000051E3           CMP      R1,#+0
   \   00000054   F5FFFF1A           BNE      ??utf16_to_utf8_1
   \                     ??utf16_to_utf8_3:
   \   00000058   027087E2           ADD      R7,R7,#+2
   \                     ??utf16_to_utf8_0:
   \   0000005C   000095E5           LDR      R0,[R5, #+0]
   \   00000060   01608BE2           ADD      R6,R11,#+1
   \   00000064   070050E1           CMP      R0,R7
   \   00000068   3A00003A           BCC      ??utf16_to_utf8_4
   \   0000006C   001094E5           LDR      R1,[R4, #+0]
   \   00000070   012087E0           ADD      R2,R7,R1
   \   00000074   0130D2E5           LDRB     R3,[R2, #+1]
   \   00000078   0020D2E5           LDRB     R2,[R2, #+0]
   \   0000007C   038482E1           ORR      R8,R2,R3, LSL #+8
   \   00000080   D80C58E3           CMP      R8,#+55296
   \   00000084   150000BA           BLT      ??utf16_to_utf8_5
   \   00000088   E00C58E3           CMP      R8,#+57344
   \   0000008C   130000AA           BGE      ??utf16_to_utf8_5
   \   00000090   027087E2           ADD      R7,R7,#+2
   \   00000094   010040E2           SUB      R0,R0,#+1
   \   00000098   000057E1           CMP      R7,R0
   \   0000009C   0F00002A           BCS      ??utf16_to_utf8_5
   \   000000A0   010087E0           ADD      R0,R7,R1
   \   000000A4   0130D0E5           LDRB     R3,[R0, #+1]
   \   000000A8   0000D0E5           LDRB     R0,[R0, #+0]
   \   000000AC   FF10A0E3           MOV      R1,#+255
   \   000000B0   C01F81E3           ORR      R1,R1,#0x300
   \   000000B4   082001E0           AND      R2,R1,R8
   \   000000B8   030480E1           ORR      R0,R0,R3, LSL #+8
   \   000000BC   000001E0           AND      R0,R1,R0
   \   000000C0   020580E1           ORR      R0,R0,R2, LSL #+10
   \   000000C4   408B80E2           ADD      R8,R0,#+65536
   \   000000C8   040000EA           B        ??utf16_to_utf8_5
   \                     ??utf16_to_utf8_6:
   \   000000CC   409E89E2           ADD      R9,R9,#+1024
   \   000000D0   0910A0E1           MOV      R1,R9
   \   000000D4   0A00A0E1           MOV      R0,R10
   \   000000D8   BA0000EF           SWI      +186
   \   000000DC   00A0A0E1           MOV      R10,R0
   \                     ??utf16_to_utf8_5:
   \   000000E0   06008BE2           ADD      R0,R11,#+6
   \   000000E4   000059E1           CMP      R9,R0
   \   000000E8   F7FFFF3A           BCC      ??utf16_to_utf8_6
   \   000000EC   0A208BE0           ADD      R2,R11,R10
   \   000000F0   800058E3           CMP      R8,#+128
   \   000000F4   0080C2B5           STRBLT   R8,[R2, #+0]
   \   000000F8   06B0A0B1           MOVLT    R11,R6
   \   000000FC   D5FFFFBA           BLT      ??utf16_to_utf8_3
   \   00000100   0000A0E3           MOV      R0,#+0
   \   00000104   0810A0E1           MOV      R1,R8
   \                     ??utf16_to_utf8_7:
   \   00000108   010080E2           ADD      R0,R0,#+1
   \   0000010C   A11F81E0           ADD      R1,R1,R1, LSR #+31
   \   00000110   C110B0E1           ASRS     R1,R1,#+1
   \   00000114   FBFFFF1A           BNE      ??utf16_to_utf8_7
   \   00000118   020040E2           SUB      R0,R0,#+2
   \   0000011C   0510A0E3           MOV      R1,#+5
   \   00000120   ........           _BLF     ??div32_a,??rA??div32_a
   \   00000124   FF00A0E3           MOV      R0,#+255
   \   00000128   0130A0E1           MOV      R3,R1
   \   0000012C   073063E2           RSB      R3,R3,#+7
   \   00000130   1003A0E1           LSL      R0,R0,R3
   \   00000134   0130A0E1           MOV      R3,R1
   \   00000138   06B0A0E3           MOV      R11,#+6
   \   0000013C   9B0303E0           MUL      R3,R11,R3
   \   00000140   06B0A0E1           MOV      R11,R6
   \   00000144   5833A0E1           ASR      R3,R8,R3
   \   00000148   000083E1           ORR      R0,R3,R0
   \   0000014C   0000C2E5           STRB     R0,[R2, #+0]
   \   00000150   0620A0E3           MOV      R2,#+6
   \   00000154   BDFFFFEA           B        ??utf16_to_utf8_2
    644                  }
    645              }
    646          
    647              //return *s = realloc(u, *len = l);
    648              *len = l;
   \                     ??utf16_to_utf8_4:
   \   00000158   00B085E5           STR      R11,[R5, #+0]
    649              u = realloc(u, l+1);    // Не убиваем исходную WSHDR!
   \   0000015C   0610A0E1           MOV      R1,R6
   \   00000160   0A00A0E1           MOV      R0,R10
   \   00000164                      REQUIRE ?Subroutine30
   \   00000164                      ;; // Fall through to label ?Subroutine30
    650              return u;
    651          }
    652          
    653          
    654          /*
    655            Обеспечивает преобразование кривого UTF-8 Сименса в UTF-8 для Jabber
    656          */

   \                                 In segment CODE, align 4, keep-with-next
    657          char* Correct_UTF8_String(char* utf8_str)
    658          {
   \                     Correct_UTF8_String:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    659            int l = strlen(utf8_str)*2;
   \   00000008   1B0000EF           SWI      +27
    660            // ^ так нельзя делать цикл, строка на самом длиннее, чем strlen
    661            int j=0;
    662            int i=0;
    663            char character = *utf8_str;
   \   0000000C   0030D4E5           LDRB     R3,[R4, #+0]
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   040000EA           B        ??Correct_UTF8_String_0
    664            while(character!='\0')
    665            {
    666              if(character!=0x1F)
   \                     ??Correct_UTF8_String_1:
   \   0000001C   1F0053E3           CMP      R3,#+31
    667              {
    668                utf8_str[j]=character;
   \   00000020   0430C017           STRBNE   R3,[R0, +R4]
    669                j++;
   \   00000024   0100A011           MOVNE    R0,R1
    670              }
    671              i++;
   \   00000028   012082E2           ADD      R2,R2,#+1
    672              character = *(utf8_str+i);
   \   0000002C   0430D2E7           LDRB     R3,[R2, +R4]
    673            }
   \                     ??Correct_UTF8_String_0:
   \   00000030   011080E2           ADD      R1,R0,#+1
   \   00000034   03C0B0E1           MOVS     R12,R3
   \   00000038   F7FFFF1A           BNE      ??Correct_UTF8_String_1
    674            utf8_str[j]='\0';
   \   0000003C   0020A0E3           MOV      R2,#+0
   \   00000040   0420C0E7           STRB     R2,[R0, +R4]
    675            utf8_str = realloc(utf8_str, j+1);
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   BA0000EF           SWI      +186
    676            return utf8_str;
   \   0000004C   1080BDE8           POP      {R4,PC}          ;; return
    677          }
    678          
    679          

   \                                 In segment CODE, align 4, keep-with-next
    680          char * ANSI2UTF8(const char * ansi_str, int maxlen)
    681          {
   \                     ANSI2UTF8:
   \   00000000   71402DE9           PUSH     {R0,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    682            int utf8_len = NULL;
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   00108DE5           STR      R1,[SP, #+0]
    683            WSHDR * ws_str = AllocWS(maxlen);
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   250100EF           SWI      +293
   \   0000001C   0060A0E1           MOV      R6,R0
    684            ascii2ws(ws_str, ansi_str);
   \   00000020   0410A0E1           MOV      R1,R4
   \   00000024   ........           BL       ascii2ws
   \   00000028   0100A0E3           MOV      R0,#+1
   \   0000002C   854080E0           ADD      R4,R0,R5, LSL #+1
   \   00000030   0400A0E1           MOV      R0,R4
    685            char * utf8_str = malloc(maxlen * 2 + 1);
   \   00000034   140000EF           SWI      +20
   \   00000038   0050A0E1           MOV      R5,R0
    686            ws_2utf8(ws_str, utf8_str, &utf8_len, maxlen * 2 + 1);
   \   0000003C   0430A0E1           MOV      R3,R4
   \   00000040   0D20A0E1           MOV      R2,SP
   \   00000044   0510A0E1           MOV      R1,R5
   \   00000048   0600A0E1           MOV      R0,R6
   \   0000004C   E20100EF           SWI      +482
    687            FreeWS(ws_str);
   \   00000050   0600A0E1           MOV      R0,R6
   \   00000054   290100EF           SWI      +297
    688            utf8_str = realloc(utf8_str, utf8_len + 1);
   \   00000058   00009DE5           LDR      R0,[SP, #+0]
   \   0000005C   011080E2           ADD      R1,R0,#+1
   \   00000060   0500A0E1           MOV      R0,R5
   \   00000064   BA0000EF           SWI      +186
    689            utf8_str[utf8_len] = '\0';
   \   00000068   00109DE5           LDR      R1,[SP, #+0]
   \   0000006C   0020A0E3           MOV      R2,#+0
   \   00000070   0020C1E7           STRB     R2,[R1, +R0]
    690            return utf8_str;
   \   00000074   7280BDE8           POP      {R1,R4-R6,PC}    ;; return
    691          }
    692          
    693          // From NatICQ
    694          
    695          typedef struct
    696          {
    697            unsigned short u;
    698            char dos;
    699            char win;
    700            char koi8;
    701          } TUNICODE2CHAR;
    702          

   \                                 In segment DATA_C, align 4, align-sorted
    703          const TUNICODE2CHAR unicode2char[]=
   \                     unicode2char:
   \   00000000   1004               DC16 1040
   \   00000002   80C0E100           DC8 128, 192, 225, 0
   \   00000006   1104               DC16 1041
   \   00000008   81C1E200           DC8 129, 193, 226, 0
   \   0000000C   1204               DC16 1042
   \   0000000E   82C2F700           DC8 130, 194, 247, 0
   \   00000012   1304               DC16 1043
   \   00000014   83C3E700           DC8 131, 195, 231, 0
   \   00000018   1404               DC16 1044
   \   0000001A   84C4E400           DC8 132, 196, 228, 0
   \   0000001E   1504               DC16 1045
   \   00000020   85C5E500           DC8 133, 197, 229, 0
   \   00000024   1604               DC16 1046
   \   00000026   86C6F600           DC8 134, 198, 246, 0
   \   0000002A   1704               DC16 1047
   \   0000002C   87C7FA00           DC8 135, 199, 250, 0
   \   00000030   1804               DC16 1048
   \   00000032   88C8E900           DC8 136, 200, 233, 0
   \   00000036   1904               DC16 1049
   \   00000038   89C9EA00           DC8 137, 201, 234, 0
   \   0000003C   1A04               DC16 1050
   \   0000003E   8ACAEB00           DC8 138, 202, 235, 0
   \   00000042   1B04               DC16 1051
   \   00000044   8BCBEC00           DC8 139, 203, 236, 0
   \   00000048   1C04               DC16 1052
   \   0000004A   8CCCED00           DC8 140, 204, 237, 0
   \   0000004E   1D04               DC16 1053
   \   00000050   8DCDEE00           DC8 141, 205, 238, 0
   \   00000054   1E04               DC16 1054
   \   00000056   8ECEEF00           DC8 142, 206, 239, 0
   \   0000005A   1F04               DC16 1055
   \   0000005C   8FCFF000           DC8 143, 207, 240, 0
   \   00000060   2004               DC16 1056
   \   00000062   90D0F200           DC8 144, 208, 242, 0
   \   00000066   2104               DC16 1057
   \   00000068   91D1F300           DC8 145, 209, 243, 0
   \   0000006C   2204               DC16 1058
   \   0000006E   92D2F400           DC8 146, 210, 244, 0
   \   00000072   2304               DC16 1059
   \   00000074   93D3F500           DC8 147, 211, 245, 0
   \   00000078   2404               DC16 1060
   \   0000007A   94D4E600           DC8 148, 212, 230, 0
   \   0000007E   2504               DC16 1061
   \   00000080   95D5E800           DC8 149, 213, 232, 0
   \   00000084   2604               DC16 1062
   \   00000086   96D6E300           DC8 150, 214, 227, 0
   \   0000008A   2704               DC16 1063
   \   0000008C   97D7FE00           DC8 151, 215, 254, 0
   \   00000090   2804               DC16 1064
   \   00000092   98D8FB00           DC8 152, 216, 251, 0
   \   00000096   2904               DC16 1065
   \   00000098   99D9FD00           DC8 153, 217, 253, 0
   \   0000009C   2A04               DC16 1066
   \   0000009E   9ADAFF00           DC8 154, 218, 255, 0
   \   000000A2   2B04               DC16 1067
   \   000000A4   9BDBF900           DC8 155, 219, 249, 0
   \   000000A8   2C04               DC16 1068
   \   000000AA   9CDCF800           DC8 156, 220, 248, 0
   \   000000AE   2D04               DC16 1069
   \   000000B0   9DDDFC00           DC8 157, 221, 252, 0
   \   000000B4   2E04               DC16 1070
   \   000000B6   9EDEE000           DC8 158, 222, 224, 0
   \   000000BA   2F04               DC16 1071
   \   000000BC   9FDFF100           DC8 159, 223, 241, 0
   \   000000C0   0204               DC16 1026
   \   000000C2   5F805F00           DC8 95, 128, 95, 0
   \   000000C6   0304               DC16 1027
   \   000000C8   5F815F00           DC8 95, 129, 95, 0
   \   000000CC   0904               DC16 1033
   \   000000CE   5F8A5F00           DC8 95, 138, 95, 0
   \   000000D2   0A04               DC16 1034
   \   000000D4   5F8C5F00           DC8 95, 140, 95, 0
   \   000000D8   0C04               DC16 1036
   \   000000DA   5F8D5F00           DC8 95, 141, 95, 0
   \   000000DE   0B04               DC16 1035
   \   000000E0   5F8E5F00           DC8 95, 142, 95, 0
   \   000000E4   0F04               DC16 1039
   \   000000E6   5F8F5F00           DC8 95, 143, 95, 0
   \   000000EA   0E04               DC16 1038
   \   000000EC   F6A15F00           DC8 246, 161, 95, 0
   \   000000F0   0804               DC16 1032
   \   000000F2   4AA34A00           DC8 74, 163, 74, 0
   \   000000F6   0904               DC16 1033
   \   000000F8   83A5BD00           DC8 131, 165, 189, 0
   \   000000FC   0104               DC16 1025
   \   000000FE   F0A8B300           DC8 240, 168, 179, 0
   \   00000102   0404               DC16 1028
   \   00000104   F2AAB400           DC8 242, 170, 180, 0
   \   00000108   0704               DC16 1031
   \   0000010A   F4AFB700           DC8 244, 175, 183, 0
   \   0000010E   0604               DC16 1030
   \   00000110   49B2B600           DC8 73, 178, 182, 0
   \   00000114   0504               DC16 1029
   \   00000116   53BD5300           DC8 83, 189, 83, 0
   \   0000011A   3004               DC16 1072
   \   0000011C   A0E0C100           DC8 160, 224, 193, 0
   \   00000120   3104               DC16 1073
   \   00000122   A1E1C200           DC8 161, 225, 194, 0
   \   00000126   3204               DC16 1074
   \   00000128   A2E2D700           DC8 162, 226, 215, 0
   \   0000012C   3304               DC16 1075
   \   0000012E   A3E3C700           DC8 163, 227, 199, 0
   \   00000132   3404               DC16 1076
   \   00000134   A4E4C400           DC8 164, 228, 196, 0
   \   00000138   3504               DC16 1077
   \   0000013A   A5E5C500           DC8 165, 229, 197, 0
   \   0000013E   3604               DC16 1078
   \   00000140   A6E6D600           DC8 166, 230, 214, 0
   \   00000144   3704               DC16 1079
   \   00000146   A7E7DA00           DC8 167, 231, 218, 0
   \   0000014A   3804               DC16 1080
   \   0000014C   A8E8C900           DC8 168, 232, 201, 0
   \   00000150   3904               DC16 1081
   \   00000152   A9E9CA00           DC8 169, 233, 202, 0
   \   00000156   3A04               DC16 1082
   \   00000158   AAEACB00           DC8 170, 234, 203, 0
   \   0000015C   3B04               DC16 1083
   \   0000015E   ABEBCC00           DC8 171, 235, 204, 0
   \   00000162   3C04               DC16 1084
   \   00000164   ACECCD00           DC8 172, 236, 205, 0
   \   00000168   3D04               DC16 1085
   \   0000016A   ADEDCE00           DC8 173, 237, 206, 0
   \   0000016E   3E04               DC16 1086
   \   00000170   AEEECF00           DC8 174, 238, 207, 0
   \   00000174   3F04               DC16 1087
   \   00000176   AFEFD000           DC8 175, 239, 208, 0
   \   0000017A   4004               DC16 1088
   \   0000017C   E0F0D200           DC8 224, 240, 210, 0
   \   00000180   4104               DC16 1089
   \   00000182   E1F1D300           DC8 225, 241, 211, 0
   \   00000186   4204               DC16 1090
   \   00000188   E2F2D400           DC8 226, 242, 212, 0
   \   0000018C   4304               DC16 1091
   \   0000018E   E3F3D500           DC8 227, 243, 213, 0
   \   00000192   4404               DC16 1092
   \   00000194   E4F4C600           DC8 228, 244, 198, 0
   \   00000198   4504               DC16 1093
   \   0000019A   E5F5C800           DC8 229, 245, 200, 0
   \   0000019E   4604               DC16 1094
   \   000001A0   E6F6C300           DC8 230, 246, 195, 0
   \   000001A4   4704               DC16 1095
   \   000001A6   E7F7DE00           DC8 231, 247, 222, 0
   \   000001AA   4804               DC16 1096
   \   000001AC   E8F8DB00           DC8 232, 248, 219, 0
   \   000001B0   4904               DC16 1097
   \   000001B2   E9F9DD00           DC8 233, 249, 221, 0
   \   000001B6   4A04               DC16 1098
   \   000001B8   EAFADF00           DC8 234, 250, 223, 0
   \   000001BC   4B04               DC16 1099
   \   000001BE   EBFBD900           DC8 235, 251, 217, 0
   \   000001C2   4C04               DC16 1100
   \   000001C4   ECFCD800           DC8 236, 252, 216, 0
   \   000001C8   4D04               DC16 1101
   \   000001CA   EDFDDC00           DC8 237, 253, 220, 0
   \   000001CE   4E04               DC16 1102
   \   000001D0   EEFEC000           DC8 238, 254, 192, 0
   \   000001D4   4F04               DC16 1103
   \   000001D6   EFFFD100           DC8 239, 255, 209, 0
   \   000001DA   5204               DC16 1106
   \   000001DC   5F905F00           DC8 95, 144, 95, 0
   \   000001E0   5304               DC16 1107
   \   000001E2   5F835F00           DC8 95, 131, 95, 0
   \   000001E6   5904               DC16 1113
   \   000001E8   5F9A5F00           DC8 95, 154, 95, 0
   \   000001EC   5A04               DC16 1114
   \   000001EE   5F9C5F00           DC8 95, 156, 95, 0
   \   000001F2   5C04               DC16 1116
   \   000001F4   5F9D5F00           DC8 95, 157, 95, 0
   \   000001F8   5B04               DC16 1115
   \   000001FA   5F9E5F00           DC8 95, 158, 95, 0
   \   000001FE   5F04               DC16 1119
   \   00000200   5F9F5F00           DC8 95, 159, 95, 0
   \   00000204   5E04               DC16 1118
   \   00000206   F7A25F00           DC8 247, 162, 95, 0
   \   0000020A   5804               DC16 1112
   \   0000020C   6ABC6A00           DC8 106, 188, 106, 0
   \   00000210   9104               DC16 1169
   \   00000212   A3B4AD00           DC8 163, 180, 173, 0
   \   00000216   5104               DC16 1105
   \   00000218   F1B8A300           DC8 241, 184, 163, 0
   \   0000021C   5404               DC16 1108
   \   0000021E   F3BAA400           DC8 243, 186, 164, 0
   \   00000222   5704               DC16 1111
   \   00000224   F5BFA700           DC8 245, 191, 167, 0
   \   00000228   5604               DC16 1110
   \   0000022A   69B3A600           DC8 105, 179, 166, 0
   \   0000022E   5504               DC16 1109
   \   00000230   73BE7300           DC8 115, 190, 115, 0
   \   00000234   A000               DC16 160
   \   00000236   5FA02000           DC8 95, 160, 32, 0
   \   0000023A   A400               DC16 164
   \   0000023C   5FA4FD00           DC8 95, 164, 253, 0
   \   00000240   A600               DC16 166
   \   00000242   5FA65F00           DC8 95, 166, 95, 0
   \   00000246   B000               DC16 176
   \   00000248   F8B09C00           DC8 248, 176, 156, 0
   \   0000024C   B700               DC16 183
   \   0000024E   FAB79E00           DC8 250, 183, 158, 0
   \   00000252   0000               DC16 0
   \   00000254   00000000           DC8 0, 0, 0, 0
    704          {
    705            // CAPITAL Cyrillic letters (base)
    706            0x410,0x80,0xC0,0xE1, // А
    707            0x411,0x81,0xC1,0xE2, // Б
    708            0x412,0x82,0xC2,0xF7, // В
    709            0x413,0x83,0xC3,0xE7, // Г
    710            0x414,0x84,0xC4,0xE4, // Д
    711            0x415,0x85,0xC5,0xE5, // Е
    712            0x416,0x86,0xC6,0xF6, // Ж
    713            0x417,0x87,0xC7,0xFA, // З
    714            0x418,0x88,0xC8,0xE9, // И
    715            0x419,0x89,0xC9,0xEA, // Й
    716            0x41A,0x8A,0xCA,0xEB, // К
    717            0x41B,0x8B,0xCB,0xEC, // Л
    718            0x41C,0x8C,0xCC,0xED, // М
    719            0x41D,0x8D,0xCD,0xEE, // Н
    720            0x41E,0x8E,0xCE,0xEF, // О
    721            0x41F,0x8F,0xCF,0xF0, // П
    722            0x420,0x90,0xD0,0xF2, // Р
    723            0x421,0x91,0xD1,0xF3, // С
    724            0x422,0x92,0xD2,0xF4, // Т
    725            0x423,0x93,0xD3,0xF5, // У
    726            0x424,0x94,0xD4,0xE6, // Ф
    727            0x425,0x95,0xD5,0xE8, // Х
    728            0x426,0x96,0xD6,0xE3, // Ц
    729            0x427,0x97,0xD7,0xFE, // Ч
    730            0x428,0x98,0xD8,0xFB, // Ш
    731            0x429,0x99,0xD9,0xFD, // Щ
    732            0x42A,0x9A,0xDA,0xFF, // Ъ
    733            0x42B,0x9B,0xDB,0xF9, // Ы
    734            0x42C,0x9C,0xDC,0xF8, // Ь
    735            0x42D,0x9D,0xDD,0xFC, // Э
    736            0x42E,0x9E,0xDE,0xE0, // Ю
    737            0x42F,0x9F,0xDF,0xF1, // Я
    738            // CAPITAL Cyrillic letters (additional)
    739            0x402,'_',0x80,'_', // _ .*.*
    740            0x403,'_',0x81,'_', // _ .*.*
    741            0x409,'_',0x8A,'_', // _ .*.*
    742            0x40A,'_',0x8C,'_', // _ .*.*
    743            0x40C,'_',0x8D,'_', // _ .*.*
    744            0x40B,'_',0x8E,'_', // _ .*.*
    745            0x40F,'_',0x8F,'_', // _ .*.*
    746            0x40E,0xF6,0xA1,'_', // Ў ...*
    747            0x408,0x4A,0xA3,0x4A, // _ .*.*
    748            0x409,0x83,0xA5,0xBD, // _ .*..
    749            0x401,0xF0,0xA8,0xB3, // Ё
    750            0x404,0xF2,0xAA,0xB4, // Є
    751            0x407,0xF4,0xAF,0xB7, // Ї
    752            0x406,0x49,0xB2,0xB6, // _ .*..
    753            0x405,0x53,0xBD,0x53, // _ .*.*
    754            // SMALL Cyrillic letters (base)
    755            0x430,0xA0,0xE0,0xC1, // а
    756            0x431,0xA1,0xE1,0xC2, // б
    757            0x432,0xA2,0xE2,0xD7, // в
    758            0x433,0xA3,0xE3,0xC7, // г
    759            0x434,0xA4,0xE4,0xC4, // д
    760            0x435,0xA5,0xE5,0xC5, // е
    761            0x436,0xA6,0xE6,0xD6, // ж
    762            0x437,0xA7,0xE7,0xDA, // з
    763            0x438,0xA8,0xE8,0xC9, // и
    764            0x439,0xA9,0xE9,0xCA, // й
    765            0x43A,0xAA,0xEA,0xCB, // к
    766            0x43B,0xAB,0xEB,0xCC, // л
    767            0x43C,0xAC,0xEC,0xCD, // м
    768            0x43D,0xAD,0xED,0xCE, // н
    769            0x43E,0xAE,0xEE,0xCF, // о
    770            0x43F,0xAF,0xEF,0xD0, // п
    771            0x440,0xE0,0xF0,0xD2, // р
    772            0x441,0xE1,0xF1,0xD3, // с
    773            0x442,0xE2,0xF2,0xD4, // т
    774            0x443,0xE3,0xF3,0xD5, // у
    775            0x444,0xE4,0xF4,0xC6, // ф
    776            0x445,0xE5,0xF5,0xC8, // х
    777            0x446,0xE6,0xF6,0xC3, // ц
    778            0x447,0xE7,0xF7,0xDE, // ч
    779            0x448,0xE8,0xF8,0xDB, // ш
    780            0x449,0xE9,0xF9,0xDD, // щ
    781            0x44A,0xEA,0xFA,0xDF, // ъ
    782            0x44B,0xEB,0xFB,0xD9, // ы
    783            0x44C,0xEC,0xFC,0xD8, // ь
    784            0x44D,0xED,0xFD,0xDC, // э
    785            0x44E,0xEE,0xFE,0xC0, // ю
    786            0x44F,0xEF,0xFF,0xD1, // я
    787            // SMALL Cyrillic letters (additional)
    788            0x452,'_',0x90,'_', // _ .*.*
    789            0x453,'_',0x83,'_', // _ .*.*
    790            0x459,'_',0x9A,'_', // _ .*.*
    791            0x45A,'_',0x9C,'_', // _ .*.*
    792            0x45C,'_',0x9D,'_', // _ .*.*
    793            0x45B,'_',0x9E,'_', // _ .*.*
    794            0x45F,'_',0x9F,'_', // _ .*.*
    795            0x45E,0xF7,0xA2,'_', // ў ...*
    796            0x458,0x6A,0xBC,0x6A, // _ .*.*
    797            0x491,0xA3,0xB4,0xAD, // _ .*..
    798            0x451,0xF1,0xB8,0xA3, // ё
    799            0x454,0xF3,0xBA,0xA4, // є
    800            0x457,0xF5,0xBF,0xA7, // ї
    801            0x456,0x69,0xB3,0xA6, // _ .*..
    802            0x455,0x73,0xBE,0x73, // _ .*.*
    803            0x0A0,'_',0xA0,0x20, // space .*..
    804            0x0A4,'_',0xA4,0xFD, // ¤   .*..
    805            0x0A6,'_',0xA6,'_', // ¦   .*.*
    806            0x0B0,0xF8,0xB0,0x9C, // °
    807            0x0B7,0xFA,0xB7,0x9E, // ·
    808            // 0x2022,,0x95,0x95, //    .*..
    809            // 0x2116,0xFC,0xB9,0x23, // №   ...*
    810            // 0x2219,,0xF9,0x9E, //    .*..
    811            // 0x221A,0xFB,,0x96, // v   ..*.
    812            // 0x25A0,0xFE,,0x94, // ¦
    813            0x0000,0,0,0
    814          };
    815          

   \                                 In segment DATA_C, align 4, align-sorted
    816          const unsigned short win2unicode[128]=
   \                     win2unicode:
   \   00000000   020403041A20       DC16 1026, 1027, 8218, 1107, 8222, 8230, 8224, 8225, 8364, 8240, 1033
   \              53041E202620
   \              20202120AC20
   \              30200904    
   \   00000016   39200A040C04       DC16 8249, 1034, 1036, 1035, 1039, 1106, 8216, 8217, 8220, 8221, 8226
   \              0B040F045204
   \              182019201C20
   \              1D202220    
   \   0000002C   132014202000       DC16 8211, 8212, 32, 8482, 1113, 8250, 1114, 1116, 1115, 1119, 160
   \              222159043A20
   \              5A045C045B04
   \              5F04A000    
   \   00000042   0E045E040804       DC16 1038, 1118, 1032, 164, 1168, 166, 167, 1025, 169, 1028, 171, 172
   \              A4009004A600
   \              A7000104A900
   \              0404AB00AC00
   \   0000005A   AD00AE000704       DC16 173, 174, 1031, 176, 177, 1030, 1110, 1169, 181, 182, 183, 1105
   \              B000B1000604
   \              56049104B500
   \              B600B7005104
   \   00000072   16215404BB00       DC16 8470, 1108, 187, 1112, 1029, 1109, 1111, 1040, 1041, 1042, 1043
   \              580405045504
   \              570410041104
   \              12041304    
   \   00000088   140415041604       DC16 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054
   \              170418041904
   \              1A041B041C04
   \              1D041E04    
   \   0000009E   1F0420042104       DC16 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065
   \              220423042404
   \              250426042704
   \              28042904    
   \   000000B4   2A042B042C04       DC16 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076
   \              2D042E042F04
   \              300431043204
   \              33043404    
   \   000000CA   350436043704       DC16 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087
   \              380439043A04
   \              3B043C043D04
   \              3E043F04    
   \   000000E0   400441044204       DC16 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098
   \              430444044504
   \              460447044804
   \              49044A04    
   \   000000F6   4B044C044D04       DC16 1099, 1100, 1101, 1102, 1103
   \              4E044F04    
    817          {
    818            0x0402,0x0403,0x201A,0x0453,0x201E,0x2026,0x2020,0x2021,
    819            0x20AC,0x2030,0x0409,0x2039,0x040A,0x040C,0x040B,0x040F,
    820            0x0452,0x2018,0x2019,0x201C,0x201D,0x2022,0x2013,0x2014,
    821            0x0020,0x2122,0x0459,0x203A,0x045A,0x045C,0x045B,0x045F,
    822            0x00A0,0x040E,0x045E,0x0408,0x00A4,0x0490,0x00A6,0x00A7,
    823            0x0401,0x00A9,0x0404,0x00AB,0x00AC,0x00AD,0x00AE,0x0407,
    824            0x00B0,0x00B1,0x0406,0x0456,0x0491,0x00B5,0x00B6,0x00B7,
    825            0x0451,0x2116,0x0454,0x00BB,0x0458,0x0405,0x0455,0x0457,
    826            0x0410,0x0411,0x0412,0x0413,0x0414,0x0415,0x0416,0x0417,
    827            0x0418,0x0419,0x041A,0x041B,0x041C,0x041D,0x041E,0x041F,
    828            0x0420,0x0421,0x0422,0x0423,0x0424,0x0425,0x0426,0x0427,
    829            0x0428,0x0429,0x042A,0x042B,0x042C,0x042D,0x042E,0x042F,
    830            0x0430,0x0431,0x0432,0x0433,0x0434,0x0435,0x0436,0x0437,
    831            0x0438,0x0439,0x043A,0x043B,0x043C,0x043D,0x043E,0x043F,
    832            0x0440,0x0441,0x0442,0x0443,0x0444,0x0445,0x0446,0x0447,
    833            0x0448,0x0449,0x044A,0x044B,0x044C,0x044D,0x044E,0x044F
    834          };
    835          

   \                                 In segment CODE, align 4, keep-with-next
    836          unsigned int char8to16(int c)
    837          {
    838            if (c>=128)
   \                     char8to16:
   \   00000000   800050E3           CMP      R0,#+128
    839            {
    840              return(win2unicode[c-128]);
   \   00000004   0C209FA5           LDRGE    R2,??char8to16_0  ;; win2unicode
   \   00000008   FF10E0A3           MVNGE    R1,#+255
   \   0000000C   800082A0           ADDGE    R0,R2,R0, LSL #+1
   \   00000010   B00091A1           LDRHGE   R0,[R1, +R0]
    841            }
    842            return(c);
   \   00000014   1EFF2FE1           BX       LR               ;; return
   \                     ??char8to16_0:
   \   00000018   ........           DC32     win2unicode
    843          }
    844          

   \                                 In segment CODE, align 4, keep-with-next
    845          unsigned int char16to8(unsigned int c)
    846          {
    847            const TUNICODE2CHAR *p=unicode2char;
   \                     char16to8:
   \   00000000   38109FE5           LDR      R1,??char16to8_0  ;; unicode2char
    848            unsigned int i;
    849            if (c<128) return(c);
   \   00000004   800050E3           CMP      R0,#+128
   \   00000008   0100002A           BCS      ??char16to8_1
   \   0000000C   1EFF2FE1           BX       LR
    850            while((i=p->u))
    851            {
    852              if (c==i)
    853              {
    854                return(p->win);
    855              }
    856              p++;
   \                     ??char16to8_2:
   \   00000010   061081E2           ADD      R1,R1,#+6
   \                     ??char16to8_1:
   \   00000014   B020D1E1           LDRH     R2,[R1, #+0]
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   0300000A           BEQ      ??char16to8_3
   \   00000020   020050E1           CMP      R0,R2
   \   00000024   F9FFFF1A           BNE      ??char16to8_2
   \   00000028   0300D1E5           LDRB     R0,[R1, #+3]
   \   0000002C   1EFF2FE1           BX       LR
    857            }
    858            c&=0xFF;
   \                     ??char16to8_3:
   \   00000030   FF0000E2           AND      R0,R0,#0xFF
    859            if (c<32) return(' ');
   \   00000034   200050E3           CMP      R0,#+32
   \   00000038   2000A033           MOVCC    R0,#+32
    860            return(c);
   \   0000003C   1EFF2FE1           BX       LR               ;; return
   \                     ??char16to8_0:
   \   00000040   ........           DC32     unicode2char
    861          }
    862          

   \                                 In segment CODE, align 4, keep-with-next
    863          void ascii2ws(WSHDR *ws, const char *s)
    864          {
   \                     ascii2ws:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    865            char c;
    866            CutWSTR(ws,0);
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   260100EF           SWI      +294
   \   00000014   030000EA           B        ??ascii2ws_0
    867            while((c=*s++))
    868            {
    869              wsAppendChar(ws,char8to16(c));
   \                     ??ascii2ws_1:
   \   00000018   ........           BL       char8to16
   \   0000001C   0010A0E1           MOV      R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   1C0000EF           SWI      +28
    870            }
   \                     ??ascii2ws_0:
   \   00000028   ........           LDRB     R1,[R5], #+1
   \   0000002C   0100B0E1           MOVS     R0,R1
   \   00000030   F8FFFF1A           BNE      ??ascii2ws_1
    871          }
   \   00000034   3080BDE8           POP      {R4,R5,PC}       ;; return
    872          

   \                                 In segment CODE, align 4, keep-with-next
    873          void utf82win(char *d, const char *s)
    874          {
   \                     utf82win:
   \   00000000   030000EA           B        ??utf82win_0
    875            for (; *s; s+=2)
    876            {
    877              unsigned char ub = *s, lb = *(s+1);
    878              if (ub == 0xD0)
    879              {
    880                               if(lb == 0x81){*d = 0xA8;}//Ё
    881          		else if(lb == 0x86){*d = 0xB2;}//І
    882          		else if(lb == 0x87){*d = 0xAF;}//Ї
    883          		else if(lb == 0x84){*d = 0xAA;}//Є
    884          	  else {*d = lb + 48;}
    885              } else
    886              if (ub == 0xD1)
    887              {
    888                               if(lb == 0x91){*d = 0xB8;}//ё
    889          		else if(lb == 0x96){*d = 0xB3;}//і
    890          		else if(lb == 0x97){*d = 0xBF;}//ї
    891          		else if(lb == 0x94){*d = 0xBA;}//є
    892          	        else {*d = lb + 112;}
    893              } else
    894              if (ub == 0xD2)
    895              {
    896          //        if(lb == 0x91){*d = 0xB4;}//ґ
    897          //        if(lb == 0x90){*d = 0xA5;}//Ґ
    898                  if(lb == 0x91){*d = 0xE3;}//ґ->г
    899                  if(lb == 0x90){*d = 0xC3;}//Ґ->Г
    900              } else
    901              {
    902                *d = ub;
   \                     ??utf82win_1:
   \   00000004   0030C0E5           STRB     R3,[R0, #+0]
    903                s--;
   \   00000008   011041E2           SUB      R1,R1,#+1
    904              }
    905                d++;
   \                     ??utf82win_2:
   \   0000000C   010080E2           ADD      R0,R0,#+1
   \   00000010   021081E2           ADD      R1,R1,#+2
   \                     ??utf82win_0:
   \   00000014   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   2F00000A           BEQ      ??utf82win_3
   \   00000020   0230A0E1           MOV      R3,R2
   \   00000024   0120D1E5           LDRB     R2,[R1, #+1]
   \   00000028   D00053E3           CMP      R3,#+208
   \   0000002C   1000001A           BNE      ??utf82win_4
   \   00000030   810052E3           CMP      R2,#+129
   \   00000034   0200001A           BNE      ??utf82win_5
   \   00000038   A820A0E3           MOV      R2,#+168
   \                     ??utf82win_6:
   \   0000003C   0020C0E5           STRB     R2,[R0, #+0]
   \   00000040   F1FFFFEA           B        ??utf82win_2
   \                     ??utf82win_5:
   \   00000044   860052E3           CMP      R2,#+134
   \   00000048   B220A003           MOVEQ    R2,#+178
   \   0000004C   FAFFFF0A           BEQ      ??utf82win_6
   \   00000050   870052E3           CMP      R2,#+135
   \   00000054   0100001A           BNE      ??utf82win_7
   \   00000058   AF20A0E3           MOV      R2,#+175
   \                     ??utf82win_8:
   \   0000005C   F6FFFFEA           B        ??utf82win_6
   \                     ??utf82win_7:
   \   00000060   840052E3           CMP      R2,#+132
   \   00000064   AA20A003           MOVEQ    R2,#+170
   \   00000068   F3FFFF0A           BEQ      ??utf82win_6
   \   0000006C   302082E2           ADD      R2,R2,#+48
   \   00000070   F1FFFFEA           B        ??utf82win_6
   \                     ??utf82win_4:
   \   00000074   D10053E3           CMP      R3,#+209
   \   00000078   0F00001A           BNE      ??utf82win_9
   \   0000007C   910052E3           CMP      R2,#+145
   \   00000080   B820A003           MOVEQ    R2,#+184
   \   00000084   ECFFFF0A           BEQ      ??utf82win_6
   \   00000088   960052E3           CMP      R2,#+150
   \   0000008C   0200001A           BNE      ??utf82win_10
   \   00000090   B320A0E3           MOV      R2,#+179
   \                     ??utf82win_11:
   \   00000094   0020C0E5           STRB     R2,[R0, #+0]
   \   00000098   DBFFFFEA           B        ??utf82win_2
   \                     ??utf82win_10:
   \   0000009C   970052E3           CMP      R2,#+151
   \   000000A0   BF20A003           MOVEQ    R2,#+191
   \   000000A4   E4FFFF0A           BEQ      ??utf82win_6
   \   000000A8   940052E3           CMP      R2,#+148
   \   000000AC   BA20A003           MOVEQ    R2,#+186
   \   000000B0   E1FFFF0A           BEQ      ??utf82win_6
   \   000000B4   702082E2           ADD      R2,R2,#+112
   \   000000B8   DFFFFFEA           B        ??utf82win_6
   \                     ??utf82win_9:
   \   000000BC   D20053E3           CMP      R3,#+210
   \   000000C0   CFFFFF1A           BNE      ??utf82win_1
   \   000000C4   910052E3           CMP      R2,#+145
   \   000000C8   E320A003           MOVEQ    R2,#+227
   \   000000CC   F0FFFF0A           BEQ      ??utf82win_11
   \   000000D0   900052E3           CMP      R2,#+144
   \   000000D4   CCFFFF1A           BNE      ??utf82win_2
   \   000000D8   C320A0E3           MOV      R2,#+195
   \   000000DC   D6FFFFEA           B        ??utf82win_6
    906            }
    907            *d = 0;
   \                     ??utf82win_3:
   \   000000E0   0010A0E3           MOV      R1,#+0
   \   000000E4   0010C0E5           STRB     R1,[R0, #+0]
    908          }
   \   000000E8   1EFF2FE1           BX       LR               ;; return
    909          

   \                                 In segment CODE, align 4, keep-with-next
    910          long GetIDLETime(TTime intime, TDate indate)
    911          {
   \                     GetIDLETime:
   \   00000000   1F402DE9           PUSH     {R0-R4,LR}
   \   00000004   10D04DE2           SUB      SP,SP,#+16
    912           TTime endt;
    913           TDate endd;
    914          // TDate endd, resd;
    915           signed int res=0, rmin=0;
    916           long resul=0;
    917           GetDateTime(&endd, &endt);
   \   00000008   0D10A0E1           MOV      R1,SP
   \   0000000C   08008DE2           ADD      R0,SP,#+8
   \   00000010   B40000EF           SWI      +180
    918           res = endt.sec - intime.sec;
   \   00000014   0200DDE5           LDRB     R0,[SP, #+2]
   \   00000018   1210DDE5           LDRB     R1,[SP, #+18]
    919           if (res < 0)
    920           {
    921             res = 60 + res;
    922             rmin = 1;
    923           }
    924           resul = res;
    925           res = endt.min - intime.min - rmin;
   \   0000001C   1120DDE5           LDRB     R2,[SP, #+17]
   \   00000020   0040A0E3           MOV      R4,#+0
   \   00000024   010050E0           SUBS     R0,R0,R1
   \   00000028   0110DDE5           LDRB     R1,[SP, #+1]
   \   0000002C   3C008042           ADDMI    R0,R0,#+60
   \   00000030   0140A043           MOVMI    R4,#+1
   \   00000034   021041E0           SUB      R1,R1,R2
   \   00000038   041051E0           SUBS     R1,R1,R4
    926           rmin = 0;
    927           if (res <0 )
    928           {
    929             res = 60 + res;
   \   0000003C   3C108142           ADDMI    R1,R1,#+60
    930             rmin = 1;
    931           }
    932           resul = resul + res*60;
   \   00000040   3C30A0E3           MOV      R3,#+60
   \   00000044   930120E0           MLA      R0,R3,R1,R0
    933           res = endt.hour - intime.hour - rmin;
   \   00000048   0010DDE5           LDRB     R1,[SP, #+0]
   \   0000004C   1030DDE5           LDRB     R3,[SP, #+16]
   \   00000050   0020A0E3           MOV      R2,#+0
   \   00000054   0120A043           MOVMI    R2,#+1
   \   00000058   031041E0           SUB      R1,R1,R3
   \   0000005C   021051E0           SUBS     R1,R1,R2
    934           rmin = 0;
    935           if (res < 0) 
    936           {
    937             res = 24 + res;
   \   00000060   18108142           ADDMI    R1,R1,#+24
    938             rmin = 1;
    939           }
    940           resul = resul + res*3600;
   \   00000064   E13EA0E3           MOV      R3,#+3600
   \   00000068   930120E0           MLA      R0,R3,R1,R0
    941           res = endd.day - indate.day - rmin;
   \   0000006C   0D10DDE5           LDRB     R1,[SP, #+13]
   \   00000070   1D30DDE5           LDRB     R3,[SP, #+29]
   \   00000074   0020A0E3           MOV      R2,#+0
   \   00000078   0120A043           MOVMI    R2,#+1
   \   0000007C   031041E0           SUB      R1,R1,R3
   \   00000080   021051E0           SUBS     R1,R1,R2
    942           rmin = 0; 
    943           if (res < 0)
    944           {
    945             res = 31 + res;
   \   00000084   1F108142           ADDMI    R1,R1,#+31
    946          //   rmin=1;
    947           }
    948           resul = resul + res*86400;
    949          /*
    950           res = end.mounth - indate.mounth - rmin;
    951           rmin = 0;
    952           if (res < 0 )
    953           {
    954             res = 12 + res;
    955           }
    956           res = resul + res*2678400; mnogovato trowki
    957             */
    958           return(resul);
   \   00000088   502BA0E3           MOV      R2,#+81920
   \   0000008C   462D82E3           ORR      R2,R2,#0x1180
   \   00000090   920120E0           MLA      R0,R2,R1,R0
   \   00000094   20D08DE2           ADD      SP,SP,#+32
   \   00000098   1080BDE8           POP      {R4,PC}          ;; return
    959          }
    960          

   \                                 In segment CODE, align 4, keep-with-next
    961          char *utf82filename(char *str)
    962          {
   \                     utf82filename:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    963            int len = strlen(str)+16;
   \   00000008   1B0000EF           SWI      +27
   \   0000000C   105080E2           ADD      R5,R0,#+16
    964            WSHDR *ws = AllocWS(len);
   \   00000010   0500A0E1           MOV      R0,R5
   \   00000014   250100EF           SWI      +293
   \   00000018   0060A0E1           MOV      R6,R0
    965            char *res = malloc(len);
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   140000EF           SWI      +20
   \   00000024   0070A0E1           MOV      R7,R0
    966            utf8_2ws(ws, str, len);
   \   00000028   0520A0E1           MOV      R2,R5
   \   0000002C   0410A0E1           MOV      R1,R4
   \   00000030   0600A0E1           MOV      R0,R6
   \   00000034   E30100EF           SWI      +483
    967            ws_2str(ws, res, len);
   \   00000038   0520A0E1           MOV      R2,R5
   \   0000003C   0710A0E1           MOV      R1,R7
   \   00000040   0600A0E1           MOV      R0,R6
   \   00000044   A30000EF           SWI      +163
    968            FreeWS(ws);
   \   00000048   0600A0E1           MOV      R0,R6
   \   0000004C   290100EF           SWI      +297
    969            return res;
   \   00000050   0700A0E1           MOV      R0,R7
   \   00000054   F080BDE8           POP      {R4-R7,PC}       ;; return
    970          }
    971          

   \                                 In segment CODE, align 4, keep-with-next
    972          void CutWSStringWidth(WSHDR *ws, int width, int font)
    973          {
   \                     CutWSStringWidth:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    974            unsigned short *wsbody=ws->wsbody;
   \   00000008   007094E5           LDR      R7,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
    975            int wi = 0;
   \   00000014   0080A0E3           MOV      R8,#+0
    976            int index=0;
   \   00000018   0090A0E3           MOV      R9,#+0
   \   0000001C   050000EA           B        ??CutWSStringWidth_0
    977            while((wi<width)&&(index<=wsbody[0]))
    978            {
    979              index++;
   \                     ??CutWSStringWidth_1:
   \   00000020   019089E2           ADD      R9,R9,#+1
    980              wi += GetSymbolWidth(wsbody[index],font);
   \   00000024   890087E0           ADD      R0,R7,R9, LSL #+1
   \   00000028   B000D0E1           LDRH     R0,[R0, #+0]
   \   0000002C   0610A0E1           MOV      R1,R6
   \   00000030   E10100EF           SWI      +481
   \   00000034   088080E0           ADD      R8,R0,R8
    981            }
   \                     ??CutWSStringWidth_0:
   \   00000038   050058E1           CMP      R8,R5
   \   0000003C   020000AA           BGE      ??CutWSStringWidth_2
   \   00000040   B000D7E1           LDRH     R0,[R7, #+0]
   \   00000044   090050E1           CMP      R0,R9
   \   00000048   F4FFFFAA           BGE      ??CutWSStringWidth_1
    982            CutWSTR(ws, index-1);
   \                     ??CutWSStringWidth_2:
   \   0000004C   011049E2           SUB      R1,R9,#+1
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   260100EF           SWI      +294
    983          }
   \   00000058   F083BDE8           POP      {R4-R9,PC}       ;; return
    984          

   \                                 In segment DATA_C, align 4, align-sorted
    985          const char badchars[] = {'?', '*', '"', ':', '<', '>', '/', '\\', '|', '\n', '\r', ','};
   \                     badchars:
   \   00000000   3F2A223A3C3E       DC8 63, 42, 34, 58, 60, 62, 47, 92, 124, 10, 13, 44
   \              2F5C7C0A0D2C
    986          

   \                                 In segment CODE, align 4, keep-with-next
    987          void remove_bad_chars(char *s)
    988          {
   \                     remove_bad_chars:
   \   00000000   090000EA           B        ??remove_bad_chars_0
    989            int c;
    990            while((c=*s))
    991            {
    992              for (int i=0; i<(sizeof(badchars)/sizeof(char)); i++)
   \                     ??remove_bad_chars_1:
   \   00000004   011081E2           ADD      R1,R1,#+1
   \                     ??remove_bad_chars_2:
   \   00000008   0C0051E3           CMP      R1,#+12
   \   0000000C   0500002A           BCS      ??remove_bad_chars_3
    993              {
    994                if (c==badchars[i])
   \   00000010   28309FE5           LDR      R3,??remove_bad_chars_4  ;; badchars
   \   00000014   0330D1E7           LDRB     R3,[R1, +R3]
   \   00000018   030052E1           CMP      R2,R3
   \   0000001C   F8FFFF1A           BNE      ??remove_bad_chars_1
    995                {
    996                  *s='_';
   \   00000020   5F10A0E3           MOV      R1,#+95
   \   00000024   0010C0E5           STRB     R1,[R0, #+0]
    997                  break;
    998                }    
    999              }
   1000              s++;
   \                     ??remove_bad_chars_3:
   \   00000028   010080E2           ADD      R0,R0,#+1
   \                     ??remove_bad_chars_0:
   \   0000002C   0020D0E5           LDRB     R2,[R0, #+0]
   \   00000030   000052E3           CMP      R2,#+0
   \   00000034   0010A013           MOVNE    R1,#+0
   \   00000038   F2FFFF1A           BNE      ??remove_bad_chars_2
   1001            }
   1002          }
   \   0000003C   1EFF2FE1           BX       LR               ;; return
   \                     ??remove_bad_chars_4:
   \   00000040   ........           DC32     badchars
   1003          //EOL,EOF
   1004          
   1005          //************************ added by alfinant ***********************************
   1006          //вычисляет размер памяти занимаемый символом utf8 

   \                                 In segment CODE, align 4, keep-with-next
   1007          static int UTF8_GetSize(char *uchar)
   1008          {
   1009            int n=0;
   1010            
   1011            if (*uchar < 0x80) n=1;
   \                     UTF8_GetSize:
   \   00000000   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000004   0010A0E3           MOV      R1,#+0
   \   00000008   800050E3           CMP      R0,#+128
   \   0000000C   0110A033           MOVCC    R1,#+1
   \   00000010   0A00003A           BCC      ??UTF8_GetSize_0
   1012            else
   1013              if ((*uchar & 0xF8) == 0xF0) n=4;
   \   00000014   F82000E2           AND      R2,R0,#0xF8
   \   00000018   F00052E3           CMP      R2,#+240
   \   0000001C   0410A003           MOVEQ    R1,#+4
   \   00000020   0600000A           BEQ      ??UTF8_GetSize_0
   1014              else
   1015                if ((*uchar & 0xF0) == 0xE0) n=3;
   \   00000024   F02000E2           AND      R2,R0,#0xF0
   \   00000028   E00052E3           CMP      R2,#+224
   \   0000002C   0310A003           MOVEQ    R1,#+3
   \   00000030   0200000A           BEQ      ??UTF8_GetSize_0
   1016                else
   1017                  if ((*uchar & 0xE0) == 0xC0) n=2;
   \   00000034   E00000E2           AND      R0,R0,#0xE0
   \   00000038   C00050E3           CMP      R0,#+192
   \   0000003C   0210A003           MOVEQ    R1,#+2
   1018                //else
   1019                //if (*uchar == 0) n=0;
   1020                return n;  
   \                     ??UTF8_GetSize_0:
   \   00000040   0100A0E1           MOV      R0,R1
   \   00000044   1EFF2FE1           BX       LR               ;; return
   1021          }
   1022          

   \                                 In segment CODE, align 4, keep-with-next
   1023          static int DecodeUTF8(const char *bytes, unsigned *ch)
   1024          {
   \                     DecodeUTF8:
   \   00000000   30002DE9           PUSH     {R4,R5}
   1025            int n;
   1026            
   1027            if(*bytes < 0x80)
   \   00000004   0030D0E5           LDRB     R3,[R0, #+0]
   \   00000008   800053E3           CMP      R3,#+128
   1028            {
   1029              *ch = *bytes;
   \   0000000C   00308135           STRCC    R3,[R1, #+0]
   1030              return(1);
   \   00000010   0100A033           MOVCC    R0,#+1
   \   00000014   2100003A           BCC      ??DecodeUTF8_0
   1031            }
   1032            
   1033            if ((*bytes & 0xF8) == 0xF0) n=4;
   \   00000018   F82003E2           AND      R2,R3,#0xF8
   \   0000001C   F00052E3           CMP      R2,#+240
   \   00000020   0900001A           BNE      ??DecodeUTF8_1
   \   00000024   0420A0E3           MOV      R2,#+4
   1034            else
   1035              if ((*bytes & 0xF0) == 0xE0) n=3;
   1036            else
   1037              if ((*bytes & 0xE0) == 0xC0) n=2;
   1038            else
   1039              return(0);
   1040            
   1041            *ch= *bytes & ((0x07 << (4 - n)) | 0x03);
   \                     ??DecodeUTF8_2:
   \   00000028   07C0A0E3           MOV      R12,#+7
   \   0000002C   0240A0E1           MOV      R4,R2
   \   00000030   044064E2           RSB      R4,R4,#+4
   \   00000034   0350A0E3           MOV      R5,#+3
   \   00000038   1C4485E1           ORR      R4,R5,R12, LSL R4
   \   0000003C   033004E0           AND      R3,R4,R3
   \   00000040   003081E5           STR      R3,[R1, #+0]
   1042            
   1043            for (int i=1; i < n; ++i)
   \   00000044   0130A0E3           MOV      R3,#+1
   \   00000048   110000EA           B        ??DecodeUTF8_3
   \                     ??DecodeUTF8_1:
   \   0000004C   F02003E2           AND      R2,R3,#0xF0
   \   00000050   E00052E3           CMP      R2,#+224
   \   00000054   0320A003           MOVEQ    R2,#+3
   \   00000058   F2FFFF0A           BEQ      ??DecodeUTF8_2
   \   0000005C   E02003E2           AND      R2,R3,#0xE0
   \   00000060   C00052E3           CMP      R2,#+192
   \   00000064   0220A003           MOVEQ    R2,#+2
   \   00000068   EEFFFF0A           BEQ      ??DecodeUTF8_2
   \   0000006C   0000A0E3           MOV      R0,#+0
   \   00000070   0A0000EA           B        ??DecodeUTF8_0
   1044            {
   1045             *ch <<=6;
   \                     ??DecodeUTF8_4:
   \   00000074   004091E5           LDR      R4,[R1, #+0]
   1046             *ch |= (*++bytes & 0x3F);
   1047            }
   \   00000078   013083E2           ADD      R3,R3,#+1
   \   0000007C   04C3A0E1           LSL      R12,R4,#+6
   \   00000080   00C081E5           STR      R12,[R1, #+0]
   \   00000084   0140F0E5           LDRB     R4,[R0, #+1]!
   \   00000088   3F4004E2           AND      R4,R4,#0x3F
   \   0000008C   0C4084E1           ORR      R4,R4,R12
   \   00000090   004081E5           STR      R4,[R1, #+0]
   \                     ??DecodeUTF8_3:
   \   00000094   020053E1           CMP      R3,R2
   \   00000098   F5FFFFBA           BLT      ??DecodeUTF8_4
   1048            return n;
   \   0000009C   0200A0E1           MOV      R0,R2
   \                     ??DecodeUTF8_0:
   \   000000A0   3000BDE8           POP      {R4,R5}
   \   000000A4   1EFF2FE1           BX       LR               ;; return
   1049          }
   1050          

   \                                 In segment CODE, align 4, keep-with-next
   1051          static int EncodeUTF8(unsigned ch, int len, char *bytes)
   1052          {
   \                     EncodeUTF8:
   \   00000000   10002DE9           PUSH     {R4}
   1053            if (ch <= 0x7F)
   \   00000004   800050E3           CMP      R0,#+128
   \   00000008   0400002A           BCS      ??EncodeUTF8_0
   1054            {
   1055              if (len >=1)
   \   0000000C   010051E3           CMP      R1,#+1
   \   00000010   2C0000BA           BLT      ??EncodeUTF8_1
   1056              {
   1057                *bytes = ch;
   \   00000014   0000C2E5           STRB     R0,[R2, #+0]
   1058                return(1);
   \   00000018   0100A0E3           MOV      R0,#+1
   \   0000001C   2A0000EA           B        ??EncodeUTF8_2
   1059              } 
   1060            }
   1061            else
   1062              if (ch <= 0x7FF)
   \                     ??EncodeUTF8_0:
   \   00000020   3F3000E2           AND      R3,R0,#0x3F
   \   00000024   803083E3           ORR      R3,R3,#0x80
   \   00000028   20C3A0E1           LSR      R12,R0,#+6
   \   0000002C   800E50E3           CMP      R0,#+2048
   \   00000030   0700002A           BCS      ??EncodeUTF8_3
   1063              {
   1064                if (len >=2)
   \   00000034   020051E3           CMP      R1,#+2
   \   00000038   220000BA           BLT      ??EncodeUTF8_1
   1065                {
   1066                  *bytes++ = (0xC0 | (0x1F & (ch >> 6)));
   \   0000003C   1F000CE2           AND      R0,R12,#0x1F
   \   00000040   C00080E3           ORR      R0,R0,#0xC0
   \   00000044   ........           STRB     R0,[R2], #+1
   1067                  *bytes = 0x80 |(0x3F & ch);
   \   00000048   0030C2E5           STRB     R3,[R2, #+0]
   1068                  return(2);
   \   0000004C   0200A0E3           MOV      R0,#+2
   \   00000050   1D0000EA           B        ??EncodeUTF8_2
   1069                }
   1070              }
   1071            else
   1072              if (ch <= 0xFFFF)
   \                     ??EncodeUTF8_3:
   \   00000054   3F400CE2           AND      R4,R12,#0x3F
   \   00000058   80C084E3           ORR      R12,R4,#0x80
   \   0000005C   2046A0E1           LSR      R4,R0,#+12
   \   00000060   400B50E3           CMP      R0,#+65536
   \   00000064   0800002A           BCS      ??EncodeUTF8_4
   1073              {
   1074                if (len >=3)
   \   00000068   030051E3           CMP      R1,#+3
   \   0000006C   150000BA           BLT      ??EncodeUTF8_1
   1075                {
   1076                  *bytes++ = 0xE0 | (0x0F & (ch >> 12));
   \   00000070   0F0004E2           AND      R0,R4,#0xF
   \   00000074   E00080E3           ORR      R0,R0,#0xE0
   \   00000078   ........           STRB     R0,[R2], #+1
   1077                  *bytes++ = 0x80 | (0x3F & (ch >> 6));
   \   0000007C   ........           STRB     R12,[R2], #+1
   1078                  *bytes = 0x80 | (0x3F & ch);
   \   00000080   0030C2E5           STRB     R3,[R2, #+0]
   1079                  return(3);
   \   00000084   0300A0E3           MOV      R0,#+3
   \   00000088   0F0000EA           B        ??EncodeUTF8_2
   1080                }
   1081              }
   1082            else
   1083              if (ch <= 0x10FFFF)
   \                     ??EncodeUTF8_4:
   \   0000008C   440950E3           CMP      R0,#+1114112
   \   00000090   0C00002A           BCS      ??EncodeUTF8_1
   1084              {
   1085                if (len >=4)
   \   00000094   040051E3           CMP      R1,#+4
   \   00000098   0A0000BA           BLT      ??EncodeUTF8_1
   1086                {
   1087                  *bytes++ = 0xF0 | (0x07 & (ch >> 18));
   \   0000009C   2009A0E1           LSR      R0,R0,#+18
   \   000000A0   070000E2           AND      R0,R0,#0x7
   \   000000A4   F00080E3           ORR      R0,R0,#0xF0
   \   000000A8   ........           STRB     R0,[R2], #+1
   1088                  *bytes++ = 0x80 | (0x3F & (ch >> 12));
   \   000000AC   3F0004E2           AND      R0,R4,#0x3F
   \   000000B0   800080E3           ORR      R0,R0,#0x80
   \   000000B4   ........           STRB     R0,[R2], #+1
   1089                  *bytes++ = 0x80 | (0x3F & (ch >> 6));
   \   000000B8   ........           STRB     R12,[R2], #+1
   1090                  *bytes = 0x80 | (0x3F & ch);
   \   000000BC   0030C2E5           STRB     R3,[R2, #+0]
   1091                  return(4);
   \   000000C0   0400A0E3           MOV      R0,#+4
   \   000000C4   000000EA           B        ??EncodeUTF8_2
   1092                }
   1093              }
   1094            return(0);
   \                     ??EncodeUTF8_1:
   \   000000C8   0000A0E3           MOV      R0,#+0
   \                     ??EncodeUTF8_2:
   \   000000CC   1000BDE8           POP      {R4}
   \   000000D0   1EFF2FE1           BX       LR               ;; return
   1095          }
   1096          
   1097          //получить кол-во символов в utf8 строке

   \                                 In segment CODE, align 4, keep-with-next
   1098          int utf8_syms_n(char* utf8_str, int len)
   1099          {
   \                     utf8_syms_n:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   1100            int n=0;
   \   0000000C   0060A0E3           MOV      R6,#+0
   1101            char* s = utf8_str;  
   \   00000010   0470A0E1           MOV      R7,R4
   \   00000014   030000EA           B        ??utf8_syms_n_0
   1102            
   1103            while (s < (utf8_str + len))
   1104            {
   1105             s+=UTF8_GetSize(s);
   \                     ??utf8_syms_n_1:
   \   00000018   0700A0E1           MOV      R0,R7
   \   0000001C   ........           BL       UTF8_GetSize
   \   00000020   077080E0           ADD      R7,R0,R7
   1106             n++;
   \   00000024   016086E2           ADD      R6,R6,#+1
   1107            }
   \                     ??utf8_syms_n_0:
   \   00000028   040085E0           ADD      R0,R5,R4
   \   0000002C   000057E1           CMP      R7,R0
   \   00000030   F8FFFF3A           BCC      ??utf8_syms_n_1
   1108            return n;
   \   00000034   0600A0E1           MOV      R0,R6
   \   00000038   F080BDE8           POP      {R4-R7,PC}       ;; return
   1109          }
   1110          

   \                                 In segment CODE, align 4, keep-with-next
   1111          int Replace_Smiles_Syms(char* utf8_str)
   1112          {//адаптирует utf-8 стороку под WSHDR, если там есть смайлы и символы выше 0xFFFF 
   \                     Replace_Smiles_Syms:
   \   00000000   F1432DE9           PUSH     {R0,R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1113            unsigned ch;
   1114            unsigned short wchar;
   1115            int n=0;
   \   00000008   0050A0E3           MOV      R5,#+0
   1116            char* b = utf8_str;
   \   0000000C   0460A0E1           MOV      R6,R4
   1117            char* u = utf8_str;
   \   00000010   0470A0E1           MOV      R7,R4
   1118            
   1119            int len = strlen(utf8_str);
   \   00000014   1B0000EF           SWI      +27
   \   00000018   0080A0E1           MOV      R8,R0
   \   0000001C   020000EA           B        ??Replace_Smiles_Syms_1
   1120            
   1121            while (b < (utf8_str + len))
   1122            {
   1123              wchar=0xFFFF;
   1124              ch=0;
   1125              
   1126              switch(UTF8_GetSize(b))
   1127              {
   1128              case 0:
   1129                return(0);
   1130              
   1131              case 1:
   1132                *u++ = *b++;
   \                     ??Replace_Smiles_Syms_2:
   \   00000020   ........           LDRB     R0,[R6], #+1
   1133                n++;
   \   00000024   015085E2           ADD      R5,R5,#+1
   \                     ??Replace_Smiles_Syms_3:
   \   00000028   ........           STRB     R0,[R7], #+1
   \                     ??Replace_Smiles_Syms_1:
   \   0000002C   0000A0E3           MOV      R0,#+0
   \   00000030   041088E0           ADD      R1,R8,R4
   \   00000034   010056E1           CMP      R6,R1
   \   00000038   6800002A           BCS      ??Replace_Smiles_Syms_4
   \   0000003C   FF90A0E3           MOV      R9,#+255
   \   00000040   FF9C89E3           ORR      R9,R9,#0xFF00
   \   00000044   00008DE5           STR      R0,[SP, #+0]
   \   00000048   0600A0E1           MOV      R0,R6
   \   0000004C   ........           BL       UTF8_GetSize
   \   00000050   040050E3           CMP      R0,#+4
   \   00000054   F4FFFF8A           BHI      ??Replace_Smiles_Syms_1
   \   00000058   011F8FE2           ADR      R1,??Replace_Smiles_Syms_0
   \   0000005C   D01091E1           LDRSB    R1,[R1, R0]
   \   00000060   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??Replace_Smiles_Syms_0:
   \   00000064   01EE0308           DC8      +1,+238,+3,+8
   \   00000068   38000000           DC8      +56,+0,+0,+0
   \                     ??Replace_Smiles_Syms_5:
   \   0000006C   0000A0E3           MOV      R0,#+0
   \   00000070   F283BDE8           POP      {R1,R4-R9,PC}
   1134              break;
   1135              
   1136              case 2:
   1137                *u++ = *b++;
   \                     ??Replace_Smiles_Syms_6:
   \   00000074   ........           LDRB     R0,[R6], #+1
   1138                *u++ = *b++;
   1139                n+=2;
   \   00000078   025085E2           ADD      R5,R5,#+2
   \   0000007C   ........           STRB     R0,[R7], #+1
   \   00000080   ........           LDRB     R0,[R6], #+1
   \   00000084   E7FFFFEA           B        ??Replace_Smiles_Syms_3
   1140                break; 
   1141              
   1142              case 3:
   1143                DecodeUTF8(b, &ch);
   \                     ??Replace_Smiles_Syms_7:
   \   00000088   0D10A0E1           MOV      R1,SP
   \   0000008C   0600A0E1           MOV      R0,R6
   \   00000090   ........           BL       DecodeUTF8
   1144          
   1145                if (ch >= 0x2600 && ch <= 0x27BF)
   \   00000094   00009DE5           LDR      R0,[SP, #+0]
   \   00000098   980D50E3           CMP      R0,#+9728
   \   0000009C   1A00003A           BCC      ??Replace_Smiles_Syms_8
   \   000000A0   9F0D50E3           CMP      R0,#+10176
   \   000000A4   1800002A           BCS      ??Replace_Smiles_Syms_8
   1146                {
   1147                  if (ch==0x2639) wchar=0xE200+113;
   \   000000A8   3910A0E3           MOV      R1,#+57
   \   000000AC   981D81E3           ORR      R1,R1,#0x2600
   \   000000B0   010050E1           CMP      R0,R1
   \   000000B4   7190A003           MOVEQ    R9,#+113
   \   000000B8   0B00000A           BEQ      ??Replace_Smiles_Syms_9
   1148                  if (ch==0x263A) wchar=0xE200+114;
   \   000000BC   011081E2           ADD      R1,R1,#+1
   \   000000C0   010050E1           CMP      R0,R1
   \   000000C4   7290A003           MOVEQ    R9,#+114
   \   000000C8   0700000A           BEQ      ??Replace_Smiles_Syms_9
   1149                  if (ch==0x270C) wchar=0xE200+115;
   \   000000CC   D21081E2           ADD      R1,R1,#+210
   \   000000D0   010050E1           CMP      R0,R1
   \   000000D4   7390A003           MOVEQ    R9,#+115
   \   000000D8   0300000A           BEQ      ??Replace_Smiles_Syms_9
   1150                  if (ch==0x2764) wchar=0xE200+116;
   \   000000DC   581081E2           ADD      R1,R1,#+88
   \   000000E0   010050E1           CMP      R0,R1
   \   000000E4   0100001A           BNE      ??Replace_Smiles_Syms_10
   \   000000E8   7490A0E3           MOV      R9,#+116
   \                     ??Replace_Smiles_Syms_9:
   \   000000EC   E29C89E3           ORR      R9,R9,#0xE200
   1151                  
   1152                  int i= EncodeUTF8(wchar, 4, u);
   \                     ??Replace_Smiles_Syms_10:
   \   000000F0   0720A0E1           MOV      R2,R7
   \   000000F4   0410A0E3           MOV      R1,#+4
   \   000000F8   0900A0E1           MOV      R0,R9
   \   000000FC   ........           BL       EncodeUTF8
   1153                  n+=i;
   \   00000100   055080E0           ADD      R5,R0,R5
   1154                  u+=i;
   \   00000104   077080E0           ADD      R7,R0,R7
   \   00000108   050000EA           B        ??Replace_Smiles_Syms_11
   1155                  b+=3;
   1156                }
   1157                else
   1158                  if (ch >= 0xFE00 && ch <= 0xFE0F)//селекторы вариантов начертания-игнор
   \                     ??Replace_Smiles_Syms_8:
   \   0000010C   FE0C50E3           CMP      R0,#+65024
   \   00000110   0500003A           BCC      ??Replace_Smiles_Syms_12
   \   00000114   1010A0E3           MOV      R1,#+16
   \   00000118   FE1C81E3           ORR      R1,R1,#0xFE00
   \   0000011C   010050E1           CMP      R0,R1
   \   00000120   0100002A           BCS      ??Replace_Smiles_Syms_12
   1159                    b+=3;
   \                     ??Replace_Smiles_Syms_11:
   \   00000124   036086E2           ADD      R6,R6,#+3
   \   00000128   BFFFFFEA           B        ??Replace_Smiles_Syms_1
   1160                  else
   1161                  {
   1162                    *u++ = *b++;
   \                     ??Replace_Smiles_Syms_12:
   \   0000012C   ........           LDRB     R0,[R6], #+1
   1163                    *u++ = *b++;
   1164                    *u++ = *b++;
   1165                    n+=3;
   \   00000130   035085E2           ADD      R5,R5,#+3
   \   00000134   ........           STRB     R0,[R7], #+1
   \   00000138   ........           LDRB     R0,[R6], #+1
   \   0000013C   ........           STRB     R0,[R7], #+1
   \   00000140   ........           LDRB     R0,[R6], #+1
   \   00000144   B7FFFFEA           B        ??Replace_Smiles_Syms_3
   1166                  }
   1167                  break;
   1168              
   1169              case 4:
   1170                b += DecodeUTF8(b, &ch);
   \                     ??Replace_Smiles_Syms_13:
   \   00000148   0D10A0E1           MOV      R1,SP
   \   0000014C   0600A0E1           MOV      R0,R6
   \   00000150   ........           BL       DecodeUTF8
   \   00000154   066080E0           ADD      R6,R0,R6
   1171                if (ch >= 0x1F600 && ch < 0x1F650)//emoji
   \   00000158   00009DE5           LDR      R0,[SP, #+0]
   \   0000015C   401BA0E3           MOV      R1,#+65536
   \   00000160   F61C81E3           ORR      R1,R1,#0xF600
   \   00000164   010050E1           CMP      R0,R1
   \   00000168   0600003A           BCC      ??Replace_Smiles_Syms_14
   \   0000016C   501081E3           ORR      R1,R1,#0x50
   \   00000170   010050E1           CMP      R0,R1
   \   00000174   1100002A           BCS      ??Replace_Smiles_Syms_15
   1172                  wchar=0xE200 + (ch - 0x1F600) + 3;
   \   00000178   0310A0E3           MOV      R1,#+3
   \   0000017C   EC1C81E3           ORR      R1,R1,#0xEC00
   \                     ??Replace_Smiles_Syms_16:
   \   00000180   009081E0           ADD      R9,R1,R0
   \   00000184   0D0000EA           B        ??Replace_Smiles_Syms_15
   1173                else
   1174                  if (ch >= 0x1F440 && ch <= 0x1F450)
   \                     ??Replace_Smiles_Syms_14:
   \   00000188   701F41E2           SUB      R1,R1,#+448
   \   0000018C   010050E1           CMP      R0,R1
   \   00000190   0500003A           BCC      ??Replace_Smiles_Syms_17
   \   00000194   111081E3           ORR      R1,R1,#0x11
   \   00000198   010050E1           CMP      R0,R1
   \   0000019C   0700002A           BCS      ??Replace_Smiles_Syms_15
   1175                    wchar=0xE200 + ch - 0x1F440 + 96;      
   \   000001A0   2010A0E3           MOV      R1,#+32
   \   000001A4   EE1C81E3           ORR      R1,R1,#0xEE00
   \   000001A8   F4FFFFEA           B        ??Replace_Smiles_Syms_16
   1176                  else
   1177                    if (ch >= 0x1F3FB && ch <= 0x1F3FF)//модификаторы эмоджи-игнор
   \                     ??Replace_Smiles_Syms_17:
   \   000001AC   451041E2           SUB      R1,R1,#+69
   \   000001B0   010050E1           CMP      R0,R1
   \   000001B4   0100003A           BCC      ??Replace_Smiles_Syms_15
   \   000001B8   7D0B50E3           CMP      R0,#+128000
   \   000001BC   9AFFFF3A           BCC      ??Replace_Smiles_Syms_1
   1178                      break;
   1179                  int i= EncodeUTF8(wchar, 4, u);
   \                     ??Replace_Smiles_Syms_15:
   \   000001C0   0720A0E1           MOV      R2,R7
   \   000001C4   0410A0E3           MOV      R1,#+4
   \   000001C8   0908A0E1           MOV      R0,R9, LSL #+16
   \   000001CC   2008A0E1           MOV      R0,R0, LSR #+16
   \   000001D0   ........           BL       EncodeUTF8
   1180                  n+=i;
   \   000001D4   055080E0           ADD      R5,R0,R5
   1181                  u+=i;
   \   000001D8   077080E0           ADD      R7,R0,R7
   \   000001DC   92FFFFEA           B        ??Replace_Smiles_Syms_1
   1182                  break;
   1183              }
   1184            }
   1185            
   1186            *u='\0';
   \                     ??Replace_Smiles_Syms_4:
   \   000001E0   0000C7E5           STRB     R0,[R7, #+0]
   1187            return n;
   \   000001E4   0500A0E1           MOV      R0,R5
   \   000001E8   F283BDE8           POP      {R1,R4-R9,PC}    ;; return
   1188          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     Repl_chars

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     `?<Constant "Bad UTF-8 Encoding en...">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     `?<Constant "Bad UTF-8 Encoding en...">` + 44

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   ........           DC32     `?<Constant "Bad UTF-8 Encoding en...">` + 88

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for Repl_chars>`:
   \   00000000   2661706F733B       DC8 "&apos;"
   \              00          
   \   00000007   27                 DC8 39
   \   00000008   262333393B00       DC8 26H, 23H, 33H, 39H, 3BH, 0, 0
   \              00          
   \   0000000F   27                 DC8 39
   \   00000010   2671756F743B       DC8 "&quot;"
   \              00          
   \   00000017   22                 DC8 34
   \   00000018   266C743B0000       DC8 26H, 6CH, 74H, 3BH, 0, 0, 0
   \              00          
   \   0000001F   3C                 DC8 60
   \   00000020   2667743B0000       DC8 26H, 67H, 74H, 3BH, 0, 0, 0
   \              00          
   \   00000027   3E                 DC8 62
   \   00000028   26616D703B00       DC8 26H, 61H, 6DH, 70H, 3BH, 0, 0
   \              00          
   \   0000002F   26                 DC8 38

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Bad UTF-8 Encoding en...">`:
   \   00000000   426164205554       DC8 "Bad UTF-8 Encoding encountered (chr<0xC0)"
   \              462D3820456E
   \              636F64696E67
   \              20656E636F75
   \              6E7465726564
   \              20286368723C
   \              307843302900
   \   0000002A   0000               DC8 0, 0
   \   0000002C   426164205554       DC8 "Bad UTF-8 Encoding encountered (chr2<0x80)"
   \              462D3820456E
   \              636F64696E67
   \              20656E636F75
   \              6E7465726564
   \              202863687232
   \              3C3078383029
   \              00          
   \   00000057   00                 DC8 0
   \   00000058   426164205554       DC8 "Bad UTF-8 Encoding encountered"
   \              462D3820456E
   \              636F64696E67
   \              20656E636F75
   \              6E7465726564
   \              00          
   \   00000077   00                 DC8 0
   1189          

   Maximum stack usage in bytes:

     Function             CSTACK
     --------             ------
     ANSI2UTF8               20
     Correct_UTF8_String      8
     CutWSStringWidth        28
     DecodeUTF8               8
     EncodeUTF8               4
     GetIDLETime             40
     GetSpecialSym           36
     GetSpecialSymMaskN       0
     Get_Param_Value         20
     Mask_Special_Syms       36
     Replace_Smiles_Syms     32
     Replace_Special_Syms    28
     UTF8_GetSize             0
     ascii2ws                12
     char16to8                0
     char8to16                0
     convUTF8_to_ANSI        20
     convUTF8_to_ANSI_STR    24
     remove_bad_chars         0
     str2lower                8
     str2lower_ANSI           8
     stricmp                 16
     stristr                 20
     strnicmp                24
     tolower                  0
     utf16_to_utf8           36
     utf82filename           20
     utf82win                 0
     utf8_2unicode            8
     utf8_syms_n             20
     utf8_to_utf16           16


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     Repl_chars_count                  4
     Repl_chars                       48
     utf8_2unicode                   172
     GetSpecialSym                   144
     GetSpecialSymMaskN               48
     Replace_Special_Syms            116
     Mask_Special_Syms               184
     ?Subroutine30                     8
     Get_Param_Value                 188
     convUTF8_to_ANSI                232
     str2lower                       100
     ?Subroutine31                     8
     tolower                          56
     stricmp                          56
     strnicmp                        104
     stristr                         104
     str2lower_ANSI                   84
     convUTF8_to_ANSI_STR            420
     utf8_to_utf16                   276
     utf16_to_utf8                   356
     Correct_UTF8_String              80
     ANSI2UTF8                       120
     unicode2char                    600
     win2unicode                     256
     char8to16                        28
     char16to8                        68
     ascii2ws                         56
     utf82win                        236
     GetIDLETime                     156
     utf82filename                    88
     CutWSStringWidth                 92
     badchars                         12
     remove_bad_chars                 68
     UTF8_GetSize                     72
     DecodeUTF8                      168
     EncodeUTF8                      212
     utf8_syms_n                      60
     Replace_Smiles_Syms             492
     ??DataTable2                      4
     ??DataTable6                      4
     ??DataTable7                      4
     ??DataTable8                      4
     ?<Initializer for Repl_chars>    48
     ?<Constant "Bad UTF-8 Encoding en...">
                                     120
      Others                         156

 
 4 812 bytes in segment CODE
   992 bytes in segment DATA_C
    48 bytes in segment DATA_I
    48 bytes in segment DATA_ID
    12 bytes in segment INITTAB
 
 4 612 bytes of CODE  memory (+ 212 bytes shared)
 1 040 bytes of CONST memory
    48 bytes of DATA  memory

Errors: none
Warnings: none
