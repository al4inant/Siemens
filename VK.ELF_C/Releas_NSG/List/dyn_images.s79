//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   15/Mar/2023  22:35:37 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_ /
//                       C\dyn_images.c                                      /
//    Command line    =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_ /
//                       C\dyn_images.c -D NEWSGOLD -D DEBUG -lCN            /
//                       D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_ /
//                       C\Releas_NSG\List\ -la D:\Users\alfinant\Documents\ /
//                       Siemens\Dev\IAR\VK.ELF_C\Releas_NSG\List\ -o        /
//                       D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_ /
//                       C\Releas_NSG\Obj\ -s9 --cpu_mode arm --endian       /
//                       little --cpu ARM926EJ-S --stack_align 4             /
//                       --interwork --diag_suppress Pe301 -e --fpu None     /
//                       --dlib_config D:\Users\alfinant\Documents\Siemens\I /
//                       AR\ARM\LIB\dl5tpainl8n.h -I                         /
//                       D:\Users\alfinant\Documents\Siemens\IAR\ARM\INC\    /
//                       --inline_threshold=2                                /
//    List file       =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_ /
//                       C\Releas_NSG\List\dyn_images.s79                    /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME dyn_images

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__dlib_file_descriptor", "0"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        PUBWEAK `?*?DATA_ID`
        MULTWEAK ??AddImage??rT
        MULTWEAK ??CreateDynImage??rT
        MULTWEAK ??CreateIMGHDRFromAnyFile??rT
        MULTWEAK ??CreateIMGHDRFromFileAsync??rT
        MULTWEAK ??CreateIMGHDRFromMemory??rT
        MULTWEAK ??CreateIMGHDRFromMemoryAsync??rT
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable2 EQU 0
??DataTable3 EQU 0
??DataTable4 EQU 0
??DataTable5 EQU 0
??DataTable7 EQU 0
??DataTable8 EQU 0
??DataTable9 EQU 0
        MULTWEAK ??DisableDynImages??rT
        MULTWEAK ??EnableDynImages??rT
        MULTWEAK ??Example??rT
        MULTWEAK ??FreeDynPngList??rT
        MULTWEAK ??FreeDynSmiles??rT
        MULTWEAK ??LoadImages??rT
        MULTWEAK ??LoadSmiles??rT
        MULTWEAK ??LoadSmilesTo_0xE12A??rT
        MULTWEAK ??PNGLIST_Add??rT
        MULTWEAK ??PNGLIST_Free??rT
        MULTWEAK ??PNGLIST_GetImgByIndex??rT
        PUBWEAK ?init?tab?DATA_I
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC AddImage
        FUNCTION AddImage,0203H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC CreateDynImage
        FUNCTION CreateDynImage,0203H
        LOCFRAME CSTACK, 32, STACK
        PUBLIC CreateIMGHDRFromAnyFile
        FUNCTION CreateIMGHDRFromAnyFile,0203H
        LOCFRAME CSTACK, 316, STACK
        PUBLIC CreateIMGHDRFromFileAsync
        FUNCTION CreateIMGHDRFromFileAsync,0203H
        LOCFRAME CSTACK, 316, STACK
        PUBLIC CreateIMGHDRFromMemory
        FUNCTION CreateIMGHDRFromMemory,0203H
        LOCFRAME CSTACK, 52, STACK
        PUBLIC CreateIMGHDRFromMemoryAsync
        FUNCTION CreateIMGHDRFromMemoryAsync,0203H
        LOCFRAME CSTACK, 32, STACK
        PUBLIC DisableDynImages
        FUNCTION DisableDynImages,0201H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC EnableDynImages
        FUNCTION EnableDynImages,0201H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC Example
        FUNCTION Example,0203H
        LOCFRAME CSTACK, 348, STACK
        PUBLIC FreeDynPngList
        FUNCTION FreeDynPngList,0201H
        LOCFRAME CSTACK, 16, STACK
        PUBLIC FreeDynSmiles
        FUNCTION FreeDynSmiles,0201H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC LoadImages
        FUNCTION LoadImages,0201H
        LOCFRAME CSTACK, 140, STACK
        PUBLIC LoadSmiles
        FUNCTION LoadSmiles,0201H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC LoadSmilesTo_0xE12A
        FUNCTION LoadSmilesTo_0xE12A,0203H
        LOCFRAME CSTACK, 156, STACK
        FUNCTION LoadSmilesTo_0xE200,0203H
        LOCFRAME CSTACK, 156, STACK
        PUBLIC PNGLIST_Add
        FUNCTION PNGLIST_Add,0203H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC PNGLIST_Free
        FUNCTION PNGLIST_Free,0201H
        LOCFRAME CSTACK, 16, STACK
        PUBLIC PNGLIST_GetImgByIndex
        FUNCTION PNGLIST_GetImgByIndex,0203H
        PUBLIC dyn_pnglist
        PUBLIC pngtop
        PUBLIC smiles
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
AddImage            SYMBOL "AddImage"
??AddImage??rT      SYMBOL "??rT", AddImage
CreateDynImage      SYMBOL "CreateDynImage"
??CreateDynImage??rT SYMBOL "??rT", CreateDynImage
CreateIMGHDRFromAnyFile SYMBOL "CreateIMGHDRFromAnyFile"
??CreateIMGHDRFromAnyFile??rT SYMBOL "??rT", CreateIMGHDRFromAnyFile
CreateIMGHDRFromFileAsync SYMBOL "CreateIMGHDRFromFileAsync"
??CreateIMGHDRFromFileAsync??rT SYMBOL "??rT", CreateIMGHDRFromFileAsync
CreateIMGHDRFromMemory SYMBOL "CreateIMGHDRFromMemory"
??CreateIMGHDRFromMemory??rT SYMBOL "??rT", CreateIMGHDRFromMemory
CreateIMGHDRFromMemoryAsync SYMBOL "CreateIMGHDRFromMemoryAsync"
??CreateIMGHDRFromMemoryAsync??rT SYMBOL "??rT", CreateIMGHDRFromMemoryAsync
DisableDynImages    SYMBOL "DisableDynImages"
??DisableDynImages??rT SYMBOL "??rT", DisableDynImages
EnableDynImages     SYMBOL "EnableDynImages"
??EnableDynImages??rT SYMBOL "??rT", EnableDynImages
Example             SYMBOL "Example"
??Example??rT       SYMBOL "??rT", Example
FreeDynPngList      SYMBOL "FreeDynPngList"
??FreeDynPngList??rT SYMBOL "??rT", FreeDynPngList
FreeDynSmiles       SYMBOL "FreeDynSmiles"
??FreeDynSmiles??rT SYMBOL "??rT", FreeDynSmiles
LoadImages          SYMBOL "LoadImages"
??LoadImages??rT    SYMBOL "??rT", LoadImages
LoadSmiles          SYMBOL "LoadSmiles"
??LoadSmiles??rT    SYMBOL "??rT", LoadSmiles
LoadSmilesTo_0xE12A SYMBOL "LoadSmilesTo_0xE12A"
??LoadSmilesTo_0xE12A??rT SYMBOL "??rT", LoadSmilesTo_0xE12A
PNGLIST_Add         SYMBOL "PNGLIST_Add"
??PNGLIST_Add??rT   SYMBOL "??rT", PNGLIST_Add
PNGLIST_Free        SYMBOL "PNGLIST_Free"
??PNGLIST_Free??rT  SYMBOL "??rT", PNGLIST_Free
PNGLIST_GetImgByIndex SYMBOL "PNGLIST_GetImgByIndex"
??PNGLIST_GetImgByIndex??rT SYMBOL "??rT", PNGLIST_GetImgByIndex

        EXTERN APP_DIR


        RSEG DATA_I:DATA:SORT:NOROOT(2)
smiles:
        DS8 8
        REQUIRE `?<Initializer for smiles>`

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
pngtop:
        DS8 4

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
dyn_pnglist:
        DS8 4

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??DisableDynImages??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE DisableDynImages

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function DisableDynImages
        ARM
DisableDynImages:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SWI      +33209
        MOV      R1,#+0
        STR      R1,[R0, #+8]
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??EnableDynImages??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE EnableDynImages

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function EnableDynImages
        ARM
EnableDynImages:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SWI      +33209
        LDR      R1,??DataTable12  ;; dyn_pnglist
        LDR      R1,[R1, #+0]
        STR      R1,[R0, #+8]
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??FreeDynPngList??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE FreeDynPngList

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function FreeDynPngList
        ARM
FreeDynPngList:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        LDR      R4,??DataTable12  ;; dyn_pnglist
        LDR      R5,[R4, #+0]
        CMP      R5,#+0
        BEQ      ??FreeDynPngList_0
??FreeDynPngList_1:
        LDR      R0,[R5, #+8]
        CMP      R0,#+0
        BEQ      ??FreeDynPngList_2
        LDR      R1,[R0, #+4]
        CMP      R1,#+0
        BEQ      ??FreeDynPngList_3
        MOV      R0,R1
        SWI      +21
??FreeDynPngList_3:
        LDR      R0,[R5, #+8]
        SWI      +21
??FreeDynPngList_2:
        LDR      R6,[R5, #+0]
        MOV      R0,R5
        SWI      +21
        MOVS     R5,R6
        BNE      ??FreeDynPngList_1
??FreeDynPngList_0:
        MOV      R0,#+0
        STR      R0,[R4, #+0]
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??LoadSmilesTo_0xE12A??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE LoadSmilesTo_0xE12A

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function LoadSmilesTo_0xE12A
        ARM
LoadSmilesTo_0xE12A:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        SUB      SP,SP,#+128
        CFI CFA R13+152
        MOV      R7,R0
        MOV      R4,R1
        MOV      R5,R2
        MOV      R6,#+0
        CMP      R4,#+1
        BGE      ??LoadSmilesTo_0xE12A_0
        ADD      SP,SP,#+128
        CFI CFA R13+24
        POP      {R4-R8,PC}
        CFI CFA R13+152
??LoadSmilesTo_0xE12A_1:
        LDR      R3,??DataTable10  ;; APP_DIR
        LDR      R2,??DataTable6  ;; `?<Constant "%ssmiles\\\\%X.png">`
        MOV      R0,R7
        PUSH     {R0}
        CFI CFA R13+156
        MOV      R1,#+127
        ADD      R7,R7,#+1
        ADD      R0,SP,#+4
        SWI      +283
        MOV      R0,#+12
        SWI      +20
        MOV      R8,R0
        ADD      R0,R6,R5
        MOV      R1,#+42
        ORR      R1,R1,#0xE100
        ADD      R0,R1,R0
        SWI      +484
        STR      R0,[R8, #+4]
        MOV      R1,#+0
        ADD      R0,SP,#+4
        SWI      +489
        STR      R0,[R8, #+8]
        LDR      R0,??DataTable12  ;; dyn_pnglist
        ADD      R6,R6,#+1
        LDR      R1,[R0, #+0]
        STR      R1,[R8, #+0]
        STR      R8,[R0, #+0]
        ADD      SP,SP,#+4
        CFI CFA R13+152
??LoadSmilesTo_0xE12A_0:
        CMP      R6,R4
        BLT      ??LoadSmilesTo_0xE12A_1
        ADD      SP,SP,#+128      ;; stack cleaning
        CFI CFA R13+24
        POP      {R4-R8,PC}       ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??LoadSmilesTo_0xE200??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE LoadSmilesTo_0xE200

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function LoadSmilesTo_0xE200
        ARM
LoadSmilesTo_0xE200:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        SUB      SP,SP,#+128
        CFI CFA R13+152
        MOV      R4,R0
        MOV      R5,R1
        MOV      R6,R2
        MOV      R0,#+57856
        SWI      +502
        MOVS     R7,R0
        BEQ      ??LoadSmilesTo_0xE200_0
        MOV      R8,#+0
        CMP      R6,#+1
        BGE      ??LoadSmilesTo_0xE200_1
        ADD      SP,SP,#+128
        CFI CFA R13+24
        POP      {R4-R8,PC}
        CFI CFA R13+152
??LoadSmilesTo_0xE200_2:
        LDR      R3,??DataTable10  ;; APP_DIR
        LDR      R2,??DataTable6  ;; `?<Constant "%ssmiles\\\\%X.png">`
        ADD      R0,R4,R8
        PUSH     {R0}
        CFI CFA R13+156
        MOV      R1,#+127
        ADD      R0,SP,#+4
        SWI      +283
        MOV      R1,#+0
        ADD      R0,SP,#+4
        SWI      +489
        CMP      R0,#+0
        ADD      SP,SP,#+4
        CFI CFA R13+152
        BEQ      ??LoadSmilesTo_0xE200_3
        LDRB     R2,[R0, #+0]
        ADD      R1,R8,R5
        ADD      R1,R7,R1, LSL #+4
        STRB     R2,[R1, #+0]
        LDRB     R2,[R0, #+1]
        STRB     R2,[R1, #+1]
        LDRH     R2,[R0, #+2]
        STRH     R2,[R1, #+2]
        LDR      R2,[R0, #+4]
        STR      R2,[R1, #+4]
        MOV      R2,#+1
        STR      R2,[R1, #+8]
        STR      R2,[R1, #+12]
        SWI      +21
??LoadSmilesTo_0xE200_3:
        ADD      R8,R8,#+1
??LoadSmilesTo_0xE200_1:
        CMP      R8,R6
        BLT      ??LoadSmilesTo_0xE200_2
??LoadSmilesTo_0xE200_0:
        ADD      SP,SP,#+128      ;; stack cleaning
        CFI CFA R13+24
        POP      {R4-R8,PC}       ;; return
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable6:
        DC32     `?<Constant "%ssmiles\\\\%X.png">`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??LoadSmiles??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE LoadSmiles

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function LoadSmiles
        ARM
LoadSmiles:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R2,#+80
        MOV      R1,#+3
        MOV      R0,#+65536
        ORR      R0,R0,#0xF600
        BL       LoadSmilesTo_0xE200
        MOV      R2,#+17
        MOV      R1,#+96
        MOV      R0,#+64
        ORR      R0,R0,#0x1F400
        BL       LoadSmilesTo_0xE200
        MOV      R2,#+2
        MOV      R1,#+113
        MOV      R0,#+57
        ORR      R0,R0,#0x2600
        BL       LoadSmilesTo_0xE200
        MOV      R2,#+1
        MOV      R1,#+115
        MOV      R0,#+12
        ORR      R0,R0,#0x2700
        BL       LoadSmilesTo_0xE200
        MOV      R2,#+1
        MOV      R1,#+116
        MOV      R0,#+100
        ORR      R0,R0,#0x2700
        BL       LoadSmilesTo_0xE200
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??FreeDynSmiles??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE FreeDynSmiles

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function FreeDynSmiles
        ARM
FreeDynSmiles:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,#+0
??FreeDynSmiles_0:
        MOV      R0,#+35
        ORR      R0,R0,#0x4E00
        ADD      R0,R0,R4
        SWI      +492
        ADD      R4,R4,#+1
        CMP      R4,#+80
        BLT      ??FreeDynSmiles_0
        MOV      R4,#+0
??FreeDynSmiles_1:
        MOV      R0,#+128
        ORR      R0,R0,#0x4E00
        ADD      R0,R0,R4
        SWI      +492
        ADD      R4,R4,#+1
        CMP      R4,#+21
        BLT      ??FreeDynSmiles_1
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??PNGLIST_Add??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE PNGLIST_Add

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function PNGLIST_Add
        ARM
PNGLIST_Add:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
        MOV      R0,#+12
        SWI      +20
        MOV      R1,#+0
        STR      R1,[R0, #+4]
        LDR      R1,??DataTable11  ;; pngtop
        STR      R4,[R0, #+8]
        LDR      R2,[R1, #+0]
        STR      R2,[R0, #+0]
        STR      R0,[R1, #+0]
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??PNGLIST_Free??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE PNGLIST_Free

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function PNGLIST_Free
        ARM
PNGLIST_Free:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        LDR      R4,??DataTable11  ;; pngtop
        LDR      R5,[R4, #+0]
        CMP      R5,#+0
        BEQ      ??PNGLIST_Free_0
??PNGLIST_Free_1:
        LDR      R0,[R5, #+4]
        CMP      R0,#+0
        BEQ      ??PNGLIST_Free_2
        SWI      +21
??PNGLIST_Free_2:
        LDR      R0,[R5, #+8]
        CMP      R0,#+0
        BEQ      ??PNGLIST_Free_3
        LDR      R0,[R0, #+4]
        SWI      +21
        LDR      R0,[R5, #+8]
        SWI      +21
??PNGLIST_Free_3:
        LDR      R6,[R5, #+0]
        MOV      R0,R5
        SWI      +21
        MOVS     R5,R6
        BNE      ??PNGLIST_Free_1
??PNGLIST_Free_0:
        MOV      R0,#+0
        STR      R0,[R4, #+0]
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        THUMB
??PNGLIST_GetImgByIndex??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock18
        REQUIRE PNGLIST_GetImgByIndex

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI Function PNGLIST_GetImgByIndex
        ARM
PNGLIST_GetImgByIndex:
        LDR      R1,??DataTable11  ;; pngtop
        MOV      R2,#+0
        LDR      R1,[R1, #+0]
        B        ??PNGLIST_GetImgByIndex_0
??PNGLIST_GetImgByIndex_1:
        LDR      R1,[R1, #+0]
        ADD      R2,R2,#+1
??PNGLIST_GetImgByIndex_0:
        CMP      R1,#+0
        BEQ      ??PNGLIST_GetImgByIndex_2
        CMP      R2,R0
        BNE      ??PNGLIST_GetImgByIndex_1
        LDR      R0,[R1, #+8]
        BX       LR
??PNGLIST_GetImgByIndex_2:
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock19

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        THUMB
??LoadImages??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock20
        REQUIRE LoadImages

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI Function LoadImages
        ARM
LoadImages:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        LDR      R4,??LoadImages_0  ;; `?<Constant "%simg\\\\camera.png">`
        LDR      R5,??DataTable10  ;; APP_DIR
        SUB      SP,SP,#+128
        CFI CFA R13+140
        MOV      R3,R5
        MOV      R2,R4
        MOV      R1,#+127
        MOV      R0,SP
        SWI      +283
        MOV      R1,#+0
        MOV      R0,SP
        SWI      +489
        CMP      R0,#+0
        BEQ      ??LoadImages_1
        BL       PNGLIST_Add
??LoadImages_1:
        MOV      R3,R5
        ADD      R2,R4,#+20
        MOV      R1,#+127
        MOV      R0,SP
        SWI      +283
        MOV      R1,#+0
        MOV      R0,SP
        SWI      +489
        CMP      R0,#+0
        BEQ      ??LoadImages_2
        BL       PNGLIST_Add
??LoadImages_2:
        ADD      SP,SP,#+128      ;; stack cleaning
        CFI CFA R13+12
        POP      {R4,R5,PC}       ;; return
        DATA
??LoadImages_0:
        DC32     `?<Constant "%simg\\\\camera.png">`
        CFI EndBlock cfiBlock21

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable10:
        DC32     APP_DIR

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon0
        CFI NoFunction
        THUMB
??AddImage??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock22
        REQUIRE AddImage

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI Function AddImage
        ARM
AddImage:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
        MOV      R0,#+12
        SWI      +20
        MOV      R1,#+0
        STR      R1,[R0, #+4]
        LDR      R1,??DataTable11  ;; pngtop
        STR      R4,[R0, #+8]
        LDR      R2,[R1, #+0]
        STR      R2,[R0, #+0]
        STR      R0,[R1, #+0]
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock23

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable11:
        DC32     pngtop

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon0
        CFI NoFunction
        THUMB
??CreateIMGHDRFromMemoryAsync??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock24
        REQUIRE CreateIMGHDRFromMemoryAsync

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon1
        CFI Function CreateIMGHDRFromMemoryAsync
        ARM
CreateIMGHDRFromMemoryAsync:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        SUB      SP,SP,#+4
        CFI CFA R13+20
        MOV      R4,R1
        MOV      R5,R2
        MOV      R2,#+0
        STR      R2,[SP, #+0]
        MOV      R1,SP
        PUSH     {R1}
        CFI CFA R13+24
        MOV      R2,#+3
        MOV      R1,#+0
        PUSH     {R1}
        CFI CFA R13+28
        MOV      R1,#+1
        PUSH     {R1}
        CFI CFA R13+32
        MOV      R1,#+45
        SWI      +601
        MOV      R6,R0
        MOV      R3,R5
        MOV      R2,R4
        MOV      R1,#+0
        SWI      +634
        STR      R0,[SP, #+12]
        MOV      R2,#+32
        MOV      R1,R2
        MOV      R0,R6
        SWI      +605
        STR      R0,[SP, #+12]
        MOV      R1,#+15
        MOV      R0,R6
        SWI      +611
        STR      R0,[SP, #+12]
        MOV      R0,R6
        SWI      +606
        MOV      R0,R6
        ADD      SP,SP,#+16
        CFI CFA R13+16
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock25

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock26 Using cfiCommon0
        CFI NoFunction
        THUMB
??CreateIMGHDRFromFileAsync??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock26
        REQUIRE CreateIMGHDRFromFileAsync

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock27 Using cfiCommon1
        CFI Function CreateIMGHDRFromFileAsync
        ARM
CreateIMGHDRFromFileAsync:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        SUB      SP,SP,#+284
        CFI CFA R13+304
        MOV      R6,R1
        MOV      R7,R0
        MOV      R4,R2
        MOV      R5,R3
        MOV      R1,#+0
        STR      R1,[SP, #+0]
        STRH     R4,[SP, #+4]
        STRH     R5,[SP, #+6]
        MOV      R2,#+127
        ADD      R1,SP,#+28
        ADD      R0,SP,#+8
        SWI      +295
        MOV      R1,R7
        ADD      R0,SP,#+8
        SWI      +292
        ADD      R0,SP,#+8
        SWI      +737
        MOV      R1,SP
        PUSH     {R1}
        CFI CFA R13+308
        MOV      R3,R6
        MOV      R2,#+2
        MOV      R1,#+0
        PUSH     {R1}
        CFI CFA R13+312
        MOV      R1,#+1
        PUSH     {R1}
        CFI CFA R13+316
        MOV      R1,#+45
        SWI      +601
        MOV      R6,R0
        LDR      R0,[SP, #+12]
        ADD      SP,SP,#+12
        CFI CFA R13+304
        CMP      R0,#+0
        BNE      ??CreateIMGHDRFromFileAsync_0
        ADD      R2,SP,#+8
        MOV      R1,#+0
        MOV      R0,R6
        SWI      +603
        STR      R0,[SP, #+0]
        CMP      R0,#+0
        BNE      ??CreateIMGHDRFromFileAsync_0
        CMP      R4,#+0
        CMPNE    R5,#+0
        BNE      ??CreateIMGHDRFromFileAsync_1
        MOV      R1,#+0
        MOV      R0,R6
        SWI      +610
        STR      R0,[SP, #+0]
        CMP      R0,#+0
        BNE      ??CreateIMGHDRFromFileAsync_0
        ADD      R2,SP,#+6
        ADD      R1,SP,#+4
        MOV      R0,R6
        SWI      +604
        STR      R0,[SP, #+0]
        CMP      R0,#+0
        BNE      ??CreateIMGHDRFromFileAsync_0
??CreateIMGHDRFromFileAsync_1:
        LDRSH    R2,[SP, #+6]
        LDRSH    R1,[SP, #+4]
        MOV      R0,R6
        SWI      +605
        STR      R0,[SP, #+0]
        CMP      R0,#+0
        BNE      ??CreateIMGHDRFromFileAsync_0
        MOV      R1,#+15
        MOV      R0,R6
        SWI      +611
        STR      R0,[SP, #+0]
        CMP      R0,#+0
        BNE      ??CreateIMGHDRFromFileAsync_0
        MOV      R0,R6
        SWI      +606
        MOV      R0,R6
        ADD      SP,SP,#+284
        CFI CFA R13+20
        POP      {R4-R7,PC}
        CFI CFA R13+304
??CreateIMGHDRFromFileAsync_0:
        MOV      R0,R6
        SWI      +602
        MOV      R0,#+0
        ADD      SP,SP,#+284
        CFI CFA R13+20
        POP      {R4-R7,PC}       ;; return
        CFI EndBlock cfiBlock27

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock28 Using cfiCommon0
        CFI NoFunction
        THUMB
??CreateIMGHDRFromAnyFile??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock28
        REQUIRE CreateIMGHDRFromAnyFile

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock29 Using cfiCommon1
        CFI Function CreateIMGHDRFromAnyFile
        ARM
CreateIMGHDRFromAnyFile:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        SUB      SP,SP,#+288
        CFI CFA R13+304
        MOV      R5,R0
        MOV      R4,#+0
        STR      R4,[SP, #+4]
        STR      R4,[SP, #+0]
        STRH     R1,[SP, #+8]
        STRH     R2,[SP, #+10]
        MOV      R2,#+127
        ADD      R1,SP,#+32
        ADD      R0,SP,#+12
        SWI      +295
        MOV      R2,#+127
        MOV      R1,R5
        ADD      R0,SP,#+12
        SWI      +364
        ADD      R0,SP,#+12
        SWI      +737
        MOV      R1,SP
        PUSH     {R1}
        CFI CFA R13+308
        MOV      R3,#+0
        MOV      R2,R3
        MOV      R1,#+1
        PUSH     {R1}
        CFI CFA R13+312
        PUSH     {R1}
        CFI CFA R13+316
        MOV      R1,#+45
        SWI      +601
        MOV      R5,R0
        LDR      R0,[SP, #+12]
        ADD      SP,SP,#+12
        CFI CFA R13+304
        CMP      R0,#+0
        BNE      ??CreateIMGHDRFromAnyFile_0
        ADD      R2,SP,#+12
        MOV      R1,#+0
        MOV      R0,R5
        SWI      +603
        STR      R0,[SP, #+0]
        CMP      R0,#+0
        BNE      ??CreateIMGHDRFromAnyFile_1
        LDRSH    R0,[SP, #+8]
        CMP      R0,#+0
        BNE      ??CreateIMGHDRFromAnyFile_2
        MOV      R1,#+0
        MOV      R0,R5
        SWI      +610
        STR      R0,[SP, #+0]
        CMP      R0,#+0
        BNE      ??CreateIMGHDRFromAnyFile_1
        ADD      R2,SP,#+10
        ADD      R1,SP,#+8
        MOV      R0,R5
        SWI      +604
        STR      R0,[SP, #+0]
        CMP      R0,#+0
        BNE      ??CreateIMGHDRFromAnyFile_1
??CreateIMGHDRFromAnyFile_2:
        LDRSH    R2,[SP, #+10]
        LDRSH    R1,[SP, #+8]
        MOV      R0,R5
        SWI      +605
        STR      R0,[SP, #+0]
        CMP      R0,#+0
        BNE      ??CreateIMGHDRFromAnyFile_1
        MOV      R1,#+15
        MOV      R0,R5
        SWI      +611
        STR      R0,[SP, #+0]
        CMP      R0,#+0
        BNE      ??CreateIMGHDRFromAnyFile_1
        MOV      R0,R5
        SWI      +606
        STR      R0,[SP, #+0]
        CMP      R0,#+0
        BNE      ??CreateIMGHDRFromAnyFile_1
        ADD      R1,SP,#+4
        MOV      R0,R5
        SWI      +607
        STR      R0,[SP, #+0]
        CMP      R0,#+0
        BNE      ??CreateIMGHDRFromAnyFile_1
        MOV      R0,#+8
        SWI      +20
        MOV      R4,R0
        LDR      R0,[SP, #+4]
        LDRB     R0,[R0, #+0]
        STRB     R0,[R4, #+0]
        LDR      R0,[SP, #+4]
        LDRB     R0,[R0, #+1]
        STRB     R0,[R4, #+1]
        LDR      R0,[SP, #+4]
        LDRH     R0,[R0, #+2]
        AND      R0,R0,#0xFF
        STRH     R0,[R4, #+2]
        LDR      R0,[SP, #+4]
        LDRH     R2,[R0, #+2]
        LDRB     R1,[R0, #+1]
        LDRB     R0,[R0, #+0]
        AND      R2,R2,#0xFF
        SWI      +600
        MOV      R6,R0
        SWI      +20
        STR      R0,[R4, #+4]
        LDR      R0,[SP, #+4]
        MOV      R2,R6
        LDR      R1,[R0, #+4]
        LDR      R0,[R4, #+4]
        SWI      +286
??CreateIMGHDRFromAnyFile_1:
        MOV      R0,R5
        SWI      +602
??CreateIMGHDRFromAnyFile_0:
        MOV      R0,R4
        ADD      SP,SP,#+288
        CFI CFA R13+16
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock29

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock30 Using cfiCommon0
        CFI NoFunction
        THUMB
??CreateIMGHDRFromMemory??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock30
        REQUIRE CreateIMGHDRFromMemory

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock31 Using cfiCommon1
        CFI Function CreateIMGHDRFromMemory
        ARM
CreateIMGHDRFromMemory:
        PUSH     {R4-R9,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R9 Frame(CFA, -8)
        CFI R8 Frame(CFA, -12)
        CFI R7 Frame(CFA, -16)
        CFI R6 Frame(CFA, -20)
        CFI R5 Frame(CFA, -24)
        CFI R4 Frame(CFA, -28)
        CFI CFA R13+28
        SUB      SP,SP,#+12
        CFI CFA R13+40
        LDR      R7,[SP, #+40]
        MOV      R4,R0
        MOV      R5,R1
        MOV      R8,#+0
        STR      R8,[SP, #+4]
        STR      R8,[SP, #+0]
        STRH     R4,[SP, #+8]
        STRH     R5,[SP, #+10]
        MOV      R1,SP
        PUSH     {R1}
        CFI CFA R13+44
        MOV      R0,R2
        MOV      R6,R3
        MOV      R3,#+0
        MOV      R1,#+1
        PUSH     {R1}
        CFI CFA R13+48
        PUSH     {R1}
        CFI CFA R13+52
        MOV      R2,R3
        MOV      R1,#+45
        SWI      +601
        MOV      R9,R0
        LDR      R0,[SP, #+12]
        ADD      SP,SP,#+12
        CFI CFA R13+40
        CMP      R0,#+0
        BNE      ??CreateIMGHDRFromMemory_0
        MOV      R3,R7
        MOV      R2,R6
        MOV      R1,#+0
        MOV      R0,R9
        SWI      +634
        STR      R0,[SP, #+0]
        CMP      R0,#+0
        BNE      ??CreateIMGHDRFromMemory_1
        CMP      R4,#+0
        CMPNE    R5,#+0
        BNE      ??CreateIMGHDRFromMemory_2
        MOV      R1,#+0
        MOV      R0,R9
        SWI      +610
        STR      R0,[SP, #+0]
        CMP      R0,#+0
        BNE      ??CreateIMGHDRFromMemory_1
        ADD      R2,SP,#+10
        ADD      R1,SP,#+8
        MOV      R0,R9
        SWI      +604
        STR      R0,[SP, #+0]
        CMP      R0,#+0
        BNE      ??CreateIMGHDRFromMemory_1
??CreateIMGHDRFromMemory_2:
        LDRSH    R2,[SP, #+10]
        LDRSH    R1,[SP, #+8]
        MOV      R0,R9
        SWI      +605
        STR      R0,[SP, #+0]
        CMP      R0,#+0
        BNE      ??CreateIMGHDRFromMemory_1
        MOV      R1,#+15
        MOV      R0,R9
        SWI      +611
        STR      R0,[SP, #+0]
        CMP      R0,#+0
        BNE      ??CreateIMGHDRFromMemory_1
        MOV      R0,R9
        SWI      +606
        STR      R0,[SP, #+0]
        CMP      R0,#+0
        BNE      ??CreateIMGHDRFromMemory_1
        ADD      R1,SP,#+4
        MOV      R0,R9
        SWI      +607
        STR      R0,[SP, #+0]
        CMP      R0,#+0
        BNE      ??CreateIMGHDRFromMemory_1
        MOV      R0,#+8
        SWI      +20
        MOV      R8,R0
        LDR      R0,[SP, #+4]
        LDRB     R0,[R0, #+0]
        STRB     R0,[R8, #+0]
        LDR      R0,[SP, #+4]
        LDRB     R0,[R0, #+1]
        STRB     R0,[R8, #+1]
        LDR      R0,[SP, #+4]
        LDRH     R0,[R0, #+2]
        AND      R0,R0,#0xFF
        STRH     R0,[R8, #+2]
        LDR      R0,[SP, #+4]
        LDRH     R2,[R0, #+2]
        LDRB     R1,[R0, #+1]
        LDRB     R0,[R0, #+0]
        AND      R2,R2,#0xFF
        SWI      +600
        MOV      R7,R0
        SWI      +20
        STR      R0,[R8, #+4]
        LDR      R0,[SP, #+4]
        MOV      R2,R7
        LDR      R1,[R0, #+4]
        LDR      R0,[R8, #+4]
        SWI      +286
??CreateIMGHDRFromMemory_1:
        MOV      R0,R9
        SWI      +602
??CreateIMGHDRFromMemory_0:
        MOV      R0,R8
        POP      {R1-R9,PC}       ;; return
        CFI EndBlock cfiBlock31

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock32 Using cfiCommon0
        CFI NoFunction
        THUMB
??CreateDynImage??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock32
        REQUIRE CreateDynImage

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock33 Using cfiCommon1
        CFI Function CreateDynImage
        ARM
CreateDynImage:
        PUSH     {R4-R9,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R9 Frame(CFA, -8)
        CFI R8 Frame(CFA, -12)
        CFI R7 Frame(CFA, -16)
        CFI R6 Frame(CFA, -20)
        CFI R5 Frame(CFA, -24)
        CFI R4 Frame(CFA, -28)
        CFI CFA R13+28
        MOV      R5,R0
        LDR      R8,[SP, #+28]
        LDR      R9,[SP, #+32]
        MOV      R6,R1
        MOV      R7,R2
        MOV      R0,#+42
        ORR      R0,R0,#0xE100
        ADD      R0,R0,R3
        SWI      +484
        MOV      R1,R6
        LDR      R6,??DataTable12  ;; dyn_pnglist
        MOV      R4,R0
        PUSH     {R9}
        CFI CFA R13+32
        MOV      R3,R8
        MOV      R2,R7
        MOV      R0,R5
        BL       CreateIMGHDRFromMemory
        LDR      R7,[R6, #+0]
        MOV      R5,R0
        ADD      SP,SP,#+4
        CFI CFA R13+28
        B        ??CreateDynImage_0
??CreateDynImage_1:
        LDR      R7,[R7, #+0]
??CreateDynImage_0:
        CMP      R7,#+0
        BEQ      ??CreateDynImage_2
        LDR      R0,[R7, #+4]
        CMP      R0,R4
        BNE      ??CreateDynImage_1
        LDR      R0,[R7, #+8]
        SWI      +21
        STR      R5,[R7, #+8]
        POP      {R4-R9,PC}
??CreateDynImage_2:
        MOV      R0,#+12
        SWI      +20
        STR      R5,[R0, #+8]
        STR      R4,[R0, #+4]
        LDR      R1,[R6, #+0]
        STR      R1,[R0, #+0]
        STR      R0,[R6, #+0]
        POP      {R4-R9,PC}       ;; return
        CFI EndBlock cfiBlock33

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable12:
        DC32     dyn_pnglist

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock34 Using cfiCommon0
        CFI NoFunction
        THUMB
??Example??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock34
        REQUIRE Example

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock35 Using cfiCommon1
        CFI Function Example
        ARM
Example:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        SUB      SP,SP,#+320
        CFI CFA R13+340
        MOV      R4,R0
        MVN      R6,#+0
        MOV      R2,SP
        ADD      R1,SP,#+280
        SWI      +132
        CMP      R0,R6
        BEQ      ??Example_0
        LDR      R7,[SP, #+284]
        CMP      R7,#+1
        BLT      ??Example_0
        MOV      R3,SP
        MOV      R2,#+128
        MOV      R1,#+32768
        MOV      R0,R4
        SWI      +10
        MOV      R4,R0
        CMP      R4,R6
        BEQ      ??Example_1
        MOV      R0,R7
        SWI      +20
        MOV      R5,R0
        MOV      R3,SP
        MOV      R2,R7
        MOV      R1,R5
        MOV      R0,R4
        SWI      +11
        MOV      R1,SP
        MOV      R0,R4
        SWI      +13
??Example_1:
        MOV      R2,#+127
        ADD      R1,SP,#+24
        ADD      R0,SP,#+4
        SWI      +295
        ADR      R2,??Example_2   ;; "jpg"
        ADR      R1,??Example_2+0x4  ;; "%s"
        ADD      R0,SP,#+4
        SWI      +292
        ADD      R0,SP,#+4
        SWI      +464
        PUSH     {R7}
        CFI CFA R13+344
        PUSH     {R5}
        CFI CFA R13+348
        MOV      R3,#+42
        ORR      R3,R3,#0xE100
        MOV      R2,R0
        MOV      R1,#+0
        MOV      R0,#+0
        BL       CreateDynImage
        ADD      SP,SP,#+8
        CFI CFA R13+340
??Example_0:
        ADD      SP,SP,#+320      ;; stack cleaning
        CFI CFA R13+20
        POP      {R4-R7,PC}       ;; return
        DATA
??Example_2:
        DC8      "jpg"
        DC8      "%s",+0
        CFI EndBlock cfiBlock35

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for smiles>`:
        DATA
        DC32 smiles, smiles

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "%ssmiles\\\\%X.png">`:
        DATA
        DC8 "%ssmiles\\%X.png"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "%simg\\\\camera.png">`:
        DATA
        DC8 "%simg\\camera.png"
        DC8 0, 0, 0
        DC8 "%simg\\deactivated.png"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(0)
        DATA
        DC8 "%s"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
        DATA
        DC8 "jpg"

        END
// 
// 2 816 bytes in segment CODE
//    67 bytes in segment DATA_C
//     8 bytes in segment DATA_I
//     8 bytes in segment DATA_ID
//     8 bytes in segment DATA_Z
//    24 bytes in segment INITTAB
// 
// 2 744 bytes of CODE  memory (+ 96 bytes shared)
//    75 bytes of CONST memory
//    16 bytes of DATA  memory
//
//Errors: none
//Warnings: 1
