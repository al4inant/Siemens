//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   15/Mar/2023  22:35:34 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_ /
//                       C\parser_error.c                                    /
//    Command line    =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_ /
//                       C\parser_error.c -D NEWSGOLD -D DEBUG -lCN          /
//                       D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_ /
//                       C\Releas_NSG\List\ -la D:\Users\alfinant\Documents\ /
//                       Siemens\Dev\IAR\VK.ELF_C\Releas_NSG\List\ -o        /
//                       D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_ /
//                       C\Releas_NSG\Obj\ -s9 --cpu_mode arm --endian       /
//                       little --cpu ARM926EJ-S --stack_align 4             /
//                       --interwork --diag_suppress Pe301 -e --fpu None     /
//                       --dlib_config D:\Users\alfinant\Documents\Siemens\I /
//                       AR\ARM\LIB\dl5tpainl8n.h -I                         /
//                       D:\Users\alfinant\Documents\Siemens\IAR\ARM\INC\    /
//                       --inline_threshold=2                                /
//    List file       =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_ /
//                       C\Releas_NSG\List\parser_error.s79                  /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME parser_error

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__dlib_file_descriptor", "0"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        MULTWEAK ??__parse_obj_Error??rT
        MULTWEAK ??cJSON_GetObjectItem??rA
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC __parse_obj_Error
        FUNCTION __parse_obj_Error,0203H
        LOCFRAME CSTACK, 20, STACK
        PUBLIC error_code
        PUBLIC error_msg
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
cJSON_GetObjectItem SYMBOL "cJSON_GetObjectItem"
__parse_obj_Error   SYMBOL "__parse_obj_Error"
??__parse_obj_Error??rT SYMBOL "??rT", __parse_obj_Error
??cJSON_GetObjectItem??rA SYMBOL "??rA", cJSON_GetObjectItem

        EXTERN cJSON_GetObjectItem
        FUNCTION cJSON_GetObjectItem,0202H


        RSEG DATA_C:CONST:SORT:NOROOT(2)
// static char const __data t_error_code[11]
t_error_code:
        DATA
        DC8 "error_code"
        DC8 0
        DC8 "error_msg"
        DC8 0, 0

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
error_code:
        DS8 4
error_msg:
        DS8 256

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??__parse_obj_Error??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE __parse_obj_Error

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function __parse_obj_Error
        ARM
__parse_obj_Error:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        LDR      R6,??__parse_obj_Error_0  ;; t_error_code
        MOV      R4,R0
        LDR      R7,??__parse_obj_Error_0+0x4  ;; error_code
        MOV      R5,#+0
        MOV      R1,R6
        _BLF     cJSON_GetObjectItem,??cJSON_GetObjectItem??rA
        CMP      R0,#+0
        LDRNE    R5,[R0, #+20]
        ADD      R1,R6,#+12
        STRNE    R5,[R7, #+0]
        MOV      R0,R4
        _BLF     cJSON_GetObjectItem,??cJSON_GetObjectItem??rA
        CMP      R0,#+0
        BEQ      ??__parse_obj_Error_1
        LDR      R1,[R0, #+16]
        MOV      R2,#+255
        ADD      R0,R7,#+4
        SWI      +278
??__parse_obj_Error_1:
        MOV      R0,R5
        POP      {R4-R7,PC}       ;; return
        DATA
??__parse_obj_Error_0:
        DC32     t_error_code
        DC32     error_code
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon1
        CFI NoFunction
        ARM
??cJSON_GetObjectItem??rA:
        LDR      R12,??Subroutine1_0  ;; cJSON_GetObjectItem
        BX       R12
        DATA
??Subroutine1_0:
        DC32     cJSON_GetObjectItem
        CFI EndBlock cfiBlock2

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        END
// 
// 108 bytes in segment CODE
//  24 bytes in segment DATA_C
// 260 bytes in segment DATA_Z
//  12 bytes in segment INITTAB
// 
//  92 bytes of CODE  memory (+ 28 bytes shared)
//  24 bytes of CONST memory
// 260 bytes of DATA  memory
//
//Errors: none
//Warnings: none
