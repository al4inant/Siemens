//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   17/Nov/2019  22:06:55 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  E:\Users\alfinant7\Documents\Siemens\alfinant\src_i /
//                       ar\openssl\crypto\stack\stack.c                     /
//    Command line    =  E:\Users\alfinant7\Documents\Siemens\alfinant\src_i /
//                       ar\openssl\crypto\stack\stack.c -D NEWSGOLD -D      /
//                       DEBUG -lCN E:\Users\alfinant7\Documents\Siemens\alf /
//                       inant\src_iar\VK.ELF_C\Releas_NSG\List\ -la         /
//                       E:\Users\alfinant7\Documents\Siemens\alfinant\src_i /
//                       ar\VK.ELF_C\Releas_NSG\List\ -o                     /
//                       E:\Users\alfinant7\Documents\Siemens\alfinant\src_i /
//                       ar\VK.ELF_C\Releas_NSG\Obj\ -z9 --cpu_mode arm      /
//                       --endian little --cpu ARM926EJ-S --stack_align 4    /
//                       --interwork --diag_suppress Pe301 -e --fpu None     /
//                       --dlib_config E:\Users\alfinant7\Documents\Siemens\ /
//                       IAR\ARM\LIB\dl5tpainl8n.h -I                        /
//                       E:\Users\alfinant7\Documents\Siemens\IAR\ARM\INC\   /
//                       --inline_threshold=2                                /
//    List file       =  E:\Users\alfinant7\Documents\Siemens\alfinant\src_i /
//                       ar\VK.ELF_C\Releas_NSG\List\stack.s79               /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME stack

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__dlib_file_descriptor", "0"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        PUBWEAK `?*?DATA_ID`
        MULTWEAK ??__data_free??rA
        MULTWEAK ??bsearch??rA
        MULTWEAK ??qsort??rA
        MULTWEAK ??sk_delete??rT
        MULTWEAK ??sk_delete_ptr??rT
        MULTWEAK ??sk_dup??rT
        MULTWEAK ??sk_find??rT
        MULTWEAK ??sk_free??rT
        MULTWEAK ??sk_insert??rT
        MULTWEAK ??sk_new??rT
        MULTWEAK ??sk_new_null??rT
        MULTWEAK ??sk_num??rT
        MULTWEAK ??sk_pop??rT
        MULTWEAK ??sk_pop_free??rT
        MULTWEAK ??sk_push??rT
        MULTWEAK ??sk_set??rT
        MULTWEAK ??sk_set_cmp_func??rT
        MULTWEAK ??sk_shift??rT
        MULTWEAK ??sk_sort??rT
        MULTWEAK ??sk_unshift??rT
        MULTWEAK ??sk_value??rT
        MULTWEAK ??sk_zero??rT
        PUBWEAK ?init?tab?DATA_I
        PUBLIC STACK_version
        PUBLIC sk_delete
        FUNCTION sk_delete,0203H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC sk_delete_ptr
        FUNCTION sk_delete_ptr,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC sk_dup
        FUNCTION sk_dup,0203H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC sk_find
        FUNCTION sk_find,0203H
        LOCFRAME CSTACK, 20, STACK
        PUBLIC sk_free
        FUNCTION sk_free,0203H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC sk_insert
        FUNCTION sk_insert,0203H
        LOCFRAME CSTACK, 16, STACK
        PUBLIC sk_new
        FUNCTION sk_new,0203H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC sk_new_null
        FUNCTION sk_new_null,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC sk_num
        FUNCTION sk_num,0203H
        PUBLIC sk_pop
        FUNCTION sk_pop,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC sk_pop_free
        FUNCTION sk_pop_free,0203H
        LOCFRAME CSTACK, 16, STACK
        PUBLIC sk_push
        FUNCTION sk_push,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC sk_set
        FUNCTION sk_set,0203H
        PUBLIC sk_set_cmp_func
        FUNCTION sk_set_cmp_func,0203H
        PUBLIC sk_shift
        FUNCTION sk_shift,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC sk_sort
        FUNCTION sk_sort,0203H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC sk_unshift
        FUNCTION sk_unshift,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC sk_value
        FUNCTION sk_value,0203H
        PUBLIC sk_zero
        FUNCTION sk_zero,0203H
        LOCFRAME CSTACK, 8, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
__data_free         SYMBOL "__data_free"
bsearch             SYMBOL "bsearch"
qsort               SYMBOL "qsort"
??__data_free??rA   SYMBOL "??rA", __data_free
??bsearch??rA       SYMBOL "??rA", bsearch
??qsort??rA         SYMBOL "??rA", qsort
sk_delete           SYMBOL "sk_delete"
??sk_delete??rT     SYMBOL "??rT", sk_delete
sk_delete_ptr       SYMBOL "sk_delete_ptr"
??sk_delete_ptr??rT SYMBOL "??rT", sk_delete_ptr
sk_dup              SYMBOL "sk_dup"
??sk_dup??rT        SYMBOL "??rT", sk_dup
sk_find             SYMBOL "sk_find"
??sk_find??rT       SYMBOL "??rT", sk_find
sk_free             SYMBOL "sk_free"
??sk_free??rT       SYMBOL "??rT", sk_free
sk_insert           SYMBOL "sk_insert"
??sk_insert??rT     SYMBOL "??rT", sk_insert
sk_new              SYMBOL "sk_new"
??sk_new??rT        SYMBOL "??rT", sk_new
sk_new_null         SYMBOL "sk_new_null"
??sk_new_null??rT   SYMBOL "??rT", sk_new_null
sk_num              SYMBOL "sk_num"
??sk_num??rT        SYMBOL "??rT", sk_num
sk_pop              SYMBOL "sk_pop"
??sk_pop??rT        SYMBOL "??rT", sk_pop
sk_pop_free         SYMBOL "sk_pop_free"
??sk_pop_free??rT   SYMBOL "??rT", sk_pop_free
sk_push             SYMBOL "sk_push"
??sk_push??rT       SYMBOL "??rT", sk_push
sk_set              SYMBOL "sk_set"
??sk_set??rT        SYMBOL "??rT", sk_set
sk_set_cmp_func     SYMBOL "sk_set_cmp_func"
??sk_set_cmp_func??rT SYMBOL "??rT", sk_set_cmp_func
sk_shift            SYMBOL "sk_shift"
??sk_shift??rT      SYMBOL "??rT", sk_shift
sk_sort             SYMBOL "sk_sort"
??sk_sort??rT       SYMBOL "??rT", sk_sort
sk_unshift          SYMBOL "sk_unshift"
??sk_unshift??rT    SYMBOL "??rT", sk_unshift
sk_value            SYMBOL "sk_value"
??sk_value??rT      SYMBOL "??rT", sk_value
sk_zero             SYMBOL "sk_zero"
??sk_zero??rT       SYMBOL "??rT", sk_zero

        EXTERN __data_free
        FUNCTION __data_free,010202H
        EXTERN bsearch
        FUNCTION bsearch,010202H
        EXTERN qsort
        FUNCTION qsort,010202H


        RSEG DATA_I:DATA:SORT:NOROOT(2)
STACK_version:
        DS8 4
        REQUIRE `?<Initializer for STACK_version>`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??sk_set_cmp_func??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE sk_set_cmp_func

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function sk_set_cmp_func
        ARM
sk_set_cmp_func:
        LDR      R2,[R0, #+16]
        CMP      R2,R1
        MOVNE    R3,#+0
        STRNE    R3,[R0, #+8]
        STR      R1,[R0, #+16]
        MOV      R0,R2
        BX       LR               ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??sk_dup??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE sk_dup

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function sk_dup
        ARM
sk_dup:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R0
        LDR      R0,[R4, #+16]
        BL       sk_new
        MOVS     R5,R0
        BEQ      ??sk_dup_0
        LDR      R0,[R4, #+12]
        LSL      R1,R0,#+2
        LDR      R0,[R5, #+4]
        SWI      +186
        CMP      R0,#+0
        BEQ      ??sk_dup_1
        STR      R0,[R5, #+4]
        LDR      R0,[R4, #+0]
        STR      R0,[R5, #+0]
        LDR      R0,[R4, #+0]
        LDR      R1,[R4, #+4]
        LSL      R2,R0,#+2
        LDR      R0,[R5, #+4]
        SWI      +286
        LDR      R0,[R4, #+8]
        STR      R0,[R5, #+8]
        LDR      R0,[R4, #+12]
        STR      R0,[R5, #+12]
        LDR      R0,[R4, #+16]
        STR      R0,[R5, #+16]
        B        ?Subroutine21
??sk_dup_1:
        MOV      R0,R5
        BL       sk_free
??sk_dup_0:
        B        ?Subroutine20
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??sk_new_null??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE sk_new_null

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function sk_new_null
        ARM
sk_new_null:
        MOV      R0,#+0
        B        sk_new           ;; tailcall
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??sk_new??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE sk_new

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function sk_new
        ARM
sk_new:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R0
        MOV      R0,#+20
        SWI      +20
        MOVS     R5,R0
        BEQ      ??sk_new_0
        MOV      R0,#+16
        SWI      +20
        STR      R0,[R5, #+4]
        CMP      R0,#+0
        BEQ      ??sk_new_1
        MOV      R1,#+0
        MOV      R2,#+0
??sk_new_2:
        STR      R2,[R0, +R1, LSL #+2]
        ADD      R1,R1,#+1
        CMP      R1,#+4
        BLT      ??sk_new_2
        STR      R4,[R5, #+16]
        MOV      R0,#+4
        STR      R0,[R5, #+12]
        STR      R2,[R5, #+0]
        STR      R2,[R5, #+8]
        B        ?Subroutine21
??sk_new_1:
        MOV      R0,R5
        _BLF     __data_free,??__data_free??rA
??sk_new_0:
        B        ?Subroutine20
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon1
        CFI NoFunction
        CFI CFA R13+12
        CFI R4 Frame(CFA, -12)
        CFI R5 Frame(CFA, -8)
        CFI ?RET Frame(CFA, -4)
        ARM
?Subroutine21:
        MOV      R0,R5
        POP      {R4,R5,PC}
        CFI EndBlock cfiBlock8

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI NoFunction
        CFI CFA R13+12
        CFI R4 Frame(CFA, -12)
        CFI R5 Frame(CFA, -8)
        CFI ?RET Frame(CFA, -4)
        ARM
?Subroutine20:
        MOV      R0,#+0
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??sk_insert??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE sk_insert

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function sk_insert
        ARM
sk_insert:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R4,R0
        MOV      R5,R1
        MOV      R6,R2
        CMP      R4,#+0
        MOVEQ    R0,#+0
        POPEQ    {R4-R6,PC}
        LDR      R0,[R4, #+12]
        LDR      R1,[R4, #+0]
        ADD      R1,R1,#+1
        CMP      R1,R0
        BLT      ??sk_insert_0
        LSL      R1,R0,#+3
        LDR      R0,[R4, #+4]
        SWI      +186
        CMP      R0,#+0
        POPEQ    {R4-R6,PC}
        STR      R0,[R4, #+4]
        LDR      R0,[R4, #+12]
        LSL      R0,R0,#+1
        STR      R0,[R4, #+12]
??sk_insert_0:
        LDR      R1,[R4, #+0]
        LDR      R0,[R4, #+4]
        CMP      R6,R1
        BGE      ??sk_insert_1
        CMP      R6,#+0
        BPL      ??sk_insert_2
??sk_insert_1:
        STR      R5,[R0, +R1, LSL #+2]
        B        ??sk_insert_3
??sk_insert_2:
        ADD      R3,R0,#+4
        MOV      R12,R1
??sk_insert_4:
        LDR      LR,[R0, +R12, LSL #+2]
        STR      LR,[R3, +R12, LSL #+2]
        SUB      R12,R12,#+1
        CMP      R12,R6
        BGE      ??sk_insert_4
        STR      R5,[R0, +R6, LSL #+2]
??sk_insert_3:
        ADD      R0,R1,#+1
        STR      R0,[R4, #+0]
        MOV      R0,#+0
        STR      R0,[R4, #+8]
        LDR      R0,[R4, #+0]
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??sk_delete_ptr??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE sk_delete_ptr

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function sk_delete_ptr
        ARM
sk_delete_ptr:
        MOV      R2,#+0
        B        ??sk_delete_ptr_0
??sk_delete_ptr_1:
        ADD      R2,R2,#+1
??sk_delete_ptr_0:
        LDR      R3,[R0, #+0]
        CMP      R2,R3
        BGE      ??sk_delete_ptr_2
        LDR      R3,[R0, #+4]
        LDR      R3,[R3, +R2, LSL #+2]
        CMP      R3,R1
        BNE      ??sk_delete_ptr_1
        MOV      R1,R2
        B        sk_delete        ;; tailcall
??sk_delete_ptr_2:
        MOV      R0,#+0
        BX       LR
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??sk_delete??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE sk_delete

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function sk_delete
        ARM
sk_delete:
        PUSH     {R5,R6}
        CFI R6 Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI CFA R13+8
        CMP      R0,#+0
        BEQ      ??sk_delete_0
        LDR      R3,[R0, #+0]
        CMP      R3,#+0
        BEQ      ??sk_delete_1
        CMP      R1,#+0
        BMI      ??sk_delete_1
        CMP      R1,R3
        BLT      ??sk_delete_2
??sk_delete_1:
        MOV      R0,#+0
        B        ??sk_delete_0
??sk_delete_2:
        LDR      R12,[R0, #+4]
        SUB      R3,R3,#+1
        LDR      R2,[R12, +R1, LSL #+2]
        CMP      R1,R3
        BEQ      ??sk_delete_3
        B        ??sk_delete_4
??sk_delete_5:
        ADD      R5,R12,R1, LSL #+2
        LDR      R6,[R5, #+4]
        ADD      R1,R1,#+1
        STR      R6,[R5, #+0]
??sk_delete_4:
        CMP      R1,R3
        BLT      ??sk_delete_5
??sk_delete_3:
        STR      R3,[R0, #+0]
        MOV      R0,R2
??sk_delete_0:
        POP      {R5,R6}
        CFI R5 SameValue
        CFI R6 SameValue
        CFI CFA R13+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??sk_find??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE sk_find

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function sk_find
        ARM
sk_find:
        PUSH     {R1,R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+16
        MOVS     R4,R0
        BNE      ??sk_find_0
??sk_find_1:
        MVN      R0,#+0
        POP      {R1,R4,R5,PC}    ;; return
??sk_find_0:
        LDR      R0,[R4, #+16]
        CMP      R0,#+0
        BNE      ??sk_find_2
        MOV      R5,#+0
        B        ??sk_find_3
??sk_find_4:
        ADD      R5,R5,#+1
??sk_find_3:
        LDR      R0,[R4, #+0]
        CMP      R5,R0
        BGE      ??sk_find_1
        LDR      R0,[R4, #+4]
        LDR      R0,[R0, +R5, LSL #+2]
        CMP      R0,R1
        BNE      ??sk_find_4
??sk_find_5:
        MOV      R0,R5
        POP      {R1,R4,R5,PC}
??sk_find_2:
        MOV      R0,R4
        BL       sk_sort
        LDR      R0,[SP, #+0]
        CMP      R0,#+0
        BEQ      ??sk_find_1
        LDR      R0,[R4, #+16]
        MOV      R3,#+4
        PUSH     {R0}
        CFI CFA R13+20
        LDR      R2,[R4, #+0]
        LDR      R1,[R4, #+4]
        ADD      R0,SP,#+4
        _BLF     bsearch,??bsearch??rA
        CMP      R0,#+0
        ADD      SP,SP,#+4
        CFI CFA R13+16
        BEQ      ??sk_find_1
        LDR      R1,[R4, #+4]
        LSR      R0,R0,#+2
        SUB      R5,R0,R1, LSR #+2
??sk_find_6:
        CMP      R5,#+1
        BLT      ??sk_find_5
        LDR      R0,[R4, #+4]
        LDR      R2,[R4, #+16]
        MOV      R1,SP
        ADD      R0,R0,R5, LSL #+2
        SUB      R0,R0,#+4
        BLX      R2
        CMP      R0,#+0
        BMI      ??sk_find_5
        SUB      R5,R5,#+1
        B        ??sk_find_6
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        THUMB
??sk_push??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock18
        REQUIRE sk_push

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI Function sk_push
        ARM
sk_push:
        LDR      R2,[R0, #+0]
        B        sk_insert        ;; tailcall
        CFI EndBlock cfiBlock19

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        THUMB
??sk_unshift??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock20
        REQUIRE sk_unshift

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI Function sk_unshift
        ARM
sk_unshift:
        MOV      R2,#+0
        B        sk_insert        ;; tailcall
        CFI EndBlock cfiBlock21

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon0
        CFI NoFunction
        THUMB
??sk_shift??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock22
        REQUIRE sk_shift

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI Function sk_shift
        ARM
sk_shift:
        CMP      R0,#+0
        BXEQ     LR
        LDR      R1,[R0, #+0]
        CMP      R1,#+1
        MOVLT    R0,#+0
        BXLT     LR
        MOV      R1,#+0
        B        sk_delete        ;; tailcall
        CFI EndBlock cfiBlock23

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon0
        CFI NoFunction
        THUMB
??sk_pop??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock24
        REQUIRE sk_pop

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon1
        CFI Function sk_pop
        ARM
sk_pop:
        CMP      R0,#+0
        BXEQ     LR
        LDR      R1,[R0, #+0]
        CMP      R1,#+1
        MOVLT    R0,#+0
        BXLT     LR
        SUB      R1,R1,#+1
        B        sk_delete        ;; tailcall
        CFI EndBlock cfiBlock25

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock26 Using cfiCommon0
        CFI NoFunction
        THUMB
??sk_zero??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock26
        REQUIRE sk_zero

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock27 Using cfiCommon1
        CFI Function sk_zero
        ARM
sk_zero:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOVS     R4,R0
        POPEQ    {R4,PC}
        LDR      R0,[R4, #+0]
        CMP      R0,#+1
        POPLT    {R4,PC}
        LSL      R2,R0,#+2
        LDR      R0,[R4, #+4]
        MOV      R1,#+0
        SWI      +187
        MOV      R0,#+0
        STR      R0,[R4, #+0]
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock27

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock28 Using cfiCommon0
        CFI NoFunction
        THUMB
??sk_pop_free??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock28
        REQUIRE sk_pop_free

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock29 Using cfiCommon1
        CFI Function sk_pop_free
        ARM
sk_pop_free:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R4,R0
        MOV      R5,R1
        CMP      R4,#+0
        POPEQ    {R4-R6,PC}
        MOV      R6,#+0
        B        ??sk_pop_free_0
??sk_pop_free_1:
        LDR      R0,[R4, #+4]
        ADD      R0,R0,R6, LSL #+2
        LDR      R1,[R0, #+0]
        CMP      R1,#+0
        BEQ      ??sk_pop_free_2
        MOV      R0,R1
        MOV      R1,R5
        BLX      R1
??sk_pop_free_2:
        ADD      R6,R6,#+1
??sk_pop_free_0:
        LDR      R0,[R4, #+0]
        CMP      R6,R0
        BLT      ??sk_pop_free_1
        MOV      R0,R4
        BL       sk_free
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock29

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock30 Using cfiCommon0
        CFI NoFunction
        THUMB
??sk_free??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock30
        REQUIRE sk_free

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock31 Using cfiCommon1
        CFI Function sk_free
        ARM
sk_free:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOVS     R4,R0
        POPEQ    {R4,PC}
        LDR      R0,[R4, #+4]
        CMP      R0,#+0
        BEQ      ??sk_free_0
        _BLF     __data_free,??__data_free??rA
??sk_free_0:
        MOV      R0,R4
        _BLF     __data_free,??__data_free??rA
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock31

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock32 Using cfiCommon0
        CFI NoFunction
        THUMB
??sk_num??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock32
        REQUIRE sk_num

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock33 Using cfiCommon1
        CFI Function sk_num
        ARM
sk_num:
        CMP      R0,#+0
        MVNEQ    R0,#+0
        BXEQ     LR
        LDR      R0,[R0, #+0]
        BX       LR               ;; return
        CFI EndBlock cfiBlock33

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock34 Using cfiCommon0
        CFI NoFunction
        THUMB
??sk_value??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock34
        REQUIRE sk_value

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock35 Using cfiCommon1
        CFI Function sk_value
        ARM
sk_value:
        CMP      R0,#+0
        BXEQ     LR
        B        ?Subroutine19
        CFI EndBlock cfiBlock35

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock36 Using cfiCommon0
        CFI NoFunction
        THUMB
??sk_set??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock36
        REQUIRE sk_set

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock37 Using cfiCommon1
        CFI Function sk_set
        ARM
sk_set:
        CMP      R0,#+0
        BXEQ     LR
        LDR      R3,[R0, #+4]
        STR      R2,[R3, +R1, LSL #+2]
        CFI EndBlock cfiBlock37
        REQUIRE ?Subroutine19
        ;; // Fall through to label ?Subroutine19

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock38 Using cfiCommon1
        CFI NoFunction
        ARM
?Subroutine19:
        LDR      R0,[R0, #+4]
        LDR      R0,[R0, +R1, LSL #+2]
        BX       LR               ;; return
        CFI EndBlock cfiBlock38

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock39 Using cfiCommon0
        CFI NoFunction
        THUMB
??sk_sort??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock39
        REQUIRE sk_sort

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock40 Using cfiCommon1
        CFI Function sk_sort
        ARM
sk_sort:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOVS     R4,R0
        POPEQ    {R4,PC}
        LDR      R0,[R4, #+8]
        CMP      R0,#+0
        POPNE    {R4,PC}
        LDR      R0,[R4, #+4]
        LDR      R3,[R4, #+16]
        LDR      R1,[R4, #+0]
        MOV      R2,#+4
        _BLF     qsort,??qsort??rA
        MOV      R0,#+1
        STR      R0,[R4, #+8]
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock40

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock41 Using cfiCommon1
        CFI NoFunction
        ARM
??__data_free??rA:
        LDR      R12,??Subroutine22_0  ;; __data_free
        BX       R12
        DATA
??Subroutine22_0:
        DC32     __data_free
        CFI EndBlock cfiBlock41

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock42 Using cfiCommon1
        CFI NoFunction
        ARM
??bsearch??rA:
        LDR      R12,??Subroutine23_0  ;; bsearch
        BX       R12
        DATA
??Subroutine23_0:
        DC32     bsearch
        CFI EndBlock cfiBlock42

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock43 Using cfiCommon1
        CFI NoFunction
        ARM
??qsort??rA:
        LDR      R12,??Subroutine24_0  ;; qsort
        BX       R12
        DATA
??Subroutine24_0:
        DC32     qsort
        CFI EndBlock cfiBlock43

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for STACK_version>`:
        DATA
        DC32 `?<Constant "Stack part of OpenSSL...">`

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "Stack part of OpenSSL...">`:
        DATA
        DC8 "Stack part of OpenSSL 0.9.5a 1 Apr 2000"

        END
// 
// 1 304 bytes in segment CODE
//    40 bytes in segment DATA_C
//     4 bytes in segment DATA_I
//     4 bytes in segment DATA_ID
//    12 bytes in segment INITTAB
// 
// 1 192 bytes of CODE  memory (+ 124 bytes shared)
//    44 bytes of CONST memory
//     4 bytes of DATA  memory
//
//Errors: none
//Warnings: none
