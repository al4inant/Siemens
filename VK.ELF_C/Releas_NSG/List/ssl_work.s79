//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   15/Mar/2023  22:35:41 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_ /
//                       C\ssl_work.c                                        /
//    Command line    =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_ /
//                       C\ssl_work.c -D NEWSGOLD -D DEBUG -lCN              /
//                       D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_ /
//                       C\Releas_NSG\List\ -la D:\Users\alfinant\Documents\ /
//                       Siemens\Dev\IAR\VK.ELF_C\Releas_NSG\List\ -o        /
//                       D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_ /
//                       C\Releas_NSG\Obj\ -s9 --cpu_mode arm --endian       /
//                       little --cpu ARM926EJ-S --stack_align 4             /
//                       --interwork --diag_suppress Pe301 -e --fpu None     /
//                       --dlib_config D:\Users\alfinant\Documents\Siemens\I /
//                       AR\ARM\LIB\dl5tpainl8n.h -I                         /
//                       D:\Users\alfinant\Documents\Siemens\IAR\ARM\INC\    /
//                       --inline_threshold=2                                /
//    List file       =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_ /
//                       C\Releas_NSG\List\ssl_work.s79                      /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME ssl_work

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__dlib_file_descriptor", "0"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        PUBWEAK `?*?DATA_ID`
        MULTWEAK ??CONNDATA_findByDNR??rA
        MULTWEAK ??CONNDATA_findBySSL??rA
        MULTWEAK ??CONNDATA_findBySession??rA
        MULTWEAK ??CONNDATA_findBySock??rA
        MULTWEAK ??CONNDATA_findByURL??rA
        MULTWEAK ??CONNDATA_free??rA
        MULTWEAK ??CONNDATA_getTop??rA
        MULTWEAK ??CONNDATA_new??rA
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable10 EQU 0
??DataTable11 EQU 0
??DataTable14 EQU 0
??DataTable16 EQU 0
??DataTable2 EQU 0
??DataTable3 EQU 0
??DataTable4 EQU 0
??DataTable5 EQU 0
??DataTable6 EQU 0
??DataTable7 EQU 0
??DataTable8 EQU 0
??DataTable9 EQU 0
        MULTWEAK ??SMART_REDRAW??rA
        MULTWEAK ??SSL_session_reused??rT
        MULTWEAK ??bread??rT
        MULTWEAK ??bwrite??rT
        MULTWEAK ??connect_socket??rA
        MULTWEAK ??end_ssl??rT
        MULTWEAK ??end_ssl_work??rT
        MULTWEAK ??free_recv_buf??rA
        MULTWEAK ??free_send_buf??rA
        MULTWEAK ??reconnect??rA
        MULTWEAK ??ssl_send_answer??rT
        MULTWEAK ??ssl_socket_msg_handler??rT
        MULTWEAK ??tls1_alert_code_text??rT
        MULTWEAK ??tmr_connect_timeout_handler??rT
        MULTWEAK ??tmr_read_timeout_handler??rT
        PUBWEAK ?init?tab?DATA_I
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC SSL_MAX_SESS_COUNT
        PUBLIC SSL_session_reused
        FUNCTION SSL_session_reused,0203H
        PUBLIC bread
        FUNCTION bread,0603H
        LOCFRAME CSTACK, 16, STACK
        PUBLIC bwrite
        FUNCTION bwrite,0603H
        LOCFRAME CSTACK, 20, STACK
        PUBLIC end_ssl
        FUNCTION end_ssl,0203H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC end_ssl_work
        FUNCTION end_ssl_work,0201H
        LOCFRAME CSTACK, 4, STACK
        FUNCTION new_session,0603H
        LOCFRAME CSTACK, 8, STACK
        FUNCTION remove_session,0603H
        LOCFRAME CSTACK, 4, STACK
        FUNCTION ssl_connect,0203H
        LOCFRAME CSTACK, 32, STACK
        FUNCTION ssl_get_answer,0203H
        LOCFRAME CSTACK, 4116, STACK
        PUBLIC ssl_send_answer
        FUNCTION ssl_send_answer,0203H
        LOCFRAME CSTACK, 32, STACK
        PUBLIC ssl_socket_msg_handler
        FUNCTION ssl_socket_msg_handler,0203H
        LOCFRAME CSTACK, 32, STACK
        PUBLIC tls1_alert_code_text
        FUNCTION tls1_alert_code_text,0203H
        PUBLIC tmr_connect_timeout_handler
        FUNCTION tmr_connect_timeout_handler,0601H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC tmr_read_timeout_handler
        FUNCTION tmr_read_timeout_handler,0601H
        LOCFRAME CSTACK, 4, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
CONNDATA_findByDNR  SYMBOL "CONNDATA_findByDNR"
CONNDATA_findBySSL  SYMBOL "CONNDATA_findBySSL"
CONNDATA_findBySession SYMBOL "CONNDATA_findBySession"
CONNDATA_findBySock SYMBOL "CONNDATA_findBySock"
CONNDATA_findByURL  SYMBOL "CONNDATA_findByURL"
CONNDATA_free       SYMBOL "CONNDATA_free"
CONNDATA_getTop     SYMBOL "CONNDATA_getTop"
CONNDATA_new        SYMBOL "CONNDATA_new"
SMART_REDRAW        SYMBOL "SMART_REDRAW"
connect_socket      SYMBOL "connect_socket"
free_recv_buf       SYMBOL "free_recv_buf"
free_send_buf       SYMBOL "free_send_buf"
reconnect           SYMBOL "reconnect"
??CONNDATA_findByDNR??rA SYMBOL "??rA", CONNDATA_findByDNR
??CONNDATA_findBySSL??rA SYMBOL "??rA", CONNDATA_findBySSL
??CONNDATA_findBySession??rA SYMBOL "??rA", CONNDATA_findBySession
??CONNDATA_findBySock??rA SYMBOL "??rA", CONNDATA_findBySock
??CONNDATA_findByURL??rA SYMBOL "??rA", CONNDATA_findByURL
??CONNDATA_free??rA SYMBOL "??rA", CONNDATA_free
??CONNDATA_getTop??rA SYMBOL "??rA", CONNDATA_getTop
??CONNDATA_new??rA  SYMBOL "??rA", CONNDATA_new
??SMART_REDRAW??rA  SYMBOL "??rA", SMART_REDRAW
SSL_session_reused  SYMBOL "SSL_session_reused"
??SSL_session_reused??rT SYMBOL "??rT", SSL_session_reused
bread               SYMBOL "bread"
??bread??rT         SYMBOL "??rT", bread
bwrite              SYMBOL "bwrite"
??bwrite??rT        SYMBOL "??rT", bwrite
??connect_socket??rA SYMBOL "??rA", connect_socket
end_ssl             SYMBOL "end_ssl"
??end_ssl??rT       SYMBOL "??rT", end_ssl
end_ssl_work        SYMBOL "end_ssl_work"
??end_ssl_work??rT  SYMBOL "??rT", end_ssl_work
??free_recv_buf??rA SYMBOL "??rA", free_recv_buf
??free_send_buf??rA SYMBOL "??rA", free_send_buf
??reconnect??rA     SYMBOL "??rA", reconnect
ssl_send_answer     SYMBOL "ssl_send_answer"
??ssl_send_answer??rT SYMBOL "??rT", ssl_send_answer
ssl_socket_msg_handler SYMBOL "ssl_socket_msg_handler"
??ssl_socket_msg_handler??rT SYMBOL "??rT", ssl_socket_msg_handler
tls1_alert_code_text SYMBOL "tls1_alert_code_text"
??tls1_alert_code_text??rT SYMBOL "??rT", tls1_alert_code_text
tmr_connect_timeout_handler SYMBOL "tmr_connect_timeout_handler"
??tmr_connect_timeout_handler??rT SYMBOL "??rT", tmr_connect_timeout_handler
tmr_read_timeout_handler SYMBOL "tmr_read_timeout_handler"
??tmr_read_timeout_handler??rT SYMBOL "??rT", tmr_read_timeout_handler

        EXTERN ALLTOTALRECEIVED
        EXTERN ALLTOTALSENDED
        EXTERN CONNDATA_findByDNR
        FUNCTION CONNDATA_findByDNR,0202H
        EXTERN CONNDATA_findBySSL
        FUNCTION CONNDATA_findBySSL,0202H
        EXTERN CONNDATA_findBySession
        FUNCTION CONNDATA_findBySession,0202H
        EXTERN CONNDATA_findBySock
        FUNCTION CONNDATA_findBySock,0202H
        EXTERN CONNDATA_findByURL
        FUNCTION CONNDATA_findByURL,0202H
        EXTERN CONNDATA_free
        FUNCTION CONNDATA_free,0202H
        EXTERN CONNDATA_getTop
        FUNCTION CONNDATA_getTop,0200H
        EXTERN CONNDATA_new
        FUNCTION CONNDATA_new,0202H
        EXTERN HTTP_CONTENT_LENGTH
        EXTERN HTTP_HEADER_LENGTH
        EXTERN SMART_REDRAW
        FUNCTION SMART_REDRAW,0200H
        EXTERN connect_socket
        FUNCTION connect_socket,0202H
        EXTERN disautorecconect
        EXTERN free_recv_buf
        FUNCTION free_recv_buf,0200H
        EXTERN free_send_buf
        FUNCTION free_send_buf,0200H
        EXTERN is_gprs_online
        EXTERN logmsg
        EXTERN reconnect
        FUNCTION reconnect,0200H
        EXTERN recv_buf
        EXTERN send_buf
        EXTERN send_buf_len
        EXTERN sock_data_read_handler
        EXTERN sock_error_handler
        EXTERN sock_remote_closed_handler


        RSEG DATA_I:DATA:SORT:NOROOT(2)
SSL_MAX_SESS_COUNT:
        DS8 4
        REQUIRE `?<Initializer for SSL_MAX_SESS_COUNT>`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??tls1_alert_code_text??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE tls1_alert_code_text

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function tls1_alert_code_text
        ARM
tls1_alert_code_text:
        LDR      R1,??tls1_alert_code_text_1  ;; `?<Constant "close_notify">`
        CMP      R0,#+47
        BHI      ??tls1_alert_code_text_2
        ADR      R2,??tls1_alert_code_text_0
        LDRB     R2,[R2, R0]
        ADD      PC,PC,R2, LSL #+2
        DATA
??tls1_alert_code_text_0:
        DC8      +11,+35,+35,+35
        DC8      +35,+35,+35,+35
        DC8      +35,+35,+13,+35
        DC8      +35,+35,+35,+35
        DC8      +35,+35,+35,+35
        DC8      +15,+35,+35,+35
        DC8      +35,+35,+35,+35
        DC8      +35,+35,+17,+35
        DC8      +35,+35,+35,+35
        DC8      +35,+35,+35,+35
        DC8      +19,+21,+23,+25
        DC8      +27,+29,+31,+33
        ARM
??tls1_alert_code_text_3:
        MOV      R0,R1
        BX       LR
??tls1_alert_code_text_4:
        ADD      R0,R1,#+16
        BX       LR
??tls1_alert_code_text_5:
        ADD      R0,R1,#+36
        BX       LR
??tls1_alert_code_text_6:
        ADD      R0,R1,#+52
        BX       LR
??tls1_alert_code_text_7:
        ADD      R0,R1,#+76
        BX       LR
??tls1_alert_code_text_8:
        ADD      R0,R1,#+96
        BX       LR
??tls1_alert_code_text_9:
        ADD      R0,R1,#+112
        BX       LR
??tls1_alert_code_text_10:
        ADD      R0,R1,#+128
        BX       LR
??tls1_alert_code_text_11:
        ADD      R0,R1,#+152
        BX       LR
??tls1_alert_code_text_12:
        ADD      R0,R1,#+172
        BX       LR
??tls1_alert_code_text_13:
        ADD      R0,R1,#+192
        BX       LR
??tls1_alert_code_text_14:
        ADD      R0,R1,#+212
        BX       LR
??tls1_alert_code_text_2:
        MOV      R0,#+0
        BX       LR               ;; return
        DATA
??tls1_alert_code_text_1:
        DC32     `?<Constant "close_notify">`
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??SSL_session_reused??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE SSL_session_reused

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function SSL_session_reused
        ARM
SSL_session_reused:
        LDR      R0,[R0, #+92]
        BX       LR               ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??bread??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE bread

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function bread
        ARM
bread:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R4,R1
        MOV      R5,R2
        _BLF     CONNDATA_getTop,??CONNDATA_getTop??rA
        MOV      R6,R0
        SWI      +33148
        MOV      R1,#+0
        STR      R1,[R0, #+0]
        LDR      R0,[R6, #+76]
        MOV      R3,#+0
        MOV      R2,R5
        MOV      R1,R4
        SWI      +376
        MOV      R5,R0
        CMN      R5,#+1
        BNE      ??bread_0
        SWI      +33148
        LDR      R0,[R0, #+0]
        CMP      R0,#+201
        BNE      ??bread_0
        LDRB     R0,[R4, #+0]
        CMP      R0,#+21
        BNE      ??bread_1
        LDRB     R0,[R4, #+6]
        BL       tls1_alert_code_text
        MOV      R1,R0
        LDR      R0,??DataTable15  ;; logmsg
        SWI      +22
        _BLF     SMART_REDRAW,??SMART_REDRAW??rA
??bread_1:
        MOV      R0,#+0
        POP      {R4-R6,PC}
??bread_0:
        MOV      R0,R5
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??bwrite??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE bwrite

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function bwrite
        ARM
bwrite:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        MOV      R4,R1
        MOV      R5,R2
        MOV      R7,R0
        _BLF     CONNDATA_getTop,??CONNDATA_getTop??rA
        MOV      R6,R0
        SWI      +33148
        MOV      R1,#+0
        STR      R1,[R0, #+0]
        LDR      R0,[R7, #+28]
        CMP      R0,#+0
        LDREQ    R0,[R6, #+76]
        STREQ    R0,[R7, #+28]
        LDR      R0,[R6, #+144]
        LDR      R1,[R0, #+20]
        CMP      R1,#+0
        BEQ      ??bwrite_0
        LDR      R1,[R1, #+0]
        LDR      R2,??DataTable12  ;; bread
        STR      R2,[R1, #+12]
        LDR      R0,[R0, #+20]
        LDR      R1,??DataTable13  ;; bwrite
        LDR      R0,[R0, #+0]
        STR      R1,[R0, #+8]
??bwrite_0:
        LDR      R0,[R6, #+76]
        MOV      R3,#+0
        MOV      R2,R5
        MOV      R1,R4
        SWI      +377
        MOV      R4,R0
        CMN      R4,#+1
        BNE      ??bwrite_1
        SWI      +33148
        LDR      R0,[R0, #+0]
        CMP      R0,#+201
        MOVEQ    R0,#+0
        POPEQ    {R4-R7,PC}
??bwrite_1:
        MOV      R0,R4
        POP      {R4-R7,PC}       ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??tmr_connect_timeout_handler??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE tmr_connect_timeout_handler

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function tmr_connect_timeout_handler
        ARM
tmr_connect_timeout_handler:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        _BLF     CONNDATA_getTop,??CONNDATA_getTop??rA
        BL       end_ssl
        LDR      R0,??DataTable17  ;; sock_error_handler
        LDR      R1,[R0, #+0]
        CMP      R1,#+0
        POPEQ    {PC}
        MOV      R0,#+10
        BLX      R1
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??tmr_read_timeout_handler??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE tmr_read_timeout_handler

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function tmr_read_timeout_handler
        ARM
tmr_read_timeout_handler:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        _BLF     CONNDATA_getTop,??CONNDATA_getTop??rA
        BL       end_ssl
        LDR      R0,??DataTable17  ;; sock_error_handler
        LDR      R1,[R0, #+0]
        CMP      R1,#+0
        POPEQ    {PC}
        MOV      R0,#+8
        BLX      R1
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??end_ssl??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE end_ssl

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function end_ssl
        ARM
end_ssl:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOVS     R4,R0
        POPEQ    {R4,PC}
        ADD      R0,R4,#+128
        SWI      +396
        LDR      R0,[R4, #+144]
        SWI      +924
        LDR      R0,[R4, #+144]
        SWI      +928
        LDR      R0,[R4, #+76]
        SWI      +374
        MOV      R0,R4
        _BLF     CONNDATA_free,??CONNDATA_free??rA
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??end_ssl_work??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE end_ssl_work

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function end_ssl_work
        ARM
end_ssl_work:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        B        ??end_ssl_work_0
??end_ssl_work_1:
        BL       end_ssl
??end_ssl_work_0:
        _BLF     CONNDATA_getTop,??CONNDATA_getTop??rA
        CMP      R0,#+0
        BNE      ??end_ssl_work_1
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??ssl_get_answer??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE ssl_get_answer

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function ssl_get_answer
        ARM
ssl_get_answer:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        LDR      R6,??ssl_get_answer_0  ;; ??recv_size
        LDR      R7,??ssl_get_answer_0+0x4  ;; recv_buf
        SUB      SP,SP,#+4096
        CFI CFA R13+4116
        MOV      R4,R0
        LDR      R0,[R7, #+0]
        MOV      R2,#+4096
        CMP      R0,#+0
        STREQ    R0,[R6, #+0]
        LDR      R0,[R4, #+144]
        MOV      R1,SP
        SWI      +925
        MOV      R5,R0
        CMP      R5,#+1
        BLT      ??ssl_get_answer_1
        LDR      R0,[R6, #+0]
        ADD      R1,R5,R0
        LDR      R0,[R7, #+0]
        SWI      +186
        STR      R0,[R7, #+0]
        LDR      R0,[R6, #+0]
        LDR      R3,[R7, #+0]
        MOV      R2,R5
        MOV      R1,SP
        ADD      R0,R0,R3
        SWI      +286
        LDR      R0,[R6, #+0]
        ADD      R0,R5,R0
        STR      R0,[R6, #+0]
        LDR      R0,[R4, #+108]
        ADD      R0,R5,R0
        STR      R0,[R4, #+108]
        LDR      R0,??ssl_get_answer_0+0x8  ;; ALLTOTALRECEIVED
        LDR      R1,[R0, #+0]
        ADD      R1,R5,R1
        STR      R1,[R0, #+0]
??ssl_get_answer_1:
        LDR      R1,??ssl_get_answer_0+0xC  ;; HTTP_HEADER_LENGTH
        LDR      R0,[R4, #+108]
        LDR      R1,[R1, #+0]
        LDR      R6,??DataTable15  ;; logmsg
        LDR      R7,??ssl_get_answer_0+0x10  ;; `?<Constant "SSL_read error!">`
        SUB      R3,R0,R1
        LDR      R0,??ssl_get_answer_0+0x14  ;; HTTP_CONTENT_LENGTH
        ADD      R1,R7,#+16
        LDR      R2,[R0, #+0]
        MOV      R0,R6
        SWI      +22
        _BLF     SMART_REDRAW,??SMART_REDRAW??rA
        CMN      R5,#+1
        BNE      ??ssl_get_answer_2
        MOV      R1,R7
        MOV      R0,R6
        SWI      +22
        _BLF     SMART_REDRAW,??SMART_REDRAW??rA
??ssl_get_answer_2:
        MOV      R0,R5
        ADD      SP,SP,#+4096
        CFI CFA R13+20
        POP      {R4-R7,PC}       ;; return
        DATA
??ssl_get_answer_0:
        DC32     ??recv_size
        DC32     recv_buf
        DC32     ALLTOTALRECEIVED
        DC32     HTTP_HEADER_LENGTH
        DC32     `?<Constant "SSL_read error!">`
        DC32     HTTP_CONTENT_LENGTH
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        THUMB
??ssl_send_answer??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock18
        REQUIRE ssl_send_answer

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI Function ssl_send_answer
        ARM
ssl_send_answer:
        PUSH     {R4-R10,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R10 Frame(CFA, -8)
        CFI R9 Frame(CFA, -12)
        CFI R8 Frame(CFA, -16)
        CFI R7 Frame(CFA, -20)
        CFI R6 Frame(CFA, -24)
        CFI R5 Frame(CFA, -28)
        CFI R4 Frame(CFA, -32)
        CFI CFA R13+32
        LDR      R4,??ssl_send_answer_0  ;; ??conn
        LDR      R5,??ssl_send_answer_0+0x4  ;; send_buf_len
        LDR      R6,??ssl_send_answer_0+0x8  ;; send_buf
        MOV      R7,R0
        MOV      R9,R1
        MOV      R10,R2
        MOV      R8,R3
        CMP      R7,#+0
        BEQ      ??ssl_send_answer_1
        _BLF     free_send_buf,??free_send_buf??rA
        STR      R9,[R6, #+0]
        STR      R10,[R5, #+0]
        STR      R10,[R4, #+4]
        _BLF     free_recv_buf,??free_recv_buf??rA
        MOV      R0,R7
        _BLF     CONNDATA_findByURL,??CONNDATA_findByURL??rA
        STR      R0,[R4, #+0]
        CMP      R0,#+0
        LDRNE    R1,[R0, #+144]
        CMPNE    R1,#+0
        BEQ      ??ssl_send_answer_2
        MOV      R1,#+0
        STR      R1,[R0, #+104]
        STR      R1,[R0, #+108]
??ssl_send_answer_1:
        LDR      R0,[R5, #+0]
        LDR      R1,[R4, #+4]
        MOV      R2,R0
        SUB      R0,R0,R1
        LDR      R1,[R6, #+0]
        ADD      R1,R0,R1
        LDR      R0,[R4, #+0]
        LDR      R0,[R0, #+144]
        SWI      +927
        LDR      R1,[R4, #+0]
        MOV      R2,#+1
        STR      R2,[R1, #+88]
        RSB      R2,R2,#+0
        CMP      R0,R2
        BEQ      ??ssl_send_answer_3
        LDR      R3,[R4, #+4]
        SUB      R3,R3,R0
        STR      R3,[R4, #+4]
        LDR      R3,[R1, #+104]
        ADD      R3,R0,R3
        STR      R3,[R1, #+104]
        LDR      R3,??ssl_send_answer_0+0xC  ;; ALLTOTALSENDED
        LDR      R5,[R3, #+0]
        ADD      R5,R0,R5
        STR      R5,[R3, #+0]
??ssl_send_answer_3:
        LDR      R5,??DataTable15  ;; logmsg
        LDR      R6,??ssl_send_answer_0+0x10  ;; `?<Constant "SSL_write Ok">`
        CMP      R0,#+1
        BLT      ??ssl_send_answer_4
        LDR      R0,[R4, #+4]
        CMP      R0,#+0
        POPNE    {R4-R10,PC}
        ADD      R0,R1,#+128
        SWI      +396
        LDR      R0,[R4, #+0]
        LDR      R2,??DataTable18  ;; tmr_read_timeout_handler
        MOV      R1,#+80
        ORR      R1,R1,#0x1900
        ADD      R0,R0,#+128
        SWI      +77
        MOV      R1,R6
        B        ??ssl_send_answer_5
??ssl_send_answer_2:
        MOV      R1,R8
        MOV      R0,R7
        _BLF     CONNDATA_new,??CONNDATA_new??rA
        STR      R0,[R4, #+0]
        _BLF     connect_socket,??connect_socket??rA
        POP      {R4-R10,PC}
??ssl_send_answer_4:
        LDR      R4,??DataTable17  ;; sock_error_handler
        CMP      R0,#+0
        BNE      ??ssl_send_answer_6
        LDR      R1,[R4, #+0]
        MOV      R0,#+6
        BLX      R1
        ADD      R1,R6,#+16
        MOV      R0,#+1
        SWI      +328
        ADD      R1,R6,#+32
??ssl_send_answer_5:
        MOV      R0,R5
        SWI      +22
        _BLF     SMART_REDRAW,??SMART_REDRAW??rA
        POP      {R4-R10,PC}
??ssl_send_answer_6:
        CMP      R0,R2
        POPNE    {R4-R10,PC}
        MOV      R0,R1
        BL       end_ssl
        LDR      R1,[R4, #+0]
        MOV      R0,#+6
        BLX      R1
        POP      {R4-R10,PC}      ;; return
        DATA
??ssl_send_answer_0:
        DC32     ??conn
        DC32     send_buf_len
        DC32     send_buf
        DC32     ALLTOTALSENDED
        DC32     `?<Constant "SSL_write Ok">`
        CFI EndBlock cfiBlock19

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        THUMB
??new_session??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock20
        REQUIRE new_session

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI Function new_session
        ARM
new_session:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R1
        _BLF     CONNDATA_findBySSL,??CONNDATA_findBySSL??rA
        LDR      R1,??new_session_0  ;; `?<Constant "SSL new session">`
        CMP      R0,#+0
        STRNE    R4,[R0, #+152]
        LDR      R0,??DataTable15  ;; logmsg
        SWI      +22
        _BLF     SMART_REDRAW,??SMART_REDRAW??rA
        MOV      R0,#+1
        POP      {R4,PC}          ;; return
        DATA
??new_session_0:
        DC32     `?<Constant "SSL new session">`
        CFI EndBlock cfiBlock21

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon0
        CFI NoFunction
        THUMB
??remove_session??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock22
        REQUIRE remove_session

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI Function remove_session
        ARM
remove_session:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R0,R1
        MOV      R1,#+1
        STR      R1,[R0, #+156]
        _BLF     CONNDATA_findBySession,??CONNDATA_findBySession??rA
        CMP      R0,#+0
        POPEQ    {PC}
        MOV      R1,#+0
        STR      R1,[R0, #+152]
        LDR      R1,??remove_session_0  ;; `?<Constant "SSL session remove: %s">`
        ADD      R2,R0,#+12
        LDR      R0,??DataTable15  ;; logmsg
        SWI      +22
        POP      {PC}             ;; return
        DATA
??remove_session_0:
        DC32     `?<Constant "SSL session remove: %s">`
        CFI EndBlock cfiBlock23

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon0
        CFI NoFunction
        THUMB
??ssl_connect??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock24
        REQUIRE ssl_connect

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon1
        CFI Function ssl_connect
        ARM
ssl_connect:
        PUSH     {R4-R10,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R10 Frame(CFA, -8)
        CFI R9 Frame(CFA, -12)
        CFI R8 Frame(CFA, -16)
        CFI R7 Frame(CFA, -20)
        CFI R6 Frame(CFA, -24)
        CFI R5 Frame(CFA, -28)
        CFI R4 Frame(CFA, -32)
        CFI CFA R13+32
        LDR      R9,??ssl_connect_0  ;; ctx
        LDR      R6,??DataTable15  ;; logmsg
        LDR      R7,??ssl_connect_0+0x4  ;; `?<Constant "SSL connect...">`
        MOVS     R4,R0
        STRNE    R4,[R9, #+4]
        LDR      R0,[R9, #+4]
        MVN      R8,#+0
        _BLF     CONNDATA_findBySock,??CONNDATA_findBySock??rA
        MOV      R5,R0
        MOV      R1,R7
        MOV      R0,R6
        SWI      +22
        _BLF     SMART_REDRAW,??SMART_REDRAW??rA
        CMP      R4,#+0
        BEQ      ??ssl_connect_1
        STR      R8,[R5, #+148]
        LDR      R0,[R9, #+0]
        CMP      R0,#+0
        BNE      ??ssl_connect_2
        SWI      +917
        SWI      +918
        STR      R0,[R9, #+0]
        MOV      R3,#+0
        MOV      R2,#+1
        ORR      R2,R2,#0x100
        MOV      R1,#+44
        SWI      +920
        LDR      R0,[R9, #+0]
        LDR      R1,??ssl_connect_0+0x8  ;; new_session
        STR      R1,[R0, #+48]
        LDR      R1,??ssl_connect_0+0xC  ;; remove_session
        STR      R1,[R0, #+52]
??ssl_connect_2:
        LDR      R0,[R9, #+0]
        SWI      +921
        MOV      R9,R0
        STR      R9,[R5, #+144]
        LDR      R1,[R5, #+152]
        CMP      R1,#+0
        BEQ      ??ssl_connect_3
        LDR      R0,[R1, #+140]
        CMP      R0,#+0
        BEQ      ??ssl_connect_4
        MOV      R10,#+0
        STR      R10,[R1, #+156]
        MOV      R0,R1
        SWI      +930
        STR      R10,[R5, #+152]
        B        ??ssl_connect_3
??ssl_connect_4:
        MOV      R0,#+2
        STR      R0,[R1, #+156]
        MOV      R0,R9
        SWI      +929
??ssl_connect_3:
        MOV      R1,R4
        MOV      R0,R9
        SWI      +922
        LDR      R0,[R9, #+12]
        LDR      R2,??DataTable12  ;; bread
        LDR      R1,[R0, #+0]
        STR      R2,[R1, #+12]
        LDR      R0,[R0, #+0]
        LDR      R1,??DataTable13  ;; bwrite
        STR      R1,[R0, #+8]
??ssl_connect_1:
        LDR      R0,[R5, #+144]
        SWI      +923
        STR      R0,[R5, #+148]
        CMP      R0,R8
        BNE      ??ssl_connect_5
        MOV      R0,R5
        BL       end_ssl
        LDR      R1,??DataTable17  ;; sock_error_handler
        MOV      R0,#+9
        LDR      R1,[R1, #+0]
        BLX      R1
        ADD      R1,R7,#+16
        MOV      R0,R6
        SWI      +22
        _BLF     SMART_REDRAW,??SMART_REDRAW??rA
??ssl_connect_5:
        LDR      R0,[R5, #+148]
        CMP      R0,#+1
        BNE      ??ssl_connect_6
        ADD      R1,R7,#+36
        MOV      R0,R6
        SWI      +22
??ssl_connect_6:
        LDR      R0,[R5, #+148]
        POP      {R4-R10,PC}      ;; return
        DATA
??ssl_connect_0:
        DC32     ctx
        DC32     `?<Constant "SSL connect...">`
        DC32     new_session
        DC32     remove_session
        CFI EndBlock cfiBlock25

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable12:
        DC32     bread

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable13:
        DC32     bwrite

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock26 Using cfiCommon0
        CFI NoFunction
        THUMB
??ssl_socket_msg_handler??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock26
        REQUIRE ssl_socket_msg_handler

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
ctx:
        DS8 4
        DS8 4

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
??recv_size:
        DS8 4

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
??conn:
        DS8 4
        DS8 4

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock27 Using cfiCommon1
        CFI Function ssl_socket_msg_handler
        ARM
ssl_socket_msg_handler:
        PUSH     {R4-R10,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R10 Frame(CFA, -8)
        CFI R9 Frame(CFA, -12)
        CFI R8 Frame(CFA, -16)
        CFI R7 Frame(CFA, -20)
        CFI R6 Frame(CFA, -24)
        CFI R5 Frame(CFA, -28)
        CFI R4 Frame(CFA, -32)
        CFI CFA R13+32
        LDR      R6,??DataTable15  ;; logmsg
        LDR      R7,??ssl_socket_msg_handler_1  ;; `?<Constant "buffer free!!!">`
        MOV      R5,R0
        LDR      R1,[R5, #+12]
        LDR      R0,??ssl_socket_msg_handler_1+0x4  ;; is_gprs_online
        MOV      R8,#+1
        MOV      R4,#+0
        SUBS     R1,R1,#+128
        BEQ      ??ssl_socket_msg_handler_2
        SUBS     R1,R1,#+2
        BEQ      ??ssl_socket_msg_handler_3
        SUBS     R1,R1,#+18
        BEQ      ??ssl_socket_msg_handler_4
        B        ??ssl_socket_msg_handler_5
??ssl_socket_msg_handler_3:
        LDR      R1,??DataTable17  ;; sock_error_handler
        STR      R4,[R0, #+0]
        LDR      R1,[R1, #+0]
        MOV      R0,#+4
        BLX      R1
        ADD      R1,R7,#+60
        B        ??ssl_socket_msg_handler_6
??ssl_socket_msg_handler_2:
        LDR      R1,??DataTable17  ;; sock_error_handler
        STR      R8,[R0, #+0]
        LDR      R1,[R1, #+0]
        MOV      R0,#+5
        BLX      R1
        LDR      R0,??ssl_socket_msg_handler_1+0x8  ;; disautorecconect
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BNE      ??ssl_socket_msg_handler_5
        ADD      R1,R7,#+76
        MOV      R0,R6
        SWI      +22
        _BLF     SMART_REDRAW,??SMART_REDRAW??rA
        _BLF     reconnect,??reconnect??rA
??ssl_socket_msg_handler_5:
        LDR      R0,[R5, #+16]
        _BLF     CONNDATA_findBySock,??CONNDATA_findBySock??rA
        MOVS     R10,R0
        POPEQ    {R4-R10,PC}
        LDR      R0,[R5, #+12]
        MOV      R9,#+80
        ORR      R9,R9,#0x1900
        SUB      R0,R0,#+138
        CMP      R0,#+5
        POPHI    {R4-R10,PC}
        ADR      R1,??ssl_socket_msg_handler_0
        LDRB     R1,[R1, R0]
        ADD      PC,PC,R1, LSL #+2
        DATA
??ssl_socket_msg_handler_0:
        DC8      +58,+58,+18,+1
        DC8      +81,+66,+0,+0
        ARM
??ssl_socket_msg_handler_7:
        STR      R8,[R10, #+84]
        LDR      R0,[R10, #+76]
        BL       ssl_connect
        LDR      R2,??ssl_socket_msg_handler_1+0xC  ;; tmr_connect_timeout_handler
        MOV      R1,R9
        ADD      R0,R10,#+112
        SWI      +77
        POP      {R4-R10,PC}
??ssl_socket_msg_handler_4:
        LDR      R0,[R5, #+16]
        _BLF     CONNDATA_findByDNR,??CONNDATA_findByDNR??rA
        MOVS     R10,R0
        LDRNE    R0,[R0, #+96]
        CMPNE    R0,#+0
        POPEQ    {R4-R10,PC}
        MOV      R0,#+0
        _BLF     connect_socket,??connect_socket??rA
        POP      {R4-R10,PC}
??ssl_socket_msg_handler_8:
        LDR      R0,[R10, #+148]
        CMP      R0,#+0
        BNE      ??ssl_socket_msg_handler_9
        BL       ssl_connect
        LDR      R0,[R10, #+148]
        CMP      R0,#+1
        POPNE    {R4-R10,PC}
        ADD      R0,R10,#+112
        SWI      +396
        MOV      R3,#+0
        MOV      R2,R3
        MOV      R1,R2
        MOV      R0,R1
        BL       ssl_send_answer
        POP      {R4-R10,PC}
??ssl_socket_msg_handler_9:
        CMP      R0,#+1
        LDREQ    R0,[R10, #+88]
        CMPEQ    R0,#+1
        POPNE    {R4-R10,PC}
        MOV      R0,R10
        BL       ssl_get_answer
        CMP      R0,#+1
        POPLT    {R4-R10,PC}
        LDR      R1,??ssl_socket_msg_handler_1+0x10  ;; sock_data_read_handler
        MOV      R0,R10
        LDR      R1,[R1, #+0]
        BLX      R1
        CMP      R0,#+0
        BEQ      ??ssl_socket_msg_handler_10
        STR      R4,[R10, #+88]
        ADD      R0,R10,#+128
        SWI      +396
        POP      {R4-R10,PC}
??ssl_socket_msg_handler_10:
        ADD      R0,R10,#+128
        SWI      +396
        LDR      R2,??DataTable18  ;; tmr_read_timeout_handler
        MOV      R1,R9
        ADD      R0,R10,#+128
        SWI      +77
        POP      {R4-R10,PC}
??ssl_socket_msg_handler_11:
        MOV      R1,R7
        MOV      R0,#+1
        SWI      +328
        ADD      R1,R7,#+16
??ssl_socket_msg_handler_6:
        MOV      R0,R6
        SWI      +22
        _BLF     SMART_REDRAW,??SMART_REDRAW??rA
        POP      {R4-R10,PC}
??ssl_socket_msg_handler_12:
        ADD      R2,R10,#+12
        ADD      R1,R7,#+36
        MOV      R0,R6
        SWI      +22
        _BLF     SMART_REDRAW,??SMART_REDRAW??rA
        ADD      R0,R10,#+128
        SWI      +396
        LDR      R0,[R10, #+76]
        LDR      R1,??ssl_socket_msg_handler_1+0x14  ;; sock_remote_closed_handler
        MOV      R0,R0, LSL #+16
        LDR      R1,[R1, #+0]
        MOV      R0,R0, ASR #+16
        BLX      R1
        MOV      R0,R10
        BL       end_ssl
??ssl_socket_msg_handler_13:
        POP      {R4-R10,PC}      ;; return
        DATA
??ssl_socket_msg_handler_1:
        DC32     `?<Constant "buffer free!!!">`
        DC32     is_gprs_online
        DC32     disautorecconect
        DC32     tmr_connect_timeout_handler
        DC32     sock_data_read_handler
        DC32     sock_remote_closed_handler
        CFI EndBlock cfiBlock27

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable15:
        DC32     logmsg

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable17:
        DC32     sock_error_handler

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable18:
        DC32     tmr_read_timeout_handler

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock28 Using cfiCommon1
        CFI NoFunction
        ARM
??CONNDATA_getTop??rA:
        LDR      R12,??Subroutine14_0  ;; CONNDATA_getTop
        BX       R12
        DATA
??Subroutine14_0:
        DC32     CONNDATA_getTop
        CFI EndBlock cfiBlock28

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock29 Using cfiCommon1
        CFI NoFunction
        ARM
??SMART_REDRAW??rA:
        LDR      R12,??Subroutine15_0  ;; SMART_REDRAW
        BX       R12
        DATA
??Subroutine15_0:
        DC32     SMART_REDRAW
        CFI EndBlock cfiBlock29

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock30 Using cfiCommon1
        CFI NoFunction
        ARM
??CONNDATA_free??rA:
        LDR      R12,??Subroutine16_0  ;; CONNDATA_free
        BX       R12
        DATA
??Subroutine16_0:
        DC32     CONNDATA_free
        CFI EndBlock cfiBlock30

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock31 Using cfiCommon1
        CFI NoFunction
        ARM
??free_send_buf??rA:
        LDR      R12,??Subroutine17_0  ;; free_send_buf
        BX       R12
        DATA
??Subroutine17_0:
        DC32     free_send_buf
        CFI EndBlock cfiBlock31

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock32 Using cfiCommon1
        CFI NoFunction
        ARM
??free_recv_buf??rA:
        LDR      R12,??Subroutine18_0  ;; free_recv_buf
        BX       R12
        DATA
??Subroutine18_0:
        DC32     free_recv_buf
        CFI EndBlock cfiBlock32

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock33 Using cfiCommon1
        CFI NoFunction
        ARM
??CONNDATA_findByURL??rA:
        LDR      R12,??Subroutine19_0  ;; CONNDATA_findByURL
        BX       R12
        DATA
??Subroutine19_0:
        DC32     CONNDATA_findByURL
        CFI EndBlock cfiBlock33

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock34 Using cfiCommon1
        CFI NoFunction
        ARM
??CONNDATA_new??rA:
        LDR      R12,??Subroutine20_0  ;; CONNDATA_new
        BX       R12
        DATA
??Subroutine20_0:
        DC32     CONNDATA_new
        CFI EndBlock cfiBlock34

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock35 Using cfiCommon1
        CFI NoFunction
        ARM
??connect_socket??rA:
        LDR      R12,??Subroutine21_0  ;; connect_socket
        BX       R12
        DATA
??Subroutine21_0:
        DC32     connect_socket
        CFI EndBlock cfiBlock35

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock36 Using cfiCommon1
        CFI NoFunction
        ARM
??CONNDATA_findBySSL??rA:
        LDR      R12,??Subroutine22_0  ;; CONNDATA_findBySSL
        BX       R12
        DATA
??Subroutine22_0:
        DC32     CONNDATA_findBySSL
        CFI EndBlock cfiBlock36

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock37 Using cfiCommon1
        CFI NoFunction
        ARM
??CONNDATA_findBySession??rA:
        LDR      R12,??Subroutine23_0  ;; CONNDATA_findBySession
        BX       R12
        DATA
??Subroutine23_0:
        DC32     CONNDATA_findBySession
        CFI EndBlock cfiBlock37

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock38 Using cfiCommon1
        CFI NoFunction
        ARM
??CONNDATA_findBySock??rA:
        LDR      R12,??Subroutine24_0  ;; CONNDATA_findBySock
        BX       R12
        DATA
??Subroutine24_0:
        DC32     CONNDATA_findBySock
        CFI EndBlock cfiBlock38

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock39 Using cfiCommon1
        CFI NoFunction
        ARM
??reconnect??rA:
        LDR      R12,??Subroutine25_0  ;; reconnect
        BX       R12
        DATA
??Subroutine25_0:
        DC32     reconnect
        CFI EndBlock cfiBlock39

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock40 Using cfiCommon1
        CFI NoFunction
        ARM
??CONNDATA_findByDNR??rA:
        LDR      R12,??Subroutine26_0  ;; CONNDATA_findByDNR
        BX       R12
        DATA
??Subroutine26_0:
        DC32     CONNDATA_findByDNR
        CFI EndBlock cfiBlock40

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for SSL_MAX_SESS_COUNT>`:
        DATA
        DC32 1

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "SSL_read error!">`:
        DATA
        DC8 "SSL_read error!"
        DC8 "SSL_Read..\012length: %d\012received: %d"
        DC8 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "buffer free!!!">`:
        DATA
        DC8 "buffer free!!!"
        DC8 0
        DC8 "ENIP_BUFFER_FREE"
        DC8 0, 0, 0
        DC8 "\321\345\360\342\345\360 %s \347\340\352\360\373\353 \361\356\345\344."
        DC8 0
        DC8 "GPRS offline..."
        DC8 "GPRS online"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "close_notify">`:
        DATA
        DC8 "close_notify"
        DC8 0, 0, 0
        DC8 "unexpected_message"
        DC8 0
        DC8 "bad_record_mac"
        DC8 0
        DC8 "decompression_failure"
        DC8 0, 0
        DC8 "handshake_failure"
        DC8 0, 0
        DC8 "no_certificate"
        DC8 0
        DC8 "bad_certificate"
        DC8 "unsupported_certificate"
        DC8 "certificate_revoked"
        DC8 "certificate_expired"
        DC8 "certificate_unknown"
        DC8 "illegal_parameter"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "SSL_write Ok">`:
        DATA
        DC8 "SSL_write Ok"
        DC8 0, 0, 0
        DC8 "SSL write==0"
        DC8 0, 0, 0
        DC8 "ssl_write==0"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "SSL new session">`:
        DATA
        DC8 "SSL new session"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "SSL session remove: %s">`:
        DATA
        DC8 "SSL session remove: %s"
        DC8 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "SSL connect...">`:
        DATA
        DC8 "SSL connect..."
        DC8 0
        DC8 "SSL_connect Error!"
        DC8 0
        DC8 "SSL_connect Ok!"

        END
// 
// 2 544 bytes in segment CODE
//   512 bytes in segment DATA_C
//     4 bytes in segment DATA_I
//     4 bytes in segment DATA_ID
//    20 bytes in segment DATA_Z
//    24 bytes in segment INITTAB
// 
// 2 332 bytes of CODE  memory (+ 236 bytes shared)
//   516 bytes of CONST memory
//    24 bytes of DATA  memory
//
//Errors: none
//Warnings: none
