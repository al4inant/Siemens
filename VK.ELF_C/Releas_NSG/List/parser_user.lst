##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    15/Mar/2023  22:35:34 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \parser_user.c                                       #
#    Command line    =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \parser_user.c -D NEWSGOLD -D DEBUG -lCN             #
#                       D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \Releas_NSG\List\ -la D:\Users\alfinant\Documents\Si #
#                       emens\Dev\IAR\VK.ELF_C\Releas_NSG\List\ -o           #
#                       D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \Releas_NSG\Obj\ -s9 --cpu_mode arm --endian little  #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork         #
#                       --diag_suppress Pe301 -e --fpu None --dlib_config    #
#                       D:\Users\alfinant\Documents\Siemens\IAR\ARM\LIB\dl5t #
#                       painl8n.h -I D:\Users\alfinant\Documents\Siemens\IAR #
#                       \ARM\INC\ --inline_threshold=2                       #
#    List file       =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \Releas_NSG\List\parser_user.lst                     #
#    Object file     =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \Releas_NSG\Obj\parser_user.r79                      #
#                                                                            #
#                                                                            #
##############################################################################

D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C\parser_user.c
      1          #include "parser_user.h"
      2          #include "constants.h"

   \                                 In segment DATA_C, align 4, align-sorted
   \   static char const __data t_id[3]
   \                     t_id:
   \   00000000   696400             DC8 "id"
   \   00000003   00                 DC8 0
   \   00000004   646561637469       DC8 "deactivated"
   \              766174656400
   \   00000010   6861735F7068       DC8 "has_photo"
   \              6F746F00    
   \   0000001A   0000               DC8 0, 0
   \   0000001C   70686F746F5F       DC8 "photo_50"
   \              353000      
   \   00000025   000000             DC8 0, 0, 0
   \   00000028   66697273745F       DC8 "first_name"
   \              6E616D6500  
   \   00000033   00                 DC8 0
   \   00000034   6C6173745F6E       DC8 "last_name"
   \              616D6500    
   \   0000003E   0000               DC8 0, 0
   \   00000040   667269656E64       DC8 "friend_status"
   \              5F7374617475
   \              7300        
   \   0000004E   0000               DC8 0, 0
   \   00000050   6F6E6C696E65       DC8 "online"
   \              00          
   \   00000057   00                 DC8 0
      3          

   \                                 In segment CODE, align 4, keep-with-next
      4          VkUser* parse_obj_User(cJSON* json)
      5          { 
   \                     parse_obj_User:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
      6            VkUser* user=malloc(sizeof(VkUser));
      7            zeromem(user, sizeof(VkUser));
      8            INIT_LIST_HEAD(&user->list);
      9            
     10            cJSON* j_item = cJSON_GetObjectItem(json, t_id);
   \   00000004   0C619FE5           LDR      R6,??parse_obj_User_0  ;; t_id
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   2C00A0E3           MOV      R0,#+44
   \   00000010   140000EF           SWI      +20
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   2C10A0E3           MOV      R1,#+44
   \   0000001C   1D0100EF           SWI      +285
   \   00000020   004084E5           STR      R4,[R4, #+0]
   \   00000024   044084E5           STR      R4,[R4, #+4]
   \   00000028   0610A0E1           MOV      R1,R6
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   ........           _BLF     cJSON_GetObjectItem,??cJSON_GetObjectItem??rA
     11            if (j_item)
   \   00000034   000050E3           CMP      R0,#+0
     12              user->id = j_item->valueint;           
   \   00000038   14009015           LDRNE    R0,[R0, #+20]
     13                    
     14            j_item = cJSON_GetObjectItem(json, t_first_name);
   \   0000003C   281086E2           ADD      R1,R6,#+40
   \   00000040   08008415           STRNE    R0,[R4, #+8]
   \   00000044   0500A0E1           MOV      R0,R5
   \   00000048   ........           _BLF     cJSON_GetObjectItem,??cJSON_GetObjectItem??rA
     15            if (j_item)
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   0200000A           BEQ      ??parse_obj_User_1
     16              user->first_name=CreateWS_emoji(j_item->valuestring);
   \   00000054   100090E5           LDR      R0,[R0, #+16]
   \   00000058   ........           _BLF     CreateWS_emoji,??CreateWS_emoji??rA
   \   0000005C   0C0084E5           STR      R0,[R4, #+12]
     17                    
     18            j_item = cJSON_GetObjectItem(json, t_last_name);
   \                     ??parse_obj_User_1:
   \   00000060   341086E2           ADD      R1,R6,#+52
   \   00000064   0500A0E1           MOV      R0,R5
   \   00000068   ........           _BLF     cJSON_GetObjectItem,??cJSON_GetObjectItem??rA
     19            if (j_item)
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   0200000A           BEQ      ??parse_obj_User_2
     20              user->last_name=CreateWS_emoji(j_item->valuestring);
   \   00000074   100090E5           LDR      R0,[R0, #+16]
   \   00000078   ........           _BLF     CreateWS_emoji,??CreateWS_emoji??rA
   \   0000007C   100084E5           STR      R0,[R4, #+16]
     21          
     22            j_item = cJSON_GetObjectItem(json, t_deactivated);
     23            if (j_item)
   \                     ??parse_obj_User_2:
   \   00000080   041086E2           ADD      R1,R6,#+4
   \   00000084   0500A0E1           MOV      R0,R5
   \   00000088   ........           _BLF     cJSON_GetObjectItem,??cJSON_GetObjectItem??rA
   \   0000008C   000050E3           CMP      R0,#+0
     24              user->deactivated = 1;//string: "deleted", "banned"
   \   00000090   0100A013           MOVNE    R0,#+1
   \   00000094   14008415           STRNE    R0,[R4, #+20]
     25            
     26            j_item = cJSON_GetObjectItem(json, t_photo_50);
   \   00000098   1C1086E2           ADD      R1,R6,#+28
   \   0000009C   0500A0E1           MOV      R0,R5
   \   000000A0   ........           _BLF     cJSON_GetObjectItem,??cJSON_GetObjectItem??rA
   \   000000A4   0070B0E1           MOVS     R7,R0
     27            if (j_item)
   \   000000A8   0600000A           BEQ      ??parse_obj_User_3
     28            {
     29              user->photo_50 = malloc(strlen(j_item->valuestring) + 1);
   \   000000AC   100097E5           LDR      R0,[R7, #+16]
   \   000000B0   1B0000EF           SWI      +27
   \   000000B4   010080E2           ADD      R0,R0,#+1
   \   000000B8   140000EF           SWI      +20
   \   000000BC   200084E5           STR      R0,[R4, #+32]
     30              strcpy(user->photo_50, j_item->valuestring);    
   \   000000C0   101097E5           LDR      R1,[R7, #+16]
   \   000000C4   1A0000EF           SWI      +26
     31            }
     32            
     33            j_item = cJSON_GetObjectItem(json, t_has_photo);
   \                     ??parse_obj_User_3:
   \   000000C8   101086E2           ADD      R1,R6,#+16
   \   000000CC   0500A0E1           MOV      R0,R5
   \   000000D0   ........           _BLF     cJSON_GetObjectItem,??cJSON_GetObjectItem??rA
     34            if (j_item)
   \   000000D4   000050E3           CMP      R0,#+0
     35              user->has_photo = j_item->valueint; 
   \   000000D8   14009015           LDRNE    R0,[R0, #+20]
     36          
     37            j_item = cJSON_GetObjectItem(json, t_friend_status);
   \   000000DC   401086E2           ADD      R1,R6,#+64
   \   000000E0   1C008415           STRNE    R0,[R4, #+28]
   \   000000E4   0500A0E1           MOV      R0,R5
   \   000000E8   ........           _BLF     cJSON_GetObjectItem,??cJSON_GetObjectItem??rA
     38            if (j_item)
   \   000000EC   000050E3           CMP      R0,#+0
     39              user->friend_status = j_item->valueint; 
   \   000000F0   14009015           LDRNE    R0,[R0, #+20]
     40            
     41            j_item = cJSON_GetObjectItem(json, t_online);
   \   000000F4   501086E2           ADD      R1,R6,#+80
   \   000000F8   18008415           STRNE    R0,[R4, #+24]
   \   000000FC   0500A0E1           MOV      R0,R5
   \   00000100   ........           _BLF     cJSON_GetObjectItem,??cJSON_GetObjectItem??rA
     42            if (j_item)
   \   00000104   000050E3           CMP      R0,#+0
     43              user->online = j_item->valueint;
   \   00000108   14009015           LDRNE    R0,[R0, #+20]
   \   0000010C   28008415           STRNE    R0,[R4, #+40]
     44            
     45            return user;  
   \   00000110   0400A0E1           MOV      R0,R4
   \   00000114   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??parse_obj_User_0:
   \   00000118   ........           DC32     t_id
     46          }
     47          

   \                                 In segment CODE, align 4, keep-with-next
     48          VkUser* parse_obj_profiles(cJSON *json)
     49          {
   \                     parse_obj_profiles:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     50            VkUser* user=NULL;
   \   00000008   0050A0E3           MOV      R5,#+0
     51            
     52            if (cJSON_GetArraySize(json) > 0)
   \   0000000C   ........           _BLF     cJSON_GetArraySize,??cJSON_GetArraySize??rA
   \   00000010   010050E3           CMP      R0,#+1
   \   00000014   110000BA           BLT      ??parse_obj_profiles_0
     53            {
     54              cJSON* i = NULL;
     55              
     56              cJSON_ArrayForEach(i, json)
   \   00000018   000054E3           CMP      R4,#+0
   \   0000001C   0F00000A           BEQ      ??parse_obj_profiles_0
   \   00000020   084094E5           LDR      R4,[R4, #+8]
   \   00000024   050000EA           B        ??parse_obj_profiles_1
     57              {      
     58                VkUser* _user=parse_obj_User(i);
     59                if(user==NULL)
     60                    user=_user;
     61                else
     62                  list_add_tail(&_user->list, &user->list);
   \                     ??parse_obj_profiles_2:
   \   00000028   041095E5           LDR      R1,[R5, #+4]
   \   0000002C   040085E5           STR      R0,[R5, #+4]
   \   00000030   005080E5           STR      R5,[R0, #+0]
   \   00000034   041080E5           STR      R1,[R0, #+4]
   \   00000038   000081E5           STR      R0,[R1, #+0]
   \                     ??parse_obj_profiles_3:
   \   0000003C   004094E5           LDR      R4,[R4, #+0]
   \                     ??parse_obj_profiles_1:
   \   00000040   000054E3           CMP      R4,#+0
   \   00000044   0500000A           BEQ      ??parse_obj_profiles_0
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   ........           BL       parse_obj_User
   \   00000050   000055E3           CMP      R5,#+0
   \   00000054   F3FFFF1A           BNE      ??parse_obj_profiles_2
   \   00000058   0050A0E1           MOV      R5,R0
   \   0000005C   F6FFFFEA           B        ??parse_obj_profiles_3
     63              }
     64            }
     65            return user;
   \                     ??parse_obj_profiles_0:
   \   00000060   0500A0E1           MOV      R0,R5
   \   00000064   3080BDE8           POP      {R4,R5,PC}       ;; return
     66          }

   Maximum stack usage in bytes:

     Function           CSTACK
     --------           ------
     parse_obj_User        20
     parse_obj_profiles    12


   Segment part sizes:

     Function/Label     Bytes
     --------------     -----
     t_id                 88
     parse_obj_User      284
     parse_obj_profiles  104
      Others              44

 
 432 bytes in segment CODE
  88 bytes in segment DATA_C
 
 388 bytes of CODE  memory (+ 44 bytes shared)
  88 bytes of CONST memory

Errors: none
Warnings: none
