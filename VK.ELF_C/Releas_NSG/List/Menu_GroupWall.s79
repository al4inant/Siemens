//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   15/Mar/2023  22:35:38 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_ /
//                       C\Menu_GroupWall.c                                  /
//    Command line    =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_ /
//                       C\Menu_GroupWall.c -D NEWSGOLD -D DEBUG -lCN        /
//                       D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_ /
//                       C\Releas_NSG\List\ -la D:\Users\alfinant\Documents\ /
//                       Siemens\Dev\IAR\VK.ELF_C\Releas_NSG\List\ -o        /
//                       D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_ /
//                       C\Releas_NSG\Obj\ -s9 --cpu_mode arm --endian       /
//                       little --cpu ARM926EJ-S --stack_align 4             /
//                       --interwork --diag_suppress Pe301 -e --fpu None     /
//                       --dlib_config D:\Users\alfinant\Documents\Siemens\I /
//                       AR\ARM\LIB\dl5tpainl8n.h -I                         /
//                       D:\Users\alfinant\Documents\Siemens\IAR\ARM\INC\    /
//                       --inline_threshold=2                                /
//    List file       =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_ /
//                       C\Releas_NSG\List\Menu_GroupWall.s79                /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME Menu_GroupWall

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__dlib_file_descriptor", "0"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        PUBWEAK `?*?DATA_ID`
        MULTWEAK ??AnimWidget_Close??rA
        MULTWEAK ??AnimWidget_Wait??rA
        MULTWEAK ??CalcTextH??rT
        MULTWEAK ??CreateDebugGUI??rA
        MULTWEAK ??CreateWall??rT
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable2 EQU 0
??DataTable3 EQU 0
??DataTable4 EQU 0
??DataTable5 EQU 0
??DataTable8 EQU 0
        MULTWEAK ??DisableDynTheme??rA
        MULTWEAK ??EnableDynTheme??rA
        MULTWEAK ??LoadDynTheme??rA
        MULTWEAK ??Wall_Refresh??rT
        MULTWEAK ??get_ListByIndex??rA
        MULTWEAK ??url_wall_get??rA
        PUBWEAK ?init?tab?DATA_I
        PUBLIC CalcTextH
        FUNCTION CalcTextH,0203H
        LOCFRAME CSTACK, 92, STACK
        PUBLIC CreateWall
        FUNCTION CreateWall,0203H
        LOCFRAME CSTACK, 32, STACK
        FUNCTION MyOnRedraw,0603H
        LOCFRAME CSTACK, 140, STACK
        PUBLIC Wall_Refresh
        FUNCTION Wall_Refresh,0201H
        LOCFRAME CSTACK, 4, STACK
        FUNCTION crt_text,0203H
        LOCFRAME CSTACK, 88, STACK
        FUNCTION gHook,0603H
        LOCFRAME CSTACK, 20, STACK
header_icon EQU 0
img_icon EQU 0
        FUNCTION onKey,0603H
        LOCFRAME CSTACK, 16, STACK
        PUBLIC post
        FUNCTION proc3,0601H
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
AnimWidget_Close    SYMBOL "AnimWidget_Close"
AnimWidget_Wait     SYMBOL "AnimWidget_Wait"
CreateDebugGUI      SYMBOL "CreateDebugGUI"
DisableDynTheme     SYMBOL "DisableDynTheme"
EnableDynTheme      SYMBOL "EnableDynTheme"
LoadDynTheme        SYMBOL "LoadDynTheme"
get_ListByIndex     SYMBOL "get_ListByIndex"
url_wall_get        SYMBOL "url_wall_get"
??AnimWidget_Close??rA SYMBOL "??rA", AnimWidget_Close
??AnimWidget_Wait??rA SYMBOL "??rA", AnimWidget_Wait
CalcTextH           SYMBOL "CalcTextH"
??CalcTextH??rT     SYMBOL "??rT", CalcTextH
??CreateDebugGUI??rA SYMBOL "??rA", CreateDebugGUI
CreateWall          SYMBOL "CreateWall"
??CreateWall??rT    SYMBOL "??rT", CreateWall
??DisableDynTheme??rA SYMBOL "??rA", DisableDynTheme
??EnableDynTheme??rA SYMBOL "??rA", EnableDynTheme
??LoadDynTheme??rA  SYMBOL "??rA", LoadDynTheme
Wall_Refresh        SYMBOL "Wall_Refresh"
??Wall_Refresh??rT  SYMBOL "??rT", Wall_Refresh
??get_ListByIndex??rA SYMBOL "??rA", get_ListByIndex
??url_wall_get??rA  SYMBOL "??rA", url_wall_get

        EXTERN AnimWidget_Close
        FUNCTION AnimWidget_Close,0200H
        EXTERN AnimWidget_Wait
        FUNCTION AnimWidget_Wait,0202H
        EXTERN CreateDebugGUI
        FUNCTION CreateDebugGUI,0200H
        EXTERN DisableDynTheme
        FUNCTION DisableDynTheme,0200H
        EXTERN EnableDynTheme
        FUNCTION EnableDynTheme,0200H
        EXTERN GMT
        EXTERN HttpSendReq
        FUNCTION HttpSendReq,0602H
        EXTERN INET_PROCESS
        EXTERN LoadDynTheme
        FUNCTION LoadDynTheme,0200H
        EXTERN csm
        EXTERN get_ListByIndex
        FUNCTION get_ListByIndex,0202H
        EXTERN url_wall_get
        FUNCTION url_wall_get,0202H


        RSEG DATA_C:CONST:SORT:NOROOT(2)
percent_d:
        DATA
        DC8 "%d"
        DC8 0
        DC8 "%d %t %d:%02d"
        DC8 0, 0
        DC8 "\342\367\345\360\340 \342"
        DC8 "\361\345\343\356\344\355\377 \342"
        DC8 0, 0
        DC8 "%t %d:%02d"
        DC8 0
        DC8 "\315\360\340\342\350\362\361\377"
        DC8 0, 0, 0
        DC8 "\312\356\354\354\345\355\362\340\360\350\350"
        DC8 "%t %d"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "\\302\\373\\341\\360\\340\\362\\374">`:
        DATA
        DC8 "\302\373\341\360\340\362\374"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "\\315\\340\\347\\340\\344">`:
        DATA
        DC8 "\315\340\347\340\344"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "\\344\\345\\352">`:
        DATA
        DC8 "\344\345\352"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "\\355\\356\\377">`:
        DATA
        DC8 "\355\356\377"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "\\356\\352\\362">`:
        DATA
        DC8 "\356\352\362"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "\\361\\345\\355">`:
        DATA
        DC8 "\361\345\355"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "\\340\\342\\343">`:
        DATA
        DC8 "\340\342\343"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "\\350\\376\\353\\374">`:
        DATA
        DC8 "\350\376\353\374"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "\\350\\376\\355\\374">`:
        DATA
        DC8 "\350\376\355\374"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "\\354\\340\\351">`:
        DATA
        DC8 "\354\340\351"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "\\340\\357\\360">`:
        DATA
        DC8 "\340\357\360"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "\\354\\340\\360\\362">`:
        DATA
        DC8 "\354\340\360\362"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "\\364\\345\\342">`:
        DATA
        DC8 "\364\345\342"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "\\377\\355\\342">`:
        DATA
        DC8 "\377\355\342"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
percent_t:
        DATA
        DC8 "%t"
        DC8 0
        DC8 "\364\356\362\356"
        DC8 0, 0, 0
        DC8 "\361\361\373\353\352\340"
        DC8 0
        DC8 "\342\350\344\345\356"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
menusoftkeys:
        DATA
        DC32 0, 1, 2

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??proc3??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE proc3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function proc3
        ARM
proc3:
        BX       LR               ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??onKey??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE onKey

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function onKey
        ARM
onKey:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        LDR      R4,??DataTable12  ;; tv_desc
        MOV      R5,#+0
        LDR      R0,[R4, #+32]
        MOV      R6,R1
        LDRSH    R2,[R6, #+2]
        LDR      R1,[R4, #+76]
        SUBS     R2,R2,#+1
        BEQ      ??onKey_0
        SUBS     R2,R2,#+36
        BEQ      ??onKey_1
        SUBS     R2,R2,#+1
        BEQ      ??onKey_2
        SUBS     R2,R2,#+4
        BEQ      ??onKey_1
        SUBS     R2,R2,#+1
        BEQ      ??onKey_2
        B        ??onKey_3
??onKey_0:
        LDR      R0,??DataTable11  ;; csm
        STR      R5,[R4, #+80]
        LDR      R0,[R0, #+0]
        CMP      R1,#+0
        STRNE    R5,[R4, #+76]
        STR      R5,[R0, #+44]
        B        ??onKey_4
??onKey_2:
        CMP      R1,#+0
        BEQ      ??onKey_3
        SWI      +453
        LDR      R1,[R4, #+88]
        CMP      R1,#+1
        SUBGE    R0,R1,R0
        STRGE    R0,[R4, #+88]
        LDR      R0,[R4, #+96]
        CMP      R0,#+1
        BLT      ??onKey_5
        SUB      R0,R0,#+1
        STR      R0,[R4, #+96]
        B        ??onKey_5
??onKey_1:
        CMP      R1,#+0
        BEQ      ??onKey_3
        SWI      +453
        LDRSH    R3,[R4, #+30]
        LDRSH    R12,[R4, #+26]
        LDR      R2,[R4, #+88]
        LDR      R1,[R4, #+96]
        SUB      R3,R3,R12
        LDR      R12,[R4, #+84]
        ADD      R3,R3,#+1
        SUB      R12,R12,R2
        CMP      R3,R12
        BGE      ??onKey_6
        ADD      R0,R0,R2
        STR      R0,[R4, #+88]
        MOV      R1,#+0
        B        ??onKey_7
??onKey_6:
        LDR      R0,[R4, #+100]
        CMP      R0,#+0
        BEQ      ??onKey_7
        ADD      R1,R1,#+1
        CMP      R0,R1
        MOVLT    R1,R0
??onKey_7:
        STR      R1,[R4, #+96]
??onKey_5:
        LDR      R0,[R4, #+92]
        CMP      R0,#+0
        BNE      ??onKey_3
        SWI      +319
??onKey_3:
        LDR      R0,[R6, #+4]
        MOV      R2,#+147
        LDR      R1,[R0, #+4]
        ORR      R2,R2,#0x100
        CMP      R1,R2
        ADDNE    R2,R2,#+2
        CMPNE    R1,R2
        BNE      ??onKey_4
        LDR      R6,??DataTable6  ;; INET_PROCESS
        LDR      R0,[R0, #+8]
        LDR      R1,[R4, #+80]
        LDR      R2,[R6, #+0]
        SUBS     R0,R0,#+1
        BEQ      ??onKey_8
        SUBS     R0,R0,#+3
        BEQ      ??onKey_9
        SUBS     R0,R0,#+7
        BEQ      ??onKey_10
        SUBS     R0,R0,#+50
        BEQ      ??onKey_11
        SUBS     R0,R0,#+1
        BEQ      ??onKey_12
        B        ??onKey_13
??onKey_11:
        CMP      R2,#+0
        BNE      ??onKey_4
        CMP      R1,#+1
        BLT      ??onKey_4
        SUB      R0,R1,#+1
??onKey_14:
        STR      R0,[R4, #+80]
        STR      R5,[R4, #+76]
        BL       Wall_Refresh
??onKey_4:
        MOV      R0,#+0
        POP      {R4-R6,PC}       ;; return
??onKey_12:
        CMP      R2,#+0
        BNE      ??onKey_4
        ADD      R0,R1,#+1
        B        ??onKey_14
??onKey_10:
        _BLF     CreateDebugGUI,??CreateDebugGUI??rA
??onKey_13:
        MOV      R0,#+0
        POP      {R4-R6,PC}
??onKey_8:
        CMP      R2,#+0
        BNE      ??onKey_4
        LDR      R0,[R4, #+96]
        CMP      R0,#+0
        POPEQ    {R4-R6,PC}
        LDR      R2,[R4, #+76]
        CMP      R2,#+0
        BEQ      ??onKey_4
        ADD      R1,R2,#+52
        LDR      R3,[R1, #+0]
        CMP      R3,R1
        BEQ      ??onKey_4
        SUB      R1,R0,#+1
        ADD      R0,R2,#+52
        _BLF     get_ListByIndex,??get_ListByIndex??rA
        LDR      R1,[R0, #+8]
        CMP      R1,#+1
        BNE      ??onKey_4
        LDR      R1,[R0, #+12]
        CMP      R1,#+0
        BEQ      ??onKey_4
        MOV      R1,#+24
        STR      R1,[R6, #+0]
        LDR      R1,[R0, #+12]
        LDR      R0,??DataTable7  ;; HttpSendReq
        SWI      +369
        MOV      R0,#+0
        _BLF     AnimWidget_Wait,??AnimWidget_Wait??rA
        B        ??onKey_13
??onKey_9:
        MOV      R0,#+1
        POP      {R4-R6,PC}
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??gHook??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE gHook

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function gHook
        ARM
gHook:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        MOV      R4,R0
        CMP      R1,#+2
        BNE      ??gHook_0
        _BLF     LoadDynTheme,??LoadDynTheme??rA
        MOV      R0,R4
        LDR      R4,??DataTable10  ;; tv_desc
        SWI      +686
        MOV      R5,R0
        MOV      R0,#+32
        SWI      +293
        MOV      R6,R0
        LDR      R0,[R4, #+72]
        LDR      R1,[R0, #+12]
        CMP      R1,#+0
        BEQ      ??gHook_1
        MOV      R0,R6
        SWI      +289
        B        ??gHook_2
??gHook_1:
        LDR      R2,[R0, #+8]
        LDR      R1,??DataTable9  ;; percent_d
        MOV      R0,R6
        SWI      +292
??gHook_2:
        SWI      +32789
        MOV      R7,R0
        SWI      +32788
        MOV      R3,R7
        MOV      R2,R0
        MOV      R1,R6
        MOV      R0,R5
        SWI      +687
        LDR      R0,??DataTable6  ;; INET_PROCESS
        LDR      R1,[R0, #+0]
        CMP      R1,#+0
        LDREQ    R1,[R4, #+76]
        CMPEQ    R1,#+0
        POPNE    {R4-R7,PC}
        MOV      R1,#+23
        STR      R1,[R0, #+0]
        LDR      R0,[R4, #+72]
        LDR      R1,[R4, #+80]
        LDR      R0,[R0, #+8]
        MOV      R2,#+1
        _BLF     url_wall_get,??url_wall_get??rA
        MOV      R1,R0
        LDR      R0,??DataTable7  ;; HttpSendReq
        SWI      +369
        MOV      R0,#+0
        _BLF     AnimWidget_Wait,??AnimWidget_Wait??rA
        POP      {R4-R7,PC}
??gHook_0:
        CMP      R1,#+9
        BEQ      ??gHook_3
??gHook_4:
        CMP      R1,#+10
        BNE      ??gHook_5
        _BLF     EnableDynTheme,??EnableDynTheme??rA
        SWI      +383
        POP      {R4-R7,PC}
??gHook_5:
        CMP      R1,#+3
        POPNE    {R4-R7,PC}
??gHook_3:
        _BLF     AnimWidget_Close,??AnimWidget_Close??rA
        _BLF     DisableDynTheme,??DisableDynTheme??rA
        POP      {R4-R7,PC}       ;; return
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable6:
        DC32     INET_PROCESS

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable7:
        DC32     HttpSendReq

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??CalcTextH??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE CalcTextH

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function CalcTextH
        ARM
CalcTextH:
        PUSH     {R4-R9,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R9 Frame(CFA, -8)
        CFI R8 Frame(CFA, -12)
        CFI R7 Frame(CFA, -16)
        CFI R6 Frame(CFA, -20)
        CFI R5 Frame(CFA, -24)
        CFI R4 Frame(CFA, -28)
        CFI CFA R13+28
        SUB      SP,SP,#+52
        CFI CFA R13+80
        LDR      R8,[SP, #+80]
        MOV      R4,R0
        MOV      R5,R1
        MOV      R6,R2
        MOV      R7,R3
        MOV      R1,#+0
        STR      R1,[SP, #+4]
        STR      R1,[SP, #+0]
        SWI      +291
        MOV      R9,R0
        LDR      R0,[R4, #+0]
        MOV      R3,R7
        STRH     R5,[R0, #+0]
        MOV      R0,#+255
        ORR      R0,R0,#0x7F00
        PUSH     {R0}
        CFI CFA R13+84
        MOV      R2,#+0
        MOV      R1,#+0
        ADD      R0,SP,#+12
        SWI      +307
        PUSH     {R8}
        CFI CFA R13+88
        PUSH     {R6}
        CFI CFA R13+92
        MOV      R3,R4
        MOV      R2,#+0
        ADD      R1,SP,#+20
        ADD      R0,SP,#+28
        SWI      +329
        ADD      R2,SP,#+12
        ADD      R1,SP,#+16
        ADD      R0,SP,#+28
        SWI      +934
        LDR      R0,[R4, #+0]
        STRH     R9,[R0, #+0]
        ADD      R0,SP,#+28
        SWI      +330
        LDR      R0,[SP, #+12]
        ADD      SP,SP,#+64
        CFI CFA R13+28
        POP      {R4-R9,PC}       ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??crt_text??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE crt_text

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function crt_text
        ARM
crt_text:
        PUSH     {R4-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+36
        SUB      SP,SP,#+44
        CFI CFA R13+80
        MOVS     R4,R0
        MOV      R5,#+0
        BEQ      ??crt_text_0
        LDR      R0,[R4, #+28]
        LDR      R7,??DataTable10  ;; tv_desc
        SWI      +291
        ADD      R0,R0,#+254
        SWI      +293
        MOV      R5,R0
        MOV      R1,#+19
        ORR      R1,R1,#0xE000
        SWI      +28
        MOV      R6,#+6
        ORR      R6,R6,#0xE000
        MOV      R1,R6
        LDR      R8,??DataTable9  ;; percent_d
        MOV      R0,R5
        SWI      +28
        MOV      R1,#+128
        ORR      R1,R1,#0x5D00
        MOV      R0,R5
        SWI      +28
        MOV      R1,#+100
        ORR      R1,R1,#0xA600
        MOV      R0,R5
        SWI      +28
        LDR      R0,[R7, #+72]
        LDR      R2,[R4, #+20]
        LDR      R1,[R0, #+8]
        CMP      R2,R1
        BEQ      ??crt_text_1
        ADD      R0,R4,#+60
        LDR      R1,[R0, #+0]
        CMP      R1,R0
        BNE      ??crt_text_2
        MOV      R1,R8
        MOV      R0,R5
        SWI      +534
        B        ??crt_text_3
??crt_text_2:
        MOV      R9,R1
        BEQ      ??crt_text_3
??crt_text_4:
        LDR      R1,[R9, #+12]
        MOV      R0,R5
        SWI      +289
        MOV      R1,#+32
        MOV      R0,R5
        SWI      +28
        LDR      R1,[R9, #+16]
        MOV      R0,R5
        SWI      +289
        LDR      R9,[R9, #+0]
        ADD      R0,R4,#+60
        CMP      R9,R0
        BEQ      ??crt_text_3
        B        ??crt_text_4
??crt_text_1:
        LDR      R1,[R0, #+12]
        MOV      R0,R5
        SWI      +289
??crt_text_3:
        MOV      R1,#+58
        MOV      R0,R5
        SWI      +28
        MOV      R1,#+10
        MOV      R0,R5
        SWI      +28
        ADD      R1,R6,#+12
        MOV      R0,R5
        SWI      +28
        MOV      R1,R6
        MOV      R0,R5
        SWI      +28
        MOV      R9,#+128
        ORR      R9,R9,#0x8000
        MOV      R1,R9
        MOV      R0,R5
        SWI      +28
        SUB      R10,R9,#+28
        MOV      R1,R10
        MOV      R0,R5
        SWI      +28
        LDR      R1,??crt_text_5  ;; GMT
        LDR      R2,[R4, #+16]
        LDRB     R3,[R1, #+0]
        LDRB     R1,[R1, #+1]
        MOV      R11,#+3600
        MLA      R2,R11,R3,R2
        MOV      R3,#+60
        MLA      R1,R3,R1,R2
        MOV      R0,#+1
        STR      R1,[SP, #+24]
        MOV      R1,#+178
        ORR      R1,R1,#0x700
        STR      R1,[SP, #+28]
        STRB     R0,[SP, #+32]
        STRB     R0,[SP, #+33]
        ADD      R3,SP,#+28
        ADD      R2,SP,#+16
        MOV      R1,SP
        ADD      R0,SP,#+24
        SWI      +713
        ADD      R1,SP,#+36
        ADD      R0,SP,#+8
        SWI      +180
        LDRB     R2,[SP, #+5]
        LDRB     R0,[SP, #+13]
        CMP      R0,R2
        BNE      ??crt_text_6
        LDRB     R1,[SP, #+12]
        LDRB     R3,[SP, #+4]
        CMP      R1,R3
        BNE      ??crt_text_6
        LDR      R1,[SP, #+8]
        LDR      R3,[SP, #+0]
        CMP      R1,R3
        BNE      ??crt_text_6
        LDRB     R0,[SP, #+17]
        ADD      R2,R8,#+28
        PUSH     {R0}
        CFI CFA R13+84
        LDRB     R3,[SP, #+20]
??crt_text_7:
        ADD      R1,R8,#+40
        MOV      R0,R5
        SWI      +534
        ADD      SP,SP,#+4
        CFI CFA R13+80
        B        ??crt_text_8
??crt_text_6:
        LDRB     R12,[SP, #+4]
        LDRB     R1,[SP, #+17]
        LDRB     R3,[SP, #+16]
        SUB      R0,R0,#+1
        CMP      R0,R2
        LDRBEQ   R0,[SP, #+12]
        CMPEQ    R0,R12
        BNE      ??crt_text_9
        LDR      R0,[SP, #+8]
        LDR      R11,[SP, #+0]
        CMP      R0,R11
        BNE      ??crt_text_9
        PUSH     {R1}
        CFI CFA R13+84
        ADD      R2,R8,#+20
        B        ??crt_text_7
        CFI CFA R13+80
??crt_text_9:
        PUSH     {R1}
        CFI CFA R13+84
        PUSH     {R3}
        CFI CFA R13+88
        ADD      R0,R7,R12, LSL #+2
        LDR      R3,[R0, #+204]
        ADD      R1,R8,#+4
        MOV      R0,R5
        SWI      +534
        ADD      SP,SP,#+8
        CFI CFA R13+80
??crt_text_8:
        LDR      R0,[R4, #+28]
        CMP      R0,#+0
        BEQ      ??crt_text_10
        MOV      R1,#+10
        MOV      R0,R5
        SWI      +28
        MOV      R1,R6
        MOV      R0,R5
        SWI      +28
        MOV      R1,#+0
        MOV      R0,R5
        SWI      +28
        MOV      R1,#+100
        MOV      R0,R5
        SWI      +28
        LDR      R1,[R4, #+28]
        MOV      R0,R5
        SWI      +289
??crt_text_10:
        MOV      R1,#+10
        MOV      R0,R5
        SWI      +28
        MOV      R0,#+0
        STR      R0,[R7, #+100]
        ADD      R0,R4,#+52
        LDR      R1,[R0, #+0]
        CMP      R1,R0
        MOVNE    R11,R1
        BEQ      ??crt_text_11
??crt_text_12:
        MOV      R0,R5
        SWI      +291
        STR      R0,[R11, #+16]
        MOV      R1,#+10
        MOV      R0,R5
        SWI      +28
        LDR      R0,[R7, #+100]
        ADD      R0,R0,#+1
        STR      R0,[R7, #+100]
        LDR      R11,[R11, #+0]
        ADD      R0,R4,#+52
        CMP      R11,R0
        BNE      ??crt_text_12
??crt_text_11:
        ADD      R1,R6,#+12
        MOV      R0,R5
        SWI      +28
        MOV      R1,R6
        MOV      R0,R5
        SWI      +28
        MOV      R1,R9
        MOV      R0,R5
        SWI      +28
        MOV      R1,R10
        MOV      R0,R5
        SWI      +28
        LDR      R3,[R4, #+36]
        ADD      R2,R8,#+52
        ADD      R1,R8,#+76
        MOV      R0,R5
        SWI      +534
        MOV      R1,#+10
        MOV      R0,R5
        SWI      +28
        LDR      R3,[R4, #+44]
        ADD      R2,R8,#+64
        ADD      R1,R8,#+76
        MOV      R0,R5
        SWI      +534
??crt_text_0:
        MOV      R0,R5
        ADD      SP,SP,#+44
        CFI CFA R13+36
        POP      {R4-R11,PC}      ;; return
        DATA
??crt_text_5:
        DC32     GMT
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable9:
        DC32     percent_d

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??MyOnRedraw??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE MyOnRedraw

        RSEG DATA_I:DATA:SORT:NOROOT(2)
tv_desc:
        DS8 52
        REQUIRE `?<Initializer for tv_desc>`
        DS8 20
        REQUIRE `?<Initializer for hdr>`
        DS8 4
        REQUIRE `?<Initializer for selected_group>`
post:
        DS8 4
        REQUIRE `?<Initializer for post>`
        DS8 4
        REQUIRE `?<Initializer for offset>`
        DS8 4
        REQUIRE `?<Initializer for full_text_h>`
        DS8 4
        REQUIRE `?<Initializer for offset_text_h>`
        DS8 4
        REQUIRE `?<Initializer for IsScrollbar>`
        DS8 4
        REQUIRE `?<Initializer for cursor>`
        DS8 4
        REQUIRE `?<Initializer for attach_count>`
        DS8 4
        REQUIRE `?<Initializer for OnRedraw>`
        DS8 96
        REQUIRE `?<Initializer for gui_methods_copy>`
        DS8 4
        REQUIRE `?<Initializer for tvgui_methods>`
        DS8 48
        REQUIRE `?<Initializer for MONTH_NAME>`
sk:
        DS8 24
        REQUIRE `?<Initializer for sk>`
        DS8 8
        REQUIRE `?<Initializer for lsk>`
        DS8 8
        REQUIRE `?<Initializer for esk>`

        RSEG DATA_I:DATA:SORT:NOROOT(2)
skt:
        DS8 8
        REQUIRE `?<Initializer for skt>`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function MyOnRedraw
        ARM
MyOnRedraw:
        LDR      R1,??MyOnRedraw_0  ;; 0x64ff9a31
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        LDR      R4,??DataTable10  ;; tv_desc
        SUB      SP,SP,#+96
        CFI CFA R13+120
        MOV      R5,R0
        LDR      R0,[R4, #+96]
        STR      R1,[SP, #+0]
        MVN      R1,#-1694498816
        STR      R1,[SP, #+4]
        MOV      R1,#+0
        STR      R1,[SP, #+8]
        CMP      R0,#+0
        MOV      R2,#+0
        BEQ      ??MyOnRedraw_1
        ADD      R1,R4,#+280
        MOV      R0,R5
        SWI      +688
        MOV      R2,#+2
        ADD      R1,R4,#+288
        B        ??MyOnRedraw_2
??MyOnRedraw_1:
        ADD      R1,R4,#+256
        MOV      R0,R5
        SWI      +688
        MOV      R2,#+2
        ADD      R1,R4,#+272
??MyOnRedraw_2:
        MOV      R0,R5
        SWI      +688
        LDR      R1,[R4, #+104]
        MOV      R0,R5
        BLX      R1
        LDR      R0,[R4, #+76]
        CMP      R0,#+0
        LDRNE    R1,[R0, #+52]!
        CMPNE    R1,R0
        BEQ      ??MyOnRedraw_3
        MOV      R2,#+31
        ADD      R1,SP,#+32
        ADD      R0,SP,#+12
        SWI      +295
        LDR      R0,[R4, #+76]
        MOV      R5,#+0
        LDR      R6,[R0, #+52]
        ADD      R0,R0,#+52
        CMP      R6,R0
        BEQ      ??MyOnRedraw_3
??MyOnRedraw_4:
        LDR      R1,??MyOnRedraw_0+0x4  ;; percent_t
        LDR      R0,[R6, #+8]
        CMP      R0,#+1
        ADDEQ    R2,R1,#+4
        BEQ      ??MyOnRedraw_5
        CMP      R0,#+7
        ADDEQ    R2,R1,#+12
        BEQ      ??MyOnRedraw_5
        CMP      R0,#+3
        BNE      ??MyOnRedraw_6
        ADD      R2,R1,#+20
??MyOnRedraw_5:
        ADD      R0,SP,#+12
        SWI      +292
??MyOnRedraw_6:
        LDRSH    R0,[R4, #+26]
        LDR      R1,[R6, #+20]
        ADD      R0,R1,R0
        LDR      R1,[R4, #+88]
        SUB      R7,R0,R1
        LDR      R0,[R4, #+32]
        SWI      +453
        LDRSH    R3,[R4, #+30]
        LDRSH    R2,[R4, #+28]
        LDRSH    R1,[R4, #+26]
        MOV      R8,R0
        LDRSH    R0,[R4, #+24]
        SWI      +932
        LDR      R0,[R4, #+96]
        CMP      R0,#+0
        BEQ      ??MyOnRedraw_7
        SUB      R0,R0,#+1
        CMP      R5,R0
        BNE      ??MyOnRedraw_7
        MOV      R0,SP
        PUSH     {R0}
        CFI CFA R13+124
        ADD      R0,SP,#+8
        B        ??MyOnRedraw_8
        CFI CFA R13+120
??MyOnRedraw_7:
        ADD      R0,SP,#+8
        PUSH     {R0}
        CFI CFA R13+124
        ADD      R0,SP,#+4
??MyOnRedraw_8:
        PUSH     {R0}
        CFI CFA R13+128
        MOV      R3,#+131
        MOV      R2,R7
        ADD      R5,R5,#+1
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+132
        LDR      R0,[R4, #+32]
        PUSH     {R0}
        CFI CFA R13+136
        ADD      R0,R8,R7
        PUSH     {R0}
        CFI CFA R13+140
        LDRSH    R1,[R4, #+24]
        ADD      R0,SP,#+32
        SWI      +332
        ADD      SP,SP,#+20
        CFI CFA R13+120
        LDR      R6,[R6, #+0]
        LDR      R0,[R4, #+76]
        ADD      R0,R0,#+52
        CMP      R6,R0
        BNE      ??MyOnRedraw_4
??MyOnRedraw_3:
        ADD      SP,SP,#+96       ;; stack cleaning
        CFI CFA R13+24
        POP      {R4-R8,PC}       ;; return
        DATA
??MyOnRedraw_0:
        DC32     0x64ff9a31
        DC32     percent_t
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable10:
        DC32     tv_desc

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??CreateWall??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE CreateWall

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function CreateWall
        ARM
CreateWall:
        PUSH     {R4-R9,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R9 Frame(CFA, -8)
        CFI R8 Frame(CFA, -12)
        CFI R7 Frame(CFA, -16)
        CFI R6 Frame(CFA, -20)
        CFI R5 Frame(CFA, -24)
        CFI R4 Frame(CFA, -28)
        CFI CFA R13+28
        LDR      R4,??DataTable11  ;; csm
        LDR      R5,??DataTable12  ;; tv_desc
        MOV      R6,R0
        LDR      R0,[R4, #+0]
        MOV      R7,#+0
        LDR      R0,[R0, #+44]
        CMP      R0,#+0
        BEQ      ??CreateWall_0
        MOV      R1,#+0
        SWI      +521
        LDR      R1,[R5, #+204]
        STR      R1,[R0, #+4]
        LDR      R0,[R4, #+0]
        MOV      R1,#+1
        LDR      R0,[R0, #+44]
        SWI      +317
        LDR      R0,[R4, #+0]
        STR      R7,[R0, #+44]
??CreateWall_0:
        STR      R6,[R5, #+72]
        SWI      +32789
        MOV      R6,R0
        SWI      +32788
        MOV      R1,R6
        SWI      +726
        MOV      R6,R0
        MOV      R1,R5
        SWI      +727
        STR      R7,[R5, #+52]
        SWI      +33160
        SUB      R0,R0,#+1
        STRH     R0,[R5, #+56]
        SWI      +33162
        SUB      R0,R0,#+1
        STRH     R0,[R5, #+58]
        SWI      +32788
        MOV      R2,R0
        ADD      R1,R5,#+52
        MOV      R0,R6
        SWI      +678
        LDR      R0,[R5, #+76]
        STR      R7,[R5, #+88]
        STR      R7,[R5, #+92]
        STR      R7,[R5, #+100]
        STR      R7,[R5, #+96]
        CMP      R0,#+0
        BEQ      ??CreateWall_1
        BL       crt_text
        MOVS     R7,R0
        BNE      ??CreateWall_2
??CreateWall_1:
        MOV      R0,#+32
        SWI      +293
        MOV      R7,R0
??CreateWall_2:
        LDRSH    R0,[R5, #+28]
        LDRSH    R1,[R5, #+24]
        SUB      R0,R0,R1
        ADD      R8,R0,#+1
        MOV      R0,R7
        SWI      +291
        MOV      R1,R0
        LDR      R0,[R5, #+48]
        MOV      R3,R8
        PUSH     {R0}
        CFI CFA R13+32
        LDR      R2,[R5, #+32]
        MOV      R0,R7
        BL       CalcTextH
        LDRSH    R1,[R5, #+26]
        STR      R0,[R5, #+84]
        LDRSH    R0,[R5, #+30]
        SUB      R0,R0,R1
        LDR      R1,[R5, #+84]
        ADD      R0,R0,#+1
        CMP      R0,R1
        ADD      SP,SP,#+4
        CFI CFA R13+28
        BGE      ??CreateWall_3
        MOV      R0,#+1
        STR      R0,[R5, #+92]
        MOV      R0,R7
        SWI      +291
        LDR      R1,[R5, #+48]
        SUB      R8,R8,#+3
        PUSH     {R1}
        CFI CFA R13+32
        LDR      R2,[R5, #+32]
        MOV      R3,R8
        MOV      R1,R0
        MOV      R0,R7
        BL       CalcTextH
        STR      R0,[R5, #+84]
        ADD      SP,SP,#+4
        CFI CFA R13+28
??CreateWall_3:
        LDR      R0,[R5, #+76]
        CMP      R0,#+0
        BEQ      ??CreateWall_4
        ADD      R1,R0,#+52
        LDR      R2,[R1, #+0]
        CMP      R2,R1
        MOVNE    R9,R2
        BEQ      ??CreateWall_4
??CreateWall_5:
        LDR      R0,[R5, #+48]
        MOV      R3,R8
        PUSH     {R0}
        CFI CFA R13+32
        LDR      R2,[R5, #+32]
        LDR      R1,[R9, #+16]
        MOV      R0,R7
        BL       CalcTextH
        STR      R0,[R9, #+20]
        LDR      R9,[R9, #+0]
        LDR      R0,[R5, #+76]
        ADD      SP,SP,#+4
        CFI CFA R13+28
        ADD      R0,R0,#+52
        CMP      R9,R0
        BNE      ??CreateWall_5
??CreateWall_4:
        SWI      +32789
        MOV      R8,R0
        SWI      +32788
        MOV      R3,R8
        MOV      R2,R0
        MOV      R1,R7
        MOV      R0,R6
        SWI      +728
        LDR      R0,[R6, #+4]
        MOV      R2,#+96
        STR      R0,[R5, #+204]
        LDR      R1,[R6, #+4]
        ADD      R0,R5,#+108
        SWI      +286
        LDR      R0,[R5, #+108]
        STR      R0,[R5, #+104]
        LDR      R0,??CreateWall_6  ;; MyOnRedraw
        STR      R0,[R5, #+108]
        ADD      R0,R5,#+108
        STR      R0,[R6, #+4]
        MOV      R0,R6
        SWI      +311
        LDR      R1,[R4, #+0]
        STR      R0,[R1, #+44]
        POP      {R4-R9,PC}       ;; return
        DATA
??CreateWall_6:
        DC32     MyOnRedraw
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable11:
        DC32     csm

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable12:
        DC32     tv_desc

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??Wall_Refresh??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE Wall_Refresh

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function Wall_Refresh
        ARM
Wall_Refresh:
        LDR      R0,??Wall_Refresh_0  ;; tv_desc + 72
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        POPEQ    {PC}
        BL       CreateWall
        POP      {PC}             ;; return
        DATA
??Wall_Refresh_0:
        DC32     tv_desc + 72
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon1
        CFI NoFunction
        ARM
??CreateDebugGUI??rA:
        LDR      R12,??Subroutine8_0  ;; CreateDebugGUI
        BX       R12
        DATA
??Subroutine8_0:
        DC32     CreateDebugGUI
        CFI EndBlock cfiBlock16

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI NoFunction
        ARM
??get_ListByIndex??rA:
        LDR      R12,??Subroutine9_0  ;; get_ListByIndex
        BX       R12
        DATA
??Subroutine9_0:
        DC32     get_ListByIndex
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon1
        CFI NoFunction
        ARM
??AnimWidget_Wait??rA:
        LDR      R12,??Subroutine10_0  ;; AnimWidget_Wait
        BX       R12
        DATA
??Subroutine10_0:
        DC32     AnimWidget_Wait
        CFI EndBlock cfiBlock18

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI NoFunction
        ARM
??LoadDynTheme??rA:
        LDR      R12,??Subroutine11_0  ;; LoadDynTheme
        BX       R12
        DATA
??Subroutine11_0:
        DC32     LoadDynTheme
        CFI EndBlock cfiBlock19

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon1
        CFI NoFunction
        ARM
??url_wall_get??rA:
        LDR      R12,??Subroutine12_0  ;; url_wall_get
        BX       R12
        DATA
??Subroutine12_0:
        DC32     url_wall_get
        CFI EndBlock cfiBlock20

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI NoFunction
        ARM
??AnimWidget_Close??rA:
        LDR      R12,??Subroutine13_0  ;; AnimWidget_Close
        BX       R12
        DATA
??Subroutine13_0:
        DC32     AnimWidget_Close
        CFI EndBlock cfiBlock21

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon1
        CFI NoFunction
        ARM
??DisableDynTheme??rA:
        LDR      R12,??Subroutine14_0  ;; DisableDynTheme
        BX       R12
        DATA
??Subroutine14_0:
        DC32     DisableDynTheme
        CFI EndBlock cfiBlock22

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI NoFunction
        ARM
??EnableDynTheme??rA:
        LDR      R12,??Subroutine15_0  ;; EnableDynTheme
        BX       R12
        DATA
??Subroutine15_0:
        DC32     EnableDynTheme
        CFI EndBlock cfiBlock23

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for tv_desc>`:
        DATA
        DC32 8, onKey, gHook, proc3, menusoftkeys, skt
        DC16 1, 23, 131, 154
        DC32 11, 100, 101, 0, 0
`?<Initializer for hdr>`:
        DC16 0, 0, 0, 0
        DC32 0H, 0, 2147483647
`?<Initializer for selected_group>`:
        DC32 0H
`?<Initializer for post>`:
        DC32 0H
`?<Initializer for offset>`:
        DC32 0
`?<Initializer for full_text_h>`:
        DC8 0, 0, 0, 0
`?<Initializer for offset_text_h>`:
        DC8 0, 0, 0, 0
`?<Initializer for IsScrollbar>`:
        DC8 0, 0, 0, 0
`?<Initializer for cursor>`:
        DC8 0, 0, 0, 0
`?<Initializer for attach_count>`:
        DC8 0, 0, 0, 0
`?<Initializer for OnRedraw>`:
        DC8 0, 0, 0, 0
`?<Initializer for gui_methods_copy>`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
`?<Initializer for tvgui_methods>`:
        DC8 0, 0, 0, 0
`?<Initializer for MONTH_NAME>`:
        DC32 `?<Constant "\\377\\355\\342">`, `?<Constant "\\364\\345\\342">`
        DC32 `?<Constant "\\354\\340\\360\\362">`
        DC32 `?<Constant "\\340\\357\\360">`, `?<Constant "\\354\\340\\351">`
        DC32 `?<Constant "\\350\\376\\355\\374">`
        DC32 `?<Constant "\\350\\376\\353\\374">`
        DC32 `?<Constant "\\340\\342\\343">`, `?<Constant "\\361\\345\\355">`
        DC32 `?<Constant "\\356\\352\\362">`, `?<Constant "\\355\\356\\377">`
        DC32 `?<Constant "\\344\\345\\352">`
`?<Initializer for sk>`:
        DC16 0, 0
        DC32 -1
        DC16 1, 0
        DC32 `?<Constant "\\315\\340\\347\\340\\344">`
        DC16 0, 0
        DC32 -1
`?<Initializer for lsk>`:
        DC16 24, 0
        DC32 `?<Constant "\\302\\373\\341\\360\\340\\362\\374">`
`?<Initializer for esk>`:
        DC16 29, 0
        DC32 2147467515

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for skt>`:
        DATA
        DC32 sk, 0

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        END
// 
// 2 992 bytes in segment CODE
//   200 bytes in segment DATA_C
//   304 bytes in segment DATA_I
//   304 bytes in segment DATA_ID
//    12 bytes in segment INITTAB
// 
// 2 864 bytes of CODE  memory (+ 140 bytes shared)
//   504 bytes of CONST memory
//   304 bytes of DATA  memory
//
//Errors: none
//Warnings: none
