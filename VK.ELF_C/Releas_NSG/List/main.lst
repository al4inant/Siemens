##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    15/Mar/2023  22:35:36 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \main.c                                              #
#    Command line    =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \main.c -D NEWSGOLD -D DEBUG -lCN                    #
#                       D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \Releas_NSG\List\ -la D:\Users\alfinant\Documents\Si #
#                       emens\Dev\IAR\VK.ELF_C\Releas_NSG\List\ -o           #
#                       D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \Releas_NSG\Obj\ -s9 --cpu_mode arm --endian little  #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork         #
#                       --diag_suppress Pe301 -e --fpu None --dlib_config    #
#                       D:\Users\alfinant\Documents\Siemens\IAR\ARM\LIB\dl5t #
#                       painl8n.h -I D:\Users\alfinant\Documents\Siemens\IAR #
#                       \ARM\INC\ --inline_threshold=2                       #
#    List file       =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \Releas_NSG\List\main.lst                            #
#    Object file     =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \Releas_NSG\Obj\main.r79                             #
#                                                                            #
#                                                                            #
##############################################################################

D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C\main.c
      1          //$PROJ_DIR$\Send_S75.cmd $TARGET_PATH$
      2          #include <siemens\swilib.h>
      3          #include "conf_loader.h"
      4          #include "string_util.h"
      5          #include <siemens/xtask_ipc.h>
      6          #include "anim_widget.h"
      7          #include "dyn_images.h"
      8          #include "dyn_theme.h"
      9          
     10          #include "buffer.h"
     11          #include "socket_work.h"
     12          #include "ssl_work.h"
     13          #include "cookie.h"
     14          #include "http.h"
     15          #include "main.h"
     16          #include "vk_api.h"
     17          #include "auth.h"
     18          #include "process.h"
     19          #include "parser_error.h"
     20          #include "parser_wall.h"
     21          
     22          static const char percent_t[]="%t";
     23          static const char t_jpg[]="jpg";
     24          static const char t_png[]="png";
     25          
     26          extern const unsigned int RECONNECT_TIME;
     27          extern int CreateMainMenu();
     28          extern int CreateLoginDialog();
     29          extern void RefreshDialogsMenu();
     30          extern void RefreshGroupsMenu();
     31          
     32          static int auth_state = 0;
     33          static int ena_statistic=0;
     34          
     35          static GBSTMR tmr_check_new_msg;
     36          
     37          //IPC
     38          const char ipc_my_name[]=IPC_VK_NAME;
     39          const char ipc_xtask_name[]=IPC_XTASK_NAME;
     40          IPC_REQ ipc;
     41          static const int minus11=-11;
     42          
     43          int maincsm_id;
     44          MAIN_CSM* csm;
     45          
     46          extern VkPost* post;
     47          extern const char APP_DIR[];
     48          extern char logmsg[];
     49          extern void SMART_REDRAW();
     50          
     51          //******************************************************************************
     52          

   \                                 In segment CODE, align 4, keep-with-next
     53          void tmr_check_new_msg_handler()
     54          {
   \                     tmr_check_new_msg_handler:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
     55            if (ena_statistic == 0)
   \   00000004   A0409FE5           LDR      R4,??tmr_check_new_msg_handler_0+0x4  ;; HttpSendReq
   \   00000008   ........           LDR      R5,??DataTable40  ;; ipc
   \   0000000C   ........           LDR      R6,??DataTable36  ;; INET_PROCESS
   \   00000010   04D04DE2           SUB      SP,SP,#+4
   \   00000014   0C0095E5           LDR      R0,[R5, #+12]
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0500001A           BNE      ??tmr_check_new_msg_handler_1
     56            {
     57              INET_PROCESS = ENABLE_STATISTIC; 
   \   00000020   0800A0E3           MOV      R0,#+8
   \   00000024   000086E5           STR      R0,[R6, #+0]
     58              SUBPROC((void *)HttpSendReq, url_stats_track_visitor());    
   \   00000028   ........           _BLF     url_stats_track_visitor,??url_stats_track_visitor??rA
   \   0000002C   0010A0E1           MOV      R1,R0
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   710100EF           SWI      +369
     59            }
     60                
     61            if (INET_PROCESS == 0)
   \                     ??tmr_check_new_msg_handler_1:
   \   00000038   000096E5           LDR      R0,[R6, #+0]
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   1000001A           BNE      ??tmr_check_new_msg_handler_2
     62            {
     63              if (lp_ts == 0)
   \   00000044   64009FE5           LDR      R0,??tmr_check_new_msg_handler_0+0x8  ;; lp_ts
   \   00000048   000090E5           LDR      R0,[R0, #+0]
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   0500001A           BNE      ??tmr_check_new_msg_handler_3
     64              {
     65                INET_PROCESS = GET_LONG_POOL_SERVER;
   \   00000054   0A00A0E3           MOV      R0,#+10
   \   00000058   000086E5           STR      R0,[R6, #+0]
     66                SUBPROC((void *)HttpSendReq, url_messages_getLongPollServer(1, 0));//params: (bool need_pts, int group_id)
   \   0000005C   0010A0E3           MOV      R1,#+0
   \   00000060   0100A0E3           MOV      R0,#+1
   \   00000064   ........           _BLF     url_messages_getLongPollServer,??url_messages_getLongPollServer??rA
   \   00000068   030000EA           B        ??tmr_check_new_msg_handler_4
     67              }
     68              else
     69              {
     70                INET_PROCESS = CHECK_NEW_MESSAGES; 
   \                     ??tmr_check_new_msg_handler_3:
   \   0000006C   0B00A0E3           MOV      R0,#+11
   \   00000070   000086E5           STR      R0,[R6, #+0]
     71                SUBPROC((void *)HttpSendReq, url_messages_getLongPollHistory(""));
   \   00000074   0B0F8FE2           ADR      R0,??tmr_check_new_msg_handler_0  ;; ""
   \   00000078   ........           _BLF     url_messages_getLongPollHistory,??url_messages_getLongPollHistory??rA
   \                     ??tmr_check_new_msg_handler_4:
   \   0000007C   0010A0E1           MOV      R1,R0
   \   00000080   0400A0E1           MOV      R0,R4
   \   00000084   710100EF           SWI      +369
     72              }
     73            }
     74            
     75            GBS_StartTimerProc(&tmr_check_new_msg, 216*RECONNECT_TIME, tmr_check_new_msg_handler);  
   \                     ??tmr_check_new_msg_handler_2:
   \   00000088   24009FE5           LDR      R0,??tmr_check_new_msg_handler_0+0xC  ;; RECONNECT_TIME
   \   0000008C   24209FE5           LDR      R2,??tmr_check_new_msg_handler_0+0x10  ;; tmr_check_new_msg_handler
   \   00000090   000090E5           LDR      R0,[R0, #+0]
   \   00000094   D830A0E3           MOV      R3,#+216
   \   00000098   930001E0           MUL      R1,R3,R0
   \   0000009C   180085E2           ADD      R0,R5,#+24
   \   000000A0   4D0000EF           SWI      +77
     76          }
   \   000000A4   7180BDE8           POP      {R0,R4-R6,PC}    ;; return
   \                     ??tmr_check_new_msg_handler_0:
   \   000000A8   00000000           DC8      "",+0,+0,+0
   \   000000AC   ........           DC32     HttpSendReq
   \   000000B0   ........           DC32     lp_ts
   \   000000B4   ........           DC32     RECONNECT_TIME
   \   000000B8   ........           DC32     tmr_check_new_msg_handler
     77          
     78          //******************************************************************************
     79          //by KreN 27.09.2007
     80          //============================ воспроизведение звука ===========================
     81          extern const int soundEnabled;
     82          extern const int sndVolume;
     83          

   \                                 In segment CODE, align 4, keep-with-next
     84          int Play(const char *fname)
     85          {
   \                     Play:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   D0D04DE2           SUB      SP,SP,#+208
   \   00000008   0060A0E1           MOV      R6,R0
     86            if (!IsCalling() && soundEnabled)
   \   0000000C   6E0000EF           SWI      +110
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   4600001A           BNE      ??Play_0
   \   00000018   20019FE5           LDR      R0,??Play_1      ;; soundEnabled
   \   0000001C   000090E5           LDR      R0,[R0, #+0]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   4200000A           BEQ      ??Play_0
     87            {
     88              FSTATS fstats;
     89              unsigned int err;
     90              if (GetFileStats(fname,&fstats,&err)!=-1)
   \   00000028   0D20A0E1           MOV      R2,SP
   \   0000002C   A8108DE2           ADD      R1,SP,#+168
   \   00000030   0600A0E1           MOV      R0,R6
   \   00000034   840000EF           SWI      +132
   \   00000038   010070E3           CMN      R0,#+1
   \   0000003C   3900000A           BEQ      ??Play_2
     91              {
     92                PLAYFILE_OPT _sfo1;
     93                WSHDR* sndPath=AllocWS(128);
   \   00000040   8000A0E3           MOV      R0,#+128
   \   00000044   250100EF           SWI      +293
   \   00000048   0040A0E1           MOV      R4,R0
     94                WSHDR* sndFName=AllocWS(128);
   \   0000004C   8000A0E3           MOV      R0,#+128
   \   00000050   250100EF           SWI      +293
   \   00000054   0050A0E1           MOV      R5,R0
     95                char s[128];
     96                const char *p=strrchr(fname,'\\')+1;
   \   00000058   5C10A0E3           MOV      R1,#+92
   \   0000005C   0600A0E1           MOV      R0,R6
   \   00000060   170100EF           SWI      +279
   \   00000064   017080E2           ADD      R7,R0,#+1
     97                str_2ws(sndFName,p,128);
   \   00000068   8020A0E3           MOV      R2,#+128
   \   0000006C   0710A0E1           MOV      R1,R7
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   6C0100EF           SWI      +364
     98                strncpy(s,fname,p-fname);
   \   00000078   067047E0           SUB      R7,R7,R6
   \   0000007C   0720A0E1           MOV      R2,R7
   \   00000080   0610A0E1           MOV      R1,R6
   \   00000084   28008DE2           ADD      R0,SP,#+40
   \   00000088   160100EF           SWI      +278
     99                s[p-fname]='\0';
   \   0000008C   0060A0E3           MOV      R6,#+0
   \   00000090   28008DE2           ADD      R0,SP,#+40
   \   00000094   0060C7E7           STRB     R6,[R7, +R0]
    100                str_2ws(sndPath,s,128);
   \   00000098   8020A0E3           MOV      R2,#+128
   \   0000009C   28108DE2           ADD      R1,SP,#+40
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   6C0100EF           SWI      +364
    101          
    102                zeromem(&_sfo1,sizeof(PLAYFILE_OPT));
   \   000000A8   2410A0E3           MOV      R1,#+36
   \   000000AC   04008DE2           ADD      R0,SP,#+4
   \   000000B0   1D0100EF           SWI      +285
    103                _sfo1.repeat_num=1;
    104                _sfo1.time_between_play=0;
    105                _sfo1.play_first=0;
    106                _sfo1.volume=sndVolume;
   \   000000B4   88209FE5           LDR      R2,??Play_1+0x4  ;; sndVolume
   \   000000B8   0100A0E3           MOV      R0,#+1
   \   000000BC   B400CDE1           STRH     R0,[SP, #+4]
   \   000000C0   08608DE5           STR      R6,[SP, #+8]
   \   000000C4   0C608DE5           STR      R6,[SP, #+12]
   \   000000C8   002092E5           LDR      R2,[R2, #+0]
    107          #ifdef NEWSGOLD
    108                _sfo1.unk6=1;
    109                _sfo1.unk7=1;
    110                _sfo1.unk9=2;
   \   000000CC   0210A0E3           MOV      R1,#+2
   \   000000D0   10208DE5           STR      R2,[SP, #+16]
   \   000000D4   18008DE5           STR      R0,[SP, #+24]
   \   000000D8   1C008DE5           STR      R0,[SP, #+28]
   \   000000DC   24108DE5           STR      R1,[SP, #+36]
    111                PlayFile(0x10, sndPath, sndFName, GBS_GetCurCepid(), MSG_PLAYFILE_REPORT, &_sfo1);
   \   000000E0   450100EF           SWI      +325
   \   000000E4   04108DE2           ADD      R1,SP,#+4
   \   000000E8   02002DE9           PUSH     {R1}
   \   000000EC   0030A0E1           MOV      R3,R0
   \   000000F0   0520A0E1           MOV      R2,R5
   \   000000F4   1000A0E3           MOV      R0,#+16
   \   000000F8   BC10A0E3           MOV      R1,#+188
   \   000000FC   701C81E3           ORR      R1,R1,#0x7000
   \   00000100   02002DE9           PUSH     {R1}
   \   00000104   0410A0E1           MOV      R1,R4
   \   00000108   4A0000EF           SWI      +74
    112          #else
    113          #ifdef X75
    114                _sfo1.unk4=0x80000000;
    115                _sfo1.unk5=1;
    116                PlayFile(0xC, sndPath, sndFName, 0,GBS_GetCurCepid(), MSG_PLAYFILE_REPORT, &_sfo1);
    117          #else
    118                _sfo1.unk5=1;
    119                PlayFile(0xC, sndPath, sndFName, GBS_GetCurCepid(), MSG_PLAYFILE_REPORT, &_sfo1);
    120          #endif
    121          #endif
    122                FreeWS(sndPath);
   \   0000010C   0400A0E1           MOV      R0,R4
   \   00000110   290100EF           SWI      +297
    123                FreeWS(sndFName);
   \   00000114   0500A0E1           MOV      R0,R5
   \   00000118   290100EF           SWI      +297
    124                return 1;
   \   0000011C   0100A0E3           MOV      R0,#+1
   \   00000120   08D08DE2           ADD      SP,SP,#+8
   \   00000124   000000EA           B        ??Play_3
    125              }else return 0;
   \                     ??Play_2:
   \   00000128   0000A0E3           MOV      R0,#+0
   \                     ??Play_3:
   \   0000012C   D0D08DE2           ADD      SP,SP,#+208
   \   00000130   F080BDE8           POP      {R4-R7,PC}
    126            }else return 2; 
   \                     ??Play_0:
   \   00000134   0200A0E3           MOV      R0,#+2
   \   00000138   D0D08DE2           ADD      SP,SP,#+208
   \   0000013C   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??Play_1:
   \   00000140   ........           DC32     soundEnabled
   \   00000144   ........           DC32     sndVolume
    127          }
    128          
    129          //******************************************************************************
    130          

   \                                 In segment CODE, align 4, keep-with-next
    131          void LoadUserPhoto()
    132          {//Obs функции с асинхронным выполнением из SUBPROC работать не будут
   \                     LoadUserPhoto:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    133            char fname[128];
    134            FSTATS stat;
    135            unsigned  err;
    136            LIST_HEAD *iter;
    137          
    138            if (csm->list == 0)
   \   00000004   ........           LDR      R4,??DataTable40  ;; ipc
   \   00000008   ACD04DE2           SUB      SP,SP,#+172
   \   0000000C   140094E5           LDR      R0,[R4, #+20]
   \   00000010   3C0090E5           LDR      R0,[R0, #+60]
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   3B00000A           BEQ      ??LoadUserPhoto_0
    139              return;
    140           
    141            list_for_each(iter, csm->list)
   \   0000001C   005090E5           LDR      R5,[R0, #+0]
   \   00000020   F4709FE5           LDR      R7,??LoadUserPhoto_1+0x8  ;; `?<Constant "%scache\\\\%d.%s">`
   \   00000024   000000EA           B        ??LoadUserPhoto_2
   \                     ??LoadUserPhoto_3:
   \   00000028   005095E5           LDR      R5,[R5, #+0]
   \                     ??LoadUserPhoto_2:
   \   0000002C   140094E5           LDR      R0,[R4, #+20]
   \   00000030   3C1090E5           LDR      R1,[R0, #+60]
   \   00000034   010055E1           CMP      R5,R1
   \   00000038   3100000A           BEQ      ??LoadUserPhoto_4
    142            {
    143              VkUser *entry = NULL;
    144              
    145              if (csm->list == &dialogs)
   \   0000003C   ........           LDR      R0,??DataTable9  ;; dialogs
   \   00000040   000051E1           CMP      R1,R0
   \   00000044   F7FFFF1A           BNE      ??LoadUserPhoto_3
    146              {
    147                VkDialog *dialog = list_entry(iter, VkDialog, list);
    148                if (dialog->user)
   \   00000048   1C0095E5           LDR      R0,[R5, #+28]
   \   0000004C   000050E3           CMP      R0,#+0
    149                  entry = dialog->user;
    150                else
    151                  if (dialog->group)
   \   00000050   20009505           LDREQ    R0,[R5, #+32]
   \   00000054   00005003           CMPEQ    R0,#+0
    152                    entry =(VkUser*) dialog->group;//структуры совместимы-все продумано;)
   \   00000058   0060A011           MOVNE    R6,R0
    153              }
    154              
    155              if (entry && entry->has_photo && entry->photo_50_img == 0 && entry->deactivated == 0)
   \   0000005C   00005613           CMPNE    R6,#+0
   \   00000060   1C009615           LDRNE    R0,[R6, #+28]
   \   00000064   00005013           CMPNE    R0,#+0
   \   00000068   EEFFFF0A           BEQ      ??LoadUserPhoto_3
   \   0000006C   240096E5           LDR      R0,[R6, #+36]
   \   00000070   000050E3           CMP      R0,#+0
   \   00000074   14009605           LDREQ    R0,[R6, #+20]
   \   00000078   00005003           CMPEQ    R0,#+0
   \   0000007C   E9FFFF1A           BNE      ??LoadUserPhoto_3
    156              {
    157              //ищем в папке cache 
    158              const char *ext = strstr(entry->photo_50, ".png") ? "png" : "jpg";
   \   00000080   200096E5           LDR      R0,[R6, #+32]
   \   00000084   101087E2           ADD      R1,R7,#+16
   \   00000088   180100EF           SWI      +280
    159              snprintf(fname, 127, "%scache\\%d.%s", APP_DIR, entry->id, ext);
   \   0000008C   ........           LDR      R3,??DataTable33  ;; APP_DIR
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   1E0F8F12           ADRNE    R0,??LoadUserPhoto_1  ;; "png"
   \   00000098   1E0F8F02           ADREQ    R0,??LoadUserPhoto_1+0x4  ;; "jpg"
   \   0000009C   01002DE9           PUSH     {R0}
   \   000000A0   080096E5           LDR      R0,[R6, #+8]
   \   000000A4   0720A0E1           MOV      R2,R7
   \   000000A8   01002DE9           PUSH     {R0}
   \   000000AC   7F10A0E3           MOV      R1,#+127
   \   000000B0   0C008DE2           ADD      R0,SP,#+12
   \   000000B4   1B0100EF           SWI      +283
    160              
    161              if (GetFileStats(fname, &stat, &err) != -1)
   \   000000B8   08208DE2           ADD      R2,SP,#+8
   \   000000BC   8C108DE2           ADD      R1,SP,#+140
   \   000000C0   0C008DE2           ADD      R0,SP,#+12
   \   000000C4   840000EF           SWI      +132
   \   000000C8   010070E3           CMN      R0,#+1
   \   000000CC   08D08DE2           ADD      SP,SP,#+8
   \   000000D0   D4FFFF0A           BEQ      ??LoadUserPhoto_3
    162              {
    163          #ifdef ELKA
    164                csm->obj = CreateIMGHDRFromFileAsync(fname, 0x8072, 50, 50);
    165          #else
    166                csm->obj = CreateIMGHDRFromFileAsync(fname, 0x8072, 32, 32);
   \   000000D4   2030A0E3           MOV      R3,#+32
   \   000000D8   2020A0E3           MOV      R2,#+32
   \   000000DC   7210A0E3           MOV      R1,#+114
   \   000000E0   801C81E3           ORR      R1,R1,#0x8000
   \   000000E4   04008DE2           ADD      R0,SP,#+4
   \   000000E8   ........           _BLF     CreateIMGHDRFromFileAsync,??CreateIMGHDRFromFileAsync??rA
   \   000000EC   141094E5           LDR      R1,[R4, #+20]
   \   000000F0   400081E5           STR      R0,[R1, #+64]
    167          #endif
    168                csm->user = entry;
   \   000000F4   140094E5           LDR      R0,[R4, #+20]
   \   000000F8   346080E5           STR      R6,[R0, #+52]
    169                return;
   \   000000FC   ACD08DE2           ADD      SP,SP,#+172
   \   00000100   F080BDE8           POP      {R4-R7,PC}
    170              }
    171              }
    172            }
    173            csm->list = 0;
   \                     ??LoadUserPhoto_4:
   \   00000104   0010A0E3           MOV      R1,#+0
   \   00000108   3C1080E5           STR      R1,[R0, #+60]
    174          }
   \                     ??LoadUserPhoto_0:
   \   0000010C   ACD08DE2           ADD      SP,SP,#+172      ;; stack cleaning
   \   00000110   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??LoadUserPhoto_1:
   \   00000114   706E6700           DC8      "png"
   \   00000118   6A706700           DC8      "jpg"
   \   0000011C   ........           DC32     `?<Constant "%scache\\\\%d.%s">`
    175          
    176          

   \                                 In segment CODE, align 4, keep-with-next
    177          static void SaveDialogs(char *data, int len)
    178          {
    179            char fname[256];
    180            int f;
    181            unsigned  err;
    182             
    183            snprintf(fname, 255, "%sdialogs.json", APP_DIR);
   \                     SaveDialogs:
   \   00000000   ........           LDR      R3,??DataTable33  ;; APP_DIR
   \   00000004   ........           LDR      R2,??DataTable11  ;; `?<Constant "%sdialogs.json">`
   \   00000008   70402DE9           PUSH     {R4-R6,LR}
   \   0000000C   41DF4DE2           SUB      SP,SP,#+260
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   FF10A0E3           MOV      R1,#+255
   \   0000001C   04008DE2           ADD      R0,SP,#+4
   \   00000020   1B0100EF           SWI      +283
    184            if ((f=fopen(fname, A_ReadWrite+A_Create+A_Truncate+A_BIN, P_WRITE+P_READ, &err))!=-1)
   \   00000024   0D30A0E1           MOV      R3,SP
   \   00000028   602FA0E3           MOV      R2,#+384
   \   0000002C   0210A0E3           MOV      R1,#+2
   \   00000030   831C81E3           ORR      R1,R1,#0x8300
   \   00000034   04008DE2           ADD      R0,SP,#+4
   \   00000038   0A0000EF           SWI      +10
   \   0000003C   0060A0E1           MOV      R6,R0
   \   00000040   010076E3           CMN      R6,#+1
   \   00000044   0600000A           BEQ      ??SaveDialogs_0
    185            {
    186              fwrite(f, data, len, &err);
   \   00000048   0D30A0E1           MOV      R3,SP
   \   0000004C   0520A0E1           MOV      R2,R5
   \   00000050   0410A0E1           MOV      R1,R4
   \   00000054   0C0000EF           SWI      +12
    187              fclose(f, &err);
   \   00000058   0D10A0E1           MOV      R1,SP
   \   0000005C   0600A0E1           MOV      R0,R6
   \   00000060   0D0000EF           SWI      +13
    188            }
    189          }
   \                     ??SaveDialogs_0:
   \   00000064   41DF8DE2           ADD      SP,SP,#+260      ;; stack cleaning
   \   00000068   7080BDE8           POP      {R4-R6,PC}       ;; return
    190          

   \                                 In segment CODE, align 4, keep-with-next
    191          static void SaveGroups(char *data, int len)
    192          {
    193            char fname[256];
    194            int f;
    195            unsigned  err;
    196             
    197            snprintf(fname, 255, "%sgroups.json", APP_DIR);
   \                     SaveGroups:
   \   00000000   ........           LDR      R3,??DataTable33  ;; APP_DIR
   \   00000004   ........           LDR      R2,??DataTable13  ;; `?<Constant "%sgroups.json">`
   \   00000008   70402DE9           PUSH     {R4-R6,LR}
   \   0000000C   41DF4DE2           SUB      SP,SP,#+260
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   FF10A0E3           MOV      R1,#+255
   \   0000001C   04008DE2           ADD      R0,SP,#+4
   \   00000020   1B0100EF           SWI      +283
    198            if ((f=fopen(fname, A_ReadWrite+A_Create+A_Truncate+A_BIN, P_WRITE+P_READ, &err))!=-1)
   \   00000024   0D30A0E1           MOV      R3,SP
   \   00000028   602FA0E3           MOV      R2,#+384
   \   0000002C   0210A0E3           MOV      R1,#+2
   \   00000030   831C81E3           ORR      R1,R1,#0x8300
   \   00000034   04008DE2           ADD      R0,SP,#+4
   \   00000038   0A0000EF           SWI      +10
   \   0000003C   0060A0E1           MOV      R6,R0
   \   00000040   010076E3           CMN      R6,#+1
   \   00000044   0600000A           BEQ      ??SaveGroups_0
    199            {
    200              fwrite(f, data, len, &err);
   \   00000048   0D30A0E1           MOV      R3,SP
   \   0000004C   0520A0E1           MOV      R2,R5
   \   00000050   0410A0E1           MOV      R1,R4
   \   00000054   0C0000EF           SWI      +12
    201              fclose(f, &err);
   \   00000058   0D10A0E1           MOV      R1,SP
   \   0000005C   0600A0E1           MOV      R0,R6
   \   00000060   0D0000EF           SWI      +13
    202            }
    203          }
   \                     ??SaveGroups_0:
   \   00000064   41DF8DE2           ADD      SP,SP,#+260      ;; stack cleaning
   \   00000068   7080BDE8           POP      {R4-R6,PC}       ;; return
    204          

   \                                 In segment CODE, align 4, keep-with-next
    205          void LoadSavedDialogs()
    206          {
    207            FSTATS stat;
    208            int f;
    209            int fsize = 0;
    210            unsigned  err;
    211            char *data = NULL;
    212            char path[128];
    213          
    214            if (!list_empty(&dialogs))//
   \                     LoadSavedDialogs:
   \   00000000   ........           LDR      R0,??DataTable9  ;; dialogs
   \   00000004   70402DE9           PUSH     {R4-R6,LR}
   \   00000008   B0D04DE2           SUB      SP,SP,#+176
   \   0000000C   001090E5           LDR      R1,[R0, #+0]
   \   00000010   000051E1           CMP      R1,R0
   \   00000014   2700001A           BNE      ??LoadSavedDialogs_0
    215              return;
    216            
    217            snprintf(path, 127, "%sdialogs.json", APP_DIR);
   \   00000018   ........           LDR      R3,??DataTable33  ;; APP_DIR
   \   0000001C   ........           LDR      R2,??DataTable11  ;; `?<Constant "%sdialogs.json">`
   \   00000020   7F10A0E3           MOV      R1,#+127
   \   00000024   08008DE2           ADD      R0,SP,#+8
   \   00000028   1B0100EF           SWI      +283
    218            GetFileStats(path, &stat, &err);
   \   0000002C   0D20A0E1           MOV      R2,SP
   \   00000030   88108DE2           ADD      R1,SP,#+136
   \   00000034   08008DE2           ADD      R0,SP,#+8
   \   00000038   840000EF           SWI      +132
    219            
    220            if ((fsize = stat.size) > 0)
   \   0000003C   8C409DE5           LDR      R4,[SP, #+140]
   \   00000040   010054E3           CMP      R4,#+1
   \   00000044   1B0000BA           BLT      ??LoadSavedDialogs_0
    221            {
    222              if ((f=fopen(path, A_ReadOnly+A_BIN, P_READ, &err))!= -1)
   \   00000048   0D30A0E1           MOV      R3,SP
   \   0000004C   8020A0E3           MOV      R2,#+128
   \   00000050   801CA0E3           MOV      R1,#+32768
   \   00000054   08008DE2           ADD      R0,SP,#+8
   \   00000058   0A0000EF           SWI      +10
   \   0000005C   0050A0E1           MOV      R5,R0
   \   00000060   010075E3           CMN      R5,#+1
   \   00000064   1300000A           BEQ      ??LoadSavedDialogs_0
    223              {
    224                data = malloc(fsize);
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   140000EF           SWI      +20
   \   00000070   0060A0E1           MOV      R6,R0
    225                fread(f, data, fsize, &err);
   \   00000074   0D30A0E1           MOV      R3,SP
   \   00000078   0420A0E1           MOV      R2,R4
   \   0000007C   0610A0E1           MOV      R1,R6
   \   00000080   0500A0E1           MOV      R0,R5
   \   00000084   0B0000EF           SWI      +11
    226                fclose(f, &err);
   \   00000088   0D10A0E1           MOV      R1,SP
   \   0000008C   0500A0E1           MOV      R0,R5
   \   00000090   0D0000EF           SWI      +13
    227              }
    228            }
    229            if (data)
   \   00000094   000056E3           CMP      R6,#+0
   \   00000098   0600000A           BEQ      ??LoadSavedDialogs_0
    230            {
    231              int count;
    232              parse_answer_messages_getConversations(data, &count);
   \   0000009C   04108DE2           ADD      R1,SP,#+4
   \   000000A0   0600A0E1           MOV      R0,R6
   \   000000A4   ........           _BLF     parse_answer_messages_getConversations,??parse_answer_messages_getConversations??rA
    233              mfree(data);
   \   000000A8   0600A0E1           MOV      R0,R6
   \   000000AC   150000EF           SWI      +21
    234              AnimWidget_Close();
   \   000000B0   ........           _BLF     AnimWidget_Close,??AnimWidget_Close??rA
    235              RefreshDialogsMenu();
   \   000000B4   ........           _BLF     RefreshDialogsMenu,??RefreshDialogsMenu??rA
   \                     ??LoadSavedDialogs_0:
   \   000000B8   B0D08DE2           ADD      SP,SP,#+176      ;; stack cleaning
   \   000000BC   7080BDE8           POP      {R4-R6,PC}       ;; return
    236            }
    237          }
    238          

   \                                 In segment CODE, align 4, keep-with-next
    239          void LoadSavedGroups()
    240          {
    241            FSTATS stat;
    242            int f;
    243            int fsize = 0;
    244            unsigned  err;
    245            char *data = NULL;
    246            char path[128];
    247          
    248            if (!list_empty(&my_groups))//
   \                     LoadSavedGroups:
   \   00000000   B8009FE5           LDR      R0,??LoadSavedGroups_0  ;; my_groups
   \   00000004   70402DE9           PUSH     {R4-R6,LR}
   \   00000008   B0D04DE2           SUB      SP,SP,#+176
   \   0000000C   001090E5           LDR      R1,[R0, #+0]
   \   00000010   000051E1           CMP      R1,R0
   \   00000014   2700001A           BNE      ??LoadSavedGroups_1
    249              return;
    250            
    251            snprintf(path, 127, "%sgroups.json", APP_DIR);
   \   00000018   ........           LDR      R3,??DataTable33  ;; APP_DIR
   \   0000001C   ........           LDR      R2,??DataTable13  ;; `?<Constant "%sgroups.json">`
   \   00000020   7F10A0E3           MOV      R1,#+127
   \   00000024   08008DE2           ADD      R0,SP,#+8
   \   00000028   1B0100EF           SWI      +283
    252            GetFileStats(path, &stat, &err);
   \   0000002C   0D20A0E1           MOV      R2,SP
   \   00000030   88108DE2           ADD      R1,SP,#+136
   \   00000034   08008DE2           ADD      R0,SP,#+8
   \   00000038   840000EF           SWI      +132
    253            
    254            if ((fsize = stat.size) > 0)
   \   0000003C   8C409DE5           LDR      R4,[SP, #+140]
   \   00000040   010054E3           CMP      R4,#+1
   \   00000044   1A0000BA           BLT      ??LoadSavedGroups_2
    255            {
    256              if ((f=fopen(path, A_ReadOnly+A_BIN, P_READ, &err))!= -1)
   \   00000048   0D30A0E1           MOV      R3,SP
   \   0000004C   8020A0E3           MOV      R2,#+128
   \   00000050   801CA0E3           MOV      R1,#+32768
   \   00000054   08008DE2           ADD      R0,SP,#+8
   \   00000058   0A0000EF           SWI      +10
   \   0000005C   0050A0E1           MOV      R5,R0
   \   00000060   010075E3           CMN      R5,#+1
   \   00000064   1200000A           BEQ      ??LoadSavedGroups_2
    257              {
    258                data = malloc(fsize);
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   140000EF           SWI      +20
   \   00000070   0060A0E1           MOV      R6,R0
    259                fread(f, data, fsize, &err);
   \   00000074   0D30A0E1           MOV      R3,SP
   \   00000078   0420A0E1           MOV      R2,R4
   \   0000007C   0610A0E1           MOV      R1,R6
   \   00000080   0500A0E1           MOV      R0,R5
   \   00000084   0B0000EF           SWI      +11
    260                fclose(f, &err);
   \   00000088   0D10A0E1           MOV      R1,SP
   \   0000008C   0500A0E1           MOV      R0,R5
   \   00000090   0D0000EF           SWI      +13
    261              }
    262            }
    263            if (data)
   \   00000094   000056E3           CMP      R6,#+0
   \   00000098   0500000A           BEQ      ??LoadSavedGroups_2
    264            {
    265              int count;
    266              parse_answer_groups_get(data,&count);
   \   0000009C   04108DE2           ADD      R1,SP,#+4
   \   000000A0   0600A0E1           MOV      R0,R6
   \   000000A4   ........           _BLF     parse_answer_groups_get,??parse_answer_groups_get??rA
    267              mfree(data);
   \   000000A8   0600A0E1           MOV      R0,R6
   \   000000AC   150000EF           SWI      +21
    268              RefreshGroupsMenu();
   \   000000B0   ........           _BLF     RefreshGroupsMenu,??RefreshGroupsMenu??rA
    269            }
    270            AnimWidget_Close();
   \                     ??LoadSavedGroups_2:
   \   000000B4   ........           _BLF     AnimWidget_Close,??AnimWidget_Close??rA
    271          }
   \                     ??LoadSavedGroups_1:
   \   000000B8   B0D08DE2           ADD      SP,SP,#+176      ;; stack cleaning
   \   000000BC   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??LoadSavedGroups_0:
   \   000000C0   ........           DC32     my_groups
    272          

   \                                 In segment CODE, align 4, keep-with-next
    273          static void save_token()
    274          {
    275            char fname[256];
    276            int f;
    277            unsigned  err;
    278             
    279            snprintf(fname, 255, "%stoken", APP_DIR);
   \                     save_token:
   \   00000000   ........           LDR      R3,??DataTable33  ;; APP_DIR
   \   00000004   ........           LDR      R2,??DataTable34  ;; `?<Constant "%stoken">`
   \   00000008   30402DE9           PUSH     {R4,R5,LR}
   \   0000000C   41DF4DE2           SUB      SP,SP,#+260
   \   00000010   FF10A0E3           MOV      R1,#+255
   \   00000014   04008DE2           ADD      R0,SP,#+4
   \   00000018   1B0100EF           SWI      +283
    280            if ((f=fopen(fname, A_ReadWrite+A_Create+A_Truncate+A_BIN, P_WRITE+P_READ, &err))!=-1)
   \   0000001C   0D30A0E1           MOV      R3,SP
   \   00000020   602FA0E3           MOV      R2,#+384
   \   00000024   0210A0E3           MOV      R1,#+2
   \   00000028   831C81E3           ORR      R1,R1,#0x8300
   \   0000002C   04008DE2           ADD      R0,SP,#+4
   \   00000030   0A0000EF           SWI      +10
   \   00000034   0040A0E1           MOV      R4,R0
   \   00000038   010074E3           CMN      R4,#+1
   \   0000003C   0A00000A           BEQ      ??save_token_0
    281            {
    282              fwrite(f, ACCESS_TOKEN, strlen(ACCESS_TOKEN), &err);
   \   00000040   ........           LDR      R5,??DataTable35  ;; ACCESS_TOKEN
   \   00000044   0500A0E1           MOV      R0,R5
   \   00000048   1B0000EF           SWI      +27
   \   0000004C   0020A0E1           MOV      R2,R0
   \   00000050   0D30A0E1           MOV      R3,SP
   \   00000054   0510A0E1           MOV      R1,R5
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   0C0000EF           SWI      +12
    283              fclose(f, &err);
   \   00000060   0D10A0E1           MOV      R1,SP
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   0D0000EF           SWI      +13
    284            }
    285          }
   \                     ??save_token_0:
   \   0000006C   41DF8DE2           ADD      SP,SP,#+260      ;; stack cleaning
   \   00000070   3080BDE8           POP      {R4,R5,PC}       ;; return
    286          

   \                                 In segment CODE, align 4, keep-with-next
    287          static void del_token()
    288          {
    289            char fname[256];
    290            int f;
    291            unsigned  err;
    292            
    293            ACCESS_TOKEN[0] = '\0';
   \                     del_token:
   \   00000000   ........           LDR      R0,??DataTable35  ;; ACCESS_TOKEN
    294            snprintf(fname, 255, "%stoken", APP_DIR);
   \   00000004   ........           LDR      R3,??DataTable33  ;; APP_DIR
   \   00000008   ........           LDR      R2,??DataTable34  ;; `?<Constant "%stoken">`
   \   0000000C   00402DE9           PUSH     {LR}
   \   00000010   41DF4DE2           SUB      SP,SP,#+260
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   0010C0E5           STRB     R1,[R0, #+0]
   \   0000001C   FF10A0E3           MOV      R1,#+255
   \   00000020   04008DE2           ADD      R0,SP,#+4
   \   00000024   1B0100EF           SWI      +283
    295            if ((f=fopen(fname, A_ReadWrite+A_Truncate+A_BIN, P_WRITE+P_READ, &err)) != -1)//чистим содержимое файла
   \   00000028   0D30A0E1           MOV      R3,SP
   \   0000002C   602FA0E3           MOV      R2,#+384
   \   00000030   0210A0E3           MOV      R1,#+2
   \   00000034   821C81E3           ORR      R1,R1,#0x8200
   \   00000038   04008DE2           ADD      R0,SP,#+4
   \   0000003C   0A0000EF           SWI      +10
   \   00000040   010070E3           CMN      R0,#+1
   \   00000044   0100000A           BEQ      ??del_token_0
    296              fclose(f, &err);
   \   00000048   0D10A0E1           MOV      R1,SP
   \   0000004C   0D0000EF           SWI      +13
    297            //unlink(fname, &err); //или удаляем файл
    298          }
   \                     ??del_token_0:
   \   00000050   41DF8DE2           ADD      SP,SP,#+260      ;; stack cleaning
   \   00000054   0080BDE8           POP      {PC}             ;; return
    299          

   \                                 In segment CODE, align 4, keep-with-next
    300          void Logout()
    301          {
    302            auth_state = 0;
    303            INET_PROCESS= 0;
   \                     Logout:
   \   00000000   ........           LDR      R0,??DataTable36  ;; INET_PROCESS
   \   00000004   10402DE9           PUSH     {R4,LR}
    304            GBS_DelTimer(&tmr_check_new_msg);
   \   00000008   ........           LDR      R4,??DataTable40  ;; ipc
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   001080E5           STR      R1,[R0, #+0]
   \   00000014   180084E2           ADD      R0,R4,#+24
   \   00000018   8C0100EF           SWI      +396
    305            del_token();
   \   0000001C   ........           BL       del_token
    306            end_ssl_work();//закрываем все соед-я
   \   00000020   ........           _BLF     end_ssl_work,??end_ssl_work??rA
    307            if (!IsGuiOnTop(csm->maingui_id))//закрываем текущий гуи,если он не главный
   \   00000024   140094E5           LDR      R0,[R4, #+20]
   \   00000028   280090E5           LDR      R0,[R0, #+40]
   \   0000002C   350100EF           SWI      +309
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0100001A           BNE      ??Logout_0
    308              GeneralFuncF1(1);
   \   00000038   0100A0E3           MOV      R0,#+1
   \   0000003C   3B0100EF           SWI      +315
    309            GeneralFunc_flag1(csm->maingui_id, 1);//закрываем главное меню
   \                     ??Logout_0:
   \   00000040   140094E5           LDR      R0,[R4, #+20]
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   280090E5           LDR      R0,[R0, #+40]
   \   0000004C   3D0100EF           SWI      +317
    310            csm->maingui_id = CreateLoginDialog();//открываем диалог логина
   \   00000050   ........           _BLF     CreateLoginDialog,??CreateLoginDialog??rA
   \   00000054   141094E5           LDR      R1,[R4, #+20]
   \   00000058   280081E5           STR      R0,[R1, #+40]
    311          }
   \   0000005C   1080BDE8           POP      {R4,PC}          ;; return
    312          

   \                                 In segment CODE, align 4, keep-with-next
    313          static void DoError(int err)
    314          {
   \                     DoError:
   \   00000000   00402DE9           PUSH     {LR}
    315            if (err == 5)//ошибка авторизации
   \   00000004   050050E3           CMP      R0,#+5
   \   00000008   0100001A           BNE      ??DoError_0
    316              Logout();    
   \   0000000C   0040BDE8           POP      {LR}             ;; Pop
   \   00000010   ........           B        Logout           ;; tailcall
    317          //  else if (err == 14)//ned_captcha
    318          //  {
    319          //    
    320          //  }
    321            else if (err == -1)//cJSON parse error
   \                     ??DoError_0:
   \   00000014   30109FE5           LDR      R1,??DoError_1   ;; `?<Constant "Error=%d">`
   \   00000018   ........           LDR      R2,??DataTable36  ;; INET_PROCESS
   \   0000001C   0030A0E3           MOV      R3,#+0
   \   00000020   010070E3           CMN      R0,#+1
   \   00000024   003082E5           STR      R3,[R2, #+0]
    322            {
    323                INET_PROCESS=0;
    324                ShowMSG(1, (int)"cJSON parse error");
   \   00000028   0C108102           ADDEQ    R1,R1,#+12
   \   0000002C   0300000A           BEQ      ??DoError_2
    325              }
    326            else
    327            {
    328              INET_PROCESS = 0;
    329              sprintf(logmsg, "Error=%d", err);
   \   00000030   0020A0E1           MOV      R2,R0
   \   00000034   ........           LDR      R0,??DataTable48  ;; logmsg
   \   00000038   160000EF           SWI      +22
    330              ShowMSG(1, (int)error_msg);
   \   0000003C   0C109FE5           LDR      R1,??DoError_1+0x4  ;; error_msg
   \                     ??DoError_2:
   \   00000040   0100A0E3           MOV      R0,#+1
   \   00000044   480100EF           SWI      +328
    331            }
    332          }
   \   00000048   0080BDE8           POP      {PC}             ;; return
   \                     ??DoError_1:
   \   0000004C   ........           DC32     `?<Constant "Error=%d">`
   \   00000050   ........           DC32     error_msg
    333          
    334          extern void set_DialogsCount(int count);
    335          extern void set_GroupsCount(int count);
    336          extern int get_DialogsCount();
    337          extern int get_GroupsCount();
    338          

   \                                 In segment CODE, align 4, keep-with-next
    339          static void MainProcess(char *data)
    340          {
   \                     MainProcess:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    341            WSHDR ws;
    342            unsigned short wsbody[128];
    343            
    344            int f;
    345            FSTATS stat;
    346            unsigned  err;
    347            
    348            char* ext;
    349            char fname[128];
    350            
    351            int count = 0;
    352            
    353            switch (INET_PROCESS)
   \   00000004   ........           LDR      R7,??DataTable36  ;; INET_PROCESS
   \   00000008   ........           LDR      R10,??DataTable48  ;; logmsg
   \   0000000C   ........           LDR      R11,??DataTable40  ;; ipc
   \   00000010   ........           LDR      R4,??DataTable47  ;; HTTP_HEADER_LENGTH
   \   00000014   08539FE5           LDR      R5,??MainProcess_1  ;; recv_buf
   \   00000018   ........           LDR      R9,??DataTable49  ;; HTTP_CONTENT_LENGTH
   \   0000001C   04639FE5           LDR      R6,??MainProcess_1+0x4  ;; `?<Constant "TEST_SSL_CON ok!">`
   \   00000020   67DF4DE2           SUB      SP,SP,#+412
   \   00000024   000097E5           LDR      R0,[R7, #+0]
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   04108DE5           STR      R1,[SP, #+4]
   \   00000030   0080A0E3           MOV      R8,#+0
   \   00000034   060040E2           SUB      R0,R0,#+6
   \   00000038   1B0050E3           CMP      R0,#+27
   \   0000003C   B600008A           BHI      ??MainProcess_2
   \   00000040   011F8FE2           ADR      R1,??MainProcess_0
   \   00000044   0010D1E7           LDRB     R1,[R1, R0]
   \   00000048   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??MainProcess_0:
   \   0000004C   0BB32BB3           DC8      +11,+179,+43,+179
   \   00000050   2EB336B3           DC8      +46,+179,+54,+179
   \   00000054   B3B3B3B3           DC8      +179,+179,+179,+179
   \   00000058   B3B3B350           DC8      +179,+179,+179,+80
   \   0000005C   B36B80B3           DC8      +179,+107,+128,+179
   \   00000060   B3B3B3B3           DC8      +179,+179,+179,+179
   \   00000064   B3B3B306           DC8      +179,+179,+179,+6
    354            {
    355          #ifdef DEBUG     
    356            case TEST_SSL_CON:  
    357              sprintf(logmsg, "TEST_SSL_CON ok!");
   \                     ??MainProcess_3:
   \   00000068   0610A0E1           MOV      R1,R6
   \   0000006C   0A00A0E1           MOV      R0,R10
   \   00000070   160000EF           SWI      +22
    358              SMART_REDRAW();     
   \   00000074   ........           _BLF     SMART_REDRAW,??SMART_REDRAW??rA
    359              INET_PROCESS = 0;
   \   00000078   1C0000EA           B        ??MainProcess_4
    360              break;
    361          #endif    
    362          //-------------------------------- AUTH_DIRECT ---------------------------------    
    363            case AUTH_DIRECT:
    364              
    365              err = parse_answer_auth_direct();
   \                     ??MainProcess_5:
   \   0000007C   ........           _BLF     parse_answer_auth_direct,??parse_answer_auth_direct??rA
   \   00000080   00008DE5           STR      R0,[SP, #+0]
    366              
    367              AnimWidget_Close();
   \   00000084   ........           _BLF     AnimWidget_Close,??AnimWidget_Close??rA
    368              
    369              if (err) {
   \   00000088   00009DE5           LDR      R0,[SP, #+0]
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   0100000A           BEQ      ??MainProcess_6
    370                DoError(err); return;
   \                     ??MainProcess_7:
   \   00000094   ........           BL       DoError
   \   00000098   150000EA           B        ??MainProcess_8
    371              }
    372              
    373              save_token();//Токен получен! Сохраняем в файл.
   \                     ??MainProcess_6:
   \   0000009C   ........           BL       save_token
    374          #ifdef DEBUG   
    375              sprintf(logmsg, "Token readed!");
   \   000000A0   141086E2           ADD      R1,R6,#+20
   \   000000A4   0A00A0E1           MOV      R0,R10
   \   000000A8   160000EF           SWI      +22
    376              SMART_REDRAW();
   \   000000AC   ........           _BLF     SMART_REDRAW,??SMART_REDRAW??rA
    377          #endif    
    378              end_ssl_work();//Закрываем все соед-я
   \   000000B0   ........           _BLF     end_ssl_work,??end_ssl_work??rA
    379              Cookies_SaveAndFree();//Куки не нужны???;
   \   000000B4   ........           _BLF     Cookies_SaveAndFree,??Cookies_SaveAndFree??rA
    380              if (!IsGuiOnTop(csm->maingui_id))
   \   000000B8   14009BE5           LDR      R0,[R11, #+20]
   \   000000BC   280090E5           LDR      R0,[R0, #+40]
   \   000000C0   350100EF           SWI      +309
   \   000000C4   000050E3           CMP      R0,#+0
   \   000000C8   0100001A           BNE      ??MainProcess_9
    381                GeneralFuncF1(1);//если вдруг открыт debug_gui
   \   000000CC   0100A0E3           MOV      R0,#+1
   \   000000D0   3B0100EF           SWI      +315
    382              GeneralFunc_flag1(csm->maingui_id, 1);//закрываем диалог логина
   \                     ??MainProcess_9:
   \   000000D4   14009BE5           LDR      R0,[R11, #+20]
   \   000000D8   0110A0E3           MOV      R1,#+1
   \   000000DC   280090E5           LDR      R0,[R0, #+40]
   \   000000E0   3D0100EF           SWI      +317
    383              csm->maingui_id = CreateMainMenu();
   \   000000E4   ........           _BLF     CreateMainMenu,??CreateMainMenu??rA
   \   000000E8   14109BE5           LDR      R1,[R11, #+20]
   \   000000EC   280081E5           STR      R0,[R1, #+40]
    384              INET_PROCESS = 0;
   \                     ??MainProcess_4:
   \   000000F0   008087E5           STR      R8,[R7, #+0]
   \                     ??MainProcess_8:
   \   000000F4   67DF8DE2           ADD      SP,SP,#+412
   \   000000F8   F08FBDE8           POP      {R4-R11,PC}
    385              break;
    386          //---------------------------  ENABLE_STATISTIC --------------------------------     
    387            case ENABLE_STATISTIC:
    388              ena_statistic = 1;
   \                     ??MainProcess_10:
   \   000000FC   0100A0E3           MOV      R0,#+1
   \   00000100   0C008BE5           STR      R0,[R11, #+12]
    389              INET_PROCESS = 0;
   \   00000104   F9FFFFEA           B        ??MainProcess_4
    390              //tmr_check_new_msg_handler();
    391              break;
    392              
    393          //--------------------------- GET_LONG_POOL_SERVER------------------------------    
    394            case GET_LONG_POOL_SERVER:
    395              
    396              parse_answer_messages_getLongPollServer(&err);
   \                     ??MainProcess_11:
   \   00000108   0D00A0E1           MOV      R0,SP
   \   0000010C   ........           _BLF     parse_answer_messages_getLongPollServer,??parse_answer_messages_getLongPollServer??rA
    397              
    398              if (err) {
   \   00000110   00009DE5           LDR      R0,[SP, #+0]
   \   00000114   000050E3           CMP      R0,#+0
   \   00000118   DDFFFF1A           BNE      ??MainProcess_7
    399                DoError(err); return;
    400              }
    401              
    402              INET_PROCESS = 0;
   \   0000011C   008087E5           STR      R8,[R7, #+0]
    403              tmr_check_new_msg_handler();
   \   00000120   ........           BL       tmr_check_new_msg_handler
   \   00000124   F2FFFFEA           B        ??MainProcess_8
    404              break;
    405              
    406          //----------------------------- LOAD_DIALOGS -----------------------------------  
    407            case LOAD_DIALOGS:
    408          
    409                if (get_DialogsCount() == 0)
   \                     ??MainProcess_12:
   \   00000128   ........           _BLF     get_DialogsCount,??get_DialogsCount??rA
   \   0000012C   000050E3           CMP      R0,#+0
   \   00000130   0800001A           BNE      ??MainProcess_13
    410                {
    411                  SaveDialogs(recv_buf+HTTP_HEADER_LENGTH, HTTP_CONTENT_LENGTH);//Для отладки
   \   00000134   000094E5           LDR      R0,[R4, #+0]
   \   00000138   002095E5           LDR      R2,[R5, #+0]
   \   0000013C   001099E5           LDR      R1,[R9, #+0]
   \   00000140   020080E0           ADD      R0,R0,R2
   \   00000144   ........           BL       SaveDialogs
    412                  LockSched();
   \   00000148   460100EF           SWI      +326
    413                  del_Dialogs();
   \   0000014C   ........           _BLF     del_Dialogs,??del_Dialogs??rA
    414                  RefreshDialogsMenu();
   \   00000150   ........           _BLF     RefreshDialogsMenu,??RefreshDialogsMenu??rA
    415                  UnlockSched();
   \   00000154   470100EF           SWI      +327
    416                } 
    417                
    418                err = parse_answer_messages_getConversations(recv_buf+HTTP_HEADER_LENGTH, &count);
   \                     ??MainProcess_13:
   \   00000158   000094E5           LDR      R0,[R4, #+0]
   \   0000015C   002095E5           LDR      R2,[R5, #+0]
   \   00000160   04108DE2           ADD      R1,SP,#+4
   \   00000164   020080E0           ADD      R0,R0,R2
   \   00000168   ........           _BLF     parse_answer_messages_getConversations,??parse_answer_messages_getConversations??rA
   \   0000016C   00008DE5           STR      R0,[SP, #+0]
    419                set_DialogsCount(count);
   \   00000170   04009DE5           LDR      R0,[SP, #+4]
   \   00000174   ........           _BLF     set_DialogsCount,??set_DialogsCount??rA
    420              
    421              AnimWidget_Close();
   \   00000178   ........           _BLF     AnimWidget_Close,??AnimWidget_Close??rA
    422              
    423              if (err) {
   \   0000017C   00009DE5           LDR      R0,[SP, #+0]
   \   00000180   000050E3           CMP      R0,#+0
   \   00000184   C2FFFF1A           BNE      ??MainProcess_7
    424                DoError(err); return;
    425              }
    426              
    427              RefreshDialogsMenu();
   \   00000188   ........           _BLF     RefreshDialogsMenu,??RefreshDialogsMenu??rA
    428              
    429          /*    
    430              if (total_unread_messages > prev_unread_messages)
    431              {
    432                snprintf(fname, 127, "%ssounds\\message.wav", APP_DIR);
    433                Play(fname);
    434              }
    435          
    436              char* ids = create_noninfo_users_ids(&dialogs);//создаем список id у которых нет инфы
    437              
    438              if (ids)
    439              {
    440                process=LOAD_USERS_INFO;
    441                SUBPROC((void*)HttpSendReq, users_get(id_list, "photo_50"));
    442                mfree((void*)ids);
    443                return;
    444              }
    445              
    446             //если в списке есть сообщение от группы
    447              id_list=create_noninfo_groups_ids(csm->dialogs_list);
    448              
    449              if (id_list)
    450              {
    451                process=LOAD_GROUPS_INFO;
    452                SUBPROC((void*)HttpSendReq, groups_getById(id_list, "photo_50"));
    453                mfree((void*)id_list);
    454                return;
    455              }
    456           */   
    457              //на всех есть инфа
    458              INET_PROCESS = 0;
   \   0000018C   D7FFFFEA           B        ??MainProcess_4
    459              //GBS_StartTimerProc(&tmr_check_new_msg, 216*RECONNECT_TIME, tmr_check_new_msg_handler);      
    460              break;
    461          //----------------------------- LOAD_USERS_INFO --------------------------------   
    462          
    463          /*  case LOAD_USERS_INFO:
    464              
    465              err = parse_answer_users_get(recv_buf+HTTP_HEADER_LENGTH, &csm->dialogs_list);
    466              
    467              if (err) {
    468                checkError(err); return;
    469              }
    470              
    471              RefreshDialogsMenu();
    472              RecountFriendsMenu();
    473              
    474              id_list=create_noninfo_groups_ids(csm->dialogs_list);
    475              //если в списке есть сообщение от группы
    476              if (id_list)
    477              {
    478                process=LOAD_GROUPS_INFO;
    479                SUBPROC((void*)HttpSendReq, groups_getById(id_list, "photo_50"));
    480                mfree((void*)id_list);
    481                return;
    482              }
    483              //ищем авки в кэше
    484              process=LOAD_USERS_PHOTO;
    485              csm->cl=csm->dialogs_list;
    486              csm->c=csm->cl;    
    487              goto load_users_photo;
    488          
    489          //----------------------------- LOAD_GROUPS_INFO -------------------------------- 
    490            case LOAD_GROUPS_INFO:  
    491             
    492              err=parse_answer_groups_get(&csm->dialogs_list);
    493              
    494              if (err) {
    495                checkError(err); return;
    496              }
    497              
    498              RefreshDialogsMenu();    
    499              
    500              process=LOAD_USERS_PHOTO;
    501              csm->cl=csm->dialogs_list;
    502              csm->c=csm->cl;
    503              
    504          //------------------------------ LOAD_USERS_PHOTO-------------------------------  
    505            case LOAD_USERS_PHOTO:
    506          load_users_photo:  
    507              //сначало ищем в кэше
    508              while (csm->c)
    509              {
    510                if (csm->c->photo==NULL)
    511                {
    512                  ext="jpg";
    513                  if (strstr(csm->c->photo_url, ".png"))
    514                    ext="png";
    515                  
    516                  snprintf(fname, 127, "%scache\\%d.%s", APP_DIR, csm->c->user_id, ext);
    517                  if (GetFileStats(fname, &stat, &err) != -1)
    518                  {
    519          #ifdef ELKA
    520                    csm->obj=CreateIMGHDRFromFileAsync(fname, 0x8072, 50, 50);
    521          #else
    522                    csm->obj=CreateIMGHDRFromFileAsync(fname, 0x8072, 32, 32);
    523          #endif
    524                    return;
    525                  }
    526                }
    527                csm->c=csm->c->next;
    528              }
    529              process=0;
    530              break;
    531           
    532            case LOAD_USERS_PHOTO_FROM_INET:    
    533              
    534              while (csm->c)
    535              {
    536                if (csm->c->photo==NULL && csm->c->photo_url  && csm->c->flag_load_photo)
    537                {
    538                  if (strcmp(csm->c->photo_url, HTTP_URL)==0)//если заказывали загрузку в интернете
    539                  {
    540                    if (strstr(HTTP_CONTENT_TYPE, "image/"))
    541                    {
    542                      CreateLocalWS(&ws, wsbody, 127);
    543                      ext="jpg";
    544                      if (strstr(HTTP_CONTENT_TYPE, "image/png"))
    545                        ext="png";
    546                      wsprintf(&ws, ext);
    547                      snprintf(fname, 127, "%scache\\%d.%s", APP_DIR, csm->c->user_id, ext);
    548                      
    549                      if((f=fopen(fname, A_ReadWrite+A_Create+A_Truncate+A_BIN, P_WRITE+P_READ, &err))!=-1)
    550                      {
    551                        fwrite(f, recv_buf+HTTP_HEADER_LENGTH, HTTP_CONTENT_LENGTH, &err);
    552                        fclose(f, &err);
    553                      }
    554                      
    555                      csm->obj=CreateIMGHDRFromMemoryAsync(GetExtUid_ws(&ws), recv_buf+HTTP_HEADER_LENGTH, HTTP_CONTENT_LENGTH, 0x8072);
    556                      return;
    557                    }
    558                  }
    559                  else//заказываем авку
    560                  {
    561                    SUBPROC((void*)HttpSendReq, csm->c->photo_url);
    562                    return;
    563                  }
    564                }
    565                csm->c=csm->c->next;
    566              }
    567              //все аватарки загружены
    568              process=0;
    569              break;
    570              
    571          //---------------------------- CHECK_NEW_MESSAGES ------------------------------
    572             
    573            case CHECK_NEW_MESSAGES:
    574              
    575              prev_unread_messages=total_unread_messages;
    576              prev_dialogs_count=CLIST_GetCount(csm->dialogs_list);
    577              
    578              err = parse_answer_messages_getLongPollHistory(&count);//errors 10-ts устарел, 907,908-pts надо обновить
    579              
    580              if (err == 10 || 907 || 908)
    581              {
    582                process = GET_LONG_POOL_SERVER;
    583                SUBPROC((void *)HttpSendReq, messages_getLongPollServer(1, 0));//params: (bool need_pts, int group_id)
    584                return;
    585              }
    586              
    587              if (err) {
    588                checkError(err); return;
    589              }
    590              
    591              if (count)//(total_unread_messages > prev_unread_messages)
    592              { 
    593                //юзается для обновлнения меню
    594                RefreshDialogsMenu();
    595                RecountFriendsMenu();
    596                
    597                if (IsGuiOnTop(csm->chat_gui_id))//открыт чат
    598                { 
    599                  if (csm->chat_c->msglist==NULL)//значит чат открыт из списка друзей
    600                    csm->chat_c=csm->dialogs_list;
    601                  
    602                  if (out)//получили отправиленное сообщение
    603                  {
    604                    snprintf(fname, 127, "%ssounds\\bb3.wav", APP_DIR);
    605                    Play(fname);
    606                  }
    607                  CreateChat(csm->chat_c);
    608                }
    609                
    610                if (out==0)
    611                {
    612                  snprintf(fname, 127, "%ssounds\\bb2.wav", APP_DIR);
    613                  Play(fname);
    614                }
    615                
    616                if (CLIST_GetCount(csm->dialogs_list) > prev_dialogs_count)//если в списке появился новый контакт
    617                {
    618                  RefreshDialogsMenu();
    619                  
    620                  process=LOAD_USERS_INFO;//запускаем процесс получения инфы о контакте
    621                  csm->c=csm->dialogs_list;
    622                  id_list=create_noninfo_users_ids(csm->dialogs_list);
    623                  if (id_list)
    624                  {
    625                    SUBPROC((void*)HttpSendReq, users_get(id_list, "photo_50"));
    626                    mfree((void*)id_list);
    627                    return;
    628                  }
    629                }
    630              }
    631              process=0;
    632              break;
    633          
    634          //------------------------------------------------------------------------------
    635            case LOAD_HISTORY:
    636          
    637              err=parse_answer_messages_getHistory(&count);
    638              
    639              if (err) {
    640                checkError(err); return;
    641              }
    642              
    643              if (IsGuiOnTop(csm->chat_gui_id))
    644                CreateChat(csm->chat_c);
    645          
    646              process=0;
    647              break;
    648          //------------------------------------------------------------------------------    
    649            case  DELETE_DIALOG:
    650              
    651              err=parse_answer_messages_deleteDialog(&user_id);
    652                  
    653              if (err) {
    654                checkError(err); return;
    655              }
    656              
    657              c=FindContactById(csm->dialogs_list, user_id);
    658              if (c)
    659                FreeMSGLIST(c);//удаляем все сообщения
    660              
    661              if (IsGuiOnTop(csm->chat_gui_id))
    662                CreateChat(csm->chat_c);
    663              else
    664              {
    665                if (c)
    666                  DeleteContact(&csm->dialogs_list, user_id);
    667                
    668                RefreshDialogsMenu();
    669              }
    670              
    671              process=0;
    672              break;
    673          //------------------------------------------------------------------------------    
    674            case LOAD_FRIENDS:
    675              
    676              err=parse_answer_friends_get();
    677              
    678              if (err) {
    679                checkError(err); return;
    680              }
    681              
    682              AnimWidget_Close();
    683              RecountFriendsMenu();
    684          
    685              process=LOAD_USERS_PHOTO;
    686              csm->cl=csm->friends_list;
    687              csm->c=csm->cl;
    688              MainProcess();
    689              break;
    690              */
    691          //------------------------------- LOAD_GROUPS ---------------------------------- 
    692            case LOAD_GROUPS:  
    693          
    694              if (get_GroupsCount() == 0)
   \                     ??MainProcess_14:
   \   00000190   ........           _BLF     get_GroupsCount,??get_GroupsCount??rA
   \   00000194   000050E3           CMP      R0,#+0
   \   00000198   0700001A           BNE      ??MainProcess_15
    695                {
    696                  SaveGroups(recv_buf+HTTP_HEADER_LENGTH, HTTP_CONTENT_LENGTH);
   \   0000019C   000094E5           LDR      R0,[R4, #+0]
   \   000001A0   002095E5           LDR      R2,[R5, #+0]
   \   000001A4   001099E5           LDR      R1,[R9, #+0]
   \   000001A8   020080E0           ADD      R0,R0,R2
   \   000001AC   ........           BL       SaveGroups
    697                  LockSched();
   \   000001B0   460100EF           SWI      +326
    698                  RefreshGroupsMenu();
   \   000001B4   ........           _BLF     RefreshGroupsMenu,??RefreshGroupsMenu??rA
    699                  UnlockSched();
   \   000001B8   470100EF           SWI      +327
    700                } 
    701              
    702              err=parse_answer_groups_get(recv_buf+HTTP_HEADER_LENGTH, &count);//count вернет кол-во групп пользователя
   \                     ??MainProcess_15:
   \   000001BC   000094E5           LDR      R0,[R4, #+0]
   \   000001C0   002095E5           LDR      R2,[R5, #+0]
   \   000001C4   04108DE2           ADD      R1,SP,#+4
   \   000001C8   020080E0           ADD      R0,R0,R2
   \   000001CC   ........           _BLF     parse_answer_groups_get,??parse_answer_groups_get??rA
   \   000001D0   00008DE5           STR      R0,[SP, #+0]
    703              set_GroupsCount(count);
   \   000001D4   04009DE5           LDR      R0,[SP, #+4]
   \   000001D8   ........           _BLF     set_GroupsCount,??set_GroupsCount??rA
    704              
    705              AnimWidget_Close();
   \   000001DC   ........           _BLF     AnimWidget_Close,??AnimWidget_Close??rA
    706               
    707              if (err) {
   \   000001E0   00009DE5           LDR      R0,[SP, #+0]
   \   000001E4   000050E3           CMP      R0,#+0
   \   000001E8   0100000A           BEQ      ??MainProcess_16
    708                DoError(err); return;
   \   000001EC   ........           BL       DoError
   \   000001F0   BFFFFFEA           B        ??MainProcess_8
    709              }
    710              
    711              RefreshGroupsMenu();   
   \                     ??MainProcess_16:
   \   000001F4   ........           _BLF     RefreshGroupsMenu,??RefreshGroupsMenu??rA
    712              INET_PROCESS = 0;
   \   000001F8   BCFFFFEA           B        ??MainProcess_4
    713              
    714              //ищем авки в кэше
    715              //process=LOAD_USERS_PHOTO;
    716              //csm->cl=csm->groups_list;
    717              //csm->c=csm->cl;    
    718              //goto load_users_photo;  
    719              break;
    720           //-----------------------------------------------------------------------------   
    721            case LOAD_WALL:
    722                
    723              post=parse_answer_wall_get(recv_buf+HTTP_HEADER_LENGTH, &err);
   \                     ??MainProcess_17:
   \   000001FC   28919FE5           LDR      R9,??MainProcess_1+0x8  ;; post
   \   00000200   000094E5           LDR      R0,[R4, #+0]
   \   00000204   002095E5           LDR      R2,[R5, #+0]
   \   00000208   0D10A0E1           MOV      R1,SP
   \   0000020C   020080E0           ADD      R0,R0,R2
   \   00000210   ........           _BLF     parse_answer_wall_get,??parse_answer_wall_get??rA
   \   00000214   000089E5           STR      R0,[R9, #+0]
    724          
    725              AnimWidget_Close();
   \   00000218   ........           _BLF     AnimWidget_Close,??AnimWidget_Close??rA
    726              
    727              if (err) {
   \   0000021C   00009DE5           LDR      R0,[SP, #+0]
   \   00000220   000050E3           CMP      R0,#+0
   \   00000224   9AFFFF1A           BNE      ??MainProcess_7
    728                DoError(err); return;
    729              }
    730          
    731              INET_PROCESS = 0;
    732              
    733              extern void Wall_Refresh();
    734              
    735              if(post)
   \   00000228   000099E5           LDR      R0,[R9, #+0]
   \   0000022C   008087E5           STR      R8,[R7, #+0]
   \   00000230   000050E3           CMP      R0,#+0
   \   00000234   0100000A           BEQ      ??MainProcess_18
    736                Wall_Refresh();
   \   00000238   ........           _BLF     Wall_Refresh,??Wall_Refresh??rA
   \   0000023C   ACFFFFEA           B        ??MainProcess_8
    737              else
    738                ShowMSG(1,(int)"jSON psrser error!");
   \                     ??MainProcess_18:
   \   00000240   241086E2           ADD      R1,R6,#+36
   \   00000244   0100A0E3           MOV      R0,#+1
   \   00000248   480100EF           SWI      +328
   \   0000024C   A8FFFFEA           B        ??MainProcess_8
    739          
    740              break;
    741          //------------------------------------------------------------------------------     
    742              case DOWNLOAD_ATTACH_PHOTO:
    743                INET_PROCESS = 0;
   \                     ??MainProcess_19:
   \   00000250   008087E5           STR      R8,[R7, #+0]
    744                AnimWidget_Close();
    745                if (strstr(HTTP_CONTENT_TYPE, "image/"))
   \   00000254   D4709FE5           LDR      R7,??MainProcess_1+0xC  ;; HTTP_CONTENT_TYPE
   \   00000258   ........           _BLF     AnimWidget_Close,??AnimWidget_Close??rA
   \   0000025C   5C1086E2           ADD      R1,R6,#+92
   \   00000260   0700A0E1           MOV      R0,R7
   \   00000264   180100EF           SWI      +280
   \   00000268   000050E3           CMP      R0,#+0
   \   0000026C   2A00000A           BEQ      ??MainProcess_2
    746                {
    747                  ext=(char*)t_jpg;
   \   00000270   648086E2           ADD      R8,R6,#+100
    748                  if (strstr(HTTP_CONTENT_TYPE, "image/png"))
   \   00000274   381086E2           ADD      R1,R6,#+56
   \   00000278   0700A0E1           MOV      R0,R7
   \   0000027C   180100EF           SWI      +280
    749                    ext=(char*)t_png;
    750          
    751                  snprintf(fname, 127, "%scache\\attachment.%s", APP_DIR, ext);
   \   00000280   ........           LDR      R3,??DataTable33  ;; APP_DIR
   \   00000284   000050E3           CMP      R0,#+0
   \   00000288   68808612           ADDNE    R8,R6,#+104
   \   0000028C   00012DE9           PUSH     {R8}
   \   00000290   442086E2           ADD      R2,R6,#+68
   \   00000294   7F10A0E3           MOV      R1,#+127
   \   00000298   480F8DE2           ADD      R0,SP,#+288
   \   0000029C   1B0100EF           SWI      +283
    752                  
    753                  if((f=fopen(fname, A_ReadWrite+A_Create+A_Truncate+A_BIN, P_WRITE+P_READ, &err))!=-1)
   \   000002A0   04308DE2           ADD      R3,SP,#+4
   \   000002A4   602FA0E3           MOV      R2,#+384
   \   000002A8   0210A0E3           MOV      R1,#+2
   \   000002AC   831C81E3           ORR      R1,R1,#0x8300
   \   000002B0   480F8DE2           ADD      R0,SP,#+288
   \   000002B4   0A0000EF           SWI      +10
   \   000002B8   0060A0E1           MOV      R6,R0
   \   000002BC   010076E3           CMN      R6,#+1
   \   000002C0   04D08DE2           ADD      SP,SP,#+4
   \   000002C4   0900000A           BEQ      ??MainProcess_20
    754                  {
    755                    fwrite(f, recv_buf+HTTP_HEADER_LENGTH, HTTP_CONTENT_LENGTH, &err);
   \   000002C8   000094E5           LDR      R0,[R4, #+0]
   \   000002CC   001095E5           LDR      R1,[R5, #+0]
   \   000002D0   002099E5           LDR      R2,[R9, #+0]
   \   000002D4   0D30A0E1           MOV      R3,SP
   \   000002D8   011080E0           ADD      R1,R0,R1
   \   000002DC   0600A0E1           MOV      R0,R6
   \   000002E0   0C0000EF           SWI      +12
    756                    fclose(f, &err);
   \   000002E4   0D10A0E1           MOV      R1,SP
   \   000002E8   0600A0E1           MOV      R0,R6
   \   000002EC   0D0000EF           SWI      +13
    757                  }
    758                  
    759                  CreateLocalWS(&ws, wsbody, 127);
   \                     ??MainProcess_20:
   \   000002F0   7F20A0E3           MOV      R2,#+127
   \   000002F4   1C108DE2           ADD      R1,SP,#+28
   \   000002F8   08008DE2           ADD      R0,SP,#+8
   \   000002FC   270100EF           SWI      +295
    760                  wsprintf(&ws, fname);
   \   00000300   471F8DE2           ADD      R1,SP,#+284
   \   00000304   08008DE2           ADD      R0,SP,#+8
   \   00000308   240100EF           SWI      +292
    761                  ExecuteFile (&ws, 0, 0); 
   \   0000030C   0020A0E3           MOV      R2,#+0
   \   00000310   0010A0E3           MOV      R1,#+0
   \   00000314   08008DE2           ADD      R0,SP,#+8
   \   00000318   940000EF           SWI      +148
   \                     ??MainProcess_2:
   \   0000031C   67DF8DE2           ADD      SP,SP,#+412      ;; stack cleaning
   \   00000320   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??MainProcess_1:
   \   00000324   ........           DC32     recv_buf
   \   00000328   ........           DC32     `?<Constant "TEST_SSL_CON ok!">`
   \   0000032C   ........           DC32     post
   \   00000330   ........           DC32     HTTP_CONTENT_TYPE
    762                }
    763                break;
    764              
    765            }
    766          
    767          }
    768          

   \                                 In segment CODE, align 4, keep-with-next
    769          static void maincsm_oncreate(CSM_RAM *data)
    770          {
    771            csm=(MAIN_CSM*)data;
   \                     maincsm_oncreate:
   \   00000000   ........           LDR      R3,??DataTable51  ;; ipc
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   140083E5           STR      R0,[R3, #+20]
    772            ipc.name_to=ipc_my_name;
   \   0000000C   ........           LDR      R0,??DataTable46  ;; ipc_my_name
    773            ipc.name_from=ipc_my_name;
    774            ipc.data=(void *)-1;
    775            GBS_SendMessage(MMI_CEPID, MSG_IPC, IPC_CHECK_DOUBLERUN, &ipc);
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000083E5           STR      R0,[R3, #+0]
   \   00000018   040083E5           STR      R0,[R3, #+4]
   \   0000001C   0000E0E3           MVN      R0,#+0
   \   00000020   080083E5           STR      R0,[R3, #+8]
   \   00000024   B010A0E3           MOV      R1,#+176
   \   00000028   DE1C81E3           ORR      R1,R1,#0xDE00
   \   0000002C   0900A0E3           MOV      R0,#+9
   \   00000030   420C80E3           ORR      R0,R0,#0x4200
   \   00000034   000100EF           SWI      +256
    776          }
   \   00000038   0080BDE8           POP      {PC}             ;; return
    777          
    778          extern void kill_data(void *p, void (*func_p)(void *));
    779          #pragma segment="ELFBEGIN"

   \                                 In segment CODE, align 4, keep-with-next
    780          void ElfKiller(void)
    781          {
   \                     ElfKiller:
   \   00000000   00402DE9           PUSH     {LR}
    782            kill_data(__segment_begin("ELFBEGIN"),(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??ElfKiller_0  ;; SFB(ELFBEGIN)
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??ElfKiller_0:
   \   00000018   ........           DC32     SFB(ELFBEGIN)
    783          }
    784          
    785          //******************************************************************************
    786          

   \                                 In segment CODE, align 4, keep-with-next
    787          static void maincsm_onclose(CSM_RAM *data)
    788          {
   \                     maincsm_onclose:
   \   00000000   00402DE9           PUSH     {LR}
    789            AnimWidget_Close();
   \   00000004   ........           _BLF     AnimWidget_Close,??AnimWidget_Close??rA
    790            GBS_DelTimer(&tmr_check_new_msg);
   \   00000008   40009FE5           LDR      R0,??maincsm_onclose_0  ;; ipc + 24
   \   0000000C   8C0100EF           SWI      +396
    791            end_socket_work();
   \   00000010   ........           _BLF     end_socket_work,??end_socket_work??rA
    792            end_ssl_work();
   \   00000014   ........           _BLF     end_ssl_work,??end_ssl_work??rA
    793            del_Dialogs();  
   \   00000018   ........           _BLF     del_Dialogs,??del_Dialogs??rA
    794            del_Profiles();
   \   0000001C   ........           _BLF     del_Profiles,??del_Profiles??rA
    795            del_Groups();
   \   00000020   ........           _BLF     del_Groups,??del_Groups??rA
    796            //del_Friends();
    797            //SUBPROC((void*)Cookies_Free);
    798            SUBPROC((void*)Cookies_SaveAndFree);
   \   00000024   ........           LDR      R0,??DataTable55  ;; Cookies_SaveAndFree
   \   00000028   710100EF           SWI      +369
    799            SUBPROC((void*)FreeDynTheme);
   \   0000002C   20009FE5           LDR      R0,??maincsm_onclose_0+0x4  ;; FreeDynTheme
   \   00000030   710100EF           SWI      +369
    800            SUBPROC((void*)PNGLIST_Free);
   \   00000034   1C009FE5           LDR      R0,??maincsm_onclose_0+0x8  ;; PNGLIST_Free
   \   00000038   710100EF           SWI      +369
    801            SUBPROC((void*)FreeDynSmiles);
   \   0000003C   18009FE5           LDR      R0,??maincsm_onclose_0+0xC  ;; FreeDynSmiles
   \   00000040   710100EF           SWI      +369
    802            SUBPROC((void *)ElfKiller);
   \   00000044   14009FE5           LDR      R0,??maincsm_onclose_0+0x10  ;; ElfKiller
   \   00000048   710100EF           SWI      +369
    803          }
   \   0000004C   0080BDE8           POP      {PC}             ;; return
   \                     ??maincsm_onclose_0:
   \   00000050   ........           DC32     ipc + 24
   \   00000054   ........           DC32     FreeDynTheme
   \   00000058   ........           DC32     PNGLIST_Free
   \   0000005C   ........           DC32     FreeDynSmiles
   \   00000060   ........           DC32     ElfKiller
    804          
    805          //******************************************************************************
    806          

   \                                 In segment CODE, align 4, keep-with-next
    807          void startApp(CSM_RAM *data)
    808          {
    809            FSTATS stat;
    810            int f;
    811            int fsize=0;
    812            unsigned  err;
    813            char path[128];
    814            
    815            snprintf(path, 127, "%stoken", APP_DIR);
   \                     startApp:
   \   00000000   ........           LDR      R3,??DataTable33  ;; APP_DIR
   \   00000004   ........           LDR      R2,??DataTable34  ;; `?<Constant "%stoken">`
   \   00000008   F0402DE9           PUSH     {R4-R7,LR}
    816            GetFileStats(path, &stat, &err);
    817            
    818            ACCESS_TOKEN[0] = '\0';
   \   0000000C   ........           LDR      R5,??DataTable35  ;; ACCESS_TOKEN
   \   00000010   ACD04DE2           SUB      SP,SP,#+172
   \   00000014   7F10A0E3           MOV      R1,#+127
   \   00000018   04008DE2           ADD      R0,SP,#+4
   \   0000001C   1B0100EF           SWI      +283
   \   00000020   0D20A0E1           MOV      R2,SP
   \   00000024   84108DE2           ADD      R1,SP,#+132
   \   00000028   04008DE2           ADD      R0,SP,#+4
   \   0000002C   840000EF           SWI      +132
   \   00000030   0040A0E3           MOV      R4,#+0
   \   00000034   0040C5E5           STRB     R4,[R5, #+0]
    819            if ((fsize = stat.size) > 0)
   \   00000038   88609DE5           LDR      R6,[SP, #+136]
   \   0000003C   010056E3           CMP      R6,#+1
   \   00000040   0F0000BA           BLT      ??startApp_0
    820            {
    821              if ((f=fopen(path, A_ReadOnly+A_BIN, P_READ, &err))!= -1)
   \   00000044   0D30A0E1           MOV      R3,SP
   \   00000048   8020A0E3           MOV      R2,#+128
   \   0000004C   801CA0E3           MOV      R1,#+32768
   \   00000050   04008DE2           ADD      R0,SP,#+4
   \   00000054   0A0000EF           SWI      +10
   \   00000058   0070A0E1           MOV      R7,R0
   \   0000005C   010077E3           CMN      R7,#+1
   \   00000060   0700000A           BEQ      ??startApp_0
    822              {
    823                fread(f, ACCESS_TOKEN, fsize, &err);
   \   00000064   0D30A0E1           MOV      R3,SP
   \   00000068   0620A0E1           MOV      R2,R6
   \   0000006C   0510A0E1           MOV      R1,R5
   \   00000070   0B0000EF           SWI      +11
    824                ACCESS_TOKEN[fsize] = '\0';
   \   00000074   0540C6E7           STRB     R4,[R6, +R5]
    825                fclose(f, &err);
   \   00000078   0D10A0E1           MOV      R1,SP
   \   0000007C   0700A0E1           MOV      R0,R7
   \   00000080   0D0000EF           SWI      +13
    826              }
    827            }
    828            
    829            LoadDynTheme();
    830            SUBPROC((void*)LoadImages);
    831            SUBPROC((void*)LoadSmiles); 
    832            
    833            if (strlen(ACCESS_TOKEN))
   \                     ??startApp_0:
   \   00000084   ........           LDR      R6,??DataTable36  ;; INET_PROCESS
   \   00000088   ........           LDR      R7,??DataTable40  ;; ipc
   \   0000008C   ........           _BLF     LoadDynTheme,??LoadDynTheme??rA
   \   00000090   48009FE5           LDR      R0,??startApp_1  ;; LoadImages
   \   00000094   710100EF           SWI      +369
   \   00000098   44009FE5           LDR      R0,??startApp_1+0x4  ;; LoadSmiles
   \   0000009C   710100EF           SWI      +369
   \   000000A0   0500A0E1           MOV      R0,R5
   \   000000A4   1B0000EF           SWI      +27
   \   000000A8   000050E3           CMP      R0,#+0
   \   000000AC   0500000A           BEQ      ??startApp_2
    834            {
    835              auth_state = 1;
    836              csm->maingui_id = CreateMainMenu();
   \   000000B0   ........           _BLF     CreateMainMenu,??CreateMainMenu??rA
   \   000000B4   141097E5           LDR      R1,[R7, #+20]
   \   000000B8   280081E5           STR      R0,[R1, #+40]
    837              INET_PROCESS = 0;
   \   000000BC   004086E5           STR      R4,[R6, #+0]
   \   000000C0   ACD08DE2           ADD      SP,SP,#+172
   \   000000C4   F080BDE8           POP      {R4-R7,PC}
    838              //GBS_StartTimerProc(&tmr_check_new_msg, 216*RECONNECT_TIME, tmr_check_new_msg_handler);
    839            }
    840            else
    841            {
    842              auth_state = 0;
    843              INET_PROCESS = 0;
   \                     ??startApp_2:
   \   000000C8   004086E5           STR      R4,[R6, #+0]
    844              csm->maingui_id = CreateLoginDialog();
   \   000000CC   ........           _BLF     CreateLoginDialog,??CreateLoginDialog??rA
   \   000000D0   141097E5           LDR      R1,[R7, #+20]
   \   000000D4   280081E5           STR      R0,[R1, #+40]
    845              //SUBPROC((void*)Cookies_Load);
    846            }
    847          }
   \   000000D8   ACD08DE2           ADD      SP,SP,#+172
   \   000000DC   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??startApp_1:
   \   000000E0   ........           DC32     LoadImages
   \   000000E4   ........           DC32     LoadSmiles
    848          

   \                                 In segment CODE, align 4, keep-with-next
    849          void CheckDoubleRun(CSM_RAM *data)
    850          {
   \                     CheckDoubleRun:
   \   00000000   10402DE9           PUSH     {R4,LR}
    851            int csm_id;
    852            if ((csm_id=(int)(ipc.data))!=-1)
   \   00000004   ........           LDR      R4,??DataTable51  ;; ipc
   \   00000008   081094E5           LDR      R1,[R4, #+8]
   \   0000000C   010071E3           CMN      R1,#+1
   \   00000010   1000000A           BEQ      ??CheckDoubleRun_0
    853            {
    854              ipc.name_to=ipc_xtask_name;
   \   00000014   ........           LDR      R0,??DataTable46  ;; ipc_my_name
    855              ipc.name_from=ipc_my_name;
    856              ipc.data=(void *)csm_id;
   \   00000018   081084E5           STR      R1,[R4, #+8]
   \   0000001C   582080E2           ADD      R2,R0,#+88
   \   00000020   002084E5           STR      R2,[R4, #+0]
   \   00000024   040084E5           STR      R0,[R4, #+4]
    857              GBS_SendMessage(MMI_CEPID,MSG_IPC,IPC_XTASK_SHOW_CSM,&ipc);
   \   00000028   0430A0E1           MOV      R3,R4
   \   0000002C   0220A0E3           MOV      R2,#+2
   \   00000030   B010A0E3           MOV      R1,#+176
   \   00000034   DE1C81E3           ORR      R1,R1,#0xDE00
   \   00000038   0900A0E3           MOV      R0,#+9
   \   0000003C   420C80E3           ORR      R0,R0,#0x4200
   \   00000040   000100EF           SWI      +256
    858              LockSched();
   \   00000044   460100EF           SWI      +326
    859              CloseCSM(maincsm_id);
   \   00000048   100094E5           LDR      R0,[R4, #+16]
   \   0000004C   FC0100EF           SWI      +508
    860              UnlockSched();
   \   00000050   470100EF           SWI      +327
   \   00000054   1080BDE8           POP      {R4,PC}
    861            }
    862            else
    863              startApp(data);
   \                     ??CheckDoubleRun_0:
   \   00000058   1040BDE8           POP      {R4,LR}          ;; Pop
   \   0000005C   ........           B        startApp         ;; tailcall
    864          }
    865          
    866          //******************************************************************************
    867          

   \                                 In segment CODE, align 4, keep-with-next
    868          static int HandleObsFrameUpdate(HObj obj)
    869          {
   \                     HandleObsFrameUpdate:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
    870            IMGHDR *temp;
    871            IMGHDR *img;
    872             
    873            unsigned err = Obs_Output_GetPictstruct(csm->obj, &temp);
   \   00000004   ........           LDR      R5,??DataTable40  ;; ipc
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   140095E5           LDR      R0,[R5, #+20]
   \   00000014   0D10A0E1           MOV      R1,SP
   \   00000018   400090E5           LDR      R0,[R0, #+64]
    874            
    875            if (err == 0)
   \   0000001C   0060A0E3           MOV      R6,#+0
   \   00000020   5F0200EF           SWI      +607
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   2200001A           BNE      ??HandleObsFrameUpdate_0
    876            {
    877              img = malloc(sizeof(IMGHDR));
   \   0000002C   0800A0E3           MOV      R0,#+8
   \   00000030   140000EF           SWI      +20
   \   00000034   0070A0E1           MOV      R7,R0
    878              img->w = temp->w;
   \   00000038   00009DE5           LDR      R0,[SP, #+0]
   \   0000003C   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000040   0000C7E5           STRB     R0,[R7, #+0]
    879              img->h = temp->h;
   \   00000044   00009DE5           LDR      R0,[SP, #+0]
   \   00000048   0100D0E5           LDRB     R0,[R0, #+1]
   \   0000004C   0100C7E5           STRB     R0,[R7, #+1]
    880              img->bpnum = (char)temp->bpnum;// читаем только один байт
   \   00000050   00009DE5           LDR      R0,[SP, #+0]
   \   00000054   B200D0E1           LDRH     R0,[R0, #+2]
   \   00000058   FF0000E2           AND      R0,R0,#0xFF
   \   0000005C   B200C7E1           STRH     R0,[R7, #+2]
    881              int len = CalcBitmapSize(temp->w, temp->h,(char)temp->bpnum);
   \   00000060   00009DE5           LDR      R0,[SP, #+0]
   \   00000064   B220D0E1           LDRH     R2,[R0, #+2]
   \   00000068   0110D0E5           LDRB     R1,[R0, #+1]
   \   0000006C   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000070   FF2002E2           AND      R2,R2,#0xFF
   \   00000074   580200EF           SWI      +600
   \   00000078   0080A0E1           MOV      R8,R0
    882              img->bitmap = malloc(len);
   \   0000007C   140000EF           SWI      +20
   \   00000080   040087E5           STR      R0,[R7, #+4]
    883              memcpy(img->bitmap, temp->bitmap, len);
   \   00000084   00009DE5           LDR      R0,[SP, #+0]
   \   00000088   0820A0E1           MOV      R2,R8
   \   0000008C   041090E5           LDR      R1,[R0, #+4]
   \   00000090   040097E5           LDR      R0,[R7, #+4]
   \   00000094   1E0100EF           SWI      +286
    884                  
    885              if (img)
   \   00000098   000057E3           CMP      R7,#+0
   \   0000009C   0500000A           BEQ      ??HandleObsFrameUpdate_0
    886              {
    887                if (csm->user)
   \   000000A0   140095E5           LDR      R0,[R5, #+20]
   \   000000A4   341090E5           LDR      R1,[R0, #+52]
   \   000000A8   000051E3           CMP      R1,#+0
    888                {
    889                  csm->user->photo_50_img = img;
   \   000000AC   24708115           STRNE    R7,[R1, #+36]
    890                  csm->user = 0;
   \   000000B0   34608015           STRNE    R6,[R0, #+52]
    891                }
    892                
    893                RefreshDialogsMenu();//надо сделать универсальную функцию...
   \   000000B4   ........           _BLF     RefreshDialogsMenu,??RefreshDialogsMenu??rA
    894          //        RecountFriendsMenu();
    895          //        RefreshGroupsMenu();
    896                  
    897                     /* int id=0;
    898                      if (IsGuiOnTop(csm->dialogs_menu_gui_id))
    899                        id=csm->dialogs_menu_gui_id;
    900                      else
    901                        if (IsGuiOnTop(csm->friends_menu_gui_id))
    902                          id=csm->friends_menu_gui_id;
    903                      if (id)
    904                      {
    905                        GUI* gui=FindGUIbyId(csm->dialogs_menu_gui_id, 0);
    906                        RefreshMenuItem(gui, GetContactN(csm->cl, csm->c));
    907                      } 
    908                      */
    909                
    910              }
    911            }
    912            
    913            Obs_DestroyObject(obj);
   \                     ??HandleObsFrameUpdate_0:
   \   000000B8   0400A0E1           MOV      R0,R4
   \   000000BC   5A0200EF           SWI      +602
    914            csm->obj = NULL;
   \   000000C0   140095E5           LDR      R0,[R5, #+20]
   \   000000C4   406080E5           STR      R6,[R0, #+64]
    915          /*  
    916            csm->user = list_entry(csm->user->list.next, VkUser, list);
    917            ipc.name_to = ipc_my_name;
    918            ipc.name_from = ipc_my_name;
    919            ipc.data = 0;
    920            GBS_SendMessage(MMI_CEPID, MSG_IPC, IPC_RUN_MAIN_PROCESS, &ipc);//продолжаем процесс 
    921            */
    922            return (0);
   \   000000C8   0000A0E3           MOV      R0,#+0
   \   000000CC   F281BDE8           POP      {R1,R4-R8,PC}    ;; return
    923          }
    924          

   \                                 In segment CODE, align 4, keep-with-next
    925          static int HandleObsError(HObj obj, int err)
    926          {
   \                     HandleObsError:
   \   00000000   10402DE9           PUSH     {R4,LR}
    927            Obs_DestroyObject(csm->obj);
   \   00000004   ........           LDR      R4,??DataTable51  ;; ipc
   \   00000008   140094E5           LDR      R0,[R4, #+20]
   \   0000000C   400090E5           LDR      R0,[R0, #+64]
   \   00000010   5A0200EF           SWI      +602
    928            csm->obj=NULL;
   \   00000014   141094E5           LDR      R1,[R4, #+20]
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   400081E5           STR      R0,[R1, #+64]
    929            
    930            csm->user = list_entry(csm->user->list.next, VkUser, list);
   \   00000020   141094E5           LDR      R1,[R4, #+20]
    931            ipc.name_to = ipc_my_name;
    932            ipc.name_from = ipc_my_name;
    933            ipc.data = 0;
    934            GBS_SendMessage(MMI_CEPID, MSG_IPC, IPC_RUN_MAIN_PROCESS, &ipc); 
   \   00000024   0430A0E1           MOV      R3,R4
   \   00000028   342091E5           LDR      R2,[R1, #+52]
   \   0000002C   002092E5           LDR      R2,[R2, #+0]
   \   00000030   342081E5           STR      R2,[R1, #+52]
   \   00000034   ........           LDR      R1,??DataTable46  ;; ipc_my_name
   \   00000038   080084E5           STR      R0,[R4, #+8]
   \   0000003C   001084E5           STR      R1,[R4, #+0]
   \   00000040   041084E5           STR      R1,[R4, #+4]
   \   00000044   0420A0E3           MOV      R2,#+4
   \   00000048   B010A0E3           MOV      R1,#+176
   \   0000004C   DE1C81E3           ORR      R1,R1,#0xDE00
   \   00000050   0900A0E3           MOV      R0,#+9
   \   00000054   420C80E3           ORR      R0,R0,#0x4200
   \   00000058   000100EF           SWI      +256
    935            return(0);
   \   0000005C   0000A0E3           MOV      R0,#+0
   \   00000060   1080BDE8           POP      {R4,PC}          ;; return
    936          }

   \                                 In segment DATA_I, align 4, align-sorted
   \                     ipc:
   \   00000000                      DS8 12
   \   0000000C                      REQUIRE `?<Initializer for ipc>`
   \   0000000C                      DS8 4
   \   00000010                      REQUIRE `?<Initializer for ena_statistic>`
   \                     maincsm_id:
   \   00000010                      DS8 4
   \   00000014                      REQUIRE `?<Initializer for maincsm_id>`
   \                     csm:
   \   00000014                      DS8 4
   \   00000018                      REQUIRE `?<Initializer for csm>`
   \   00000018                      DS8 16
   \   00000028                      REQUIRE `?<Initializer for tmr_check_new_msg>`
   \   00000028                      DS8 24
   \   00000040                      REQUIRE `?<Initializer for ObsEventsHandlers>`
    937          
    938          static OBSevent ObsEventsHandlers[]={
    939            OBS_EV_FrameUpdate, (void*) HandleObsFrameUpdate,
    940            OBS_EV_Error, (void*) HandleObsError,
    941            OBS_EV_EndList, 0
    942          };
    943          
    944          //******************************************************************************
    945          

   \                                 In segment CODE, align 4, keep-with-next
    946          static int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
    947          {
   \                     maincsm_onmessage:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0070A0E1           MOV      R7,R0
    948            //IPC
    949              if (msg->msg==MSG_IPC)
   \   0000000C   ........           LDR      R5,??DataTable43  ;; ipc
   \   00000010   ........           LDR      R6,??DataTable46  ;; ipc_my_name
   \   00000014   0140A0E1           MOV      R4,R1
   \   00000018   040094E5           LDR      R0,[R4, #+4]
   \   0000001C   B010A0E3           MOV      R1,#+176
   \   00000020   DE1C81E3           ORR      R1,R1,#0xDE00
   \   00000024   010050E1           CMP      R0,R1
   \   00000028   2000001A           BNE      ??maincsm_onmessage_0
    950              {
    951                if (msg->submess!=392305998)
   \   0000002C   080094E5           LDR      R0,[R4, #+8]
   \   00000030   70119FE5           LDR      R1,??maincsm_onmessage_1  ;; 0x17621d4e
   \   00000034   010050E1           CMP      R0,R1
    952                {
    953                  IPC_REQ *ipc_req;
    954                  if ((ipc_req=(IPC_REQ*)msg->data0))
   \   00000038   0C809415           LDRNE    R8,[R4, #+12]
   \   0000003C   00005813           CMPNE    R8,#+0
   \   00000040   2700000A           BEQ      ??maincsm_onmessage_2
    955                  {
    956                    if (stricmp(ipc_req->name_to,ipc_my_name)==0)
   \   00000044   000098E5           LDR      R0,[R8, #+0]
   \   00000048   0610A0E1           MOV      R1,R6
   \   0000004C   ........           _BLF     stricmp,??stricmp??rA
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   1500001A           BNE      ??maincsm_onmessage_0
    957                    {
    958                      switch (msg->submess)
   \   00000058   080094E5           LDR      R0,[R4, #+8]
   \   0000005C   010050E2           SUBS     R0,R0,#+1
   \   00000060   0400000A           BEQ      ??maincsm_onmessage_3
   \   00000064   010050E2           SUBS     R0,R0,#+1
   \   00000068   0F00000A           BEQ      ??maincsm_onmessage_4
   \   0000006C   020050E2           SUBS     R0,R0,#+2
   \   00000070   0A00000A           BEQ      ??maincsm_onmessage_5
   \   00000074   0D0000EA           B        ??maincsm_onmessage_0
    959                      {
    960                      case IPC_CHECK_DOUBLERUN:
    961          	    //Если приняли свое собственное сообщение, значит запускаем чекер
    962          	    if (ipc_req->name_from==ipc_my_name) SUBPROC((void *)CheckDoubleRun, data);
   \                     ??maincsm_onmessage_3:
   \   00000078   040098E5           LDR      R0,[R8, #+4]
   \   0000007C   060050E1           CMP      R0,R6
   \   00000080   0300001A           BNE      ??maincsm_onmessage_6
   \   00000084   20019FE5           LDR      R0,??maincsm_onmessage_1+0x4  ;; CheckDoubleRun
   \   00000088   0710A0E1           MOV      R1,R7
   \   0000008C   710100EF           SWI      +369
   \   00000090   060000EA           B        ??maincsm_onmessage_0
    963                      else ipc_req->data=(void *)maincsm_id;
   \                     ??maincsm_onmessage_6:
   \   00000094   100095E5           LDR      R0,[R5, #+16]
   \   00000098   080088E5           STR      R0,[R8, #+8]
   \   0000009C   030000EA           B        ??maincsm_onmessage_0
    964          	    break;
    965                      
    966                      case IPC_RUN_MAIN_PROCESS:
    967                        MainProcess(ipc_req->data);
   \                     ??maincsm_onmessage_5:
   \   000000A0   080098E5           LDR      R0,[R8, #+8]
   \   000000A4   ........           BL       MainProcess
   \   000000A8   000000EA           B        ??maincsm_onmessage_0
    968                        break;
    969                      
    970                      case IPC_SHOW_CAPTCHA:
    971                        //csm->maingui_id=CreateLoginDialog();//
    972                        AnimWidget_Close();
   \                     ??maincsm_onmessage_4:
   \   000000AC   ........           _BLF     AnimWidget_Close,??AnimWidget_Close??rA
    973                        break;
    974                      }
    975                    }
    976                  }
    977                }
    978              }
    979             
    980            if (msg->msg==MSG_HELPER_TRANSLATOR)
   \                     ??maincsm_onmessage_0:
   \   000000B0   040094E5           LDR      R0,[R4, #+4]
   \   000000B4   AE10A0E3           MOV      R1,#+174
   \   000000B8   DE1C81E3           ORR      R1,R1,#0xDE00
   \   000000BC   010050E1           CMP      R0,R1
   \   000000C0   0900001A           BNE      ??maincsm_onmessage_7
    981            {
    982              if (strncmp(HTTP_URL, "https://", 8)==0)
   \   000000C4   ........           LDR      R0,??DataTable50  ;; HTTP_URL
   \   000000C8   0820A0E3           MOV      R2,#+8
   \   000000CC   041086E2           ADD      R1,R6,#+4
   \   000000D0   150100EF           SWI      +277
   \   000000D4   000050E3           CMP      R0,#+0
   \   000000D8   0100001A           BNE      ??maincsm_onmessage_2
    983                ssl_socket_msg_handler(msg);
   \   000000DC   0400A0E1           MOV      R0,R4
   \   000000E0   ........           _BLF     ssl_socket_msg_handler,??ssl_socket_msg_handler??rA
    984             // else
    985               // socket_msg_handler(msg);
    986              return(1);
   \                     ??maincsm_onmessage_2:
   \   000000E4   0100A0E3           MOV      R0,#+1
   \   000000E8   F281BDE8           POP      {R1,R4-R8,PC}    ;; return
    987            }
    988            
    989            if ((msg->msg==MSG_GUI_DESTROYED)&&((int)msg->data0==csm->maingui_id))
   \                     ??maincsm_onmessage_7:
   \   000000EC   0C1094E5           LDR      R1,[R4, #+12]
   \   000000F0   142095E5           LDR      R2,[R5, #+20]
   \   000000F4   0E30A0E3           MOV      R3,#+14
   \   000000F8   643C83E3           ORR      R3,R3,#0x6400
   \   000000FC   030050E1           CMP      R0,R3
   \   00000100   0400001A           BNE      ??maincsm_onmessage_8
   \   00000104   280092E5           LDR      R0,[R2, #+40]
   \   00000108   000051E1           CMP      R1,R0
   \   0000010C   F4FFFF1A           BNE      ??maincsm_onmessage_2
    990            {
    991              csm->csm.state=-3;
   \   00000110   0200E0E3           MVN      R0,#+2
   \   00000114   100082E5           STR      R0,[R2, #+16]
    992            }
    993          //------------------------------------------------------------------------------  
    994            if (msg->msg==0x8072)//)Obs_Ms
   \                     ??maincsm_onmessage_8:
   \   00000118   040094E5           LDR      R0,[R4, #+4]
   \   0000011C   7230A0E3           MOV      R3,#+114
   \   00000120   803C83E3           ORR      R3,R3,#0x8000
   \   00000124   030050E1           CMP      R0,R3
   \   00000128   0800001A           BNE      ??maincsm_onmessage_9
    995            {
    996              if (csm->obj && (HObj)msg->data0==csm->obj)
   \   0000012C   400092E5           LDR      R0,[R2, #+64]
   \   00000130   000050E3           CMP      R0,#+0
   \   00000134   EAFFFF0A           BEQ      ??maincsm_onmessage_2
   \   00000138   000051E1           CMP      R1,R0
   \   0000013C   E8FFFF1A           BNE      ??maincsm_onmessage_2
    997                Obs_TranslateMessageGBS(msg, ObsEventsHandlers);
   \   00000140   281085E2           ADD      R1,R5,#+40
   \   00000144   0400A0E1           MOV      R0,R4
   \   00000148   640200EF           SWI      +612
   \   0000014C   040000EA           B        ??maincsm_onmessage_10
    998            }
    999            else
   1000              if (msg->msg==0x8055)//)Msg for AnimWidget
   \                     ??maincsm_onmessage_9:
   \   00000150   1D1043E2           SUB      R1,R3,#+29
   \   00000154   010050E1           CMP      R0,R1
   \   00000158   0100001A           BNE      ??maincsm_onmessage_10
   1001                AnimWidgetHandler(msg);
   \   0000015C   0400A0E1           MOV      R0,R4
   \   00000160   ........           _BLF     AnimWidgetHandler,??AnimWidgetHandler??rA
   1002              
   1003            if(msg->msg == MSG_RECONFIGURE_REQ) 
   \                     ??maincsm_onmessage_10:
   \   00000164   040094E5           LDR      R0,[R4, #+4]
   \   00000168   AF10A0E3           MOV      R1,#+175
   \   0000016C   DE1C81E3           ORR      R1,R1,#0xDE00
   \   00000170   010050E1           CMP      R0,R1
   \   00000174   DAFFFF1A           BNE      ??maincsm_onmessage_2
   1004            {
   1005              extern const char *successed_config_filename;
   1006              if (stricmp(successed_config_filename,(char *)msg->data0)==0)
   \   00000178   30009FE5           LDR      R0,??maincsm_onmessage_1+0x8  ;; successed_config_filename
   \   0000017C   0C1094E5           LDR      R1,[R4, #+12]
   \   00000180   000090E5           LDR      R0,[R0, #+0]
   \   00000184   ........           _BLF     stricmp,??stricmp??rA
   \   00000188   000050E3           CMP      R0,#+0
   \   0000018C   D4FFFF1A           BNE      ??maincsm_onmessage_2
   1007              {
   1008                InitConfig();
   \   00000190   ........           _BLF     InitConfig,??InitConfig??rA
   1009                ShowMSG(0x11,(int)"VK.ELF:\nконфиг обновлен!");
   \   00000194   101086E2           ADD      R1,R6,#+16
   \   00000198   1100A0E3           MOV      R0,#+17
   \   0000019C   480100EF           SWI      +328
   \   000001A0   0100A0E3           MOV      R0,#+1
   \   000001A4   F281BDE8           POP      {R1,R4-R8,PC}
   \                     ??maincsm_onmessage_1:
   \   000001A8   4E1D6217           DC32     0x17621d4e
   \   000001AC   ........           DC32     CheckDoubleRun
   \   000001B0   ........           DC32     successed_config_filename
   1010              }
   1011            }
   1012            
   1013          #ifdef EL71  
   1014            if (msg->msg==0x1AB) //SLIDER.Сообщение приходит только для активного CSM
   1015              switch(msg->submess)
   1016              {
   1017              case 3://закрыт    
   1018                break;
   1019              case 4://открыт     
   1020                break;
   1021              case 5://вверх       
   1022                break;
   1023              case 6://вниз
   1024                ipc.name_to=ipc_xtask_name;
   1025                ipc.name_from=ipc_my_name;
   1026                ipc.data=(void*)maincsm_id;
   1027                GBS_SendMessage(MMI_CEPID,MSG_IPC,IPC_XTASK_IDLE,&ipc);
   1028                break;
   1029              }
   1030          #endif  
   1031            
   1032            return(1);
   1033          }
   1034          
   1035          //******************************************************************************
   1036          

   \                                 In segment CODE, align 4, keep-with-next
   1037          static int socket_data_read_handler(CONNDATA *conn)
   1038          {
   \                     socket_data_read_handler:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   1039            char s[32];
   1040            
   1041            if (HTTP_HEADER_LENGTH == 0 && conn->TOTALRECEIVED)
   \   00000004   ........           LDR      R4,??DataTable46  ;; ipc_my_name
   \   00000008   ........           LDR      R6,??DataTable47  ;; HTTP_HEADER_LENGTH
   \   0000000C   20D04DE2           SUB      SP,SP,#+32
   \   00000010   0050A0E1           MOV      R5,R0
   \   00000014   000096E5           LDR      R0,[R6, #+0]
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0900001A           BNE      ??socket_data_read_handler_0
   \   00000020   6C0095E5           LDR      R0,[R5, #+108]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0600000A           BEQ      ??socket_data_read_handler_0
   1042            {
   1043              if (ParseHeader() == 0)
   \   0000002C   ........           _BLF     ParseHeader,??ParseHeader??rA
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0300001A           BNE      ??socket_data_read_handler_0
   1044              {
   1045                sprintf(logmsg, "Получен не HTTP формат");
   \   00000038   ........           LDR      R0,??DataTable48  ;; logmsg
   \   0000003C   2C1084E2           ADD      R1,R4,#+44
   \   00000040   160000EF           SWI      +22
   1046                SMART_REDRAW();
   \   00000044   ........           _BLF     SMART_REDRAW,??SMART_REDRAW??rA
   1047              }
   1048            }
   1049             
   1050            if (conn->TOTALRECEIVED >= HTTP_HEADER_LENGTH + HTTP_CONTENT_LENGTH)//все данные получены
   \                     ??socket_data_read_handler_0:
   \   00000048   ........           LDR      R2,??DataTable49  ;; HTTP_CONTENT_LENGTH
   \   0000004C   6C0095E5           LDR      R0,[R5, #+108]
   \   00000050   001096E5           LDR      R1,[R6, #+0]
   \   00000054   002092E5           LDR      R2,[R2, #+0]
   \   00000058   011082E0           ADD      R1,R2,R1
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   2D0000BA           BLT      ??socket_data_read_handler_1
   1051            {   
   1052              if (HTTP_CONNECTION == 0)
   \   00000064   BC009FE5           LDR      R0,??socket_data_read_handler_2  ;; HTTP_CONNECTION
   \   00000068   000090E5           LDR      R0,[R0, #+0]
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   0A00001A           BNE      ??socket_data_read_handler_3
   1053              {
   1054                if (strncmp(HTTP_URL, "https://", 8)==0)
   \   00000074   ........           LDR      R0,??DataTable50  ;; HTTP_URL
   \   00000078   0820A0E3           MOV      R2,#+8
   \   0000007C   041084E2           ADD      R1,R4,#+4
   \   00000080   150100EF           SWI      +277
   \   00000084   000050E3           CMP      R0,#+0
   \   00000088   0200001A           BNE      ??socket_data_read_handler_4
   1055                  end_ssl(conn);
   \   0000008C   0500A0E1           MOV      R0,R5
   \   00000090   ........           _BLF     end_ssl,??end_ssl??rA
   \   00000094   010000EA           B        ??socket_data_read_handler_3
   1056                else
   1057                  end_socket(conn->sock);
   \                     ??socket_data_read_handler_4:
   \   00000098   4C0095E5           LDR      R0,[R5, #+76]
   \   0000009C   ........           _BLF     end_socket,??end_socket??rA
   1058              }
   1059              
   1060              if (HTTP_STATUS == 200 || HTTP_STATUS == 401)
   \                     ??socket_data_read_handler_3:
   \   000000A0   84009FE5           LDR      R0,??socket_data_read_handler_2+0x4  ;; HTTP_STATUS
   \   000000A4   002090E5           LDR      R2,[R0, #+0]
   \   000000A8   0000A0E3           MOV      R0,#+0
   \   000000AC   C80052E3           CMP      R2,#+200
   \   000000B0   0300000A           BEQ      ??socket_data_read_handler_5
   \   000000B4   9110A0E3           MOV      R1,#+145
   \   000000B8   401F81E3           ORR      R1,R1,#0x100
   \   000000BC   010052E1           CMP      R2,R1
   \   000000C0   0A00001A           BNE      ??socket_data_read_handler_6
   1061                {
   1062                  ipc.name_to = ipc_my_name;
   \                     ??socket_data_read_handler_5:
   \   000000C4   ........           LDR      R3,??DataTable51  ;; ipc
   1063                  ipc.name_from = ipc_my_name;
   1064                  ipc.data = 0;
   1065                  GBS_SendMessage(MMI_CEPID, MSG_IPC, IPC_RUN_MAIN_PROCESS, &ipc);        
   \   000000C8   0420A0E3           MOV      R2,#+4
   \   000000CC   004083E5           STR      R4,[R3, #+0]
   \   000000D0   044083E5           STR      R4,[R3, #+4]
   \   000000D4   080083E5           STR      R0,[R3, #+8]
   \   000000D8   B010A0E3           MOV      R1,#+176
   \   000000DC   DE1C81E3           ORR      R1,R1,#0xDE00
   \   000000E0   0900A0E3           MOV      R0,#+9
   \   000000E4   420C80E3           ORR      R0,R0,#0x4200
   \   000000E8   000100EF           SWI      +256
   \   000000EC   070000EA           B        ??socket_data_read_handler_7
   1066                }
   1067              else
   1068              {
   1069                INET_PROCESS = 0;
   \                     ??socket_data_read_handler_6:
   \   000000F0   ........           LDR      R1,??DataTable54  ;; INET_PROCESS
   \   000000F4   000081E5           STR      R0,[R1, #+0]
   1070                sprintf(s, "Bad HTTP status: %d", HTTP_STATUS);
   \   000000F8   441084E2           ADD      R1,R4,#+68
   \   000000FC   0D00A0E1           MOV      R0,SP
   \   00000100   160000EF           SWI      +22
   1071                ShowMSG(1,(int)s);
   \   00000104   0D10A0E1           MOV      R1,SP
   \   00000108   0100A0E3           MOV      R0,#+1
   \   0000010C   480100EF           SWI      +328
   1072              }
   1073              
   1074              return (1);
   \                     ??socket_data_read_handler_7:
   \   00000110   0100A0E3           MOV      R0,#+1
   \   00000114   20D08DE2           ADD      SP,SP,#+32
   \   00000118   7080BDE8           POP      {R4-R6,PC}
   1075            }
   1076            return (0);
   \                     ??socket_data_read_handler_1:
   \   0000011C   0000A0E3           MOV      R0,#+0
   \   00000120   20D08DE2           ADD      SP,SP,#+32
   \   00000124   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??socket_data_read_handler_2:
   \   00000128   ........           DC32     HTTP_CONNECTION
   \   0000012C   ........           DC32     HTTP_STATUS
   1077          }
   1078          
   1079          //------------------------------------------------------------------------------
   1080          

   \                                 In segment CODE, align 4, keep-with-next
   1081          static void socket_remote_closed_handler(short sock)
   1082          {
   1083              INET_PROCESS=0;
   \                     socket_remote_closed_handler:
   \   00000000   ........           LDR      R0,??DataTable54  ;; INET_PROCESS
   \   00000004   0010A0E3           MOV      R1,#+0
   \   00000008   001080E5           STR      R1,[R0, #+0]
   1084              //повторяем предыдущий запрос
   1085              //if (strncmp(HTTP_URL, "https://", 8)==0)
   1086                //SUBPROC((void*)send_ssl_answer, 0);
   1087              //else
   1088                //SUBPROC((void*)send_answer, 0);
   1089          }
   \   0000000C   1EFF2FE1           BX       LR               ;; return
   1090          
   1091          //------------------------------------------------------------------------------
   1092          

   \                                 In segment CODE, align 4, keep-with-next
   1093          static void socket_error_handler(int err)
   1094          {
   \                     socket_error_handler:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1095            AnimWidget_Close();
   \   00000008   ........           _BLF     AnimWidget_Close,??AnimWidget_Close??rA
   1096            //send_req2(HTTP_URL, 1);
   1097            switch(err)
   \   0000000C   ........           LDR      R0,??DataTable54  ;; INET_PROCESS
   \   00000010   5C109FE5           LDR      R1,??socket_error_handler_1  ;; `?<Constant "ERROR_READ_TIMEOUT">`
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   024044E2           SUB      R4,R4,#+2
   \   0000001C   080054E3           CMP      R4,#+8
   \   00000020   1080BD88           POPHI    {R4,PC}
   \   00000024   013F8FE2           ADR      R3,??socket_error_handler_0
   \   00000028   0430D3E7           LDRB     R3,[R3, R4]
   \   0000002C   03F18FE0           ADD      PC,PC,R3, LSL #+2
   \                     ??socket_error_handler_0:
   \   00000030   080C0F0F           DC8      +8,+12,+15,+15
   \   00000034   020F0402           DC8      +2,+15,+4,+2
   \   00000038   02000000           DC8      +2,+0,+0,+0
   1098            {
   1099            case ERROR_SSL_CONNECTION:
   1100              INET_PROCESS=0;
   \                     ??socket_error_handler_2:
   \   0000003C   002080E5           STR      R2,[R0, #+0]
   \   00000040   1080BDE8           POP      {R4,PC}
   1101              break;
   1102              
   1103            case ERROR_SSL_CONNECT_TIMEOUT:
   1104              INET_PROCESS=0;
   1105              break;
   1106              
   1107            case ERROR_WRITE:
   1108              INET_PROCESS=0;
   1109              //ShowMSG(1, (int)"ERROR_WRITE");
   1110              break;
   1111              
   1112            case ERROR_READ_TIMEOUT:
   1113              INET_PROCESS=0;
   \                     ??socket_error_handler_3:
   \   00000044   002080E5           STR      R2,[R0, #+0]
   1114              ShowMSG(1, (int)"ERROR_READ_TIMEOUT");
   \   00000048   0100A0E3           MOV      R0,#+1
   \   0000004C   480100EF           SWI      +328
   \   00000050   1080BDE8           POP      {R4,PC}
   1115              break;  
   1116              
   1117            case CONNECT_FAULT:
   1118              ShowMSG(1, (int)"CONNECT_FAULT");
   \                     ??socket_error_handler_4:
   \   00000054   141081E2           ADD      R1,R1,#+20
   \   00000058   0100A0E3           MOV      R0,#+1
   \   0000005C   480100EF           SWI      +328
   \   00000060   1080BDE8           POP      {R4,PC}
   1119              break;
   1120              
   1121            case ERROR_CREATE_SOCK:
   1122              ShowMSG(1, (int)"ERROR_CREATE_SOCK");    
   \                     ??socket_error_handler_5:
   \   00000064   241081E2           ADD      R1,R1,#+36
   \   00000068   0100A0E3           MOV      R0,#+1
   \   0000006C   480100EF           SWI      +328
   1123              break;
   1124              
   1125            case WAITING_FOR_GPRS_UP:
   1126              //ShowMSG(1, (int)"WAITING_FOR_GPRS_UP"); 
   1127              break;
   1128              
   1129            case GPRS_OFFLINE:
   1130              break;
   1131              
   1132            case GPRS_ONLINE:
   1133              //ShowMSG(1, (int)"GPRS_ONLINE"); 
   1134              break;     
   1135            }
   1136           
   1137          }
   \                     ??socket_error_handler_6:
   \   00000070   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??socket_error_handler_1:
   \   00000074   ........           DC32     `?<Constant "ERROR_READ_TIMEOUT">`
   1138          
   1139          //******************************************************************************
   1140          

   \                                 In segment DATA_Z, align 4, align-sorted
   1141          static unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280

   \                                 In segment DATA_C, align 4, align-sorted
   \                     percent_t:
   \   00000000   257400             DC8 "%t"
   \   00000003   00                 DC8 0
   \   00000004   C2EAEEEDF2E0       DC8 "\302\352\356\355\362\340\352\362\345"
   \              EAF2E500    
   \   0000000E   0000               DC8 0, 0
   \   00000010   ............       DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
   \              ....00000000
   \              000000000000
   \              000000000000
   \              ........    
   \   0000002C   440000000100       DC32 68, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              0000........
   \              ........CCCC
   \              AA5555AA3333
   \              00000000    
   \   00000048   8B00               DC16 139
   \   0000004A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "TEST_SSL_CON ok!">`:
   \   00000000   544553545F53       DC8 "TEST_SSL_CON ok!"
   \              534C5F434F4E
   \              206F6B2100  
   \   00000011   000000             DC8 0, 0, 0
   \   00000014   546F6B656E20       DC8 "Token readed!"
   \              726561646564
   \              2100        
   \   00000022   0000               DC8 0, 0
   \   00000024   6A534F4E2070       DC8 "jSON psrser error!"
   \              737273657220
   \              6572726F7221
   \              00          
   \   00000037   00                 DC8 0
   \   00000038   696D6167652F       DC8 "image/png"
   \              706E6700    
   \   00000042   0000               DC8 0, 0
   \   00000044   257363616368       DC8 "%scache\\attachment.%s"
   \              655C61747461
   \              63686D656E74
   \              2E257300    
   \   0000005A   0000               DC8 0, 0
   \   0000005C   696D6167652F       DC8 "image/"
   \              00          
   \   00000063   00                 DC8 0
   \   00000064   6A706700           DC8 "jpg"
   \   00000068   706E6700           DC8 "png"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     ipc_my_name:
   \   00000000   564B00             DC8 "VK"
   \   00000003   00                 DC8 0
   \   00000004   68747470733A       DC8 "https://"
   \              2F2F00      
   \   0000000D   000000             DC8 0, 0, 0
   \   00000010   564B2E454C46       DC8 "VK.ELF:\012\352\356\355\364\350\343 \356\341\355\356\342\353\345\355!"
   \              3A0AEAEEEDF4
   \              E8E320EEE1ED
   \              EEE2EBE5ED21
   \              00          
   \   00000029   000000             DC8 0, 0, 0
   \   0000002C   CFEEEBF3F7E5       DC8 "\317\356\353\363\367\345\355 \355\345 HTTP \364\356\360\354\340\362"
   \              ED20EDE52048
   \              54545020F4EE
   \              F0ECE0F200  
   \   00000043   00                 DC8 0
   \   00000044   426164204854       DC8 "Bad HTTP status: %d"
   \              545020737461
   \              7475733A2025
   \              6400        
   \                     ipc_xtask_name:
   \   00000058   585461736B00       DC8 "XTask"
   \   0000005E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11
   1142          
   1143          static const struct
   1144          {
   1145            CSM_DESC maincsm;
   1146            WSHDR maincsm_name;
   1147          }MAINCSM =
   1148          {
   1149            {
   1150            maincsm_onmessage,
   1151            maincsm_oncreate,
   1152          #ifdef NEWSGOLD
   1153            0,
   1154            0,
   1155            0,
   1156            0,
   1157          #endif
   1158            maincsm_onclose,
   1159            sizeof(MAIN_CSM),
   1160            1,
   1161            &minus11
   1162            },
   1163            {
   1164              maincsm_name_body,
   1165              NAMECSM_MAGIC1,
   1166              NAMECSM_MAGIC2,
   1167              0x0,
   1168              139
   1169            }
   1170          };
   1171          
   1172          static void UpdateCSMname(void)
   1173          {
   1174            wsprintf((WSHDR *)(&MAINCSM.maincsm_name), percent_t,"Вконтакте");
   1175          }
   1176          
   1177          //******************************************************************************
   1178          

   \                                 In segment CODE, align 4, keep-with-next
   1179          int main(char *exename, char *fname)
   1180          {
   1181            MAIN_CSM main_csm;
   1182          
   1183            socket_work_init((void*)socket_error_handler, (void*)socket_data_read_handler, (void*)socket_remote_closed_handler);
   \                     main:
   \   00000000   60209FE5           LDR      R2,??main_0      ;; socket_remote_closed_handler
   \   00000004   60109FE5           LDR      R1,??main_0+0x4  ;; socket_data_read_handler
   \   00000008   60009FE5           LDR      R0,??main_0+0x8  ;; socket_error_handler
   \   0000000C   10402DE9           PUSH     {R4,LR}
   1184            
   1185            InitConfig();
   1186            zeromem(&main_csm, sizeof(MAIN_CSM));
   1187            LockSched();
   1188            UpdateCSMname();
   \   00000010   5C409FE5           LDR      R4,??main_0+0xC  ;; percent_t
   \   00000014   44D04DE2           SUB      SP,SP,#+68
   \   00000018   ........           _BLF     socket_work_init,??socket_work_init??rA
   \   0000001C   ........           _BLF     InitConfig,??InitConfig??rA
   \   00000020   4410A0E3           MOV      R1,#+68
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   1D0100EF           SWI      +285
   \   0000002C   460100EF           SWI      +326
   \   00000030   042084E2           ADD      R2,R4,#+4
   \   00000034   0410A0E1           MOV      R1,R4
   \   00000038   380084E2           ADD      R0,R4,#+56
   \   0000003C   240100EF           SWI      +292
   1189            maincsm_id=CreateCSM(&MAINCSM.maincsm,&main_csm, 0);
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   0D10A0E1           MOV      R1,SP
   \   00000048   100084E2           ADD      R0,R4,#+16
   \   0000004C   070100EF           SWI      +263
   \   00000050   20109FE5           LDR      R1,??main_0+0x10  ;; ipc + 16
   \   00000054   000081E5           STR      R0,[R1, #+0]
   1190            UnlockSched();
   \   00000058   470100EF           SWI      +327
   1191          
   1192            return 0;
   \   0000005C   0000A0E3           MOV      R0,#+0
   \   00000060   44D08DE2           ADD      SP,SP,#+68
   \   00000064   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??main_0:
   \   00000068   ........           DC32     socket_remote_closed_handler
   \   0000006C   ........           DC32     socket_data_read_handler
   \   00000070   ........           DC32     socket_error_handler
   \   00000074   ........           DC32     percent_t
   \   00000078   ........           DC32     ipc + 16
   1193          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   ........           DC32     dialogs

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   ........           DC32     `?<Constant "%sdialogs.json">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   ........           DC32     `?<Constant "%sgroups.json">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable33:
   \   00000000   ........           DC32     APP_DIR

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable34:
   \   00000000   ........           DC32     `?<Constant "%stoken">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable35:
   \   00000000   ........           DC32     ACCESS_TOKEN

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable36:
   \   00000000   ........           DC32     INET_PROCESS

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable40:
   \   00000000   ........           DC32     ipc

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable43:
   \   00000000   ........           DC32     ipc

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable46:
   \   00000000   ........           DC32     ipc_my_name

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable47:
   \   00000000   ........           DC32     HTTP_HEADER_LENGTH

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable48:
   \   00000000   ........           DC32     logmsg

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable49:
   \   00000000   ........           DC32     HTTP_CONTENT_LENGTH

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable50:
   \   00000000   ........           DC32     HTTP_URL

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable51:
   \   00000000   ........           DC32     ipc

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable54:
   \   00000000   ........           DC32     INET_PROCESS

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable55:
   \   00000000   ........           DC32     Cookies_SaveAndFree

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for ipc>`:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \                     `?<Initializer for ena_statistic>`:
   \   0000000C   00000000           DC32 0
   \                     `?<Initializer for maincsm_id>`:
   \   00000010   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for csm>`:
   \   00000014   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for tmr_check_new_msg>`:
   \   00000018   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for ObsEventsHandlers>`:
   \   00000028   0A000000....       DC32 10, HandleObsFrameUpdate, 12, HandleObsError, 87, 0H
   \              ....0C000000
   \              ........5700
   \              000000000000

   \                                 In segment ELFBEGIN, align 1

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%scache\\\\%d.%s">`:
   \   00000000   257363616368       DC8 "%scache\\%d.%s"
   \              655C25642E25
   \              7300        
   \   0000000E   0000               DC8 0, 0
   \   00000010   2E706E6700         DC8 ".png"
   \   00000015   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Error=%d">`:
   \   00000000   4572726F723D       DC8 "Error=%d"
   \              256400      
   \   00000009   000000             DC8 0, 0, 0
   \   0000000C   634A534F4E20       DC8 "cJSON parse error"
   \              706172736520
   \              6572726F7200
   \   0000001E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "ERROR_READ_TIMEOUT">`:
   \   00000000   4552524F525F       DC8 "ERROR_READ_TIMEOUT"
   \              524541445F54
   \              494D454F5554
   \              00          
   \   00000013   00                 DC8 0
   \   00000014   434F4E4E4543       DC8 "CONNECT_FAULT"
   \              545F4641554C
   \              5400        
   \   00000022   0000               DC8 0, 0
   \   00000024   4552524F525F       DC8 "ERROR_CREATE_SOCK"
   \              435245415445
   \              5F534F434B00
   \   00000036   0000               DC8 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   00                 DC8 ""

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   706E6700           DC8 "png"

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   6A706700           DC8 "jpg"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%sdialogs.json">`:
   \   00000000   25736469616C       DC8 "%sdialogs.json"
   \              6F67732E6A73
   \              6F6E00      
   \   0000000F   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%sgroups.json">`:
   \   00000000   257367726F75       DC8 "%sgroups.json"
   \              70732E6A736F
   \              6E00        
   \   0000000E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%stoken">`:
   \   00000000   2573746F6B65       DC8 "%stoken"
   \              6E00        
   1194          
   1195          //******************************************************************************
   1196          
   1197          //E:\Users\alfinant7\Documents\Siemens\Dev\IAR\VK.ELF_C\Send_S75.cmd

   Maximum stack usage in bytes:

     Function                     CSTACK
     --------                     ------
     CheckDoubleRun                   8
     DoError                          4
     ElfKiller                        4
     HandleObsError                   8
     HandleObsFrameUpdate            28
     LoadSavedDialogs               192
     LoadSavedGroups                192
     LoadUserPhoto                  200
     Logout                           8
     MainProcess                    452
     Play                           236
     SaveDialogs                    276
     SaveGroups                     276
     del_token                      264
     main                            76
     maincsm_onclose                  4
     maincsm_oncreate                 4
     maincsm_onmessage               28
     save_token                     272
     socket_data_read_handler        48
     socket_error_handler             8
     socket_remote_closed_handler     0
     startApp                       192
     tmr_check_new_msg_handler       20


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     tmr_check_new_msg_handler       188
     Play                            328
     LoadUserPhoto                   288
     SaveDialogs                     108
     SaveGroups                      108
     LoadSavedDialogs                192
     LoadSavedGroups                 196
     save_token                      116
     del_token                        88
     Logout                           96
     DoError                          84
     MainProcess                     820
     maincsm_oncreate                 60
     ElfKiller                        28
     maincsm_onclose                 100
     startApp                        232
     CheckDoubleRun                   96
     HandleObsFrameUpdate            208
     HandleObsError                  100
     ipc                              64
     maincsm_onmessage               436
     socket_data_read_handler        304
     socket_remote_closed_handler     16
     socket_error_handler            120
     maincsm_name_body               280
     percent_t                        76
     ?<Constant "TEST_SSL_CON ok!">  108
     ipc_my_name                      96
     minus11                           4
     main                            124
     ??DataTable9                      4
     ??DataTable11                     4
     ??DataTable13                     4
     ??DataTable33                     4
     ??DataTable34                     4
     ??DataTable35                     4
     ??DataTable36                     4
     ??DataTable40                     4
     ??DataTable43                     4
     ??DataTable46                     4
     ??DataTable47                     4
     ??DataTable48                     4
     ??DataTable49                     4
     ??DataTable50                     4
     ??DataTable51                     4
     ??DataTable54                     4
     ??DataTable55                     4
     ?<Initializer for ipc>           64
     ?<Constant "%scache\\%d.%s">     24
     ?<Constant "Error=%d">           32
     ?<Constant "ERROR_READ_TIMEOUT">
                                      56
     ?<Constant "">                    1
     ?<Constant "png">                 4
     ?<Constant "jpg">                 4
     ?<Constant "%sdialogs.json">     16
     ?<Constant "%sgroups.json">      16
     ?<Constant "%stoken">             8
      Others                         548

 
 5 028 bytes in segment CODE
   445 bytes in segment DATA_C
    64 bytes in segment DATA_I
    64 bytes in segment DATA_ID
   280 bytes in segment DATA_Z
    24 bytes in segment INITTAB
 
 4 504 bytes of CODE  memory (+ 548 bytes shared)
   509 bytes of CONST memory
   344 bytes of DATA  memory

Errors: none
Warnings: 2
