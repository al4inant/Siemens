//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   15/Mar/2023  22:35:39 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_ /
//                       C\json\cJSON.c                                      /
//    Command line    =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_ /
//                       C\json\cJSON.c -D NEWSGOLD -D DEBUG -lCN            /
//                       D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_ /
//                       C\Releas_NSG\List\ -la D:\Users\alfinant\Documents\ /
//                       Siemens\Dev\IAR\VK.ELF_C\Releas_NSG\List\ -o        /
//                       D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_ /
//                       C\Releas_NSG\Obj\ -s9 --cpu_mode arm --endian       /
//                       little --cpu ARM926EJ-S --stack_align 4             /
//                       --interwork --diag_suppress Pe301 -e --fpu None     /
//                       --dlib_config D:\Users\alfinant\Documents\Siemens\I /
//                       AR\ARM\LIB\dl5tpainl8n.h -I                         /
//                       D:\Users\alfinant\Documents\Siemens\IAR\ARM\INC\    /
//                       --inline_threshold=2                                /
//    List file       =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_ /
//                       C\Releas_NSG\List\cJSON.s79                         /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME cJSON

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__dlib_file_descriptor", "0"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        PUBWEAK `?*?DATA_ID`
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable11 EQU 0
??DataTable12 EQU 0
??DataTable13 EQU 0
??DataTable14 EQU 0
??DataTable15 EQU 0
??DataTable16 EQU 0
??DataTable17 EQU 0
??DataTable18 EQU 0
??DataTable19 EQU 0
??DataTable20 EQU 0
??DataTable21 EQU 0
??DataTable22 EQU 0
??DataTable23 EQU 0
??DataTable24 EQU 0
??DataTable25 EQU 0
??DataTable26 EQU 0
??DataTable27 EQU 0
??DataTable28 EQU 0
??DataTable29 EQU 0
??DataTable3 EQU 0
??DataTable30 EQU 0
??DataTable31 EQU 0
??DataTable32 EQU 0
??DataTable33 EQU 0
??DataTable34 EQU 0
??DataTable35 EQU 0
??DataTable36 EQU 0
??DataTable37 EQU 0
??DataTable4 EQU 0
??DataTable5 EQU 0
??DataTable6 EQU 0
??DataTable7 EQU 0
        MULTWEAK ??_Stod??rA
        MULTWEAK ??__dEqual??rA
        MULTWEAK ??__dGreaterEqual??rA
        MULTWEAK ??__dLess??rA
        MULTWEAK ??__dMul??rA
        MULTWEAK ??__dNotEqual??rA
        MULTWEAK ??__doubleToLong??rA
        MULTWEAK ??__floatToDouble??rA
        MULTWEAK ??__longToDouble??rA
        MULTWEAK ??cJSON_AddArrayToObject??rT
        MULTWEAK ??cJSON_AddBoolToObject??rT
        MULTWEAK ??cJSON_AddFalseToObject??rT
        MULTWEAK ??cJSON_AddItemReferenceToArray??rT
        MULTWEAK ??cJSON_AddItemReferenceToObject??rT
        MULTWEAK ??cJSON_AddItemToArray??rT
        MULTWEAK ??cJSON_AddItemToObject??rT
        MULTWEAK ??cJSON_AddItemToObjectCS??rT
        MULTWEAK ??cJSON_AddNullToObject??rT
        MULTWEAK ??cJSON_AddNumberToObject??rT
        MULTWEAK ??cJSON_AddObjectToObject??rT
        MULTWEAK ??cJSON_AddRawToObject??rT
        MULTWEAK ??cJSON_AddStringToObject??rT
        MULTWEAK ??cJSON_AddTrueToObject??rT
        MULTWEAK ??cJSON_Compare??rT
        MULTWEAK ??cJSON_CreateArray??rT
        MULTWEAK ??cJSON_CreateArrayReference??rT
        MULTWEAK ??cJSON_CreateBool??rT
        MULTWEAK ??cJSON_CreateDoubleArray??rT
        MULTWEAK ??cJSON_CreateFalse??rT
        MULTWEAK ??cJSON_CreateFloatArray??rT
        MULTWEAK ??cJSON_CreateIntArray??rT
        MULTWEAK ??cJSON_CreateNull??rT
        MULTWEAK ??cJSON_CreateNumber??rT
        MULTWEAK ??cJSON_CreateObject??rT
        MULTWEAK ??cJSON_CreateObjectReference??rT
        MULTWEAK ??cJSON_CreateRaw??rT
        MULTWEAK ??cJSON_CreateString??rT
        MULTWEAK ??cJSON_CreateStringArray??rT
        MULTWEAK ??cJSON_CreateStringReference??rT
        MULTWEAK ??cJSON_CreateTrue??rT
        MULTWEAK ??cJSON_Delete??rT
        MULTWEAK ??cJSON_DeleteItemFromArray??rT
        MULTWEAK ??cJSON_DeleteItemFromObject??rT
        MULTWEAK ??cJSON_DeleteItemFromObjectCaseSensitive??rT
        MULTWEAK ??cJSON_DetachItemFromArray??rT
        MULTWEAK ??cJSON_DetachItemFromObject??rT
        MULTWEAK ??cJSON_DetachItemFromObjectCaseSensitive??rT
        MULTWEAK ??cJSON_DetachItemViaPointer??rT
        MULTWEAK ??cJSON_Duplicate??rT
        MULTWEAK ??cJSON_GetArrayItem??rT
        MULTWEAK ??cJSON_GetArraySize??rT
        MULTWEAK ??cJSON_GetErrorPtr??rT
        MULTWEAK ??cJSON_GetObjectItem??rT
        MULTWEAK ??cJSON_GetObjectItemCaseSensitive??rT
        MULTWEAK ??cJSON_GetStringValue??rT
        MULTWEAK ??cJSON_HasObjectItem??rT
        MULTWEAK ??cJSON_InitHooks??rT
        MULTWEAK ??cJSON_InsertItemInArray??rT
        MULTWEAK ??cJSON_IsArray??rT
        MULTWEAK ??cJSON_IsBool??rT
        MULTWEAK ??cJSON_IsFalse??rT
        MULTWEAK ??cJSON_IsInvalid??rT
        MULTWEAK ??cJSON_IsNull??rT
        MULTWEAK ??cJSON_IsNumber??rT
        MULTWEAK ??cJSON_IsObject??rT
        MULTWEAK ??cJSON_IsRaw??rT
        MULTWEAK ??cJSON_IsString??rT
        MULTWEAK ??cJSON_IsTrue??rT
        MULTWEAK ??cJSON_Minify??rT
        MULTWEAK ??cJSON_Parse??rT
        MULTWEAK ??cJSON_ParseWithOpts??rT
        MULTWEAK ??cJSON_Print??rT
        MULTWEAK ??cJSON_PrintBuffered??rT
        MULTWEAK ??cJSON_PrintPreallocated??rT
        MULTWEAK ??cJSON_PrintUnformatted??rT
        MULTWEAK ??cJSON_ReplaceItemInArray??rT
        MULTWEAK ??cJSON_ReplaceItemInObject??rT
        MULTWEAK ??cJSON_ReplaceItemInObjectCaseSensitive??rT
        MULTWEAK ??cJSON_ReplaceItemViaPointer??rT
        MULTWEAK ??cJSON_SetNumberHelper??rT
        MULTWEAK ??cJSON_Version??rT
        MULTWEAK ??cJSON_free??rT
        MULTWEAK ??cJSON_malloc??rT
??default_buffer_size EQU 0
        MULTWEAK ??tolower??rA
        PUBWEAK ?init?tab?DATA_I
        PUBWEAK ?init?tab?DATA_Z
        FUNCTION add_item_to_array,0203H
        FUNCTION add_item_to_object,0203H
        LOCFRAME CSTACK, 24, STACK
        FUNCTION buffer_skip_whitespace,0203H
        PUBLIC cJSON_AddArrayToObject
        FUNCTION cJSON_AddArrayToObject,0203H
        LOCFRAME CSTACK, 20, STACK
        PUBLIC cJSON_AddBoolToObject
        FUNCTION cJSON_AddBoolToObject,0203H
        LOCFRAME CSTACK, 20, STACK
        PUBLIC cJSON_AddFalseToObject
        FUNCTION cJSON_AddFalseToObject,0203H
        LOCFRAME CSTACK, 20, STACK
        PUBLIC cJSON_AddItemReferenceToArray
        FUNCTION cJSON_AddItemReferenceToArray,0203H
        LOCFRAME CSTACK, 16, STACK
        PUBLIC cJSON_AddItemReferenceToObject
        FUNCTION cJSON_AddItemReferenceToObject,0203H
        LOCFRAME CSTACK, 32, STACK
        PUBLIC cJSON_AddItemToArray
        FUNCTION cJSON_AddItemToArray,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC cJSON_AddItemToObject
        FUNCTION cJSON_AddItemToObject,0203H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC cJSON_AddItemToObjectCS
        FUNCTION cJSON_AddItemToObjectCS,0203H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC cJSON_AddNullToObject
        FUNCTION cJSON_AddNullToObject,0203H
        LOCFRAME CSTACK, 20, STACK
        PUBLIC cJSON_AddNumberToObject
        FUNCTION cJSON_AddNumberToObject,0203H
        LOCFRAME CSTACK, 20, STACK
        PUBLIC cJSON_AddObjectToObject
        FUNCTION cJSON_AddObjectToObject,0203H
        LOCFRAME CSTACK, 20, STACK
        PUBLIC cJSON_AddRawToObject
        FUNCTION cJSON_AddRawToObject,0203H
        LOCFRAME CSTACK, 20, STACK
        PUBLIC cJSON_AddStringToObject
        FUNCTION cJSON_AddStringToObject,0203H
        LOCFRAME CSTACK, 20, STACK
        PUBLIC cJSON_AddTrueToObject
        FUNCTION cJSON_AddTrueToObject,0203H
        LOCFRAME CSTACK, 20, STACK
        PUBLIC cJSON_Compare
        FUNCTION cJSON_Compare,0203H
        LOCFRAME CSTACK, 24, STACK
        PUBLIC cJSON_CreateArray
        FUNCTION cJSON_CreateArray,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC cJSON_CreateArrayReference
        FUNCTION cJSON_CreateArrayReference,0203H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC cJSON_CreateBool
        FUNCTION cJSON_CreateBool,0203H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC cJSON_CreateDoubleArray
        FUNCTION cJSON_CreateDoubleArray,0203H
        LOCFRAME CSTACK, 24, STACK
        PUBLIC cJSON_CreateFalse
        FUNCTION cJSON_CreateFalse,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC cJSON_CreateFloatArray
        FUNCTION cJSON_CreateFloatArray,0203H
        LOCFRAME CSTACK, 24, STACK
        PUBLIC cJSON_CreateIntArray
        FUNCTION cJSON_CreateIntArray,0203H
        LOCFRAME CSTACK, 24, STACK
        PUBLIC cJSON_CreateNull
        FUNCTION cJSON_CreateNull,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC cJSON_CreateNumber
        FUNCTION cJSON_CreateNumber,0203H
        LOCFRAME CSTACK, 16, STACK
        PUBLIC cJSON_CreateObject
        FUNCTION cJSON_CreateObject,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC cJSON_CreateObjectReference
        FUNCTION cJSON_CreateObjectReference,0203H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC cJSON_CreateRaw
        FUNCTION cJSON_CreateRaw,0203H
        LOCFRAME CSTACK, 16, STACK
        PUBLIC cJSON_CreateString
        FUNCTION cJSON_CreateString,0203H
        LOCFRAME CSTACK, 16, STACK
        PUBLIC cJSON_CreateStringArray
        FUNCTION cJSON_CreateStringArray,0203H
        LOCFRAME CSTACK, 24, STACK
        PUBLIC cJSON_CreateStringReference
        FUNCTION cJSON_CreateStringReference,0203H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC cJSON_CreateTrue
        FUNCTION cJSON_CreateTrue,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC cJSON_Delete
        FUNCTION cJSON_Delete,0203H
        LOCFRAME CSTACK, 16, STACK
        PUBLIC cJSON_DeleteItemFromArray
        FUNCTION cJSON_DeleteItemFromArray,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC cJSON_DeleteItemFromObject
        FUNCTION cJSON_DeleteItemFromObject,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC cJSON_DeleteItemFromObjectCaseSensitive
        FUNCTION cJSON_DeleteItemFromObjectCaseSensitive,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC cJSON_DetachItemFromArray
        FUNCTION cJSON_DetachItemFromArray,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC cJSON_DetachItemFromObject
        FUNCTION cJSON_DetachItemFromObject,0203H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC cJSON_DetachItemFromObjectCaseSensitive
        FUNCTION cJSON_DetachItemFromObjectCaseSensitive,0203H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC cJSON_DetachItemViaPointer
        FUNCTION cJSON_DetachItemViaPointer,0203H
        PUBLIC cJSON_Duplicate
        FUNCTION cJSON_Duplicate,0203H
        LOCFRAME CSTACK, 24, STACK
        PUBLIC cJSON_GetArrayItem
        FUNCTION cJSON_GetArrayItem,0203H
        PUBLIC cJSON_GetArraySize
        FUNCTION cJSON_GetArraySize,0203H
        PUBLIC cJSON_GetErrorPtr
        FUNCTION cJSON_GetErrorPtr,0203H
        PUBLIC cJSON_GetObjectItem
        FUNCTION cJSON_GetObjectItem,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC cJSON_GetObjectItemCaseSensitive
        FUNCTION cJSON_GetObjectItemCaseSensitive,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC cJSON_GetStringValue
        FUNCTION cJSON_GetStringValue,0203H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC cJSON_HasObjectItem
        FUNCTION cJSON_HasObjectItem,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC cJSON_InitHooks
        FUNCTION cJSON_InitHooks,0203H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC cJSON_InsertItemInArray
        FUNCTION cJSON_InsertItemInArray,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC cJSON_IsArray
        FUNCTION cJSON_IsArray,0203H
        PUBLIC cJSON_IsBool
        FUNCTION cJSON_IsBool,0203H
        PUBLIC cJSON_IsFalse
        FUNCTION cJSON_IsFalse,0203H
        PUBLIC cJSON_IsInvalid
        FUNCTION cJSON_IsInvalid,0203H
        PUBLIC cJSON_IsNull
        FUNCTION cJSON_IsNull,0203H
        PUBLIC cJSON_IsNumber
        FUNCTION cJSON_IsNumber,0203H
        PUBLIC cJSON_IsObject
        FUNCTION cJSON_IsObject,0203H
        PUBLIC cJSON_IsRaw
        FUNCTION cJSON_IsRaw,0203H
        PUBLIC cJSON_IsString
        FUNCTION cJSON_IsString,0203H
        PUBLIC cJSON_IsTrue
        FUNCTION cJSON_IsTrue,0203H
        PUBLIC cJSON_Minify
        FUNCTION cJSON_Minify,0203H
        FUNCTION cJSON_New_Item,0203H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC cJSON_Parse
        FUNCTION cJSON_Parse,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC cJSON_ParseWithOpts
        FUNCTION cJSON_ParseWithOpts,0203H
        LOCFRAME CSTACK, 56, STACK
        PUBLIC cJSON_Print
        FUNCTION cJSON_Print,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC cJSON_PrintBuffered
        FUNCTION cJSON_PrintBuffered,0203H
        LOCFRAME CSTACK, 56, STACK
        PUBLIC cJSON_PrintPreallocated
        FUNCTION cJSON_PrintPreallocated,0203H
        LOCFRAME CSTACK, 52, STACK
        PUBLIC cJSON_PrintUnformatted
        FUNCTION cJSON_PrintUnformatted,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC cJSON_ReplaceItemInArray
        FUNCTION cJSON_ReplaceItemInArray,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC cJSON_ReplaceItemInObject
        FUNCTION cJSON_ReplaceItemInObject,0203H
        LOCFRAME CSTACK, 20, STACK
        PUBLIC cJSON_ReplaceItemInObjectCaseSensitive
        FUNCTION cJSON_ReplaceItemInObjectCaseSensitive,0203H
        LOCFRAME CSTACK, 20, STACK
        PUBLIC cJSON_ReplaceItemViaPointer
        FUNCTION cJSON_ReplaceItemViaPointer,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC cJSON_SetNumberHelper
        FUNCTION cJSON_SetNumberHelper,0203H
        LOCFRAME CSTACK, 16, STACK
        PUBLIC cJSON_Version
        FUNCTION cJSON_Version,0203H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC cJSON_free
        FUNCTION cJSON_free,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC cJSON_malloc
        FUNCTION cJSON_malloc,0203H
        LOCFRAME CSTACK, 4, STACK
        FUNCTION cJSON_strdup,0203H
        LOCFRAME CSTACK, 16, STACK
        FUNCTION ensure,0203H
        LOCFRAME CSTACK, 16, STACK
        FUNCTION get_object_item,0203H
        LOCFRAME CSTACK, 24, STACK
        FUNCTION internal_free,0603H
        LOCFRAME CSTACK, 4, STACK
        FUNCTION internal_malloc,0603H
        LOCFRAME CSTACK, 4, STACK
        FUNCTION internal_realloc,0603H
        LOCFRAME CSTACK, 4, STACK
        FUNCTION parse_array,0203H
        LOCFRAME CSTACK, 20, STACK
        FUNCTION parse_number,0203H
        LOCFRAME CSTACK, 88, STACK
        FUNCTION parse_object,0203H
        LOCFRAME CSTACK, 24, STACK
        FUNCTION parse_string,0203H
        LOCFRAME CSTACK, 40, STACK
        FUNCTION parse_value,0203H
        LOCFRAME CSTACK, 20, STACK
        FUNCTION print,0203H
        LOCFRAME CSTACK, 60, STACK
        FUNCTION print_array,0203H
        LOCFRAME CSTACK, 20, STACK
        FUNCTION print_number,0203H
        LOCFRAME CSTACK, 60, STACK
        FUNCTION print_object,0203H
        LOCFRAME CSTACK, 32, STACK
        FUNCTION print_string_ptr,0203H
        LOCFRAME CSTACK, 28, STACK
        FUNCTION print_value,0203H
        LOCFRAME CSTACK, 16, STACK
        FUNCTION update_offset,0203H
        LOCFRAME CSTACK, 8, STACK
        FUNCTION utf16_literal_to_utf8,0203H
        LOCFRAME CSTACK, 16, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
_Stod               SYMBOL "_Stod"
__dEqual            SYMBOL "__dEqual"
__dGreaterEqual     SYMBOL "__dGreaterEqual"
__dLess             SYMBOL "__dLess"
__dMul              SYMBOL "__dMul"
__dNotEqual         SYMBOL "__dNotEqual"
__doubleToLong      SYMBOL "__doubleToLong"
__floatToDouble     SYMBOL "__floatToDouble"
__longToDouble      SYMBOL "__longToDouble"
tolower             SYMBOL "tolower"
??_Stod??rA         SYMBOL "??rA", _Stod
??__dEqual??rA      SYMBOL "??rA", __dEqual
??__dGreaterEqual??rA SYMBOL "??rA", __dGreaterEqual
??__dLess??rA       SYMBOL "??rA", __dLess
??__dMul??rA        SYMBOL "??rA", __dMul
??__dNotEqual??rA   SYMBOL "??rA", __dNotEqual
??__doubleToLong??rA SYMBOL "??rA", __doubleToLong
??__floatToDouble??rA SYMBOL "??rA", __floatToDouble
??__longToDouble??rA SYMBOL "??rA", __longToDouble
cJSON_AddArrayToObject SYMBOL "cJSON_AddArrayToObject"
??cJSON_AddArrayToObject??rT SYMBOL "??rT", cJSON_AddArrayToObject
cJSON_AddBoolToObject SYMBOL "cJSON_AddBoolToObject"
??cJSON_AddBoolToObject??rT SYMBOL "??rT", cJSON_AddBoolToObject
cJSON_AddFalseToObject SYMBOL "cJSON_AddFalseToObject"
??cJSON_AddFalseToObject??rT SYMBOL "??rT", cJSON_AddFalseToObject
cJSON_AddItemReferenceToArray SYMBOL "cJSON_AddItemReferenceToArray"
??cJSON_AddItemReferenceToArray??rT SYMBOL "??rT", cJSON_AddItemReferenceToArray
cJSON_AddItemReferenceToObject SYMBOL "cJSON_AddItemReferenceToObject"
??cJSON_AddItemReferenceToObject??rT SYMBOL "??rT", cJSON_AddItemReferenceToObject
cJSON_AddItemToArray SYMBOL "cJSON_AddItemToArray"
??cJSON_AddItemToArray??rT SYMBOL "??rT", cJSON_AddItemToArray
cJSON_AddItemToObject SYMBOL "cJSON_AddItemToObject"
??cJSON_AddItemToObject??rT SYMBOL "??rT", cJSON_AddItemToObject
cJSON_AddItemToObjectCS SYMBOL "cJSON_AddItemToObjectCS"
??cJSON_AddItemToObjectCS??rT SYMBOL "??rT", cJSON_AddItemToObjectCS
cJSON_AddNullToObject SYMBOL "cJSON_AddNullToObject"
??cJSON_AddNullToObject??rT SYMBOL "??rT", cJSON_AddNullToObject
cJSON_AddNumberToObject SYMBOL "cJSON_AddNumberToObject"
??cJSON_AddNumberToObject??rT SYMBOL "??rT", cJSON_AddNumberToObject
cJSON_AddObjectToObject SYMBOL "cJSON_AddObjectToObject"
??cJSON_AddObjectToObject??rT SYMBOL "??rT", cJSON_AddObjectToObject
cJSON_AddRawToObject SYMBOL "cJSON_AddRawToObject"
??cJSON_AddRawToObject??rT SYMBOL "??rT", cJSON_AddRawToObject
cJSON_AddStringToObject SYMBOL "cJSON_AddStringToObject"
??cJSON_AddStringToObject??rT SYMBOL "??rT", cJSON_AddStringToObject
cJSON_AddTrueToObject SYMBOL "cJSON_AddTrueToObject"
??cJSON_AddTrueToObject??rT SYMBOL "??rT", cJSON_AddTrueToObject
cJSON_Compare       SYMBOL "cJSON_Compare"
??cJSON_Compare??rT SYMBOL "??rT", cJSON_Compare
cJSON_CreateArray   SYMBOL "cJSON_CreateArray"
??cJSON_CreateArray??rT SYMBOL "??rT", cJSON_CreateArray
cJSON_CreateArrayReference SYMBOL "cJSON_CreateArrayReference"
??cJSON_CreateArrayReference??rT SYMBOL "??rT", cJSON_CreateArrayReference
cJSON_CreateBool    SYMBOL "cJSON_CreateBool"
??cJSON_CreateBool??rT SYMBOL "??rT", cJSON_CreateBool
cJSON_CreateDoubleArray SYMBOL "cJSON_CreateDoubleArray"
??cJSON_CreateDoubleArray??rT SYMBOL "??rT", cJSON_CreateDoubleArray
cJSON_CreateFalse   SYMBOL "cJSON_CreateFalse"
??cJSON_CreateFalse??rT SYMBOL "??rT", cJSON_CreateFalse
cJSON_CreateFloatArray SYMBOL "cJSON_CreateFloatArray"
??cJSON_CreateFloatArray??rT SYMBOL "??rT", cJSON_CreateFloatArray
cJSON_CreateIntArray SYMBOL "cJSON_CreateIntArray"
??cJSON_CreateIntArray??rT SYMBOL "??rT", cJSON_CreateIntArray
cJSON_CreateNull    SYMBOL "cJSON_CreateNull"
??cJSON_CreateNull??rT SYMBOL "??rT", cJSON_CreateNull
cJSON_CreateNumber  SYMBOL "cJSON_CreateNumber"
??cJSON_CreateNumber??rT SYMBOL "??rT", cJSON_CreateNumber
cJSON_CreateObject  SYMBOL "cJSON_CreateObject"
??cJSON_CreateObject??rT SYMBOL "??rT", cJSON_CreateObject
cJSON_CreateObjectReference SYMBOL "cJSON_CreateObjectReference"
??cJSON_CreateObjectReference??rT SYMBOL "??rT", cJSON_CreateObjectReference
cJSON_CreateRaw     SYMBOL "cJSON_CreateRaw"
??cJSON_CreateRaw??rT SYMBOL "??rT", cJSON_CreateRaw
cJSON_CreateString  SYMBOL "cJSON_CreateString"
??cJSON_CreateString??rT SYMBOL "??rT", cJSON_CreateString
cJSON_CreateStringArray SYMBOL "cJSON_CreateStringArray"
??cJSON_CreateStringArray??rT SYMBOL "??rT", cJSON_CreateStringArray
cJSON_CreateStringReference SYMBOL "cJSON_CreateStringReference"
??cJSON_CreateStringReference??rT SYMBOL "??rT", cJSON_CreateStringReference
cJSON_CreateTrue    SYMBOL "cJSON_CreateTrue"
??cJSON_CreateTrue??rT SYMBOL "??rT", cJSON_CreateTrue
cJSON_Delete        SYMBOL "cJSON_Delete"
??cJSON_Delete??rT  SYMBOL "??rT", cJSON_Delete
cJSON_DeleteItemFromArray SYMBOL "cJSON_DeleteItemFromArray"
??cJSON_DeleteItemFromArray??rT SYMBOL "??rT", cJSON_DeleteItemFromArray
cJSON_DeleteItemFromObject SYMBOL "cJSON_DeleteItemFromObject"
??cJSON_DeleteItemFromObject??rT SYMBOL "??rT", cJSON_DeleteItemFromObject
cJSON_DeleteItemFromObjectCaseSensitive SYMBOL "cJSON_DeleteItemFromObjectCaseSensitive"
??cJSON_DeleteItemFromObjectCaseSensitive??rT SYMBOL "??rT", cJSON_DeleteItemFromObjectCaseSensitive
cJSON_DetachItemFromArray SYMBOL "cJSON_DetachItemFromArray"
??cJSON_DetachItemFromArray??rT SYMBOL "??rT", cJSON_DetachItemFromArray
cJSON_DetachItemFromObject SYMBOL "cJSON_DetachItemFromObject"
??cJSON_DetachItemFromObject??rT SYMBOL "??rT", cJSON_DetachItemFromObject
cJSON_DetachItemFromObjectCaseSensitive SYMBOL "cJSON_DetachItemFromObjectCaseSensitive"
??cJSON_DetachItemFromObjectCaseSensitive??rT SYMBOL "??rT", cJSON_DetachItemFromObjectCaseSensitive
cJSON_DetachItemViaPointer SYMBOL "cJSON_DetachItemViaPointer"
??cJSON_DetachItemViaPointer??rT SYMBOL "??rT", cJSON_DetachItemViaPointer
cJSON_Duplicate     SYMBOL "cJSON_Duplicate"
??cJSON_Duplicate??rT SYMBOL "??rT", cJSON_Duplicate
cJSON_GetArrayItem  SYMBOL "cJSON_GetArrayItem"
??cJSON_GetArrayItem??rT SYMBOL "??rT", cJSON_GetArrayItem
cJSON_GetArraySize  SYMBOL "cJSON_GetArraySize"
??cJSON_GetArraySize??rT SYMBOL "??rT", cJSON_GetArraySize
cJSON_GetErrorPtr   SYMBOL "cJSON_GetErrorPtr"
??cJSON_GetErrorPtr??rT SYMBOL "??rT", cJSON_GetErrorPtr
cJSON_GetObjectItem SYMBOL "cJSON_GetObjectItem"
??cJSON_GetObjectItem??rT SYMBOL "??rT", cJSON_GetObjectItem
cJSON_GetObjectItemCaseSensitive SYMBOL "cJSON_GetObjectItemCaseSensitive"
??cJSON_GetObjectItemCaseSensitive??rT SYMBOL "??rT", cJSON_GetObjectItemCaseSensitive
cJSON_GetStringValue SYMBOL "cJSON_GetStringValue"
??cJSON_GetStringValue??rT SYMBOL "??rT", cJSON_GetStringValue
cJSON_HasObjectItem SYMBOL "cJSON_HasObjectItem"
??cJSON_HasObjectItem??rT SYMBOL "??rT", cJSON_HasObjectItem
cJSON_InitHooks     SYMBOL "cJSON_InitHooks"
??cJSON_InitHooks??rT SYMBOL "??rT", cJSON_InitHooks
cJSON_InsertItemInArray SYMBOL "cJSON_InsertItemInArray"
??cJSON_InsertItemInArray??rT SYMBOL "??rT", cJSON_InsertItemInArray
cJSON_IsArray       SYMBOL "cJSON_IsArray"
??cJSON_IsArray??rT SYMBOL "??rT", cJSON_IsArray
cJSON_IsBool        SYMBOL "cJSON_IsBool"
??cJSON_IsBool??rT  SYMBOL "??rT", cJSON_IsBool
cJSON_IsFalse       SYMBOL "cJSON_IsFalse"
??cJSON_IsFalse??rT SYMBOL "??rT", cJSON_IsFalse
cJSON_IsInvalid     SYMBOL "cJSON_IsInvalid"
??cJSON_IsInvalid??rT SYMBOL "??rT", cJSON_IsInvalid
cJSON_IsNull        SYMBOL "cJSON_IsNull"
??cJSON_IsNull??rT  SYMBOL "??rT", cJSON_IsNull
cJSON_IsNumber      SYMBOL "cJSON_IsNumber"
??cJSON_IsNumber??rT SYMBOL "??rT", cJSON_IsNumber
cJSON_IsObject      SYMBOL "cJSON_IsObject"
??cJSON_IsObject??rT SYMBOL "??rT", cJSON_IsObject
cJSON_IsRaw         SYMBOL "cJSON_IsRaw"
??cJSON_IsRaw??rT   SYMBOL "??rT", cJSON_IsRaw
cJSON_IsString      SYMBOL "cJSON_IsString"
??cJSON_IsString??rT SYMBOL "??rT", cJSON_IsString
cJSON_IsTrue        SYMBOL "cJSON_IsTrue"
??cJSON_IsTrue??rT  SYMBOL "??rT", cJSON_IsTrue
cJSON_Minify        SYMBOL "cJSON_Minify"
??cJSON_Minify??rT  SYMBOL "??rT", cJSON_Minify
cJSON_Parse         SYMBOL "cJSON_Parse"
??cJSON_Parse??rT   SYMBOL "??rT", cJSON_Parse
cJSON_ParseWithOpts SYMBOL "cJSON_ParseWithOpts"
??cJSON_ParseWithOpts??rT SYMBOL "??rT", cJSON_ParseWithOpts
cJSON_Print         SYMBOL "cJSON_Print"
??cJSON_Print??rT   SYMBOL "??rT", cJSON_Print
cJSON_PrintBuffered SYMBOL "cJSON_PrintBuffered"
??cJSON_PrintBuffered??rT SYMBOL "??rT", cJSON_PrintBuffered
cJSON_PrintPreallocated SYMBOL "cJSON_PrintPreallocated"
??cJSON_PrintPreallocated??rT SYMBOL "??rT", cJSON_PrintPreallocated
cJSON_PrintUnformatted SYMBOL "cJSON_PrintUnformatted"
??cJSON_PrintUnformatted??rT SYMBOL "??rT", cJSON_PrintUnformatted
cJSON_ReplaceItemInArray SYMBOL "cJSON_ReplaceItemInArray"
??cJSON_ReplaceItemInArray??rT SYMBOL "??rT", cJSON_ReplaceItemInArray
cJSON_ReplaceItemInObject SYMBOL "cJSON_ReplaceItemInObject"
??cJSON_ReplaceItemInObject??rT SYMBOL "??rT", cJSON_ReplaceItemInObject
cJSON_ReplaceItemInObjectCaseSensitive SYMBOL "cJSON_ReplaceItemInObjectCaseSensitive"
??cJSON_ReplaceItemInObjectCaseSensitive??rT SYMBOL "??rT", cJSON_ReplaceItemInObjectCaseSensitive
cJSON_ReplaceItemViaPointer SYMBOL "cJSON_ReplaceItemViaPointer"
??cJSON_ReplaceItemViaPointer??rT SYMBOL "??rT", cJSON_ReplaceItemViaPointer
cJSON_SetNumberHelper SYMBOL "cJSON_SetNumberHelper"
??cJSON_SetNumberHelper??rT SYMBOL "??rT", cJSON_SetNumberHelper
cJSON_Version       SYMBOL "cJSON_Version"
??cJSON_Version??rT SYMBOL "??rT", cJSON_Version
cJSON_free          SYMBOL "cJSON_free"
??cJSON_free??rT    SYMBOL "??rT", cJSON_free
cJSON_malloc        SYMBOL "cJSON_malloc"
??cJSON_malloc??rT  SYMBOL "??rT", cJSON_malloc
??tolower??rA       SYMBOL "??rA", tolower

        EXTERN _Stod
        FUNCTION _Stod,010202H
        EXTERN __dEqual
        FUNCTION __dEqual,0202H
        EXTERN __dGreaterEqual
        FUNCTION __dGreaterEqual,0202H
        EXTERN __dLess
        FUNCTION __dLess,0202H
        EXTERN __dMul
        FUNCTION __dMul,0202H
        EXTERN __dNotEqual
        FUNCTION __dNotEqual,0202H
        EXTERN __doubleToLong
        FUNCTION __doubleToLong,0202H
        EXTERN __floatToDouble
        FUNCTION __floatToDouble,0202H
        EXTERN __longToDouble
        FUNCTION __longToDouble,0202H
        EXTERN tolower
        FUNCTION tolower,0202H


        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "%i.%i.%i">`:
        DATA
        DC8 "%i.%i.%i"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "null">`:
        DATA
        DC8 "null"
        DC8 0, 0, 0
        DC8 "false"
        DC8 0, 0
        DC8 "true"
        DC8 0, 0, 0
        DC8 "%1.15g"
        DC8 0
        DC8 "%1.17g"
        DC8 0
        DC8 "%lg"

        RSEG DATA_C:CONST:SORT:NOROOT(0)
        DATA
        DC8 "\"\""

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "u%04x">`:
        DATA
        DC8 "u%04x"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
        DATA
        DC8 "\357\273\277"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
        DATA
        DC32 0H, 0, 0, 0, 0H, 0H, 0H

        RSEG DATA_C:CONST:SORT:NOROOT(2)
        DATA
        DC32 0H, 0, 0, 0, 0, 0, 0H, 0H, 0H

        RSEG DATA_C:CONST:SORT:NOROOT(2)
        DATA
        DC32 0H, 0, 0, 0, 0, 0, 0H, 0H, 0H

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_GetErrorPtr??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE cJSON_GetErrorPtr

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function cJSON_GetErrorPtr
        ARM
cJSON_GetErrorPtr:
        LDR      R0,??DataTable2  ;; global_hooks
        LDR      R1,[R0, #+16]
        LDR      R0,[R0, #+12]
        ADD      R0,R1,R0
        BX       LR               ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_GetStringValue??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE cJSON_GetStringValue

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function cJSON_GetStringValue
        ARM
cJSON_GetStringValue:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
        BL       cJSON_IsString
        CMP      R0,#+0
        POPEQ    {R4,PC}
        LDR      R0,[R4, #+16]
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_Version??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE cJSON_Version

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function cJSON_Version
        ARM
cJSON_Version:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        LDR      R4,??cJSON_Version_0  ;; ??version
        LDR      R1,??cJSON_Version_0+0x4  ;; `?<Constant "%i.%i.%i">`
        MOV      R0,#+8
        PUSH     {R0}
        CFI CFA R13+12
        MOV      R3,#+7
        MOV      R2,#+1
        MOV      R0,R4
        SWI      +22
        MOV      R0,R4
        POP      {R1,R4,PC}       ;; return
        DATA
??cJSON_Version_0:
        DC32     ??version
        DC32     `?<Constant "%i.%i.%i">`
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??internal_malloc??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE internal_malloc

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
??version:
        DS8 16

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function internal_malloc
        ARM
internal_malloc:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SWI      +20
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??internal_free??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE internal_free

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function internal_free
        ARM
internal_free:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SWI      +21
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??internal_realloc??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE internal_realloc

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function internal_realloc
        ARM
internal_realloc:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SWI      +186
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_strdup??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE cJSON_strdup

        RSEG DATA_I:DATA:SORT:NOROOT(2)
global_hooks:
        DS8 12
        REQUIRE `?<Initializer for global_hooks>`
        DS8 8
        REQUIRE `?<Initializer for global_error>`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function cJSON_strdup
        ARM
cJSON_strdup:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R4,R0
        MOV      R5,R1
        CMP      R4,#+0
        BEQ      ??cJSON_strdup_0
        SWI      +27
        LDR      R1,[R5, #+0]
        ADD      R6,R0,#+1
        MOV      R0,R6
        BLX      R1
        MOVS     R5,R0
        BNE      ??cJSON_strdup_1
??cJSON_strdup_0:
        MOV      R0,#+0
        POP      {R4-R6,PC}
??cJSON_strdup_1:
        MOV      R2,R6
        MOV      R1,R4
        SWI      +286
        MOV      R0,R5
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_InitHooks??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE cJSON_InitHooks

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function cJSON_InitHooks
        ARM
cJSON_InitHooks:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        LDR      R4,??DataTable2  ;; global_hooks
        MOVS     R5,R0
        BNE      ??cJSON_InitHooks_0
        SWI      +32788
        STR      R0,[R4, #+0]
        SWI      +32789
        STR      R0,[R4, #+4]
        B        ??cJSON_InitHooks_1
??cJSON_InitHooks_0:
        SWI      +32788
        LDR      R1,[R5, #+0]
        CMP      R1,#+0
        MOVNE    R0,R1
        STR      R0,[R4, #+0]
        SWI      +32789
        LDR      R1,[R5, #+4]
        CMP      R1,#+0
        MOVNE    R0,R1
        STR      R0,[R4, #+4]
        MOV      R0,#+0
        STR      R0,[R4, #+8]
        SWI      +32788
        LDR      R1,[R4, #+0]
        CMP      R1,R0
        POPNE    {R4,R5,PC}
        SWI      +32789
        LDR      R1,[R4, #+4]
        CMP      R1,R0
        POPNE    {R4,R5,PC}
??cJSON_InitHooks_1:
        SWI      +32954
        STR      R0,[R4, #+8]
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_New_Item??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE cJSON_New_Item

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function cJSON_New_Item
        ARM
cJSON_New_Item:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R1,R0
        LDR      R1,[R1, #+0]
        MOV      R0,#+36
        BLX      R1
        MOVS     R4,R0
        BEQ      ??cJSON_New_Item_0
        MOV      R2,#+36
        MOV      R1,#+0
        SWI      +187
??cJSON_New_Item_0:
        MOV      R0,R4
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_Delete??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock18
        REQUIRE cJSON_Delete

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI Function cJSON_Delete
        ARM
cJSON_Delete:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOVS     R4,R0
        POPEQ    {R4-R6,PC}
        LDR      R5,??DataTable2  ;; global_hooks
??cJSON_Delete_0:
        LDR      R0,[R4, #+12]
        LDR      R6,[R4, #+0]
        TST      R0,#0x100
        BNE      ??cJSON_Delete_1
        LDR      R0,[R4, #+8]
        CMP      R0,#+0
        BEQ      ??cJSON_Delete_1
        BL       cJSON_Delete
??cJSON_Delete_1:
        LDR      R0,[R4, #+12]
        TST      R0,#0x100
        BNE      ??cJSON_Delete_2
        LDR      R0,[R4, #+16]
        CMP      R0,#+0
        BEQ      ??cJSON_Delete_2
        LDR      R1,[R5, #+4]
        BLX      R1
??cJSON_Delete_2:
        LDR      R0,[R4, #+12]
        TST      R0,#0x200
        BNE      ??cJSON_Delete_3
        LDR      R0,[R4, #+32]
        CMP      R0,#+0
        BEQ      ??cJSON_Delete_3
        LDR      R1,[R5, #+4]
        BLX      R1
??cJSON_Delete_3:
        LDR      R1,[R5, #+4]
        MOV      R0,R4
        BLX      R1
        MOVS     R4,R6
        BNE      ??cJSON_Delete_0
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock19

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable2:
        DC32     global_hooks

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        THUMB
??parse_number??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock20
        REQUIRE parse_number

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI Function parse_number
        ARM
parse_number:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        SUB      SP,SP,#+68
        CFI CFA R13+88
        MOV      R4,R0
        MOVS     R5,R1
        MOV      R0,#+0
        STR      R0,[SP, #+0]
        LDRNE    R1,[R5, #+0]
        CMPNE    R1,#+0
        BNE      ??parse_number_1
??parse_number_2:
        MOV      R0,#+0
        ADD      SP,SP,#+68
        CFI CFA R13+20
        POP      {R4-R7,PC}
        CFI CFA R13+88
??parse_number_1:
        MOV      R1,#+0
??parse_number_3:
        LDR      R2,[R5, #+8]
        LDR      R12,[R5, #+4]
        ADD      R3,R1,R2
        CMP      R3,R12
        BCS      ??parse_number_4
        LDR      R3,[R5, #+0]
        ADD      R2,R2,R3
        ADD      R2,R1,R2
        LDRB     R12,[R2, #+0]
        ADD      R3,SP,#+4
        ADD      R3,R1,R3
        SUB      R12,R12,#+43
        CMP      R12,#+58
        BHI      ??parse_number_4
        ADR      LR,??parse_number_0
        LDRB     LR,[LR, R12]
        ADD      PC,PC,LR, LSL #+2
        DATA
??parse_number_0:
        DC8      +14,+21,+14,+16
        DC8      +21,+14,+14,+14
        DC8      +14,+14,+14,+14
        DC8      +14,+14,+14,+21
        DC8      +21,+21,+21,+21
        DC8      +21,+21,+21,+21
        DC8      +21,+21,+14,+21
        DC8      +21,+21,+21,+21
        DC8      +21,+21,+21,+21
        DC8      +21,+21,+21,+21
        DC8      +21,+21,+21,+21
        DC8      +21,+21,+21,+21
        DC8      +21,+21,+21,+21
        DC8      +21,+21,+21,+21
        DC8      +21,+21,+14,+0
        ARM
??parse_number_5:
        LDRB     R2,[R2, #+0]
        B        ??parse_number_6
??parse_number_7:
        MOV      R2,#+46
??parse_number_6:
        ADD      R1,R1,#+1
        STRB     R2,[R3, #+0]
        CMP      R1,#+63
        BCC      ??parse_number_3
??parse_number_4:
        ADD      R2,SP,#+4
        STRB     R0,[R1, +R2]
        MOV      R2,#+0
        MOV      R1,SP
        ADD      R0,SP,#+4
        _BLF     _Stod,??_Stod??rA
        MOV      R7,R1
        LDR      R1,[SP, #+0]
        MOV      R6,R0
        ADD      R0,SP,#+4
        CMP      R0,R1
        BEQ      ??parse_number_2
        STR      R6,[R4, #+24]
        STR      R7,[R4, #+28]
        MOV      R0,R6
        MOV      R1,R7
        MOV      R2,#-1073741824
        ORR      R2,R2,#0x3FC00000
        MVN      R3,#-1342177280
        BIC      R3,R3,#0xE200000
        _BLF     __dGreaterEqual,??__dGreaterEqual??rA
        CMP      R0,#+0
        MVNNE    R0,#-2147483648
        BNE      ??parse_number_8
        MOV      R0,R6
        MOV      R1,R7
        MVN      R2,#+1
        MVN      R3,#+805306368
        BIC      R3,R3,#0xE200000
        _BLF     __dLess,??__dLess??rA
        CMP      R0,#+0
        MOVNE    R0,#-2147483648
        BNE      ??parse_number_8
        MOV      R0,R6
        MOV      R1,R7
        _BLF     __doubleToLong,??__doubleToLong??rA
??parse_number_8:
        STR      R0,[R4, #+20]
        MOV      R0,#+8
        STR      R0,[R4, #+12]
        LDR      R0,[R5, #+8]
        LDR      R1,[SP, #+0]
        ADD      R0,R1,R0
        ADD      R1,SP,#+4
        SUB      R0,R0,R1
        STR      R0,[R5, #+8]
        MOV      R0,#+1
        ADD      SP,SP,#+68
        CFI CFA R13+20
        POP      {R4-R7,PC}       ;; return
        CFI EndBlock cfiBlock21

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_SetNumberHelper??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock22
        REQUIRE cJSON_SetNumberHelper

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI Function cJSON_SetNumberHelper
        ARM
cJSON_SetNumberHelper:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R4,R1
        MOV      R5,R2
        MOV      R6,R0
        MOV      R0,R4
        MOV      R1,R5
        MOV      R2,#-1073741824
        ORR      R2,R2,#0x3FC00000
        MVN      R3,#-1342177280
        BIC      R3,R3,#0xE200000
        _BLF     __dGreaterEqual,??__dGreaterEqual??rA
        CMP      R0,#+0
        MVNNE    R0,#-2147483648
        BNE      ??cJSON_SetNumberHelper_0
        MOV      R0,R4
        MOV      R1,R5
        MVN      R2,#+1
        MVN      R3,#+805306368
        BIC      R3,R3,#0xE200000
        _BLF     __dLess,??__dLess??rA
        CMP      R0,#+0
        MOVNE    R0,#-2147483648
        BNE      ??cJSON_SetNumberHelper_0
        MOV      R0,R4
        MOV      R1,R5
        _BLF     __doubleToLong,??__doubleToLong??rA
??cJSON_SetNumberHelper_0:
        STR      R0,[R6, #+20]
        STR      R4,[R6, #+24]
        STR      R5,[R6, #+28]
        MOV      R0,R4
        MOV      R1,R5
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock23

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon0
        CFI NoFunction
        THUMB
??ensure??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock24
        REQUIRE ensure

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon1
        CFI Function ensure
        ARM
ensure:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOVS     R4,R0
        LDRNE    R0,[R4, #+0]
        CMPNE    R0,#+0
        BNE      ??ensure_0
??ensure_1:
        MOV      R0,#+0
        POP      {R4-R6,PC}
??ensure_0:
        LDR      R3,[R4, #+4]
        LDR      R2,[R4, #+8]
        CMP      R3,#+0
        BEQ      ??ensure_2
        CMP      R2,R3
        BCS      ??ensure_1
??ensure_2:
        CMP      R1,#-2147483648
        BCS      ??ensure_1
        ADD      R5,R2,#+1
        ADD      R1,R5,R1
        CMP      R3,R1
        ADDCS    R0,R2,R0
        POPCS    {R4-R6,PC}
        LDR      R2,[R4, #+16]
        CMP      R2,#+0
        BNE      ??ensure_1
        CMP      R1,#+1073741824
        BCC      ??ensure_3
        CMP      R1,#-2147483648
        BCS      ??ensure_1
        MVN      R5,#-2147483648
        B        ??ensure_4
??ensure_3:
        LSL      R5,R1,#+1
??ensure_4:
        LDR      R2,[R4, #+32]
        CMP      R2,#+0
        BEQ      ??ensure_5
        MOV      R1,R5
        BLX      R2
        MOVS     R6,R0
        BNE      ??ensure_6
??ensure_7:
        LDR      R0,[R4, #+0]
        LDR      R1,[R4, #+28]
        BLX      R1
        MOV      R0,#+0
        STR      R0,[R4, #+4]
        STR      R0,[R4, #+0]
        POP      {R4-R6,PC}
??ensure_5:
        LDR      R1,[R4, #+24]
        MOV      R0,R5
        BLX      R1
        MOVS     R6,R0
        BEQ      ??ensure_7
        LDR      R0,[R4, #+8]
        LDR      R1,[R4, #+0]
        ADD      R2,R0,#+1
        MOV      R0,R6
        SWI      +286
        LDR      R0,[R4, #+0]
        LDR      R1,[R4, #+28]
        BLX      R1
??ensure_6:
        STR      R5,[R4, #+4]
        STR      R6,[R4, #+0]
        LDR      R0,[R4, #+8]
        ADD      R0,R0,R6
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock25

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock26 Using cfiCommon0
        CFI NoFunction
        THUMB
??update_offset??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock26
        REQUIRE update_offset

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock27 Using cfiCommon1
        CFI Function update_offset
        ARM
update_offset:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOVS     R4,R0
        LDRNE    R0,[R4, #+0]
        CMPNE    R0,#+0
        POPEQ    {R4,PC}
        LDR      R1,[R4, #+8]
        ADD      R0,R1,R0
        SWI      +27
        LDR      R1,[R4, #+8]
        ADD      R0,R0,R1
        STR      R0,[R4, #+8]
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock27

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock28 Using cfiCommon0
        CFI NoFunction
        THUMB
??print_number??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock28
        REQUIRE print_number

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock29 Using cfiCommon1
        CFI Function print_number
        ARM
print_number:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        SUB      SP,SP,#+36
        CFI CFA R13+60
        LDR      R4,[R0, #+24]
        LDR      R5,[R0, #+28]
        MOVS     R8,R1
        BNE      ??print_number_0
??print_number_1:
        MOV      R0,#+0
        ADD      SP,SP,#+36
        CFI CFA R13+24
        POP      {R4-R8,PC}
        CFI CFA R13+60
??print_number_0:
        LDR      R6,??DataTable9  ;; `?<Constant "null">`
        MOV      R0,#+0
        MOV      R1,#+0
        MOV      R2,R4
        MOV      R3,R5
        _BLF     __dMul,??__dMul??rA
        MOV      R2,#+0
        MOV      R3,R2
        _BLF     __dNotEqual,??__dNotEqual??rA
        CMP      R0,#+0
        BEQ      ??print_number_2
        MOV      R1,R6
        ADD      R0,SP,#+8
        SWI      +22
        B        ??print_number_3
??print_number_2:
        MOV      R2,R4
        MOV      R3,R5
        ADD      R1,R6,#+24
        ADD      R0,SP,#+8
        SWI      +22
        MOV      R7,R0
        MOV      R2,SP
        ADD      R1,R6,#+40
        ADD      R0,SP,#+8
        SWI      +501
        CMP      R0,#+1
        BNE      ??print_number_4
        MOV      R0,SP
        LDM      R0,{R0,R1}
        MOV      R2,R4
        MOV      R3,R5
        _BLF     __dNotEqual,??__dNotEqual??rA
        CMP      R0,#+0
        BEQ      ??print_number_5
??print_number_4:
        MOV      R2,R4
        MOV      R3,R5
        ADD      R1,R6,#+32
        ADD      R0,SP,#+8
        SWI      +22
??print_number_3:
        MOV      R7,R0
??print_number_5:
        CMP      R7,#+0
        BMI      ??print_number_1
        CMP      R7,#+26
        BGE      ??print_number_1
        ADD      R1,R7,#+1
        MOV      R0,R8
        BL       ensure
        CMP      R0,#+0
        BEQ      ??print_number_6
        MOV      R1,#+0
        MOV      R2,#+0
        CMP      R7,#+0
        BNE      ??print_number_7
??print_number_8:
        STRB     R1,[R2, +R0]
        LDR      R0,[R8, #+8]
        ADD      R0,R7,R0
        STR      R0,[R8, #+8]
        MOV      R0,#+1
??print_number_6:
        ADD      SP,SP,#+36       ;; stack cleaning
        CFI CFA R13+24
        POP      {R4-R8,PC}       ;; return
        CFI CFA R13+60
??print_number_9:
        ADD      R2,R2,#+1
??print_number_7:
        CMP      R2,R7
        BCS      ??print_number_8
        ADD      R3,SP,#+8
        LDRB     R6,[R2, +R3]
        ADD      R3,R2,R0
        STRB     R6,[R3, #+0]
        B        ??print_number_9
        CFI EndBlock cfiBlock29

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock30 Using cfiCommon0
        CFI NoFunction
        THUMB
??utf16_literal_to_utf8??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock30
        REQUIRE utf16_literal_to_utf8

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock31 Using cfiCommon1
        CFI Function utf16_literal_to_utf8
        ARM
utf16_literal_to_utf8:
        PUSH     {R4-R7}
        CFI R7 Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R3,#+0
        SUB      R4,R1,R0
        CMP      R4,#+6
        BLT      ??utf16_literal_to_utf8_0
        ADD      R4,R0,#+2
        MOV      R12,#+0
        MOV      R5,R3
??utf16_literal_to_utf8_1:
        ADD      R6,R5,R4
        LDRB     R7,[R6, #+0]
        CMP      R7,#+48
        BCC      ??utf16_literal_to_utf8_2
        CMP      R7,#+58
        BCS      ??utf16_literal_to_utf8_2
        SUB      R6,R7,#+48
??utf16_literal_to_utf8_3:
        ADD      R12,R6,R12
        CMP      R5,#+3
        LSLCC    R12,R12,#+4
        ADD      R5,R5,#+1
        CMP      R5,#+4
        BCC      ??utf16_literal_to_utf8_1
        CMP      R12,#+56320
        BCC      ??utf16_literal_to_utf8_4
        CMP      R12,#+57344
        BCS      ??utf16_literal_to_utf8_5
??utf16_literal_to_utf8_0:
        POP      {R4-R7}
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI CFA R13+0
        MOV      R0,#+0
        BX       LR               ;; return
        CFI R4 Frame(CFA, -16)
        CFI R5 Frame(CFA, -12)
        CFI R6 Frame(CFA, -8)
        CFI R7 Frame(CFA, -4)
        CFI CFA R13+16
??utf16_literal_to_utf8_2:
        CMP      R7,#+65
        BCC      ??utf16_literal_to_utf8_6
        CMP      R7,#+71
        SUBCC    R6,R7,#+55
        BCC      ??utf16_literal_to_utf8_3
??utf16_literal_to_utf8_6:
        CMP      R7,#+97
        BCC      ??utf16_literal_to_utf8_7
        CMP      R7,#+103
        SUBCC    R6,R7,#+87
        BCC      ??utf16_literal_to_utf8_3
??utf16_literal_to_utf8_7:
        MOV      R12,#+0
??utf16_literal_to_utf8_5:
        MOV      R0,#+6
??utf16_literal_to_utf8_8:
        CMP      R12,#+128
        BCS      ??utf16_literal_to_utf8_9
        MOV      R1,#+1
        B        ??utf16_literal_to_utf8_10
??utf16_literal_to_utf8_4:
        CMP      R12,#+55296
        BCC      ??utf16_literal_to_utf8_5
        ADD      R4,R0,#+6
        MOV      R0,#+12
        SUB      R1,R1,R4
        CMP      R1,#+6
        BLT      ??utf16_literal_to_utf8_0
        LDRB     R1,[R4, #+0]
        CMP      R1,#+92
        LDRBEQ   R1,[R4, #+1]
        CMPEQ    R1,#+117
        BNE      ??utf16_literal_to_utf8_0
        ADD      R4,R4,#+2
        MOV      R1,#+0
        MOV      R5,R1
??utf16_literal_to_utf8_11:
        ADD      R6,R5,R4
        LDRB     R7,[R6, #+0]
        CMP      R7,#+48
        BCC      ??utf16_literal_to_utf8_12
        CMP      R7,#+58
        SUBCC    R6,R7,#+48
        BCC      ??utf16_literal_to_utf8_13
??utf16_literal_to_utf8_12:
        CMP      R7,#+65
        BCC      ??utf16_literal_to_utf8_14
        CMP      R7,#+71
        SUBCC    R6,R7,#+55
        BCC      ??utf16_literal_to_utf8_13
??utf16_literal_to_utf8_14:
        CMP      R7,#+97
        BCC      ??utf16_literal_to_utf8_0
        CMP      R7,#+103
        BCS      ??utf16_literal_to_utf8_0
        SUB      R6,R7,#+87
??utf16_literal_to_utf8_13:
        ADD      R1,R6,R1
        CMP      R5,#+3
        LSLCC    R1,R1,#+4
        ADD      R5,R5,#+1
        CMP      R5,#+4
        BCC      ??utf16_literal_to_utf8_11
        CMP      R1,#+56320
        BCC      ??utf16_literal_to_utf8_0
        CMP      R1,#+57344
        BCS      ??utf16_literal_to_utf8_0
        MOV      R4,#+255
        ORR      R4,R4,#0x300
        AND      R5,R4,R12
        AND      R1,R4,R1
        ORR      R1,R1,R5, LSL #+10
        ADD      R12,R1,#+65536
        B        ??utf16_literal_to_utf8_8
??utf16_literal_to_utf8_9:
        CMP      R12,#+2048
        MOVCC    R1,#+2
        MOVCC    R3,#+192
        BCC      ??utf16_literal_to_utf8_10
        CMP      R12,#+65536
        MOVCC    R1,#+3
        MOVCC    R3,#+224
        BCC      ??utf16_literal_to_utf8_10
        CMP      R12,#+1114112
        BCS      ??utf16_literal_to_utf8_0
        MOV      R1,#+4
        MOV      R3,#+240
??utf16_literal_to_utf8_10:
        SUB      R4,R1,#+1
        ANDS     R4,R4,#0xFF
        BEQ      ??utf16_literal_to_utf8_15
??utf16_literal_to_utf8_16:
        LDR      R6,[R2, #+0]
        AND      R7,R12,#0xBF
        ORR      R7,R7,#0x80
        STRB     R7,[R4, +R6]
        LSR      R12,R12,#+6
        SUB      R4,R4,#+1
        ANDS     R4,R4,#0xFF
        BNE      ??utf16_literal_to_utf8_16
??utf16_literal_to_utf8_15:
        LDR      R4,[R2, #+0]
        CMP      R1,#+2
        ORRCS    R3,R3,R12
        ANDCC    R3,R12,#0x7F
        STRB     R3,[R4, #+0]
        LDR      R3,[R2, #+0]
        ADD      R1,R1,R3
        STR      R1,[R2, #+0]
        POP      {R4-R7}
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI CFA R13+0
        BX       LR
        CFI EndBlock cfiBlock31

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock32 Using cfiCommon0
        CFI NoFunction
        THUMB
??parse_string??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock32
        REQUIRE parse_string

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock33 Using cfiCommon1
        CFI Function parse_string
        ARM
parse_string:
        PUSH     {R4-R8,R10,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R10 Frame(CFA, -8)
        CFI R8 Frame(CFA, -12)
        CFI R7 Frame(CFA, -16)
        CFI R6 Frame(CFA, -20)
        CFI R5 Frame(CFA, -24)
        CFI R4 Frame(CFA, -28)
        CFI CFA R13+28
        SUB      SP,SP,#+8
        CFI CFA R13+36
        MOV      R4,R0
        MOV      R5,R1
        LDR      R0,[R5, #+0]
        LDR      R1,[R5, #+8]
        MOV      R8,#+0
        ADD      R1,R1,R0
        STR      R8,[SP, #+0]
        LDRB     R2,[R1, #+0]
        ADD      R6,R1,#+1
        ADD      R7,R1,#+1
        CMP      R2,#+34
        BNE      ??parse_string_1
        MOV      R2,#+0
        B        ??parse_string_2
??parse_string_3:
        CMP      R3,#+92
        BNE      ??parse_string_4
        ADD      R3,R7,#+1
        SUB      R3,R3,R0
        CMP      R3,R10
        BCS      ??parse_string_1
        ADD      R2,R2,#+1
        ADD      R7,R7,#+1
??parse_string_4:
        ADD      R7,R7,#+1
??parse_string_2:
        LDR      R10,[R5, #+4]
        SUB      R3,R7,R0
        CMP      R3,R10
        BCS      ??parse_string_1
        LDRB     R3,[R7, #+0]
        CMP      R3,#+34
        BNE      ??parse_string_3
        BNE      ??parse_string_1
        SUB      R0,R7,R1
        LDR      R1,[R5, #+16]
        SUB      R0,R0,R2
        ADD      R0,R0,#+1
        BLX      R1
        MOVS     R10,R0
        BEQ      ??parse_string_5
        STR      R10,[SP, #+0]
        B        ??parse_string_6
??parse_string_7:
        LDRB     R1,[R6], #+1
        LDR      R0,[SP, #+0]
        STRB     R1,[R0, #+0]
        LDR      R1,[SP, #+0]
        ADD      R1,R1,#+1
        STR      R1,[SP, #+0]
??parse_string_6:
        CMP      R6,R7
        BCS      ??parse_string_8
        LDRB     R0,[R6, #+0]
        CMP      R0,#+92
        BNE      ??parse_string_7
        MOV      R0,#+2
        SUB      R1,R7,R6
        CMP      R1,#+1
        BLT      ??parse_string_9
        LDRB     R1,[R6, #+1]
        SUB      R1,R1,#+34
        CMP      R1,#+83
        BHI      ??parse_string_5
        ADR      R2,??parse_string_0
        LDRB     R2,[R2, R1]
        ADD      PC,PC,R2, LSL #+2
        DATA
??parse_string_0:
        DC8      +39,+61,+61,+61
        DC8      +61,+61,+61,+61
        DC8      +61,+61,+61,+61
        DC8      +61,+39,+61,+61
        DC8      +61,+61,+61,+61
        DC8      +61,+61,+61,+61
        DC8      +61,+61,+61,+61
        DC8      +61,+61,+61,+61
        DC8      +61,+61,+61,+61
        DC8      +61,+61,+61,+61
        DC8      +61,+61,+61,+61
        DC8      +61,+61,+61,+61
        DC8      +61,+61,+61,+61
        DC8      +61,+61,+61,+61
        DC8      +61,+61,+39,+61
        DC8      +61,+61,+61,+61
        DC8      +20,+61,+61,+61
        DC8      +27,+61,+61,+61
        DC8      +61,+61,+61,+61
        DC8      +30,+61,+61,+61
        DC8      +33,+61,+36,+42
        ARM
??parse_string_10:
        LDR      R1,[SP, #+0]
        MOV      R2,#+8
??parse_string_11:
        STRB     R2,[R1, #+0]
        LDR      R2,[SP, #+0]
        ADD      R2,R2,#+1
        STR      R2,[SP, #+0]
        B        ??parse_string_12
??parse_string_13:
        LDR      R1,[SP, #+0]
        MOV      R2,#+12
        B        ??parse_string_11
??parse_string_14:
        LDR      R1,[SP, #+0]
        MOV      R2,#+10
??parse_string_15:
        B        ??parse_string_11
??parse_string_16:
        LDR      R1,[SP, #+0]
        MOV      R2,#+13
        B        ??parse_string_11
??parse_string_17:
        LDR      R1,[SP, #+0]
        MOV      R2,#+9
        B        ??parse_string_11
??parse_string_18:
        LDR      R1,[SP, #+0]
        LDRB     R2,[R6, #+1]
        B        ??parse_string_11
??parse_string_19:
        MOV      R2,SP
        MOV      R1,R7
        MOV      R0,R6
        BL       utf16_literal_to_utf8
        MOVS     R1,R0
        BEQ      ??parse_string_9
??parse_string_12:
        ADD      R6,R0,R6
        B        ??parse_string_6
??parse_string_8:
        LDR      R0,[SP, #+0]
        STRB     R8,[R0, #+0]
        MOV      R0,#+16
        STR      R0,[R4, #+12]
        STR      R10,[R4, #+16]
        LDR      R0,[R5, #+0]
        SUB      R0,R7,R0
        ADD      R0,R0,#+1
        STR      R0,[R5, #+8]
        MOV      R0,#+1
        POP      {R1,R2,R4-R8,R10,PC}
??parse_string_5:
        CMP      R10,#+0
        BEQ      ??parse_string_1
??parse_string_9:
        LDR      R1,[R5, #+20]
        MOV      R0,R10
        BLX      R1
??parse_string_1:
        CMP      R6,#+0
        LDRNE    R0,[R5, #+0]
        SUBNE    R0,R6,R0
        STRNE    R0,[R5, #+8]
        MOV      R0,#+0
        POP      {R1,R2,R4-R8,R10,PC}
        CFI EndBlock cfiBlock33

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock34 Using cfiCommon0
        CFI NoFunction
        THUMB
??print_string_ptr??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock34
        REQUIRE print_string_ptr

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock35 Using cfiCommon1
        CFI Function print_string_ptr
        ARM
print_string_ptr:
        PUSH     {R4-R9,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R9 Frame(CFA, -8)
        CFI R8 Frame(CFA, -12)
        CFI R7 Frame(CFA, -16)
        CFI R6 Frame(CFA, -20)
        CFI R5 Frame(CFA, -24)
        CFI R4 Frame(CFA, -28)
        CFI CFA R13+28
        MOV      R4,R0
        MOV      R0,R1
        MOV      R5,#+0
        MOV      R6,#+0
        CMP      R0,#+0
        POPEQ    {R4-R9,PC}
        CMP      R4,#+0
        BNE      ??print_string_ptr_2
        MOV      R1,#+3
        BL       ensure
        CMP      R0,#+0
        POPEQ    {R4-R9,PC}
        ADR      R1,??print_string_ptr_3  ;; "\"\""
        SWI      +26
        MOV      R0,#+1
        POP      {R4-R9,PC}
??print_string_ptr_2:
        MOV      R9,R4
        LDRB     R1,[R9, #+0]
        CMP      R1,#+0
        BEQ      ??print_string_ptr_4
??print_string_ptr_5:
        LDRB     R1,[R9, #+0]
        SUB      R2,R1,#+8
        CMP      R2,#+84
        BHI      ??print_string_ptr_6
        ADR      R3,??print_string_ptr_0
        LDRB     R3,[R3, R2]
        ADD      PC,PC,R3, LSL #+2
        DATA
??print_string_ptr_0:
        DC8      +21,+21,+21,+23
        DC8      +21,+21,+23,+23
        DC8      +23,+23,+23,+23
        DC8      +23,+23,+23,+23
        DC8      +23,+23,+23,+23
        DC8      +23,+23,+23,+23
        DC8      +23,+23,+21,+23
        DC8      +23,+23,+23,+23
        DC8      +23,+23,+23,+23
        DC8      +23,+23,+23,+23
        DC8      +23,+23,+23,+23
        DC8      +23,+23,+23,+23
        DC8      +23,+23,+23,+23
        DC8      +23,+23,+23,+23
        DC8      +23,+23,+23,+23
        DC8      +23,+23,+23,+23
        DC8      +23,+23,+23,+23
        DC8      +23,+23,+23,+23
        DC8      +23,+23,+23,+23
        DC8      +23,+23,+23,+23
        DC8      +23,+23,+23,+23
        DC8      +21,+0,+0,+0
        ARM
??print_string_ptr_7:
        ADD      R6,R6,#+1
        B        ??print_string_ptr_8
??print_string_ptr_6:
        CMP      R1,#+32
        ADDCC    R6,R6,#+5
??print_string_ptr_8:
        LDRB     R1,[R9, #+1]!
        CMP      R1,#+0
        BNE      ??print_string_ptr_5
??print_string_ptr_4:
        SUB      R1,R9,R4
        ADD      R9,R6,R1
        ADD      R1,R9,#+3
        BL       ensure
        CMP      R0,#+0
        POPEQ    {R4-R9,PC}
        ADD      R7,R9,R0
        MOV      R8,#+34
        CMP      R6,#+0
        STRB     R8,[R0, #+0]
        BNE      ??print_string_ptr_9
        MOV      R2,R9
        MOV      R1,R4
        ADD      R0,R0,#+1
        SWI      +286
        B        ??print_string_ptr_10
??print_string_ptr_9:
        ADD      R6,R0,#+1
        MOV      R9,R4
        LDRB     R0,[R9, #+0]
        CMP      R0,#+0
        BEQ      ??print_string_ptr_10
??print_string_ptr_11:
        LDRB     R0,[R9, #+0]
        CMP      R0,#+32
        BCC      ??print_string_ptr_12
        CMP      R0,#+34
        BEQ      ??print_string_ptr_12
        CMP      R0,#+92
        BEQ      ??print_string_ptr_13
??print_string_ptr_14:
        STRB     R0,[R6, #+0]
        B        ??print_string_ptr_15
??print_string_ptr_12:
        MOV      R0,#+92
??print_string_ptr_13:
        STRB     R0,[R6], #+1
        LDRB     R2,[R9, #+0]
        SUB      R1,R2,#+8
        CMP      R1,#+84
        BHI      ??print_string_ptr_16
        ADR      R3,??print_string_ptr_1
        LDRSB    R3,[R3, R1]
        ADD      PC,PC,R3, LSL #+2
        DATA
??print_string_ptr_1:
        DC8      +23,+31,+27,+33
        DC8      +25,+29,+33,+33
        DC8      +33,+33,+33,+33
        DC8      +33,+33,+33,+33
        DC8      +33,+33,+33,+33
        DC8      +33,+33,+33,+33
        DC8      +33,+33,+21,+33
        DC8      +33,+33,+33,+33
        DC8      +33,+33,+33,+33
        DC8      +33,+33,+33,+33
        DC8      +33,+33,+33,+33
        DC8      +33,+33,+33,+33
        DC8      +33,+33,+33,+33
        DC8      +33,+33,+33,+33
        DC8      +33,+33,+33,+33
        DC8      +33,+33,+33,+33
        DC8      +33,+33,+33,+33
        DC8      +33,+33,+33,+33
        DC8      +33,+33,+33,+33
        DC8      +33,+33,+33,+33
        DC8      +33,+33,+33,+33
        DC8      +244,+0,+0,+0
        ARM
??print_string_ptr_17:
        STRB     R8,[R6, #+0]
        B        ??print_string_ptr_15
??print_string_ptr_18:
        MOV      R0,#+98
        B        ??print_string_ptr_14
??print_string_ptr_19:
        MOV      R0,#+102
??print_string_ptr_20:
        B        ??print_string_ptr_14
??print_string_ptr_21:
        MOV      R0,#+110
        B        ??print_string_ptr_14
??print_string_ptr_22:
        MOV      R0,#+114
        B        ??print_string_ptr_14
??print_string_ptr_23:
        MOV      R0,#+116
        B        ??print_string_ptr_14
??print_string_ptr_16:
        LDR      R1,??print_string_ptr_3+0x4  ;; `?<Constant "u%04x">`
        MOV      R0,R6
        SWI      +22
        ADD      R6,R6,#+4
??print_string_ptr_15:
        LDRB     R0,[R9, #+1]!
        ADD      R6,R6,#+1
        CMP      R0,#+0
        BNE      ??print_string_ptr_11
??print_string_ptr_10:
        STRB     R8,[R7, #+1]
        STRB     R5,[R7, #+2]
        MOV      R0,#+1
        POP      {R4-R9,PC}       ;; return
        DATA
??print_string_ptr_3:
        DC8      "\"\"",+0
        DC32     `?<Constant "u%04x">`
        CFI EndBlock cfiBlock35

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock36 Using cfiCommon0
        CFI NoFunction
        THUMB
??buffer_skip_whitespace??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock36
        REQUIRE buffer_skip_whitespace

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock37 Using cfiCommon1
        CFI Function buffer_skip_whitespace
        ARM
buffer_skip_whitespace:
        CMP      R0,#+0
        BXEQ     LR
        LDR      R1,[R0, #+0]
        CMP      R1,#+0
        BNE      ??buffer_skip_whitespace_0
        MOV      R0,#+0
        BX       LR
??buffer_skip_whitespace_1:
        LDRB     R3,[R2, +R1]
        CMP      R3,#+33
        BXCS     LR
        ADD      R2,R2,#+1
        STR      R2,[R0, #+8]
??buffer_skip_whitespace_0:
        LDR      R3,[R0, #+4]
        LDR      R2,[R0, #+8]
        CMP      R2,R3
        BCC      ??buffer_skip_whitespace_1
        SUBEQ    R1,R2,#+1
        STREQ    R1,[R0, #+8]
        BX       LR               ;; return
        CFI EndBlock cfiBlock37

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock38 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_ParseWithOpts??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock38
        REQUIRE cJSON_ParseWithOpts

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock39 Using cfiCommon1
        CFI Function cJSON_ParseWithOpts
        ARM
cJSON_ParseWithOpts:
        PUSH     {R4-R9,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R9 Frame(CFA, -8)
        CFI R8 Frame(CFA, -12)
        CFI R7 Frame(CFA, -16)
        CFI R6 Frame(CFA, -20)
        CFI R5 Frame(CFA, -24)
        CFI R4 Frame(CFA, -28)
        CFI CFA R13+28
        SUB      SP,SP,#+28
        CFI CFA R13+56
        MOV      R4,R0
        MOV      R5,R1
        MOV      R8,R2
        MOV      R0,SP
        MOV      R1,#+0
        MOV      R2,#+0
        MOV      R3,R1
        MOV      R6,R1
        STM      R0!,{R1-R3,R6}
        LDR      R6,??DataTable8  ;; global_hooks
        STM      R0,{R1-R3}
        MOV      R7,R1
        STR      R7,[R6, #+12]
        STR      R7,[R6, #+16]
        CMP      R4,#+0
        BEQ      ??cJSON_ParseWithOpts_0
        STR      R4,[SP, #+0]
        MOV      R0,R4
        SWI      +27
        ADD      R0,R0,#+1
        STR      R0,[SP, #+4]
        STR      R7,[SP, #+8]
        LDM      R6,{R2,R3,R9}
        ADD      R0,SP,#+16
        STM      R0,{R2,R3,R9}
        MOV      R0,R6
        BL       cJSON_New_Item
        MOVS     R9,R0
        BEQ      ??cJSON_ParseWithOpts_1
        LDR      R0,[SP, #+0]
        CMP      R0,#+0
        BEQ      ??cJSON_ParseWithOpts_2
        LDR      R0,[SP, #+8]
        CMP      R0,#+0
        BEQ      ??cJSON_ParseWithOpts_3
??cJSON_ParseWithOpts_2:
        MOV      R0,#+0
        B        ??cJSON_ParseWithOpts_4
??cJSON_ParseWithOpts_3:
        LDR      R0,[SP, #+4]
        CMP      R0,#+5
        BCC      ??cJSON_ParseWithOpts_5
        LDR      R0,[SP, #+0]
        MOV      R2,#+3
        ADR      R1,??cJSON_ParseWithOpts_6  ;; "﻿"
        SWI      +277
        CMP      R0,#+0
        LDREQ    R1,[SP, #+8]
        ADDEQ    R1,R1,#+3
        STREQ    R1,[SP, #+8]
??cJSON_ParseWithOpts_5:
        MOV      R0,SP
??cJSON_ParseWithOpts_4:
        BL       buffer_skip_whitespace
        MOV      R1,R0
        MOV      R0,R9
        BL       parse_value
        CMP      R0,#+0
        BEQ      ??cJSON_ParseWithOpts_7
        CMP      R8,#+0
        BEQ      ??cJSON_ParseWithOpts_8
        MOV      R0,SP
        BL       buffer_skip_whitespace
        LDR      R0,[SP, #+8]
        LDR      R1,[SP, #+4]
        CMP      R0,R1
        BCS      ??cJSON_ParseWithOpts_7
        LDR      R1,[SP, #+0]
        LDRB     R0,[R0, +R1]
        CMP      R0,#+0
        BNE      ??cJSON_ParseWithOpts_7
??cJSON_ParseWithOpts_8:
        CMP      R5,#+0
        BEQ      ??cJSON_ParseWithOpts_9
        LDR      R0,[SP, #+8]
        LDR      R1,[SP, #+0]
        ADD      R0,R0,R1
        STR      R0,[R5, #+0]
??cJSON_ParseWithOpts_9:
        MOV      R0,R9
        ADD      SP,SP,#+28
        CFI CFA R13+28
        POP      {R4-R9,PC}
        CFI CFA R13+56
??cJSON_ParseWithOpts_7:
        MOV      R0,R9
        BL       cJSON_Delete
??cJSON_ParseWithOpts_1:
        LDR      R0,[SP, #+4]
        LDR      R1,[SP, #+8]
        CMP      R1,R0
        MOVCC    R7,R1
        BCC      ??cJSON_ParseWithOpts_10
        CMP      R0,#+0
        SUBNE    R7,R0,#+1
??cJSON_ParseWithOpts_10:
        CMP      R5,#+0
        ADDNE    R0,R7,R4
        STRNE    R0,[R5, #+0]
        STR      R4,[R6, #+12]
        STR      R7,[R6, #+16]
??cJSON_ParseWithOpts_0:
        MOV      R0,#+0
        ADD      SP,SP,#+28
        CFI CFA R13+28
        POP      {R4-R9,PC}       ;; return
        DATA
??cJSON_ParseWithOpts_6:
        DC8      "﻿"
        CFI EndBlock cfiBlock39

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock40 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_Parse??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock40
        REQUIRE cJSON_Parse

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock41 Using cfiCommon1
        CFI Function cJSON_Parse
        ARM
cJSON_Parse:
        MOV      R2,#+0
        MOV      R1,#+0
        B        cJSON_ParseWithOpts  ;; tailcall
        CFI EndBlock cfiBlock41

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock42 Using cfiCommon0
        CFI NoFunction
        THUMB
??print??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock42
        REQUIRE print

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock43 Using cfiCommon1
        CFI Function print
        ARM
print:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        SUB      SP,SP,#+36
        CFI CFA R13+60
        MOV      R7,R0
        MOV      R8,R1
        MOV      R4,R2
        MOV      R5,#+0
        MOV      R2,#+36
        MOV      R1,R5
        MOV      R0,SP
        SWI      +187
        LDR      R1,[R4, #+0]
        MOV      R0,#+256
        BLX      R1
        STR      R0,[SP, #+0]
        MOV      R1,#+256
        STR      R1,[SP, #+4]
        STR      R8,[SP, #+20]
        LDM      R4,{R2,R3,R8}
        ADD      R0,SP,#+24
        STM      R0,{R2,R3,R8}
        LDR      R0,[SP, #+0]
        MOV      R6,#+0
        CMP      R0,#+0
        BEQ      ??print_0
        MOV      R1,SP
        MOV      R0,R7
        BL       print_value
        CMP      R0,#+0
        BEQ      ??print_0
        MOV      R0,SP
        BL       update_offset
        LDR      R2,[R4, #+8]
        LDR      R0,[SP, #+8]
        CMP      R2,#+0
        BEQ      ??print_1
        ADD      R1,R0,#+1
        LDR      R0,[SP, #+0]
        BLX      R2
        MOVS     R6,R0
        BNE      ??print_2
??print_0:
        LDR      R0,[SP, #+0]
        CMP      R0,#+0
        BEQ      ??print_3
        LDR      R1,[R4, #+4]
        BLX      R1
??print_3:
        CMP      R6,#+0
        BEQ      ??print_4
        LDR      R1,[R4, #+4]
        MOV      R0,R6
        BLX      R1
??print_4:
        MOV      R0,#+0
        ADD      SP,SP,#+36
        CFI CFA R13+24
        POP      {R4-R8,PC}       ;; return
        CFI CFA R13+60
??print_1:
        LDR      R1,[R4, #+0]
        ADD      R0,R0,#+1
        BLX      R1
        MOVS     R6,R0
        BEQ      ??print_0
        LDR      R0,[SP, #+8]
        LDR      R1,[SP, #+0]
        ADD      R2,R0,#+1
        LDR      R0,[SP, #+4]
        CMP      R0,R2
        MOVCC    R2,R0
        MOV      R0,R6
        SWI      +286
        LDR      R0,[SP, #+8]
        STRB     R5,[R0, +R6]
        LDR      R0,[SP, #+0]
        LDR      R1,[R4, #+4]
        BLX      R1
??print_2:
        MOV      R0,R6
        ADD      SP,SP,#+36
        CFI CFA R13+24
        POP      {R4-R8,PC}
        CFI EndBlock cfiBlock43

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock44 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_Print??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock44
        REQUIRE cJSON_Print

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock45 Using cfiCommon1
        CFI Function cJSON_Print
        ARM
cJSON_Print:
        LDR      R2,??DataTable8  ;; global_hooks
        MOV      R1,#+1
        B        print            ;; tailcall
        CFI EndBlock cfiBlock45

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock46 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_PrintUnformatted??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock46
        REQUIRE cJSON_PrintUnformatted

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock47 Using cfiCommon1
        CFI Function cJSON_PrintUnformatted
        ARM
cJSON_PrintUnformatted:
        LDR      R2,??DataTable8  ;; global_hooks
        MOV      R1,#+0
        B        print            ;; tailcall
        CFI EndBlock cfiBlock47

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock48 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_PrintBuffered??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock48
        REQUIRE cJSON_PrintBuffered

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock49 Using cfiCommon1
        CFI Function cJSON_PrintBuffered
        ARM
cJSON_PrintBuffered:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        SUB      SP,SP,#+36
        CFI CFA R13+56
        MOV      R4,R0
        MOV      R6,R1
        MOV      R5,R2
        MOV      R0,SP
        MOV      R1,#+0
        MOV      R2,#+0
        MOV      R3,R1
        STM      R0!,{R1-R3}
        STM      R0!,{R1-R3}
        STM      R0,{R1-R3}
        CMP      R6,#+0
        MOVMI    R0,#+0
        BMI      ??cJSON_PrintBuffered_0
        LDR      R7,??DataTable8  ;; global_hooks
        MOV      R0,R6
        LDR      R1,[R7, #+0]
        BLX      R1
        STR      R0,[SP, #+0]
        CMP      R0,#+0
        BEQ      ??cJSON_PrintBuffered_0
        STR      R6,[SP, #+4]
        MOV      R0,#+0
        STR      R0,[SP, #+8]
        STR      R0,[SP, #+16]
        STR      R5,[SP, #+20]
        LDM      R7,{R2,R3,R5}
        ADD      R0,SP,#+24
        STM      R0,{R2,R3,R5}
        MOV      R1,SP
        MOV      R0,R4
        BL       print_value
        CMP      R0,#+0
        LDR      R0,[SP, #+0]
        BNE      ??cJSON_PrintBuffered_0
        LDR      R1,[R7, #+4]
        BLX      R1
        MOV      R0,#+0
??cJSON_PrintBuffered_0:
        ADD      SP,SP,#+36       ;; stack cleaning
        CFI CFA R13+20
        POP      {R4-R7,PC}       ;; return
        CFI EndBlock cfiBlock49

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock50 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_PrintPreallocated??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock50
        REQUIRE cJSON_PrintPreallocated

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock51 Using cfiCommon1
        CFI Function cJSON_PrintPreallocated
        ARM
cJSON_PrintPreallocated:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        SUB      SP,SP,#+36
        CFI CFA R13+52
        MOV      R12,SP
        MOV      R4,#+0
        MOV      R5,#+0
        MOV      R6,R4
        STM      R12!,{R4-R6}
        STM      R12!,{R4-R6}
        STM      R12,{R4-R6}
        CMP      R2,#+0
        BMI      ??cJSON_PrintPreallocated_0
        CMP      R1,#+0
        BNE      ??cJSON_PrintPreallocated_1
??cJSON_PrintPreallocated_0:
        MOV      R0,#+0
        ADD      SP,SP,#+36
        CFI CFA R13+16
        POP      {R4-R6,PC}
        CFI CFA R13+52
??cJSON_PrintPreallocated_1:
        STR      R2,[SP, #+4]
        MOV      R2,#+0
        STR      R2,[SP, #+8]
        MOV      R2,#+1
        STR      R2,[SP, #+16]
        LDR      R2,??DataTable8  ;; global_hooks
        STR      R1,[SP, #+0]
        STR      R3,[SP, #+20]
        LDM      R2,{R3-R5}
        ADD      R1,SP,#+24
        STM      R1,{R3-R5}
        MOV      R1,SP
        BL       print_value
        ADD      SP,SP,#+36
        CFI CFA R13+16
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock51

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable8:
        DC32     global_hooks

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock52 Using cfiCommon0
        CFI NoFunction
        THUMB
??parse_value??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock52
        REQUIRE parse_value

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock53 Using cfiCommon1
        CFI Function parse_value
        ARM
parse_value:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        MOV      R4,R0
        MOVS     R5,R1
        LDRNE    R0,[R5, #+0]
        CMPNE    R0,#+0
        BNE      ??parse_value_0
??parse_value_1:
        MOV      R0,#+0
        POP      {R4-R7,PC}
??parse_value_0:
        LDR      R3,[R5, #+8]
        LDR      R1,[R5, #+4]
        LDR      R6,??DataTable9  ;; `?<Constant "null">`
        ADD      R2,R3,#+4
        CMP      R1,R2
        BCC      ??parse_value_2
        MOV      R2,#+4
        MOV      R1,R6
        ADD      R0,R3,R0
        SWI      +277
        CMP      R0,#+0
        BNE      ??parse_value_2
        MOV      R0,#+4
        STR      R0,[R4, #+12]
        B        ??parse_value_3
??parse_value_2:
        LDR      R0,[R5, #+8]
        LDR      R1,[R5, #+4]
        MOV      R7,#+1
        ADD      R2,R0,#+5
        CMP      R1,R2
        BCC      ??parse_value_4
        LDR      R3,[R5, #+0]
        MOV      R2,#+5
        ADD      R1,R6,#+8
        ADD      R0,R0,R3
        SWI      +277
        CMP      R0,#+0
        BNE      ??parse_value_4
        STR      R7,[R4, #+12]
        LDR      R0,[R5, #+8]
        ADD      R0,R0,#+5
        STR      R0,[R5, #+8]
        MOV      R0,#+1
        POP      {R4-R7,PC}
??parse_value_4:
        LDR      R0,[R5, #+8]
        LDR      R1,[R5, #+4]
        ADD      R2,R0,#+4
        CMP      R1,R2
        BCC      ??parse_value_5
        LDR      R3,[R5, #+0]
        MOV      R2,#+4
        ADD      R1,R6,#+16
        ADD      R0,R0,R3
        SWI      +277
        CMP      R0,#+0
        BNE      ??parse_value_5
        MOV      R0,#+2
        STR      R0,[R4, #+12]
        STR      R7,[R4, #+20]
??parse_value_3:
        LDR      R0,[R5, #+8]
        ADD      R0,R0,#+4
        STR      R0,[R5, #+8]
        MOV      R0,#+1
        POP      {R4-R7,PC}
??parse_value_5:
        LDR      R0,[R5, #+8]
        LDR      R1,[R5, #+4]
        CMP      R0,R1
        BCS      ??parse_value_1
        LDR      R1,[R5, #+0]
        ADD      R0,R0,R1
        LDRB     R1,[R0, #+0]
        CMP      R1,#+34
        BNE      ??parse_value_6
        MOV      R1,R5
        MOV      R0,R4
        BL       parse_string
        POP      {R4-R7,PC}
??parse_value_6:
        CMP      R1,#+45
        BEQ      ??parse_value_7
        CMP      R1,#+48
        BCC      ??parse_value_8
        CMP      R1,#+58
        BCS      ??parse_value_8
??parse_value_7:
        MOV      R1,R5
        MOV      R0,R4
        BL       parse_number
        POP      {R4-R7,PC}
??parse_value_8:
        CMP      R1,#+91
        BNE      ??parse_value_9
        MOV      R1,R5
        MOV      R0,R4
        BL       parse_array
        POP      {R4-R7,PC}
??parse_value_9:
        CMP      R1,#+123
        BNE      ??parse_value_1
        MOV      R1,R5
        MOV      R0,R4
        BL       parse_object
        POP      {R4-R7,PC}       ;; return
        CFI EndBlock cfiBlock53

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable9:
        DC32     `?<Constant "null">`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock54 Using cfiCommon0
        CFI NoFunction
        THUMB
??print_value??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock54
        REQUIRE print_value

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock55 Using cfiCommon1
        CFI Function print_value
        ARM
print_value:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R4,R0
        MOV      R5,R1
        CMP      R4,#+0
        CMPNE    R5,#+0
        BEQ      ??print_value_1
        LDR      R1,[R4, #+12]
        LDR      R0,[R4, #+16]
        LDR      R6,??DataTable10  ;; `?<Constant "null">`
        AND      R1,R1,#0xFF
        SUB      R1,R1,#+1
        CMP      R1,#+127
        BHI      ??print_value_1
        ADR      R2,??print_value_0
        LDRB     R2,[R2, R1]
        ADD      PC,PC,R2, LSL #+2
        DATA
??print_value_0:
        DC8      +38,+47,+84,+31
        DC8      +84,+84,+84,+56
        DC8      +84,+84,+84,+84
        DC8      +84,+84,+84,+73
        DC8      +84,+84,+84,+84
        DC8      +84,+84,+84,+84
        DC8      +84,+84,+84,+84
        DC8      +84,+84,+84,+76
        DC8      +84,+84,+84,+84
        DC8      +84,+84,+84,+84
        DC8      +84,+84,+84,+84
        DC8      +84,+84,+84,+84
        DC8      +84,+84,+84,+84
        DC8      +84,+84,+84,+84
        DC8      +84,+84,+84,+84
        DC8      +84,+84,+84,+80
        DC8      +84,+84,+84,+84
        DC8      +84,+84,+84,+84
        DC8      +84,+84,+84,+84
        DC8      +84,+84,+84,+84
        DC8      +84,+84,+84,+84
        DC8      +84,+84,+84,+84
        DC8      +84,+84,+84,+84
        DC8      +84,+84,+84,+84
        DC8      +84,+84,+84,+84
        DC8      +84,+84,+84,+84
        DC8      +84,+84,+84,+84
        DC8      +84,+84,+84,+84
        DC8      +84,+84,+84,+84
        DC8      +84,+84,+84,+84
        DC8      +84,+84,+84,+84
        DC8      +84,+84,+84,+60
        ARM
??print_value_2:
        MOV      R1,#+5
        MOV      R0,R5
        BL       ensure
        CMP      R0,#+0
        POPEQ    {R4-R6,PC}
        MOV      R1,R6
        B        ??print_value_3
??print_value_4:
        MOV      R1,#+6
        MOV      R0,R5
        BL       ensure
        CMP      R0,#+0
        POPEQ    {R4-R6,PC}
        ADD      R1,R6,#+8
        SWI      +26
        MOV      R0,#+1
        POP      {R4-R6,PC}
??print_value_5:
        MOV      R1,#+5
        MOV      R0,R5
        BL       ensure
        CMP      R0,#+0
        POPEQ    {R4-R6,PC}
        ADD      R1,R6,#+16
??print_value_3:
        SWI      +26
??print_value_6:
        MOV      R0,#+1
        POP      {R4-R6,PC}
??print_value_7:
        MOV      R1,R5
        MOV      R0,R4
        BL       print_number
        POP      {R4-R6,PC}
??print_value_8:
        CMP      R0,#+0
        POPEQ    {R4-R6,PC}
        SWI      +27
        ADD      R6,R0,#+1
        MOV      R1,R6
        MOV      R0,R5
        BL       ensure
        CMP      R0,#+0
        POPEQ    {R4-R6,PC}
        LDR      R1,[R4, #+16]
        MOV      R2,R6
        SWI      +286
        B        ??print_value_6
??print_value_9:
        MOV      R1,R5
        BL       print_string_ptr
        POP      {R4-R6,PC}
??print_value_10:
        MOV      R1,R5
        MOV      R0,R4
        BL       print_array
        POP      {R4-R6,PC}
??print_value_11:
        MOV      R1,R5
        MOV      R0,R4
        BL       print_object
        POP      {R4-R6,PC}
??print_value_1:
        MOV      R0,#+0
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock55

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable10:
        DC32     `?<Constant "null">`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock56 Using cfiCommon0
        CFI NoFunction
        THUMB
??parse_array??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock56
        REQUIRE parse_array

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock57 Using cfiCommon1
        CFI Function parse_array
        ARM
parse_array:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        MOV      R4,R0
        MOV      R5,R1
        LDR      R0,[R5, #+12]
        MOV      R7,#+0
        MOV      R6,#+0
        CMP      R0,#+1000
        BCC      ??parse_array_0
??parse_array_1:
        MOV      R0,#+0
        POP      {R4-R7,PC}       ;; return
??parse_array_0:
        ADD      R0,R0,#+1
        STR      R0,[R5, #+12]
        LDR      R0,[R5, #+8]
        LDR      R1,[R5, #+0]
        LDRB     R1,[R0, +R1]
        CMP      R1,#+91
        BNE      ??parse_array_1
        ADD      R0,R0,#+1
        STR      R0,[R5, #+8]
        MOV      R0,R5
        BL       buffer_skip_whitespace
        CMP      R5,#+0
        BEQ      ??parse_array_2
        LDR      R0,[R5, #+8]
        LDR      R1,[R5, #+4]
        CMP      R0,R1
        BCS      ??parse_array_2
        LDR      R1,[R5, #+0]
        LDRB     R1,[R0, +R1]
        CMP      R1,#+93
        BEQ      ??parse_array_3
        SUB      R0,R0,#+1
        STR      R0,[R5, #+8]
??parse_array_4:
        ADD      R0,R5,#+16
        BL       cJSON_New_Item
        CMP      R0,#+0
        BEQ      ??parse_array_5
        CMP      R6,#+0
        STRNE    R0,[R7, #+0]
        STRNE    R7,[R0, #+4]
        MOVNE    R7,R0
        MOVEQ    R6,R0
        MOVEQ    R7,R6
        B        ??parse_array_6
??parse_array_2:
        LDR      R0,[R5, #+8]
        SUB      R0,R0,#+1
        STR      R0,[R5, #+8]
        B        ??parse_array_7
??parse_array_6:
        LDR      R0,[R5, #+8]
        ADD      R0,R0,#+1
        STR      R0,[R5, #+8]
        MOV      R0,R5
        BL       buffer_skip_whitespace
        MOV      R1,R5
        MOV      R0,R7
        BL       parse_value
        CMP      R0,#+0
        BEQ      ??parse_array_5
        MOV      R0,R5
        BL       buffer_skip_whitespace
        LDR      R0,[R5, #+8]
        LDR      R1,[R5, #+4]
        CMP      R0,R1
        BCS      ??parse_array_5
        LDR      R1,[R5, #+0]
        ADD      R0,R0,R1
        LDRB     R1,[R0, #+0]
        CMP      R1,#+44
        BEQ      ??parse_array_4
        CMP      R1,#+93
        BNE      ??parse_array_5
??parse_array_3:
        LDR      R0,[R5, #+12]
        SUB      R0,R0,#+1
        STR      R0,[R5, #+12]
        MOV      R0,#+32
        STR      R0,[R4, #+12]
        STR      R6,[R4, #+8]
        LDR      R0,[R5, #+8]
        ADD      R0,R0,#+1
        STR      R0,[R5, #+8]
        MOV      R0,#+1
        POP      {R4-R7,PC}
??parse_array_5:
        CMP      R6,#+0
        BEQ      ??parse_array_1
        MOV      R0,R6
        BL       cJSON_Delete
??parse_array_7:
        MOV      R0,#+0
        POP      {R4-R7,PC}
        CFI EndBlock cfiBlock57

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock58 Using cfiCommon0
        CFI NoFunction
        THUMB
??print_array??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock58
        REQUIRE print_array

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock59 Using cfiCommon1
        CFI Function print_array
        ARM
print_array:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        LDR      R5,[R0, #+8]
        MOVS     R4,R1
        MOVEQ    R0,#+0
        POPEQ    {R4-R7,PC}
        MOV      R1,#+1
        MOV      R0,R4
        BL       ensure
        CMP      R0,#+0
        POPEQ    {R4-R7,PC}
        MOV      R1,#+91
        STRB     R1,[R0, #+0]
        LDR      R0,[R4, #+8]
        MOV      R6,#+0
        ADD      R0,R0,#+1
        STR      R0,[R4, #+8]
        LDR      R0,[R4, #+12]
        ADD      R0,R0,#+1
        STR      R0,[R4, #+12]
        B        ??print_array_0
??print_array_1:
        MOV      R1,#+44
        STRB     R1,[R0], #+1
        LDR      R1,[R4, #+20]
        CMP      R1,#+0
        MOVNE    R1,#+32
        STRBNE   R1,[R0], #+1
        STRB     R6,[R0, #+0]
        LDR      R0,[R4, #+8]
        ADD      R0,R7,R0
        STR      R0,[R4, #+8]
??print_array_2:
        LDR      R5,[R5, #+0]
??print_array_0:
        CMP      R5,#+0
        BEQ      ??print_array_3
        MOV      R1,R4
        MOV      R0,R5
        BL       print_value
        CMP      R0,#+0
        POPEQ    {R4-R7,PC}
        MOV      R0,R4
        BL       update_offset
        LDR      R0,[R5, #+0]
        CMP      R0,#+0
        BEQ      ??print_array_2
        LDR      R0,[R4, #+20]
        CMP      R0,#+0
        MOVNE    R7,#+2
        MOVEQ    R7,#+1
        ADD      R1,R7,#+1
        MOV      R0,R4
        BL       ensure
        CMP      R0,#+0
        BNE      ??print_array_1
        POP      {R4-R7,PC}
??print_array_3:
        MOV      R1,#+2
        MOV      R0,R4
        BL       ensure
        CMP      R0,#+0
        POPEQ    {R4-R7,PC}
        MOV      R1,#+93
        STRB     R1,[R0], #+1
        STRB     R6,[R0, #+0]
        LDR      R0,[R4, #+12]
        SUB      R0,R0,#+1
        STR      R0,[R4, #+12]
        MOV      R0,#+1
        POP      {R4-R7,PC}       ;; return
        CFI EndBlock cfiBlock59

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock60 Using cfiCommon0
        CFI NoFunction
        THUMB
??parse_object??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock60
        REQUIRE parse_object

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock61 Using cfiCommon1
        CFI Function parse_object
        ARM
parse_object:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        MOV      R4,R0
        MOV      R5,R1
        LDR      R0,[R5, #+12]
        MOV      R6,#+0
        MOV      R7,#+0
        MOV      R8,R6
        CMP      R0,#+1000
        BCC      ??parse_object_0
??parse_object_1:
        MOV      R0,#+0
        POP      {R4-R8,PC}       ;; return
??parse_object_0:
        ADD      R0,R0,#+1
        STR      R0,[R5, #+12]
        CMP      R5,#+0
        BEQ      ??parse_object_1
        LDR      R0,[R5, #+8]
        LDR      R1,[R5, #+4]
        CMP      R0,R1
        BCS      ??parse_object_1
        LDR      R1,[R5, #+0]
        LDRB     R1,[R0, +R1]
        CMP      R1,#+123
        BNE      ??parse_object_1
        ADD      R0,R0,#+1
        STR      R0,[R5, #+8]
        MOV      R0,R5
        BL       buffer_skip_whitespace
        LDR      R0,[R5, #+8]
        LDR      R1,[R5, #+4]
        CMP      R0,R1
        BCS      ??parse_object_2
        LDR      R1,[R5, #+0]
        LDRB     R1,[R0, +R1]
        CMP      R1,#+125
        BEQ      ??parse_object_3
        SUB      R0,R0,#+1
        STR      R0,[R5, #+8]
??parse_object_4:
        ADD      R0,R5,#+16
        BL       cJSON_New_Item
        CMP      R0,#+0
        BEQ      ??parse_object_5
        CMP      R7,#+0
        STRNE    R0,[R8, #+0]
        STRNE    R8,[R0, #+4]
        MOVNE    R8,R0
        MOVEQ    R7,R0
        MOVEQ    R8,R7
        B        ??parse_object_6
??parse_object_2:
        SUB      R0,R0,#+1
        STR      R0,[R5, #+8]
        B        ??parse_object_7
??parse_object_6:
        LDR      R0,[R5, #+8]
        ADD      R0,R0,#+1
        STR      R0,[R5, #+8]
        MOV      R0,R5
        BL       buffer_skip_whitespace
        MOV      R1,R5
        MOV      R0,R8
        BL       parse_string
        CMP      R0,#+0
        BEQ      ??parse_object_5
        MOV      R0,R5
        BL       buffer_skip_whitespace
        ADD      R0,R8,#+16
        LDR      R1,[R0, #+0]
        STR      R1,[R0, #+16]
        STR      R6,[R0, #+0]
        LDR      R0,[R5, #+8]
        LDR      R1,[R5, #+4]
        CMP      R0,R1
        BCS      ??parse_object_5
        LDR      R1,[R5, #+0]
        LDRB     R1,[R0, +R1]
        CMP      R1,#+58
        BNE      ??parse_object_5
        ADD      R0,R0,#+1
        STR      R0,[R5, #+8]
        MOV      R0,R5
        BL       buffer_skip_whitespace
        MOV      R1,R5
        MOV      R0,R8
        BL       parse_value
        CMP      R0,#+0
        BEQ      ??parse_object_5
        MOV      R0,R5
        BL       buffer_skip_whitespace
        LDR      R0,[R5, #+8]
        LDR      R1,[R5, #+4]
        CMP      R0,R1
        BCS      ??parse_object_5
        LDR      R1,[R5, #+0]
        ADD      R0,R0,R1
        LDRB     R1,[R0, #+0]
        CMP      R1,#+44
        BEQ      ??parse_object_4
        CMP      R1,#+125
        BNE      ??parse_object_5
??parse_object_3:
        LDR      R0,[R5, #+12]
        SUB      R0,R0,#+1
        STR      R0,[R5, #+12]
        MOV      R0,#+64
        STR      R0,[R4, #+12]
        STR      R7,[R4, #+8]
        LDR      R0,[R5, #+8]
        ADD      R0,R0,#+1
        STR      R0,[R5, #+8]
        MOV      R0,#+1
        POP      {R4-R8,PC}
??parse_object_5:
        CMP      R7,#+0
        BEQ      ??parse_object_1
        MOV      R0,R7
        BL       cJSON_Delete
??parse_object_7:
        MOV      R0,#+0
        POP      {R4-R8,PC}
        CFI EndBlock cfiBlock61

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock62 Using cfiCommon0
        CFI NoFunction
        THUMB
??print_object??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock62
        REQUIRE print_object

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock63 Using cfiCommon1
        CFI Function print_object
        ARM
print_object:
        PUSH     {R4-R6,R8-R10,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R10 Frame(CFA, -8)
        CFI R9 Frame(CFA, -12)
        CFI R8 Frame(CFA, -16)
        CFI R6 Frame(CFA, -20)
        CFI R5 Frame(CFA, -24)
        CFI R4 Frame(CFA, -28)
        CFI CFA R13+28
        LDR      R6,[R0, #+8]
        MOVS     R4,R1
        MOVEQ    R0,#+0
        POPEQ    {R4-R6,R8-R10,PC}
        LDR      R0,[R4, #+20]
        CMP      R0,#+0
        MOVNE    R10,#+2
        MOVEQ    R10,#+1
        ADD      R1,R10,#+1
        MOV      R0,R4
        BL       ensure
        CMP      R0,#+0
        POPEQ    {R4-R6,R8-R10,PC}
        MOV      R1,#+123
        STRB     R1,[R0], #+1
        LDR      R1,[R4, #+12]
        MOV      R8,#+10
        ADD      R1,R1,#+1
        STR      R1,[R4, #+12]
        LDR      R1,[R4, #+20]
        MOV      R5,#+0
        CMP      R1,#+0
        STRBNE   R8,[R0, #+0]
        LDR      R0,[R4, #+8]
        MOV      R9,#+9
        ADD      R0,R10,R0
        STR      R0,[R4, #+8]
        B        ??print_object_0
??print_object_1:
        ADD      R10,R0,R1
        ADD      R1,R10,#+1
        MOV      R0,R4
        BL       ensure
        CMP      R0,#+0
        POPEQ    {R4-R6,R8-R10,PC}
        LDR      R1,[R6, #+0]
        CMP      R1,#+0
        MOVNE    R1,#+44
        STRBNE   R1,[R0], #+1
        LDR      R1,[R4, #+20]
        CMP      R1,#+0
        STRBNE   R8,[R0], #+1
        STRB     R5,[R0, #+0]
        LDR      R0,[R4, #+8]
        ADD      R0,R10,R0
        STR      R0,[R4, #+8]
        LDR      R6,[R6, #+0]
??print_object_0:
        LDR      R1,[R4, #+12]
        LDR      R0,[R4, #+20]
        CMP      R6,#+0
        BEQ      ??print_object_2
        CMP      R0,#+0
        BEQ      ??print_object_3
        MOV      R0,R4
        BL       ensure
        CMP      R0,#+0
        POPEQ    {R4-R6,R8-R10,PC}
        LDR      R2,[R4, #+12]
        MOV      R1,#+0
        CMP      R2,#+0
        BNE      ??print_object_4
        B        ??print_object_5
??print_object_6:
        STRB     R9,[R0], #+1
        ADD      R1,R1,#+1
??print_object_4:
        LDR      R2,[R4, #+12]
        CMP      R1,R2
        BCC      ??print_object_6
??print_object_5:
        LDR      R0,[R4, #+8]
        LDR      R1,[R4, #+12]
        ADD      R0,R1,R0
        STR      R0,[R4, #+8]
??print_object_3:
        LDR      R0,[R6, #+32]
        MOV      R1,R4
        BL       print_string_ptr
        CMP      R0,#+0
        POPEQ    {R4-R6,R8-R10,PC}
        MOV      R0,R4
        BL       update_offset
        LDR      R0,[R4, #+20]
        CMP      R0,#+0
        MOVNE    R10,#+2
        MOVEQ    R10,#+1
        MOV      R1,R10
        MOV      R0,R4
        BL       ensure
        CMP      R0,#+0
        POPEQ    {R4-R6,R8-R10,PC}
        MOV      R1,#+58
        STRB     R1,[R0], #+1
        LDR      R1,[R4, #+20]
        CMP      R1,#+0
        STRBNE   R9,[R0, #+0]
        LDR      R0,[R4, #+8]
        MOV      R1,R4
        ADD      R0,R10,R0
        STR      R0,[R4, #+8]
        MOV      R0,R6
        BL       print_value
        CMP      R0,#+0
        POPEQ    {R4-R6,R8-R10,PC}
        MOV      R0,R4
        BL       update_offset
        LDR      R0,[R4, #+20]
        CMP      R0,#+0
        LDR      R0,[R6, #+0]
        MOVNE    R1,#+1
        MOVEQ    R1,#+0
        CMP      R0,#+0
        BEQ      ??print_object_1
        MOV      R0,#+1
        B        ??print_object_1
??print_object_2:
        CMP      R0,#+0
        ADDNE    R1,R1,#+1
        MOVEQ    R1,#+2
        MOV      R0,R4
        BL       ensure
        CMP      R0,#+0
        POPEQ    {R4-R6,R8-R10,PC}
        LDR      R1,[R4, #+20]
        CMP      R1,#+0
        BEQ      ??print_object_7
        LDR      R2,[R4, #+12]
        MOV      R1,#+0
        SUBS     R2,R2,#+1
        BNE      ??print_object_8
        B        ??print_object_7
??print_object_9:
        STRB     R9,[R0], #+1
        ADD      R1,R1,#+1
??print_object_8:
        LDR      R2,[R4, #+12]
        SUB      R2,R2,#+1
        CMP      R1,R2
        BCC      ??print_object_9
??print_object_7:
        MOV      R1,#+125
        STRB     R1,[R0], #+1
        STRB     R5,[R0, #+0]
        LDR      R0,[R4, #+12]
        SUB      R0,R0,#+1
        STR      R0,[R4, #+12]
        MOV      R0,#+1
        POP      {R4-R6,R8-R10,PC}
        CFI EndBlock cfiBlock63

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock64 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_GetArraySize??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock64
        REQUIRE cJSON_GetArraySize

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock65 Using cfiCommon1
        CFI Function cJSON_GetArraySize
        ARM
cJSON_GetArraySize:
        MOV      R1,#+0
        CMP      R0,#+0
        BXEQ     LR
        LDR      R0,[R0, #+8]
        CMP      R0,#+0
        BEQ      ??cJSON_GetArraySize_0
??cJSON_GetArraySize_1:
        LDR      R0,[R0, #+0]
        ADD      R1,R1,#+1
        CMP      R0,#+0
        BNE      ??cJSON_GetArraySize_1
??cJSON_GetArraySize_0:
        MOV      R0,R1
        BX       LR               ;; return
        CFI EndBlock cfiBlock65

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock66 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_GetArrayItem??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock66
        REQUIRE cJSON_GetArrayItem

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock67 Using cfiCommon1
        CFI Function cJSON_GetArrayItem
        ARM
cJSON_GetArrayItem:
        CMP      R1,#+0
        MOVMI    R0,#+0
        BXMI     LR
        CMP      R0,#+0
        BXEQ     LR
        LDR      R0,[R0, #+8]
        B        ??cJSON_GetArrayItem_0
??cJSON_GetArrayItem_1:
        LDR      R0,[R0, #+0]
        SUB      R1,R1,#+1
??cJSON_GetArrayItem_0:
        CMP      R0,#+0
        CMPNE    R1,#+0
        BNE      ??cJSON_GetArrayItem_1
        BX       LR               ;; return
        CFI EndBlock cfiBlock67

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock68 Using cfiCommon0
        CFI NoFunction
        THUMB
??get_object_item??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock68
        REQUIRE get_object_item

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock69 Using cfiCommon1
        CFI Function get_object_item
        ARM
get_object_item:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        MOV      R4,R1
        CMP      R0,#+0
        POPEQ    {R4-R8,PC}
        CMP      R4,#+0
        MOVEQ    R0,#+0
        POPEQ    {R4-R8,PC}
        LDR      R5,[R0, #+8]
        CMP      R2,#+0
        BEQ      ??get_object_item_0
??get_object_item_1:
        CMP      R5,#+0
        BEQ      ??get_object_item_2
        LDR      R1,[R5, #+32]
        MOV      R0,R4
        SWI      +25
        CMP      R0,#+0
        BEQ      ??get_object_item_2
        LDR      R5,[R5, #+0]
        B        ??get_object_item_1
??get_object_item_3:
        LDR      R5,[R5, #+0]
??get_object_item_0:
        CMP      R5,#+0
        BEQ      ??get_object_item_2
        LDR      R6,[R5, #+32]
        MOVS     R7,R4
        CMPNE    R6,#+0
        BEQ      ??get_object_item_3
        CMP      R7,R6
        BNE      ??get_object_item_4
        MOV      R0,R5
        POP      {R4-R8,PC}
??get_object_item_5:
        LDRB     R0,[R7], #+1
        CMP      R0,#+0
        BEQ      ??get_object_item_2
        ADD      R6,R6,#+1
??get_object_item_4:
        LDRB     R0,[R7, #+0]
        _BLF     tolower,??tolower??rA
        MOV      R8,R0
        LDRB     R0,[R6, #+0]
        _BLF     tolower,??tolower??rA
        CMP      R8,R0
        BEQ      ??get_object_item_5
        LDRB     R0,[R7, #+0]
        _BLF     tolower,??tolower??rA
        MOV      R7,R0
        LDRB     R0,[R6, #+0]
        _BLF     tolower,??tolower??rA
        SUBS     R0,R7,R0
        BNE      ??get_object_item_3
??get_object_item_2:
        MOV      R0,R5
        POP      {R4-R8,PC}       ;; return
        CFI EndBlock cfiBlock69

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock70 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_GetObjectItem??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock70
        REQUIRE cJSON_GetObjectItem

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock71 Using cfiCommon1
        CFI Function cJSON_GetObjectItem
        ARM
cJSON_GetObjectItem:
        MOV      R2,#+0
        B        get_object_item  ;; tailcall
        CFI EndBlock cfiBlock71

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock72 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_GetObjectItemCaseSensitive??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock72
        REQUIRE cJSON_GetObjectItemCaseSensitive

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock73 Using cfiCommon1
        CFI Function cJSON_GetObjectItemCaseSensitive
        ARM
cJSON_GetObjectItemCaseSensitive:
        MOV      R2,#+1
        B        get_object_item  ;; tailcall
        CFI EndBlock cfiBlock73

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock74 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_HasObjectItem??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock74
        REQUIRE cJSON_HasObjectItem

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock75 Using cfiCommon1
        CFI Function cJSON_HasObjectItem
        ARM
cJSON_HasObjectItem:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R2,#+0
        BL       get_object_item
        CMP      R0,#+0
        MOVNE    R0,#+1
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock75

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock76 Using cfiCommon0
        CFI NoFunction
        THUMB
??add_item_to_array??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock76
        REQUIRE add_item_to_array

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock77 Using cfiCommon1
        CFI Function add_item_to_array
        ARM
add_item_to_array:
        CMP      R1,#+0
        CMPNE    R0,#+0
        MOVEQ    R0,#+0
        BXEQ     LR
        LDR      R2,[R0, #+8]
        CMP      R2,#+0
        BNE      ??add_item_to_array_0
        STR      R1,[R0, #+8]
        B        ??add_item_to_array_1
??add_item_to_array_2:
        MOV      R2,R0
??add_item_to_array_0:
        LDR      R0,[R2, #+0]
        CMP      R0,#+0
        BNE      ??add_item_to_array_2
        STR      R1,[R2, #+0]
        STR      R2,[R1, #+4]
??add_item_to_array_1:
        MOV      R0,#+1
        BX       LR               ;; return
        CFI EndBlock cfiBlock77

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock78 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_AddItemToArray??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock78
        REQUIRE cJSON_AddItemToArray

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock79 Using cfiCommon1
        CFI Function cJSON_AddItemToArray
        ARM
cJSON_AddItemToArray:
        B        add_item_to_array  ;; tailcall
        CFI EndBlock cfiBlock79

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock80 Using cfiCommon0
        CFI NoFunction
        THUMB
??add_item_to_object??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock80
        REQUIRE add_item_to_object

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock81 Using cfiCommon1
        CFI Function add_item_to_object
        ARM
add_item_to_object:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        MOV      R4,R0
        LDR      R0,[SP, #+24]
        MOV      R7,R1
        MOV      R5,R2
        MOV      R6,R3
        CMP      R4,#+0
        CMPNE    R7,#+0
        CMPNE    R5,#+0
        BNE      ??add_item_to_object_0
??add_item_to_object_1:
        MOV      R0,#+0
        POP      {R4-R8,PC}
??add_item_to_object_0:
        CMP      R0,#+0
        LDRNE    R0,[R5, #+12]
        ORRNE    R8,R0,#0x200
        BNE      ??add_item_to_object_2
        MOV      R1,R6
        MOV      R0,R7
        BL       cJSON_strdup
        MOVS     R7,R0
        BEQ      ??add_item_to_object_1
        LDR      R0,[R5, #+12]
        BIC      R8,R0,#0x200
??add_item_to_object_2:
        LDR      R0,[R5, #+12]
        TST      R0,#0x200
        BNE      ??add_item_to_object_3
        LDR      R0,[R5, #+32]
        CMP      R0,#+0
        BEQ      ??add_item_to_object_3
        LDR      R1,[R6, #+4]
        BLX      R1
??add_item_to_object_3:
        STR      R7,[R5, #+32]
        STR      R8,[R5, #+12]
        MOV      R1,R5
        MOV      R0,R4
        BL       add_item_to_array
        POP      {R4-R8,PC}       ;; return
        CFI EndBlock cfiBlock81

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock82 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_AddItemToObject??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock82
        REQUIRE cJSON_AddItemToObject

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock83 Using cfiCommon1
        CFI Function cJSON_AddItemToObject
        ARM
cJSON_AddItemToObject:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R3,#+0
        PUSH     {R3}
        CFI CFA R13+8
        LDR      R3,??DataTable38  ;; global_hooks
        BL       add_item_to_object
        POP      {R0,PC}          ;; return
        CFI EndBlock cfiBlock83

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock84 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_AddItemToObjectCS??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock84
        REQUIRE cJSON_AddItemToObjectCS

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock85 Using cfiCommon1
        CFI Function cJSON_AddItemToObjectCS
        ARM
cJSON_AddItemToObjectCS:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R3,#+1
        PUSH     {R3}
        CFI CFA R13+8
        LDR      R3,??DataTable38  ;; global_hooks
        BL       add_item_to_object
        POP      {R0,PC}          ;; return
        CFI EndBlock cfiBlock85

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock86 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_AddItemReferenceToArray??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock86
        REQUIRE cJSON_AddItemReferenceToArray

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock87 Using cfiCommon1
        CFI Function cJSON_AddItemReferenceToArray
        ARM
cJSON_AddItemReferenceToArray:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R4,R0
        MOV      R5,R1
        CMP      R4,#+0
        POPEQ    {R4-R6,PC}
        CMP      R5,#+0
        BNE      ??cJSON_AddItemReferenceToArray_0
??cJSON_AddItemReferenceToArray_1:
        MOV      R6,#+0
        B        ??cJSON_AddItemReferenceToArray_2
??cJSON_AddItemReferenceToArray_0:
        LDR      R0,??DataTable38  ;; global_hooks
        BL       cJSON_New_Item
        MOVS     R6,R0
        BEQ      ??cJSON_AddItemReferenceToArray_1
        MOV      R2,#+36
        MOV      R1,R5
        SWI      +286
        MOV      R0,#+0
        STR      R0,[R6, #+32]
        LDR      R1,[R6, #+12]
        ORR      R1,R1,#0x100
        STR      R1,[R6, #+12]
        STR      R0,[R6, #+4]
        STR      R0,[R6, #+0]
??cJSON_AddItemReferenceToArray_2:
        MOV      R1,R6
        MOV      R0,R4
        BL       add_item_to_array
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock87

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock88 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_AddItemReferenceToObject??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock88
        REQUIRE cJSON_AddItemReferenceToObject

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock89 Using cfiCommon1
        CFI Function cJSON_AddItemReferenceToObject
        ARM
cJSON_AddItemReferenceToObject:
        PUSH     {R4-R9,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R9 Frame(CFA, -8)
        CFI R8 Frame(CFA, -12)
        CFI R7 Frame(CFA, -16)
        CFI R6 Frame(CFA, -20)
        CFI R5 Frame(CFA, -24)
        CFI R4 Frame(CFA, -28)
        CFI CFA R13+28
        MOV      R4,R0
        MOV      R5,R1
        MOV      R8,R2
        CMP      R4,#+0
        CMPNE    R5,#+0
        POPEQ    {R4-R9,PC}
        LDR      R6,??DataTable38  ;; global_hooks
        MOV      R7,#+0
        CMP      R8,#+0
        BEQ      ??cJSON_AddItemReferenceToObject_0
        MOV      R0,R6
        BL       cJSON_New_Item
        MOVS     R9,R0
        BEQ      ??cJSON_AddItemReferenceToObject_0
        MOV      R2,#+36
        MOV      R1,R8
        SWI      +286
        STR      R7,[R9, #+32]
        LDR      R0,[R9, #+12]
        ORR      R0,R0,#0x100
        STR      R0,[R9, #+12]
        STR      R7,[R9, #+4]
        STR      R7,[R9, #+0]
        MOV      R7,R9
??cJSON_AddItemReferenceToObject_0:
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+32
        MOV      R3,R6
        MOV      R2,R7
        MOV      R1,R5
        MOV      R0,R4
        BL       add_item_to_object
        ADD      SP,SP,#+4
        CFI CFA R13+28
        POP      {R4-R9,PC}       ;; return
        CFI EndBlock cfiBlock89

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock90 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_AddNullToObject??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock90
        REQUIRE cJSON_AddNullToObject

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock91 Using cfiCommon1
        CFI Function cJSON_AddNullToObject
        ARM
cJSON_AddNullToObject:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R4,R0
        MOV      R5,R1
        BL       cJSON_CreateNull
        LDR      R3,??DataTable38  ;; global_hooks
        MOV      R6,R0
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+20
        MOV      R2,R6
        MOV      R1,R5
        MOV      R0,R4
        BL       add_item_to_object
        CMP      R0,#+0
        ADD      SP,SP,#+4
        CFI CFA R13+16
        MOV      R0,R6
        POPNE    {R4-R6,PC}
        BL       cJSON_Delete
        MOV      R0,#+0
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock91

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock92 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_AddTrueToObject??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock92
        REQUIRE cJSON_AddTrueToObject

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock93 Using cfiCommon1
        CFI Function cJSON_AddTrueToObject
        ARM
cJSON_AddTrueToObject:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R4,R0
        MOV      R5,R1
        BL       cJSON_CreateTrue
        LDR      R3,??DataTable38  ;; global_hooks
        MOV      R6,R0
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+20
        MOV      R2,R6
        MOV      R1,R5
        MOV      R0,R4
        BL       add_item_to_object
        CMP      R0,#+0
        ADD      SP,SP,#+4
        CFI CFA R13+16
        MOV      R0,R6
        POPNE    {R4-R6,PC}
        BL       cJSON_Delete
        MOV      R0,#+0
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock93

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock94 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_AddFalseToObject??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock94
        REQUIRE cJSON_AddFalseToObject

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock95 Using cfiCommon1
        CFI Function cJSON_AddFalseToObject
        ARM
cJSON_AddFalseToObject:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R4,R0
        MOV      R5,R1
        BL       cJSON_CreateFalse
        LDR      R3,??DataTable38  ;; global_hooks
        MOV      R6,R0
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+20
        MOV      R2,R6
        MOV      R1,R5
        MOV      R0,R4
        BL       add_item_to_object
        CMP      R0,#+0
        ADD      SP,SP,#+4
        CFI CFA R13+16
        MOV      R0,R6
        POPNE    {R4-R6,PC}
        BL       cJSON_Delete
        MOV      R0,#+0
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock95

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock96 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_AddBoolToObject??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock96
        REQUIRE cJSON_AddBoolToObject

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock97 Using cfiCommon1
        CFI Function cJSON_AddBoolToObject
        ARM
cJSON_AddBoolToObject:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R4,R0
        MOV      R5,R1
        MOV      R0,R2
        BL       cJSON_CreateBool
        LDR      R3,??DataTable38  ;; global_hooks
        MOV      R6,R0
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+20
        MOV      R2,R6
        MOV      R1,R5
        MOV      R0,R4
        BL       add_item_to_object
        CMP      R0,#+0
        ADD      SP,SP,#+4
        CFI CFA R13+16
        MOV      R0,R6
        POPNE    {R4-R6,PC}
        BL       cJSON_Delete
        MOV      R0,#+0
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock97

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock98 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_AddNumberToObject??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock98
        REQUIRE cJSON_AddNumberToObject

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock99 Using cfiCommon1
        CFI Function cJSON_AddNumberToObject
        ARM
cJSON_AddNumberToObject:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R4,R0
        MOV      R5,R1
        MOV      R0,R2
        MOV      R1,R3
        BL       cJSON_CreateNumber
        LDR      R3,??DataTable38  ;; global_hooks
        MOV      R6,R0
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+20
        MOV      R2,R6
        MOV      R1,R5
        MOV      R0,R4
        BL       add_item_to_object
        CMP      R0,#+0
        ADD      SP,SP,#+4
        CFI CFA R13+16
        MOV      R0,R6
        POPNE    {R4-R6,PC}
        BL       cJSON_Delete
        MOV      R0,#+0
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock99

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock100 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_AddStringToObject??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock100
        REQUIRE cJSON_AddStringToObject

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock101 Using cfiCommon1
        CFI Function cJSON_AddStringToObject
        ARM
cJSON_AddStringToObject:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R4,R0
        MOV      R5,R1
        MOV      R0,R2
        BL       cJSON_CreateString
        LDR      R3,??DataTable38  ;; global_hooks
        MOV      R6,R0
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+20
        MOV      R2,R6
        MOV      R1,R5
        MOV      R0,R4
        BL       add_item_to_object
        CMP      R0,#+0
        ADD      SP,SP,#+4
        CFI CFA R13+16
        MOV      R0,R6
        POPNE    {R4-R6,PC}
        BL       cJSON_Delete
        MOV      R0,#+0
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock101

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock102 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_AddRawToObject??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock102
        REQUIRE cJSON_AddRawToObject

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock103 Using cfiCommon1
        CFI Function cJSON_AddRawToObject
        ARM
cJSON_AddRawToObject:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R4,R0
        MOV      R5,R1
        MOV      R0,R2
        BL       cJSON_CreateRaw
        LDR      R3,??DataTable38  ;; global_hooks
        MOV      R6,R0
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+20
        MOV      R2,R6
        MOV      R1,R5
        MOV      R0,R4
        BL       add_item_to_object
        CMP      R0,#+0
        ADD      SP,SP,#+4
        CFI CFA R13+16
        MOV      R0,R6
        POPNE    {R4-R6,PC}
        BL       cJSON_Delete
        MOV      R0,#+0
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock103

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock104 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_AddObjectToObject??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock104
        REQUIRE cJSON_AddObjectToObject

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock105 Using cfiCommon1
        CFI Function cJSON_AddObjectToObject
        ARM
cJSON_AddObjectToObject:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R4,R0
        MOV      R5,R1
        BL       cJSON_CreateObject
        LDR      R3,??DataTable38  ;; global_hooks
        MOV      R6,R0
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+20
        MOV      R2,R6
        MOV      R1,R5
        MOV      R0,R4
        BL       add_item_to_object
        CMP      R0,#+0
        ADD      SP,SP,#+4
        CFI CFA R13+16
        MOV      R0,R6
        POPNE    {R4-R6,PC}
        BL       cJSON_Delete
        MOV      R0,#+0
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock105

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock106 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_AddArrayToObject??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock106
        REQUIRE cJSON_AddArrayToObject

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock107 Using cfiCommon1
        CFI Function cJSON_AddArrayToObject
        ARM
cJSON_AddArrayToObject:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R4,R0
        MOV      R5,R1
        BL       cJSON_CreateArray
        LDR      R3,??DataTable38  ;; global_hooks
        MOV      R6,R0
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+20
        MOV      R2,R6
        MOV      R1,R5
        MOV      R0,R4
        BL       add_item_to_object
        CMP      R0,#+0
        ADD      SP,SP,#+4
        CFI CFA R13+16
        MOV      R0,R6
        POPNE    {R4-R6,PC}
        BL       cJSON_Delete
        MOV      R0,#+0
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock107

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock108 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_DetachItemViaPointer??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock108
        REQUIRE cJSON_DetachItemViaPointer

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock109 Using cfiCommon1
        CFI Function cJSON_DetachItemViaPointer
        ARM
cJSON_DetachItemViaPointer:
        CMP      R0,#+0
        BXEQ     LR
        CMP      R1,#+0
        MOVEQ    R0,#+0
        BXEQ     LR
        LDR      R2,[R1, #+4]
        CMP      R2,#+0
        LDRNE    R3,[R1, #+0]
        STRNE    R3,[R2, #+0]
        LDR      R2,[R1, #+0]
        CMP      R2,#+0
        LDRNE    R3,[R1, #+4]
        STRNE    R3,[R2, #+4]
        LDR      R2,[R0, #+8]
        CMP      R1,R2
        LDREQ    R2,[R1, #+0]
        STREQ    R2,[R0, #+8]
        MOV      R0,#+0
        STR      R0,[R1, #+4]
        STR      R0,[R1, #+0]
        MOV      R0,R1
        BX       LR               ;; return
        CFI EndBlock cfiBlock109

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock110 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_DetachItemFromArray??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock110
        REQUIRE cJSON_DetachItemFromArray

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock111 Using cfiCommon1
        CFI Function cJSON_DetachItemFromArray
        ARM
cJSON_DetachItemFromArray:
        CMP      R1,#+0
        MOVMI    R0,#+0
        BXMI     LR
        CMP      R0,#+0
        MOVEQ    R2,#+0
        BEQ      ??cJSON_DetachItemFromArray_0
        LDR      R2,[R0, #+8]
        B        ??cJSON_DetachItemFromArray_1
??cJSON_DetachItemFromArray_2:
        LDR      R2,[R2, #+0]
        SUB      R1,R1,#+1
??cJSON_DetachItemFromArray_1:
        CMP      R2,#+0
        CMPNE    R1,#+0
        BNE      ??cJSON_DetachItemFromArray_2
??cJSON_DetachItemFromArray_0:
        MOV      R1,R2
        B        cJSON_DetachItemViaPointer  ;; tailcall
        CFI EndBlock cfiBlock111

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock112 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_DeleteItemFromArray??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock112
        REQUIRE cJSON_DeleteItemFromArray

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock113 Using cfiCommon1
        CFI Function cJSON_DeleteItemFromArray
        ARM
cJSON_DeleteItemFromArray:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        BL       cJSON_DetachItemFromArray
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        B        cJSON_Delete     ;; tailcall
        CFI EndBlock cfiBlock113

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock114 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_DetachItemFromObject??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock114
        REQUIRE cJSON_DetachItemFromObject

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock115 Using cfiCommon1
        CFI Function cJSON_DetachItemFromObject
        ARM
cJSON_DetachItemFromObject:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R2,#+0
        MOV      R4,R0
        BL       get_object_item
        MOV      R1,R0
        MOV      R0,R4
        POP      {R4,LR}          ;; Pop
        CFI R4 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        B        cJSON_DetachItemViaPointer  ;; tailcall
        CFI EndBlock cfiBlock115

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock116 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_DetachItemFromObjectCaseSensitive??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock116
        REQUIRE cJSON_DetachItemFromObjectCaseSensitive

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock117 Using cfiCommon1
        CFI Function cJSON_DetachItemFromObjectCaseSensitive
        ARM
cJSON_DetachItemFromObjectCaseSensitive:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R2,#+1
        MOV      R4,R0
        BL       get_object_item
        MOV      R1,R0
        MOV      R0,R4
        POP      {R4,LR}          ;; Pop
        CFI R4 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        B        cJSON_DetachItemViaPointer  ;; tailcall
        CFI EndBlock cfiBlock117

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock118 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_DeleteItemFromObject??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock118
        REQUIRE cJSON_DeleteItemFromObject

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock119 Using cfiCommon1
        CFI Function cJSON_DeleteItemFromObject
        ARM
cJSON_DeleteItemFromObject:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        BL       cJSON_DetachItemFromObject
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        B        cJSON_Delete     ;; tailcall
        CFI EndBlock cfiBlock119

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock120 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_DeleteItemFromObjectCaseSensitive??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock120
        REQUIRE cJSON_DeleteItemFromObjectCaseSensitive

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock121 Using cfiCommon1
        CFI Function cJSON_DeleteItemFromObjectCaseSensitive
        ARM
cJSON_DeleteItemFromObjectCaseSensitive:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        BL       cJSON_DetachItemFromObjectCaseSensitive
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        B        cJSON_Delete     ;; tailcall
        CFI EndBlock cfiBlock121

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock122 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_InsertItemInArray??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock122
        REQUIRE cJSON_InsertItemInArray

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock123 Using cfiCommon1
        CFI Function cJSON_InsertItemInArray
        ARM
cJSON_InsertItemInArray:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        CMP      R1,#+0
        POPMI    {PC}
        CMP      R0,#+0
        MOVEQ    R3,#+0
        BEQ      ??cJSON_InsertItemInArray_0
        LDR      R3,[R0, #+8]
        B        ??cJSON_InsertItemInArray_1
??cJSON_InsertItemInArray_2:
        LDR      R3,[R3, #+0]
        SUB      R1,R1,#+1
??cJSON_InsertItemInArray_1:
        CMP      R3,#+0
        CMPNE    R1,#+0
        BNE      ??cJSON_InsertItemInArray_2
??cJSON_InsertItemInArray_0:
        CMP      R3,#+0
        BNE      ??cJSON_InsertItemInArray_3
        MOV      R1,R2
        BL       add_item_to_array
        POP      {PC}
??cJSON_InsertItemInArray_3:
        STR      R3,[R2, #+0]
        LDR      R1,[R3, #+4]
        STR      R1,[R2, #+4]
        STR      R2,[R3, #+4]
        LDR      R1,[R0, #+8]
        CMP      R3,R1
        STREQ    R2,[R0, #+8]
        POPEQ    {PC}
        LDR      R0,[R2, #+4]
        STR      R2,[R0, #+0]
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock123

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock124 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_ReplaceItemViaPointer??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock124
        REQUIRE cJSON_ReplaceItemViaPointer

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock125 Using cfiCommon1
        CFI Function cJSON_ReplaceItemViaPointer
        ARM
cJSON_ReplaceItemViaPointer:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        CMP      R0,#+0
        POPEQ    {PC}
        CMP      R2,#+0
        CMPNE    R1,#+0
        MOVEQ    R0,#+0
        POPEQ    {PC}
        CMP      R2,R1
        BEQ      ??cJSON_ReplaceItemViaPointer_0
        LDR      R3,[R1, #+0]
        STR      R3,[R2, #+0]
        LDR      R12,[R1, #+4]
        CMP      R3,#+0
        STR      R12,[R2, #+4]
        STRNE    R2,[R3, #+4]
        LDR      R3,[R2, #+4]
        CMP      R3,#+0
        STRNE    R2,[R3, #+0]
        LDR      R3,[R0, #+8]
        CMP      R3,R1
        STREQ    R2,[R0, #+8]
        MOV      R0,#+0
        STR      R0,[R1, #+0]
        STR      R0,[R1, #+4]
        MOV      R0,R1
        BL       cJSON_Delete
??cJSON_ReplaceItemViaPointer_0:
        MOV      R0,#+1
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock125

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock126 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_ReplaceItemInArray??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock126
        REQUIRE cJSON_ReplaceItemInArray

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock127 Using cfiCommon1
        CFI Function cJSON_ReplaceItemInArray
        ARM
cJSON_ReplaceItemInArray:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        CMP      R1,#+0
        POPMI    {PC}
        CMP      R0,#+0
        MOVEQ    R3,#+0
        BEQ      ??cJSON_ReplaceItemInArray_0
        LDR      R3,[R0, #+8]
        B        ??cJSON_ReplaceItemInArray_1
??cJSON_ReplaceItemInArray_2:
        LDR      R3,[R3, #+0]
        SUB      R1,R1,#+1
??cJSON_ReplaceItemInArray_1:
        CMP      R3,#+0
        CMPNE    R1,#+0
        BNE      ??cJSON_ReplaceItemInArray_2
??cJSON_ReplaceItemInArray_0:
        MOV      R1,R3
        BL       cJSON_ReplaceItemViaPointer
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock127

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock128 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_ReplaceItemInObject??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock128
        REQUIRE cJSON_ReplaceItemInObject

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock129 Using cfiCommon1
        CFI Function cJSON_ReplaceItemInObject
        ARM
cJSON_ReplaceItemInObject:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        MOV      R4,R0
        MOV      R5,R1
        MOVS     R6,R2
        CMPNE    R5,#+0
        POPEQ    {R4-R7,PC}
        LDR      R0,[R6, #+12]
        LDR      R7,??DataTable38  ;; global_hooks
        TST      R0,#0x200
        BNE      ??cJSON_ReplaceItemInObject_0
        LDR      R0,[R6, #+32]
        CMP      R0,#+0
        BEQ      ??cJSON_ReplaceItemInObject_0
        LDR      R1,[R7, #+4]
        BLX      R1
??cJSON_ReplaceItemInObject_0:
        MOV      R1,R7
        MOV      R0,R5
        BL       cJSON_strdup
        STR      R0,[R6, #+32]
        LDR      R0,[R6, #+12]
        MOV      R2,#+0
        BIC      R0,R0,#0x200
        STR      R0,[R6, #+12]
        MOV      R1,R5
        MOV      R0,R4
        BL       get_object_item
        MOV      R1,R0
        MOV      R2,R6
        MOV      R0,R4
        BL       cJSON_ReplaceItemViaPointer
        POP      {R4-R7,PC}       ;; return
        CFI EndBlock cfiBlock129

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock130 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_ReplaceItemInObjectCaseSensitive??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock130
        REQUIRE cJSON_ReplaceItemInObjectCaseSensitive

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock131 Using cfiCommon1
        CFI Function cJSON_ReplaceItemInObjectCaseSensitive
        ARM
cJSON_ReplaceItemInObjectCaseSensitive:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        MOV      R4,R0
        MOV      R5,R1
        MOVS     R6,R2
        CMPNE    R5,#+0
        POPEQ    {R4-R7,PC}
        LDR      R0,[R6, #+12]
        LDR      R7,??DataTable38  ;; global_hooks
        TST      R0,#0x200
        BNE      ??cJSON_ReplaceItemInObjectCaseSensitive_0
        LDR      R0,[R6, #+32]
        CMP      R0,#+0
        BEQ      ??cJSON_ReplaceItemInObjectCaseSensitive_0
        LDR      R1,[R7, #+4]
        BLX      R1
??cJSON_ReplaceItemInObjectCaseSensitive_0:
        MOV      R1,R7
        MOV      R0,R5
        BL       cJSON_strdup
        STR      R0,[R6, #+32]
        LDR      R0,[R6, #+12]
        MOV      R2,#+1
        BIC      R0,R0,#0x200
        STR      R0,[R6, #+12]
        MOV      R1,R5
        MOV      R0,R4
        BL       get_object_item
        MOV      R1,R0
        MOV      R2,R6
        MOV      R0,R4
        BL       cJSON_ReplaceItemViaPointer
        POP      {R4-R7,PC}       ;; return
        CFI EndBlock cfiBlock131

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock132 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_CreateNull??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock132
        REQUIRE cJSON_CreateNull

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock133 Using cfiCommon1
        CFI Function cJSON_CreateNull
        ARM
cJSON_CreateNull:
        LDR      R0,??DataTable38  ;; global_hooks
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        BL       cJSON_New_Item
        CMP      R0,#+0
        MOVNE    R1,#+4
        STRNE    R1,[R0, #+12]
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock133

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock134 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_CreateTrue??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock134
        REQUIRE cJSON_CreateTrue

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock135 Using cfiCommon1
        CFI Function cJSON_CreateTrue
        ARM
cJSON_CreateTrue:
        LDR      R0,??DataTable38  ;; global_hooks
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        BL       cJSON_New_Item
        CMP      R0,#+0
        MOVNE    R1,#+2
        STRNE    R1,[R0, #+12]
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock135

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock136 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_CreateFalse??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock136
        REQUIRE cJSON_CreateFalse

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock137 Using cfiCommon1
        CFI Function cJSON_CreateFalse
        ARM
cJSON_CreateFalse:
        LDR      R0,??DataTable38  ;; global_hooks
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        BL       cJSON_New_Item
        CMP      R0,#+0
        MOVNE    R1,#+1
        STRNE    R1,[R0, #+12]
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock137

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock138 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_CreateBool??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock138
        REQUIRE cJSON_CreateBool

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock139 Using cfiCommon1
        CFI Function cJSON_CreateBool
        ARM
cJSON_CreateBool:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
        LDR      R0,??DataTable38  ;; global_hooks
        BL       cJSON_New_Item
        CMP      R0,#+0
        POPEQ    {R4,PC}
        CMP      R4,#+0
        MOVNE    R1,#+2
        MOVEQ    R1,#+1
        STR      R1,[R0, #+12]
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock139

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock140 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_CreateNumber??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock140
        REQUIRE cJSON_CreateNumber

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock141 Using cfiCommon1
        CFI Function cJSON_CreateNumber
        ARM
cJSON_CreateNumber:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R4,R0
        LDR      R0,??DataTable38  ;; global_hooks
        MOV      R5,R1
        BL       cJSON_New_Item
        MOVS     R6,R0
        BEQ      ??cJSON_CreateNumber_0
        MOV      R0,#+8
        STR      R0,[R6, #+12]
        STR      R4,[R6, #+24]
        STR      R5,[R6, #+28]
        MOV      R0,R4
        MOV      R1,R5
        MOV      R2,#-1073741824
        ORR      R2,R2,#0x3FC00000
        MVN      R3,#-1342177280
        BIC      R3,R3,#0xE200000
        _BLF     __dGreaterEqual,??__dGreaterEqual??rA
        CMP      R0,#+0
        MVNNE    R0,#-2147483648
        BNE      ??cJSON_CreateNumber_1
        MOV      R0,R4
        MOV      R1,R5
        MVN      R2,#+1
        MVN      R3,#+805306368
        BIC      R3,R3,#0xE200000
        _BLF     __dLess,??__dLess??rA
        CMP      R0,#+0
        MOVNE    R0,#-2147483648
        BNE      ??cJSON_CreateNumber_1
        MOV      R0,R4
        MOV      R1,R5
        _BLF     __doubleToLong,??__doubleToLong??rA
??cJSON_CreateNumber_1:
        STR      R0,[R6, #+20]
??cJSON_CreateNumber_0:
        MOV      R0,R6
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock141

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock142 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_CreateString??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock142
        REQUIRE cJSON_CreateString

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock143 Using cfiCommon1
        CFI Function cJSON_CreateString
        ARM
cJSON_CreateString:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        LDR      R5,??DataTable38  ;; global_hooks
        MOV      R4,R0
        MOV      R0,R5
        BL       cJSON_New_Item
        MOVS     R6,R0
        BEQ      ??cJSON_CreateString_0
        MOV      R0,#+16
        STR      R0,[R6, #+12]
        MOV      R1,R5
        MOV      R0,R4
        BL       cJSON_strdup
        STR      R0,[R6, #+16]
        CMP      R0,#+0
        BNE      ??cJSON_CreateString_0
        MOV      R0,R6
        BL       cJSON_Delete
        MOV      R0,#+0
        POP      {R4-R6,PC}
??cJSON_CreateString_0:
        MOV      R0,R6
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock143

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock144 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_CreateStringReference??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock144
        REQUIRE cJSON_CreateStringReference

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock145 Using cfiCommon1
        CFI Function cJSON_CreateStringReference
        ARM
cJSON_CreateStringReference:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
        LDR      R0,??DataTable38  ;; global_hooks
        BL       cJSON_New_Item
        CMP      R0,#+0
        MOVNE    R1,#+272
        STRNE    R1,[R0, #+12]
        STRNE    R4,[R0, #+16]
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock145

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock146 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_CreateObjectReference??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock146
        REQUIRE cJSON_CreateObjectReference

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock147 Using cfiCommon1
        CFI Function cJSON_CreateObjectReference
        ARM
cJSON_CreateObjectReference:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
        LDR      R0,??DataTable38  ;; global_hooks
        BL       cJSON_New_Item
        CMP      R0,#+0
        MOVNE    R1,#+320
        STRNE    R1,[R0, #+12]
        STRNE    R4,[R0, #+8]
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock147

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock148 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_CreateArrayReference??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock148
        REQUIRE cJSON_CreateArrayReference

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock149 Using cfiCommon1
        CFI Function cJSON_CreateArrayReference
        ARM
cJSON_CreateArrayReference:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
        LDR      R0,??DataTable38  ;; global_hooks
        BL       cJSON_New_Item
        CMP      R0,#+0
        MOVNE    R1,#+288
        STRNE    R1,[R0, #+12]
        STRNE    R4,[R0, #+8]
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock149

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock150 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_CreateRaw??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock150
        REQUIRE cJSON_CreateRaw

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock151 Using cfiCommon1
        CFI Function cJSON_CreateRaw
        ARM
cJSON_CreateRaw:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        LDR      R5,??DataTable38  ;; global_hooks
        MOV      R4,R0
        MOV      R0,R5
        BL       cJSON_New_Item
        MOVS     R6,R0
        BEQ      ??cJSON_CreateRaw_0
        MOV      R0,#+128
        STR      R0,[R6, #+12]
        MOV      R1,R5
        MOV      R0,R4
        BL       cJSON_strdup
        STR      R0,[R6, #+16]
        CMP      R0,#+0
        BNE      ??cJSON_CreateRaw_0
        MOV      R0,R6
        BL       cJSON_Delete
        MOV      R0,#+0
        POP      {R4-R6,PC}
??cJSON_CreateRaw_0:
        MOV      R0,R6
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock151

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock152 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_CreateArray??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock152
        REQUIRE cJSON_CreateArray

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock153 Using cfiCommon1
        CFI Function cJSON_CreateArray
        ARM
cJSON_CreateArray:
        LDR      R0,??DataTable38  ;; global_hooks
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        BL       cJSON_New_Item
        CMP      R0,#+0
        MOVNE    R1,#+32
        STRNE    R1,[R0, #+12]
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock153

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock154 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_CreateObject??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock154
        REQUIRE cJSON_CreateObject

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock155 Using cfiCommon1
        CFI Function cJSON_CreateObject
        ARM
cJSON_CreateObject:
        LDR      R0,??DataTable38  ;; global_hooks
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        BL       cJSON_New_Item
        CMP      R0,#+0
        MOVNE    R1,#+64
        STRNE    R1,[R0, #+12]
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock155

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock156 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_CreateIntArray??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock156
        REQUIRE cJSON_CreateIntArray

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock157 Using cfiCommon1
        CFI Function cJSON_CreateIntArray
        ARM
cJSON_CreateIntArray:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        MOV      R5,R0
        MOV      R6,R1
        MOV      R4,#+0
        MOV      R7,#+0
        CMP      R6,#+0
        BMI      ??cJSON_CreateIntArray_0
        CMP      R5,#+0
        BNE      ??cJSON_CreateIntArray_1
??cJSON_CreateIntArray_2:
        B        ??cJSON_CreateIntArray_0
??cJSON_CreateIntArray_1:
        BL       cJSON_CreateArray
        MOVS     R8,R0
        BNE      ??cJSON_CreateIntArray_3
??cJSON_CreateIntArray_4:
        MOV      R0,R8
        POP      {R4-R8,PC}       ;; return
??cJSON_CreateIntArray_5:
        MOV      R7,R0
        ADD      R4,R4,#+1
??cJSON_CreateIntArray_3:
        CMP      R4,R6
        BCS      ??cJSON_CreateIntArray_4
        LDR      R0,[R5, +R4, LSL #+2]
        _BLF     __longToDouble,??__longToDouble??rA
        BL       cJSON_CreateNumber
        CMP      R0,#+0
        BNE      ??cJSON_CreateIntArray_6
        MOV      R0,R8
        BL       cJSON_Delete
??cJSON_CreateIntArray_0:
        MOV      R0,#+0
        POP      {R4-R8,PC}
??cJSON_CreateIntArray_6:
        CMP      R4,#+0
        STRNE    R0,[R7, #+0]
        STRNE    R7,[R0, #+4]
        STREQ    R0,[R8, #+8]
        B        ??cJSON_CreateIntArray_5
        CFI EndBlock cfiBlock157

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock158 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_CreateFloatArray??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock158
        REQUIRE cJSON_CreateFloatArray

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock159 Using cfiCommon1
        CFI Function cJSON_CreateFloatArray
        ARM
cJSON_CreateFloatArray:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        MOV      R5,R0
        MOV      R6,R1
        MOV      R4,#+0
        MOV      R7,#+0
        CMP      R6,#+0
        BMI      ??cJSON_CreateFloatArray_0
        CMP      R5,#+0
        BNE      ??cJSON_CreateFloatArray_1
??cJSON_CreateFloatArray_2:
        B        ??cJSON_CreateFloatArray_0
??cJSON_CreateFloatArray_1:
        BL       cJSON_CreateArray
        MOVS     R8,R0
        BNE      ??cJSON_CreateFloatArray_3
??cJSON_CreateFloatArray_4:
        MOV      R0,R8
        POP      {R4-R8,PC}       ;; return
??cJSON_CreateFloatArray_5:
        MOV      R7,R0
        ADD      R4,R4,#+1
??cJSON_CreateFloatArray_3:
        CMP      R4,R6
        BCS      ??cJSON_CreateFloatArray_4
        LDR      R0,[R5, +R4, LSL #+2]
        _BLF     __floatToDouble,??__floatToDouble??rA
        BL       cJSON_CreateNumber
        CMP      R0,#+0
        BNE      ??cJSON_CreateFloatArray_6
        MOV      R0,R8
        BL       cJSON_Delete
??cJSON_CreateFloatArray_0:
        MOV      R0,#+0
        POP      {R4-R8,PC}
??cJSON_CreateFloatArray_6:
        CMP      R4,#+0
        STRNE    R0,[R7, #+0]
        STRNE    R7,[R0, #+4]
        STREQ    R0,[R8, #+8]
        B        ??cJSON_CreateFloatArray_5
        CFI EndBlock cfiBlock159

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock160 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_CreateDoubleArray??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock160
        REQUIRE cJSON_CreateDoubleArray

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock161 Using cfiCommon1
        CFI Function cJSON_CreateDoubleArray
        ARM
cJSON_CreateDoubleArray:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        MOV      R5,R0
        MOV      R6,R1
        MOV      R4,#+0
        MOV      R8,#+0
        CMP      R6,#+0
        BMI      ??cJSON_CreateDoubleArray_0
        CMP      R5,#+0
        BNE      ??cJSON_CreateDoubleArray_1
??cJSON_CreateDoubleArray_2:
        B        ??cJSON_CreateDoubleArray_0
??cJSON_CreateDoubleArray_1:
        BL       cJSON_CreateArray
        MOVS     R7,R0
        BNE      ??cJSON_CreateDoubleArray_3
??cJSON_CreateDoubleArray_4:
        MOV      R0,R7
        POP      {R4-R8,PC}       ;; return
??cJSON_CreateDoubleArray_5:
        MOV      R8,R0
        ADD      R4,R4,#+1
??cJSON_CreateDoubleArray_3:
        CMP      R4,R6
        BCS      ??cJSON_CreateDoubleArray_4
        ADD      R0,R5,R4, LSL #+3
        LDM      R0,{R0,R1}
        BL       cJSON_CreateNumber
        CMP      R0,#+0
        BNE      ??cJSON_CreateDoubleArray_6
        MOV      R0,R7
        BL       cJSON_Delete
??cJSON_CreateDoubleArray_0:
        MOV      R0,#+0
        POP      {R4-R8,PC}
??cJSON_CreateDoubleArray_6:
        CMP      R4,#+0
        STRNE    R0,[R8, #+0]
        STRNE    R8,[R0, #+4]
        STREQ    R0,[R7, #+8]
        B        ??cJSON_CreateDoubleArray_5
        CFI EndBlock cfiBlock161

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock162 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_CreateStringArray??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock162
        REQUIRE cJSON_CreateStringArray

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock163 Using cfiCommon1
        CFI Function cJSON_CreateStringArray
        ARM
cJSON_CreateStringArray:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        MOV      R4,R0
        MOV      R5,R1
        MOV      R6,#+0
        MOV      R7,#+0
        CMP      R5,#+0
        BMI      ??cJSON_CreateStringArray_0
        CMP      R4,#+0
        BNE      ??cJSON_CreateStringArray_1
??cJSON_CreateStringArray_2:
        B        ??cJSON_CreateStringArray_0
??cJSON_CreateStringArray_1:
        BL       cJSON_CreateArray
        MOVS     R8,R0
        BNE      ??cJSON_CreateStringArray_3
??cJSON_CreateStringArray_4:
        MOV      R0,R8
        POP      {R4-R8,PC}       ;; return
??cJSON_CreateStringArray_5:
        MOV      R7,R0
        ADD      R6,R6,#+1
??cJSON_CreateStringArray_3:
        CMP      R6,R5
        BCS      ??cJSON_CreateStringArray_4
        LDR      R0,[R4, +R6, LSL #+2]
        BL       cJSON_CreateString
        CMP      R0,#+0
        BNE      ??cJSON_CreateStringArray_6
        MOV      R0,R8
        BL       cJSON_Delete
??cJSON_CreateStringArray_0:
        MOV      R0,#+0
        POP      {R4-R8,PC}
??cJSON_CreateStringArray_6:
        CMP      R6,#+0
        STRNE    R0,[R7, #+0]
        STRNE    R7,[R0, #+4]
        STREQ    R0,[R8, #+8]
        B        ??cJSON_CreateStringArray_5
        CFI EndBlock cfiBlock163

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock164 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_Duplicate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock164
        REQUIRE cJSON_Duplicate

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock165 Using cfiCommon1
        CFI Function cJSON_Duplicate
        ARM
cJSON_Duplicate:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        MOV      R6,R0
        MOV      R7,R1
        MOV      R4,#+0
        CMP      R6,#+0
        BEQ      ??cJSON_Duplicate_0
        LDR      R8,??DataTable38  ;; global_hooks
        MOV      R0,R8
        BL       cJSON_New_Item
        MOVS     R5,R0
        BEQ      ??cJSON_Duplicate_0
        LDR      R0,[R6, #+12]
        BIC      R0,R0,#0x100
        STR      R0,[R5, #+12]
        LDR      R0,[R6, #+20]
        STR      R0,[R5, #+20]
        LDR      R0,[R6, #+24]
        LDR      R1,[R6, #+28]
        STR      R0,[R5, #+24]
        STR      R1,[R5, #+28]
        LDR      R0,[R6, #+16]
        CMP      R0,#+0
        BEQ      ??cJSON_Duplicate_1
        MOV      R1,R8
        BL       cJSON_strdup
        STR      R0,[R5, #+16]
        CMP      R0,#+0
        BEQ      ??cJSON_Duplicate_2
??cJSON_Duplicate_1:
        LDR      R0,[R6, #+32]
        CMP      R0,#+0
        BEQ      ??cJSON_Duplicate_3
        LDR      R1,[R6, #+12]
        TST      R1,#0x200
        BNE      ??cJSON_Duplicate_4
        MOV      R1,R8
        BL       cJSON_strdup
??cJSON_Duplicate_4:
        STR      R0,[R5, #+32]
        CMP      R0,#+0
        BEQ      ??cJSON_Duplicate_2
??cJSON_Duplicate_3:
        CMP      R7,#+0
        BNE      ??cJSON_Duplicate_5
??cJSON_Duplicate_6:
        MOV      R0,R5
        POP      {R4-R8,PC}
??cJSON_Duplicate_5:
        LDR      R6,[R6, #+8]
        B        ??cJSON_Duplicate_7
??cJSON_Duplicate_8:
        LDR      R6,[R6, #+0]
        MOV      R4,R0
??cJSON_Duplicate_7:
        CMP      R6,#+0
        BEQ      ??cJSON_Duplicate_6
        MOV      R1,#+1
        MOV      R0,R6
        BL       cJSON_Duplicate
        CMP      R0,#+0
        BEQ      ??cJSON_Duplicate_2
        CMP      R4,#+0
        STREQ    R0,[R5, #+8]
        STRNE    R0,[R4, #+0]
        STRNE    R4,[R0, #+4]
        B        ??cJSON_Duplicate_8
??cJSON_Duplicate_2:
        MOV      R0,R5
        BL       cJSON_Delete
??cJSON_Duplicate_0:
        MOV      R0,#+0
        POP      {R4-R8,PC}       ;; return
        CFI EndBlock cfiBlock165

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable38:
        DC32     global_hooks

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock166 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_Minify??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock166
        REQUIRE cJSON_Minify

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock167 Using cfiCommon1
        CFI Function cJSON_Minify
        ARM
cJSON_Minify:
        MOVS     R1,R0
        BNE      ??cJSON_Minify_0
        BX       LR
??cJSON_Minify_1:
        ADD      R0,R0,#+1
??cJSON_Minify_0:
        LDRB     R2,[R0, #+0]
        CMP      R2,#+0
        BEQ      ??cJSON_Minify_2
        CMP      R2,#+32
        CMPNE    R2,#+9
        CMPNE    R2,#+13
        CMPNE    R2,#+10
        BEQ      ??cJSON_Minify_1
        CMP      R2,#+47
        LDRBEQ   R2,[R0, #+1]
        CMPEQ    R2,#+47
        BNE      ??cJSON_Minify_3
??cJSON_Minify_4:
        LDRB     R2,[R0, #+0]
        CMP      R2,#+0
        CMPNE    R2,#+10
        BEQ      ??cJSON_Minify_0
        ADD      R0,R0,#+1
        B        ??cJSON_Minify_4
??cJSON_Minify_3:
        LDRB     R2,[R0, #+0]
        CMP      R2,#+47
        LDRBEQ   R2,[R0, #+1]
        CMPEQ    R2,#+42
        BEQ      ??cJSON_Minify_5
        LDRB     R2,[R0, #+0]
        CMP      R2,#+34
        LDRB     R2,[R0], #+1
        STRB     R2,[R1], #+1
        BNE      ??cJSON_Minify_0
        B        ??cJSON_Minify_6
??cJSON_Minify_7:
        ADD      R0,R0,#+1
??cJSON_Minify_5:
        LDRB     R2,[R0, #+0]
        CMP      R2,#+0
        BEQ      ??cJSON_Minify_8
        CMP      R2,#+42
        LDRBEQ   R2,[R0, #+1]
        CMPEQ    R2,#+47
        BNE      ??cJSON_Minify_7
??cJSON_Minify_8:
        ADD      R0,R0,#+2
        B        ??cJSON_Minify_0
??cJSON_Minify_9:
        CMP      R2,#+92
        STRBEQ   R2,[R1], #+1
        ADDEQ    R0,R0,#+1
        LDRB     R2,[R0], #+1
        STRB     R2,[R1], #+1
??cJSON_Minify_6:
        LDRB     R2,[R0, #+0]
        CMP      R2,#+0
        CMPNE    R2,#+34
        BNE      ??cJSON_Minify_9
        LDRB     R2,[R0], #+1
        STRB     R2,[R1], #+1
        B        ??cJSON_Minify_0
??cJSON_Minify_2:
        MOV      R0,#+0
        STRB     R0,[R1, #+0]
        BX       LR               ;; return
        CFI EndBlock cfiBlock167

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock168 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_IsInvalid??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock168
        REQUIRE cJSON_IsInvalid

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock169 Using cfiCommon1
        CFI Function cJSON_IsInvalid
        ARM
cJSON_IsInvalid:
        CMP      R0,#+0
        BXEQ     LR
        LDR      R0,[R0, #+12]
        LSLS     R0,R0,#+24
        MOVEQ    R0,#+1
        BXEQ     LR
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock169

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock170 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_IsFalse??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock170
        REQUIRE cJSON_IsFalse

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock171 Using cfiCommon1
        CFI Function cJSON_IsFalse
        ARM
cJSON_IsFalse:
        CMP      R0,#+0
        BXEQ     LR
        LDR      R0,[R0, #+12]
        AND      R0,R0,#0xFF
        CMP      R0,#+1
        BXEQ     LR
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock171

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock172 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_IsTrue??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock172
        REQUIRE cJSON_IsTrue

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock173 Using cfiCommon1
        CFI Function cJSON_IsTrue
        ARM
cJSON_IsTrue:
        CMP      R0,#+0
        BXEQ     LR
        LDR      R0,[R0, #+12]
        AND      R0,R0,#0xFF
        CMP      R0,#+2
        MOVEQ    R0,#+1
        BXEQ     LR
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock173

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock174 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_IsBool??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock174
        REQUIRE cJSON_IsBool

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock175 Using cfiCommon1
        CFI Function cJSON_IsBool
        ARM
cJSON_IsBool:
        CMP      R0,#+0
        BXEQ     LR
        LDR      R0,[R0, #+12]
        TST      R0,#0x3
        MOVNE    R0,#+1
        BXNE     LR
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock175

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock176 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_IsNull??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock176
        REQUIRE cJSON_IsNull

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock177 Using cfiCommon1
        CFI Function cJSON_IsNull
        ARM
cJSON_IsNull:
        CMP      R0,#+0
        BXEQ     LR
        LDR      R0,[R0, #+12]
        AND      R0,R0,#0xFF
        CMP      R0,#+4
        MOVEQ    R0,#+1
        BXEQ     LR
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock177

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock178 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_IsNumber??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock178
        REQUIRE cJSON_IsNumber

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock179 Using cfiCommon1
        CFI Function cJSON_IsNumber
        ARM
cJSON_IsNumber:
        CMP      R0,#+0
        BXEQ     LR
        LDR      R0,[R0, #+12]
        AND      R0,R0,#0xFF
        CMP      R0,#+8
        MOVEQ    R0,#+1
        BXEQ     LR
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock179

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock180 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_IsString??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock180
        REQUIRE cJSON_IsString

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock181 Using cfiCommon1
        CFI Function cJSON_IsString
        ARM
cJSON_IsString:
        CMP      R0,#+0
        BXEQ     LR
        LDR      R0,[R0, #+12]
        AND      R0,R0,#0xFF
        CMP      R0,#+16
        MOVEQ    R0,#+1
        BXEQ     LR
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock181

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock182 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_IsArray??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock182
        REQUIRE cJSON_IsArray

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock183 Using cfiCommon1
        CFI Function cJSON_IsArray
        ARM
cJSON_IsArray:
        CMP      R0,#+0
        BXEQ     LR
        LDR      R0,[R0, #+12]
        AND      R0,R0,#0xFF
        CMP      R0,#+32
        MOVEQ    R0,#+1
        BXEQ     LR
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock183

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock184 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_IsObject??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock184
        REQUIRE cJSON_IsObject

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock185 Using cfiCommon1
        CFI Function cJSON_IsObject
        ARM
cJSON_IsObject:
        CMP      R0,#+0
        BXEQ     LR
        LDR      R0,[R0, #+12]
        AND      R0,R0,#0xFF
        CMP      R0,#+64
        MOVEQ    R0,#+1
        BXEQ     LR
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock185

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock186 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_IsRaw??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock186
        REQUIRE cJSON_IsRaw

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock187 Using cfiCommon1
        CFI Function cJSON_IsRaw
        ARM
cJSON_IsRaw:
        CMP      R0,#+0
        BXEQ     LR
        LDR      R0,[R0, #+12]
        AND      R0,R0,#0xFF
        CMP      R0,#+128
        MOVEQ    R0,#+1
        BXEQ     LR
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock187

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock188 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_Compare??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock188
        REQUIRE cJSON_Compare

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock189 Using cfiCommon1
        CFI Function cJSON_Compare
        ARM
cJSON_Compare:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        MOV      R5,R0
        MOV      R4,R1
        MOV      R6,R2
        CMP      R5,#+0
        CMPNE    R4,#+0
        BEQ      ??cJSON_Compare_2
        LDR      R7,[R5, #+12]
        LDR      R1,[R4, #+12]
        AND      R0,R7,#0xFF
        AND      R1,R1,#0xFF
        CMP      R0,R1
        BNE      ??cJSON_Compare_2
        MOV      R0,R5
        BL       cJSON_IsInvalid
        CMP      R0,#+0
        BNE      ??cJSON_Compare_2
        AND      R0,R7,#0xFF
        SUB      R0,R0,#+1
        CMP      R0,#+127
        BHI      ??cJSON_Compare_2
        ADR      R1,??cJSON_Compare_0
        LDRB     R1,[R1, R0]
        ADD      PC,PC,R1, LSL #+2
        DATA
??cJSON_Compare_0:
        DC8      +31,+31,+34,+31
        DC8      +34,+34,+34,+31
        DC8      +34,+34,+34,+34
        DC8      +34,+34,+34,+31
        DC8      +34,+34,+34,+34
        DC8      +34,+34,+34,+34
        DC8      +34,+34,+34,+34
        DC8      +34,+34,+34,+31
        DC8      +34,+34,+34,+34
        DC8      +34,+34,+34,+34
        DC8      +34,+34,+34,+34
        DC8      +34,+34,+34,+34
        DC8      +34,+34,+34,+34
        DC8      +34,+34,+34,+34
        DC8      +34,+34,+34,+34
        DC8      +34,+34,+34,+31
        DC8      +34,+34,+34,+34
        DC8      +34,+34,+34,+34
        DC8      +34,+34,+34,+34
        DC8      +34,+34,+34,+34
        DC8      +34,+34,+34,+34
        DC8      +34,+34,+34,+34
        DC8      +34,+34,+34,+34
        DC8      +34,+34,+34,+34
        DC8      +34,+34,+34,+34
        DC8      +34,+34,+34,+34
        DC8      +34,+34,+34,+34
        DC8      +34,+34,+34,+34
        DC8      +34,+34,+34,+34
        DC8      +34,+34,+34,+34
        DC8      +34,+34,+34,+34
        DC8      +34,+34,+34,+31
        ARM
??cJSON_Compare_3:
        CMP      R5,R4
        BNE      ??cJSON_Compare_4
        B        ??cJSON_Compare_5
??cJSON_Compare_2:
        MOV      R0,#+0
        POP      {R4-R8,PC}
??cJSON_Compare_4:
        LDR      R8,[R5, #+8]
        AND      R7,R7,#0xFF
        SUB      R7,R7,#+1
        CMP      R7,#+127
        BHI      ??cJSON_Compare_2
        ADR      R0,??cJSON_Compare_1
        LDRB     R0,[R0, R7]
        ADD      PC,PC,R0, LSL #+2
        DATA
??cJSON_Compare_1:
        DC8      +31,+31,+104,+31
        DC8      +104,+104,+104,+33
        DC8      +104,+104,+104,+104
        DC8      +104,+104,+104,+41
        DC8      +104,+104,+104,+104
        DC8      +104,+104,+104,+104
        DC8      +104,+104,+104,+104
        DC8      +104,+104,+104,+53
        DC8      +104,+104,+104,+104
        DC8      +104,+104,+104,+104
        DC8      +104,+104,+104,+104
        DC8      +104,+104,+104,+104
        DC8      +104,+104,+104,+104
        DC8      +104,+104,+104,+104
        DC8      +104,+104,+104,+104
        DC8      +104,+104,+104,+71
        DC8      +104,+104,+104,+104
        DC8      +104,+104,+104,+104
        DC8      +104,+104,+104,+104
        DC8      +104,+104,+104,+104
        DC8      +104,+104,+104,+104
        DC8      +104,+104,+104,+104
        DC8      +104,+104,+104,+104
        DC8      +104,+104,+104,+104
        DC8      +104,+104,+104,+104
        DC8      +104,+104,+104,+104
        DC8      +104,+104,+104,+104
        DC8      +104,+104,+104,+104
        DC8      +104,+104,+104,+104
        DC8      +104,+104,+104,+104
        DC8      +104,+104,+104,+104
        DC8      +104,+104,+104,+41
        ARM
??cJSON_Compare_6:
        MOV      R0,#+1
        POP      {R4-R8,PC}
??cJSON_Compare_7:
        LDR      R0,[R5, #+24]
        LDR      R1,[R5, #+28]
        LDR      R2,[R4, #+24]
        LDR      R3,[R4, #+28]
        _BLF     __dEqual,??__dEqual??rA
        CMP      R0,#+0
        MOVNE    R0,#+1
        POP      {R4-R8,PC}
??cJSON_Compare_8:
        LDR      R0,[R5, #+16]
        CMP      R0,#+0
        POPEQ    {R4-R8,PC}
        LDR      R1,[R4, #+16]
        CMP      R1,#+0
        MOVEQ    R0,#+0
        POPEQ    {R4-R8,PC}
        SWI      +25
        CMP      R0,#+0
        BNE      ??cJSON_Compare_2
??cJSON_Compare_5:
        MOV      R0,#+1
        POP      {R4-R8,PC}
??cJSON_Compare_9:
        LDR      R4,[R4, #+8]
        B        ??cJSON_Compare_10
??cJSON_Compare_11:
        LDR      R8,[R8, #+0]
        LDR      R4,[R4, #+0]
??cJSON_Compare_10:
        CMP      R8,#+0
        CMPNE    R4,#+0
        BEQ      ??cJSON_Compare_12
        MOV      R2,R6
        MOV      R1,R4
        MOV      R0,R8
        BL       cJSON_Compare
        CMP      R0,#+0
        BNE      ??cJSON_Compare_11
        POP      {R4-R8,PC}
??cJSON_Compare_12:
        CMP      R8,R4
        BEQ      ??cJSON_Compare_6
        B        ??cJSON_Compare_13
??cJSON_Compare_14:
        LDR      R8,[R8, #+0]
??cJSON_Compare_15:
        CMP      R8,#+0
        BEQ      ??cJSON_Compare_16
        LDR      R1,[R8, #+32]
        MOV      R2,R6
        MOV      R0,R4
        BL       get_object_item
        MOVS     R7,R0
        BEQ      ??cJSON_Compare_2
        MOV      R2,R6
        MOV      R1,R0
        MOV      R0,R8
        BL       cJSON_Compare
        CMP      R0,#+0
        BNE      ??cJSON_Compare_14
        POP      {R4-R8,PC}
??cJSON_Compare_16:
        LDR      R7,[R4, #+8]
        B        ??cJSON_Compare_17
??cJSON_Compare_18:
        LDR      R7,[R7, #+0]
??cJSON_Compare_17:
        CMP      R7,#+0
        BEQ      ??cJSON_Compare_6
        LDR      R1,[R7, #+32]
        MOV      R2,R6
        MOV      R0,R5
        BL       get_object_item
        MOVS     R8,R0
        BEQ      ??cJSON_Compare_2
        MOV      R2,R6
        MOV      R1,R0
        MOV      R0,R7
        BL       cJSON_Compare
        CMP      R0,#+0
        BNE      ??cJSON_Compare_18
        POP      {R4-R8,PC}
??cJSON_Compare_13:
        MOV      R0,#+0
        POP      {R4-R8,PC}
        CFI EndBlock cfiBlock189

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock190 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_malloc??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock190
        REQUIRE cJSON_malloc

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock191 Using cfiCommon1
        CFI Function cJSON_malloc
        ARM
cJSON_malloc:
        LDR      R1,??DataTable39  ;; global_hooks
        LDR      R1,[R1, #+0]
        MOV      PC,R1            ;; tailcall
        CFI EndBlock cfiBlock191

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable39:
        DC32     global_hooks

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock192 Using cfiCommon0
        CFI NoFunction
        THUMB
??cJSON_free??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock192
        REQUIRE cJSON_free

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock193 Using cfiCommon1
        CFI Function cJSON_free
        ARM
cJSON_free:
        LDR      R1,??cJSON_free_0  ;; global_hooks + 4
        LDR      R1,[R1, #+0]
        MOV      PC,R1            ;; tailcall
        DATA
??cJSON_free_0:
        DC32     global_hooks + 4
        CFI EndBlock cfiBlock193

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock194 Using cfiCommon1
        CFI NoFunction
        ARM
??_Stod??rA:
        LDR      R12,??Subroutine97_0  ;; _Stod
        BX       R12
        DATA
??Subroutine97_0:
        DC32     _Stod
        CFI EndBlock cfiBlock194

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock195 Using cfiCommon1
        CFI NoFunction
        ARM
??__dGreaterEqual??rA:
        LDR      R12,??Subroutine98_0  ;; __dGreaterEqual
        BX       R12
        DATA
??Subroutine98_0:
        DC32     __dGreaterEqual
        CFI EndBlock cfiBlock195

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock196 Using cfiCommon1
        CFI NoFunction
        ARM
??__dLess??rA:
        LDR      R12,??Subroutine99_0  ;; __dLess
        BX       R12
        DATA
??Subroutine99_0:
        DC32     __dLess
        CFI EndBlock cfiBlock196

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock197 Using cfiCommon1
        CFI NoFunction
        ARM
??__doubleToLong??rA:
        LDR      R3,??Subroutine100_0  ;; __doubleToLong
        BX       R3
        DATA
??Subroutine100_0:
        DC32     __doubleToLong
        CFI EndBlock cfiBlock197

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock198 Using cfiCommon1
        CFI NoFunction
        ARM
??__dMul??rA:
        LDR      R12,??Subroutine101_0  ;; __dMul
        BX       R12
        DATA
??Subroutine101_0:
        DC32     __dMul
        CFI EndBlock cfiBlock198

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock199 Using cfiCommon1
        CFI NoFunction
        ARM
??__dNotEqual??rA:
        LDR      R12,??Subroutine102_0  ;; __dNotEqual
        BX       R12
        DATA
??Subroutine102_0:
        DC32     __dNotEqual
        CFI EndBlock cfiBlock199

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock200 Using cfiCommon1
        CFI NoFunction
        ARM
??tolower??rA:
        LDR      R12,??Subroutine103_0  ;; tolower
        BX       R12
        DATA
??Subroutine103_0:
        DC32     tolower
        CFI EndBlock cfiBlock200

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock201 Using cfiCommon1
        CFI NoFunction
        ARM
??__longToDouble??rA:
        LDR      R3,??Subroutine104_0  ;; __longToDouble
        BX       R3
        DATA
??Subroutine104_0:
        DC32     __longToDouble
        CFI EndBlock cfiBlock201

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock202 Using cfiCommon1
        CFI NoFunction
        ARM
??__floatToDouble??rA:
        LDR      R3,??Subroutine105_0  ;; __floatToDouble
        BX       R3
        DATA
??Subroutine105_0:
        DC32     __floatToDouble
        CFI EndBlock cfiBlock202

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock203 Using cfiCommon1
        CFI NoFunction
        ARM
??__dEqual??rA:
        LDR      R12,??Subroutine106_0  ;; __dEqual
        BX       R12
        DATA
??Subroutine106_0:
        DC32     __dEqual
        CFI EndBlock cfiBlock203

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for global_hooks>`:
        DATA
        DC32 internal_malloc, internal_free, internal_realloc
`?<Initializer for global_error>`:
        DC32 0H, 0

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        END
// 
// 12 376 bytes in segment CODE
//    171 bytes in segment DATA_C
//     20 bytes in segment DATA_I
//     20 bytes in segment DATA_ID
//     16 bytes in segment DATA_Z
//     24 bytes in segment INITTAB
// 
// 11 868 bytes of CODE  memory (+ 532 bytes shared)
//    191 bytes of CONST memory
//     36 bytes of DATA  memory
//
//Errors: none
//Warnings: none
