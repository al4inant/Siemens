//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   15/Mar/2023  22:35:35 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_ /
//                       C\socket_work.c                                     /
//    Command line    =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_ /
//                       C\socket_work.c -D NEWSGOLD -D DEBUG -lCN           /
//                       D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_ /
//                       C\Releas_NSG\List\ -la D:\Users\alfinant\Documents\ /
//                       Siemens\Dev\IAR\VK.ELF_C\Releas_NSG\List\ -o        /
//                       D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_ /
//                       C\Releas_NSG\Obj\ -s9 --cpu_mode arm --endian       /
//                       little --cpu ARM926EJ-S --stack_align 4             /
//                       --interwork --diag_suppress Pe301 -e --fpu None     /
//                       --dlib_config D:\Users\alfinant\Documents\Siemens\I /
//                       AR\ARM\LIB\dl5tpainl8n.h -I                         /
//                       D:\Users\alfinant\Documents\Siemens\IAR\ARM\INC\    /
//                       --inline_threshold=2                                /
//    List file       =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_ /
//                       C\Releas_NSG\List\socket_work.s79                   /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME socket_work

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__dlib_file_descriptor", "0"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        PUBWEAK `?*?DATA_ID`
        MULTWEAK ??CONNDATA_findByDNR??rA
        MULTWEAK ??CONNDATA_findBySock??rA
        MULTWEAK ??CONNDATA_findByURL??rA
        MULTWEAK ??CONNDATA_getTop??rA
        MULTWEAK ??CONNDATA_new??rA
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable2 EQU 0
??DataTable5 EQU 0
??DataTable6 EQU 0
??DataTable7 EQU 0
        MULTWEAK ??SMART_REDRAW??rA
        MULTWEAK ??connect_socket??rT
        MULTWEAK ??end_socket??rT
        MULTWEAK ??end_socket_work??rT
        MULTWEAK ??free_buffers??rA
        MULTWEAK ??free_send_buf??rA
        MULTWEAK ??reconnect??rT
        MULTWEAK ??send_answer??rT
        MULTWEAK ??socket_msg_handler??rT
        MULTWEAK ??socket_work_init??rT
        PUBWEAK ?init?tab?DATA_I
        PUBWEAK ?init?tab?DATA_Z
RECONNECT_TIME EQU 0
        PUBLIC connect_socket
        FUNCTION connect_socket,0603H
        LOCFRAME CSTACK, 40, STACK
        PUBLIC disautorecconect
        PUBLIC end_socket
        FUNCTION end_socket,0203H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC end_socket_work
        FUNCTION end_socket_work,0201H
        LOCFRAME CSTACK, 4, STACK
        FUNCTION get_answer,0203H
        LOCFRAME CSTACK, 24, STACK
        PUBLIC is_gprs_online
        PUBLIC reconnect
        FUNCTION reconnect,0201H
        LOCFRAME CSTACK, 4, STACK
        FUNCTION reconnect_tmr_handler,0601H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC send_answer
        FUNCTION send_answer,0203H
        LOCFRAME CSTACK, 36, STACK
        PUBLIC sock_data_read_handler
        PUBLIC sock_error_handler
        PUBLIC sock_remote_closed_handler
        PUBLIC socket_msg_handler
        FUNCTION socket_msg_handler,0203H
        LOCFRAME CSTACK, 36, STACK
        PUBLIC socket_work_init
        FUNCTION socket_work_init,0203H
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
CONNDATA_findByDNR  SYMBOL "CONNDATA_findByDNR"
CONNDATA_findBySock SYMBOL "CONNDATA_findBySock"
CONNDATA_findByURL  SYMBOL "CONNDATA_findByURL"
CONNDATA_getTop     SYMBOL "CONNDATA_getTop"
CONNDATA_new        SYMBOL "CONNDATA_new"
SMART_REDRAW        SYMBOL "SMART_REDRAW"
free_buffers        SYMBOL "free_buffers"
free_send_buf       SYMBOL "free_send_buf"
??CONNDATA_findByDNR??rA SYMBOL "??rA", CONNDATA_findByDNR
??CONNDATA_findBySock??rA SYMBOL "??rA", CONNDATA_findBySock
??CONNDATA_findByURL??rA SYMBOL "??rA", CONNDATA_findByURL
??CONNDATA_getTop??rA SYMBOL "??rA", CONNDATA_getTop
??CONNDATA_new??rA  SYMBOL "??rA", CONNDATA_new
??SMART_REDRAW??rA  SYMBOL "??rA", SMART_REDRAW
connect_socket      SYMBOL "connect_socket"
??connect_socket??rT SYMBOL "??rT", connect_socket
end_socket          SYMBOL "end_socket"
??end_socket??rT    SYMBOL "??rT", end_socket
end_socket_work     SYMBOL "end_socket_work"
??end_socket_work??rT SYMBOL "??rT", end_socket_work
??free_buffers??rA  SYMBOL "??rA", free_buffers
??free_send_buf??rA SYMBOL "??rA", free_send_buf
reconnect           SYMBOL "reconnect"
??reconnect??rT     SYMBOL "??rT", reconnect
send_answer         SYMBOL "send_answer"
??send_answer??rT   SYMBOL "??rT", send_answer
socket_msg_handler  SYMBOL "socket_msg_handler"
??socket_msg_handler??rT SYMBOL "??rT", socket_msg_handler
socket_work_init    SYMBOL "socket_work_init"
??socket_work_init??rT SYMBOL "??rT", socket_work_init

        EXTERN ALLTOTALRECEIVED
        EXTERN ALLTOTALSENDED
        EXTERN CONNDATA_findByDNR
        FUNCTION CONNDATA_findByDNR,0202H
        EXTERN CONNDATA_findBySock
        FUNCTION CONNDATA_findBySock,0202H
        EXTERN CONNDATA_findByURL
        FUNCTION CONNDATA_findByURL,0202H
        EXTERN CONNDATA_getTop
        FUNCTION CONNDATA_getTop,0200H
        EXTERN CONNDATA_new
        FUNCTION CONNDATA_new,0202H
        EXTERN SMART_REDRAW
        FUNCTION SMART_REDRAW,0200H
        EXTERN free_buffers
        FUNCTION free_buffers,0200H
        EXTERN free_send_buf
        FUNCTION free_send_buf,0200H
        EXTERN logmsg
        EXTERN recv_buf
        EXTERN recv_buf_len
        EXTERN send_buf
        EXTERN send_buf_len


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??socket_work_init??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE socket_work_init

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function socket_work_init
        ARM
socket_work_init:
        LDR      R3,??DataTable4  ;; disautorecconect
        STR      R1,[R3, #+4]
        STR      R2,[R3, #+8]
        STR      R0,[R3, #+12]
        BX       LR               ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??end_socket??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE end_socket

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function end_socket
        ARM
end_socket:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
        LDR      R0,??DataTable3  ;; disautorecconect + 24
        SWI      +396
        CMN      R4,#+1
        POPEQ    {R4,PC}
        MOV      R1,#+2
        MOV      R0,R4
        SWI      +375
        MOV      R0,R4
        SWI      +374
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??end_socket_work??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE end_socket_work

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function end_socket_work
        ARM
end_socket_work:
        LDR      R0,??DataTable3  ;; disautorecconect + 24
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SWI      +396
        _BLF     CONNDATA_getTop,??CONNDATA_getTop??rA
        CMP      R0,#+0
        BEQ      ??end_socket_work_0
        LDR      R0,[R0, #+76]
        BL       end_socket
??end_socket_work_0:
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        _BF      free_buffers,??free_buffers??rA  ;; tailcall
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??reconnect_tmr_handler??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE reconnect_tmr_handler

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function reconnect_tmr_handler
        ARM
reconnect_tmr_handler:
        LDR      R0,??reconnect_tmr_handler_0  ;; disautorecconect + 16
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        POPEQ    {PC}
        _BLF     CONNDATA_getTop,??CONNDATA_getTop??rA
        MOV      R1,#+3
        STR      R1,[R0, #+96]
        LDR      R0,??reconnect_tmr_handler_0+0x4  ;; connect_socket
        MOV      R1,#+0
        SWI      +369
        POP      {PC}             ;; return
        DATA
??reconnect_tmr_handler_0:
        DC32     disautorecconect + 16
        DC32     connect_socket
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??reconnect??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE reconnect

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function reconnect
        ARM
reconnect:
        LDR      R2,??reconnect_0  ;; reconnect_tmr_handler
        LDR      R0,??DataTable3  ;; disautorecconect + 24
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R1,#+648
        SWI      +77
        POP      {PC}             ;; return
        DATA
??reconnect_0:
        DC32     reconnect_tmr_handler
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable3:
        DC32     disautorecconect + 24

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??connect_socket??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE connect_socket

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function connect_socket
        ARM
connect_socket:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        LDR      R4,??DataTable4  ;; disautorecconect
        LDR      R5,??DataTable8  ;; logmsg
        LDR      R6,??connect_socket_0  ;; `?<Constant "Waiting for GPRS up...">`
        SUB      SP,SP,#+20
        CFI CFA R13+40
        MOV      R7,#+0
        STR      R7,[SP, #+0]
        CMP      R0,#+0
        STRNE    R0,[R4, #+20]
        STRNE    R7,[R0, #+84]
        ADD      R0,R4,#+24
        SWI      +396
        SWI      +167
        CMP      R0,#+0
        BNE      ??connect_socket_1
        MOV      R1,R6
        MOV      R0,R5
        SWI      +22
        _BLF     SMART_REDRAW,??SMART_REDRAW??rA
        STR      R7,[R4, #+16]
        MOV      R0,#+1
??connect_socket_2:
        LDR      R1,[R4, #+12]
        B        ??connect_socket_3
??connect_socket_1:
        LDR      R0,[R4, #+20]
        STR      R7,[R0, #+92]
        SWI      +33148
        STR      R7,[R0, #+0]
        LDR      R0,[R4, #+20]
        ADD      R1,R6,#+24
        LDRH     R3,[R0, #+80]
        ADD      R2,R0,#+12
        MOV      R0,R5
        SWI      +22
        _BLF     SMART_REDRAW,??SMART_REDRAW??rA
        LDR      R0,[R4, #+20]
        MOV      R1,SP
        ADD      R2,R0,#+92
        ADD      R0,R0,#+12
        SWI      +438
        CMP      R0,#+0
        BEQ      ??connect_socket_4
        CMP      R0,#+201
        CMPNE    R0,#+214
        BNE      ??connect_socket_5
        LDR      R0,[R4, #+20]
        LDR      R0,[R0, #+92]
        CMP      R0,#+0
        BEQ      ??connect_socket_4
        ADD      R1,R6,#+56
        MOV      R0,R5
        SWI      +26
        _BLF     SMART_REDRAW,??SMART_REDRAW??rA
        B        ??connect_socket_6
??connect_socket_5:
        BL       reconnect
        B        ??connect_socket_6
??connect_socket_4:
        LDR      R0,[SP, #+0]
        CMP      R0,#+0
        BEQ      ??connect_socket_7
        LDR      R0,[R0, #+12]
        CMP      R0,#+0
        BEQ      ??connect_socket_8
        ADD      R1,R6,#+68
        MOV      R0,R5
        SWI      +26
        _BLF     SMART_REDRAW,??SMART_REDRAW??rA
        LDR      R0,[R4, #+20]
        MOV      R2,#+0
        STR      R7,[R0, #+96]
        LDR      R1,[SP, #+0]
        MVN      R7,R7
        LDR      R1,[R1, #+12]
        LDR      R1,[R1, #+0]
        LDR      R1,[R1, #+0]
        STR      R1,[SP, #+8]
        MOV      R1,#+1
        MOV      R0,R1
        SWI      +371
        LDR      R1,[R4, #+20]
        CMP      R0,R7
        STR      R0,[R1, #+76]
        BEQ      ??connect_socket_9
        LDR      R2,[SP, #+0]
        LDRH     R2,[R2, #+8]
        STRH     R2,[SP, #+4]
        LDRH     R0,[R1, #+80]
        SWI      +378
        STRH     R0,[SP, #+6]
        LDR      R0,[R4, #+20]
        MOV      R2,#+16
        LDR      R0,[R0, #+76]
        ADD      R1,SP,#+4
        SWI      +372
        CMP      R0,R7
        BEQ      ??connect_socket_10
        LDR      R0,[R4, #+20]
        MOV      R1,#+1
        STR      R1,[R0, #+84]
        ADD      R2,R6,#+76
        MOV      R1,#+255
        MOV      R0,R5
        SWI      +283
        _BLF     SMART_REDRAW,??SMART_REDRAW??rA
        B        ??connect_socket_6
??connect_socket_10:
        ADD      R2,R6,#+96
        MOV      R1,#+255
        MOV      R0,R5
        SWI      +283
        _BLF     SMART_REDRAW,??SMART_REDRAW??rA
        LDR      R0,[R4, #+20]
        LDR      R0,[R0, #+76]
        SWI      +374
        MOV      R0,#+2
        B        ??connect_socket_2
??connect_socket_9:
        ADD      R2,R6,#+112
        MOV      R1,#+255
        MOV      R0,R5
        SWI      +283
        _BLF     SMART_REDRAW,??SMART_REDRAW??rA
        LDR      R1,[R4, #+12]
        MOV      R0,#+3
??connect_socket_3:
        BLX      R1
??connect_socket_6:
        ADD      SP,SP,#+20
        CFI CFA R13+20
        POP      {R4-R7,PC}
        CFI CFA R13+40
??connect_socket_7:
        LDR      R0,[R4, #+20]
        LDR      R1,[R0, #+96]
        SUB      R1,R1,#+1
        STR      R1,[R0, #+96]
??connect_socket_8:
        ADD      SP,SP,#+20       ;; stack cleaning
        CFI CFA R13+20
        POP      {R4-R7,PC}       ;; return
        DATA
??connect_socket_0:
        DC32     `?<Constant "Waiting for GPRS up...">`
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable4:
        DC32     disautorecconect

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??send_answer??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE send_answer

        RSEG DATA_I:DATA:SORT:NOROOT(2)
disautorecconect:
        DS8 4
        REQUIRE `?<Initializer for disautorecconect>`
sock_data_read_handler:
        DS8 4
        REQUIRE `?<Initializer for sock_data_read_handler>`
sock_remote_closed_handler:
        DS8 4
        REQUIRE `?<Initializer for sock_remote_closed_handler>`
sock_error_handler:
        DS8 4
        REQUIRE `?<Initializer for sock_error_handler>`
is_gprs_online:
        DS8 4
        REQUIRE `?<Initializer for is_gprs_online>`
        DS8 4
        REQUIRE `?<Initializer for __conn>`
        DS8 16
        REQUIRE `?<Initializer for reconnect_tmr>`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function send_answer
        ARM
send_answer:
        PUSH     {R4-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+36
        LDR      R5,??send_answer_0  ;; ??send_q_size
        LDR      R6,??send_answer_0+0x4  ;; send_buf_len
        LDR      R7,??send_answer_0+0x8  ;; send_buf
        MOV      R9,R0
        MOV      R10,R1
        MOV      R8,R2
        MOV      R11,R3
        MOV      R4,#+0
        CMP      R9,#+0
        BEQ      ??send_answer_1
        _BLF     free_send_buf,??free_send_buf??rA
        STR      R10,[R7, #+0]
        STR      R8,[R6, #+0]
        STR      R8,[R5, #+0]
        MOV      R0,R9
        _BLF     CONNDATA_findByURL,??CONNDATA_findByURL??rA
        MOVS     R4,R0
        BNE      ??send_answer_2
        MOV      R1,R11
        MOV      R0,R9
        _BLF     CONNDATA_new,??CONNDATA_new??rA
        MOV      R4,R0
??send_answer_2:
        LDR      R0,[R4, #+76]
        CMN      R0,#+1
        BNE      ??send_answer_1
        MOV      R0,R4
        BL       connect_socket
        POP      {R4-R11,PC}
??send_answer_1:
        LDR      R0,[R5, #+0]
        CMP      R0,#+0
        BNE      ??send_answer_3
        LDR      R0,[R6, #+0]
        STR      R0,[R5, #+0]
        B        ??send_answer_3
??send_answer_4:
        LDR      R1,[R5, #+0]
        CMP      R0,R8
        SUB      R1,R1,R0
        STR      R1,[R5, #+0]
        LDR      R1,[R4, #+104]
        ADD      R1,R0,R1
        STR      R1,[R4, #+104]
        LDR      R1,??send_answer_0+0xC  ;; ALLTOTALSENDED
        LDR      R2,[R1, #+0]
        ADD      R2,R0,R2
        STR      R2,[R1, #+0]
        POPLT    {R4-R11,PC}
??send_answer_3:
        LDR      R0,[R5, #+0]
        MOVS     R8,R0
        BEQ      ??send_answer_5
        MOV      R1,#+1
        ORR      R1,R1,#0x400
        CMP      R8,R1
        LDR      R1,[R6, #+0]
        MOVGE    R8,#+1024
        SUB      R0,R1,R0
        LDR      R1,[R7, #+0]
        MOV      R3,#+0
        ADD      R1,R0,R1
        LDR      R0,[R4, #+76]
        MOV      R2,R8
        SWI      +377
        MOV      R1,#+1
        STR      R1,[R4, #+88]
        CMP      R0,#+0
        BPL      ??send_answer_4
        SWI      +33148
        POP      {R4-R11,PC}
??send_answer_5:
        LDR      R1,??send_answer_0+0x10  ;; `?<Constant "sock data sended">`
        LDR      R0,??DataTable8  ;; logmsg
        SWI      +22
        _BLF     SMART_REDRAW,??SMART_REDRAW??rA
        POP      {R4-R11,PC}      ;; return
        DATA
??send_answer_0:
        DC32     ??send_q_size
        DC32     send_buf_len
        DC32     send_buf
        DC32     ALLTOTALSENDED
        DC32     `?<Constant "sock data sended">`
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??get_answer??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE get_answer

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
??send_q_size:
        DS8 4

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function get_answer
        ARM
get_answer:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        LDR      R6,??get_answer_0  ;; recv_buf_len
        LDR      R7,??get_answer_0+0x4  ;; recv_buf
        LDR      R8,??get_answer_0+0x8  ;; ??recv_size
        MOV      R4,R0
        LDR      R0,[R7, #+0]
        MOV      R5,#+0
        CMP      R0,#+0
        BNE      ??get_answer_1
        STR      R5,[R8, #+0]
        STR      R5,[R4, #+108]
        MOV      R1,#+4096
        SWI      +186
        STR      R0,[R7, #+0]
        MOV      R0,#+4096
        STR      R0,[R6, #+0]
??get_answer_1:
        LDR      R0,[R8, #+0]
        LDR      R1,[R7, #+0]
        LDR      R8,??get_answer_0+0xC  ;; ALLTOTALRECEIVED
        ADD      R1,R0,R1
        LDR      R0,[R4, #+76]
        MOV      R3,#+0
        MOV      R2,#+4096
        SWI      +376
        CMP      R0,#+4096
        BNE      ??get_answer_2
        LDR      R0,[R6, #+0]
        ADD      R1,R0,#+4096
        LDR      R0,[R7, #+0]
        SWI      +186
        STR      R0,[R7, #+0]
        LDR      R0,[R6, #+0]
        ADD      R0,R0,#+4096
        STR      R0,[R6, #+0]
        LDR      R0,[R4, #+108]
        ADD      R0,R0,#+4096
        STR      R0,[R4, #+108]
        LDR      R0,[R8, #+0]
        ADD      R0,R0,#+4096
        STR      R0,[R8, #+0]
        MOV      R0,#+0
        POP      {R4-R8,PC}
??get_answer_2:
        LDR      R2,??DataTable8  ;; logmsg
        LDR      R1,??get_answer_0+0x10  ;; `?<Constant "recv ok">`
        CMP      R0,#+0
        BMI      ??get_answer_3
        CMP      R0,#+4096
        BGE      ??get_answer_4
        STR      R5,[R4, #+88]
        LDR      R3,[R4, #+108]
        ADD      R3,R0,R3
        STR      R3,[R4, #+108]
        LDR      R3,[R8, #+0]
        ADD      R0,R0,R3
        STR      R0,[R8, #+0]
        MOV      R0,R2
        SWI      +22
        _BLF     SMART_REDRAW,??SMART_REDRAW??rA
        MOV      R0,#+1
        POP      {R4-R8,PC}
??get_answer_3:
        ADD      R1,R1,#+8
        MOV      R0,R2
        SWI      +22
??get_answer_4:
        MVN      R0,R5
        POP      {R4-R8,PC}       ;; return
        DATA
??get_answer_0:
        DC32     recv_buf_len
        DC32     recv_buf
        DC32     ??recv_size
        DC32     ALLTOTALRECEIVED
        DC32     `?<Constant "recv ok">`
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??socket_msg_handler??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE socket_msg_handler

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
??recv_size:
        DS8 4

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function socket_msg_handler
        ARM
socket_msg_handler:
        PUSH     {R4-R10,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R10 Frame(CFA, -8)
        CFI R9 Frame(CFA, -12)
        CFI R8 Frame(CFA, -16)
        CFI R7 Frame(CFA, -20)
        CFI R6 Frame(CFA, -24)
        CFI R5 Frame(CFA, -28)
        CFI R4 Frame(CFA, -32)
        CFI CFA R13+32
        LDR      R5,??socket_msg_handler_1  ;; disautorecconect
        SUB      SP,SP,#+4
        CFI CFA R13+36
        LDR      R1,[R5, #+12]
        LDR      R6,??DataTable8  ;; logmsg
        LDR      R7,??socket_msg_handler_1+0x4  ;; `?<Constant "GPRS offline...">`
        MOV      R4,R0
        LDR      R2,[R4, #+12]
        LDR      R0,[R4, #+16]
        MOV      R8,#+1
        MOV      R9,#+0
        SUBS     R2,R2,#+128
        BEQ      ??socket_msg_handler_2
        SUBS     R2,R2,#+2
        BEQ      ??socket_msg_handler_3
        SUBS     R2,R2,#+18
        BEQ      ??socket_msg_handler_4
        B        ??socket_msg_handler_5
??socket_msg_handler_3:
        STR      R9,[R5, #+16]
        MOV      R0,#+4
        BLX      R1
        MOV      R1,R7
        B        ??socket_msg_handler_6
??socket_msg_handler_2:
        MOV      R0,#+5
        BLX      R1
        LDR      R0,[R5, #+0]
        STR      R8,[R5, #+16]
        CMP      R0,#+0
        POPNE    {R0,R4-R10,PC}
        ADD      R1,R7,#+16
        MOV      R0,R6
        SWI      +22
        _BLF     SMART_REDRAW,??SMART_REDRAW??rA
        BL       reconnect
        POP      {R0,R4-R10,PC}
??socket_msg_handler_4:
        _BLF     CONNDATA_findByDNR,??CONNDATA_findByDNR??rA
        MOVS     R10,R0
        LDRNE    R0,[R0, #+96]
        CMPNE    R0,#+0
        POPEQ    {R0,R4-R10,PC}
        MOV      R0,#+0
        BL       connect_socket
        POP      {R0,R4-R10,PC}
??socket_msg_handler_5:
        _BLF     CONNDATA_findBySock,??CONNDATA_findBySock??rA
        MOVS     R10,R0
        POPEQ    {R0,R4-R10,PC}
        LDR      R0,[R4, #+12]
        SUB      R0,R0,#+138
        CMP      R0,#+5
        POPHI    {R0,R4-R10,PC}
        ADR      R1,??socket_msg_handler_0
        LDRB     R1,[R1, R0]
        ADD      PC,PC,R1, LSL #+2
        DATA
??socket_msg_handler_0:
        DC8      +20,+20,+9,+1
        DC8      +42,+30,+0,+0
        ARM
??socket_msg_handler_7:
        STR      R8,[R10, #+84]
        STR      R9,[R10, #+88]
        MOV      R3,#+0
        MOV      R2,R3
        MOV      R1,R2
        MOV      R0,R1
        BL       send_answer
        POP      {R0,R4-R10,PC}
??socket_msg_handler_8:
        LDR      R0,[R10, #+88]
        CMP      R0,#+1
        POPNE    {R0,R4-R10,PC}
        MOV      R0,R10
        BL       get_answer
        CMP      R0,#+1
        POPNE    {R0,R4-R10,PC}
        LDR      R1,[R5, #+4]
        MOV      R0,R10
        BLX      R1
        POP      {R0,R4-R10,PC}
??socket_msg_handler_9:
        MOV      R3,#+0
        MOV      R2,R3
        MOV      R1,R2
        MOV      R0,R1
        BL       send_answer
        ADD      R1,R7,#+28
??socket_msg_handler_6:
        MOV      R0,R6
        SWI      +22
        _BLF     SMART_REDRAW,??SMART_REDRAW??rA
        POP      {R0,R4-R10,PC}
??socket_msg_handler_10:
        STR      R9,[R10, #+88]
        LDR      R0,[R4, #+16]
        BL       end_socket
        ADD      R1,R7,#+48
        MOV      R0,R6
        SWI      +22
        _BLF     SMART_REDRAW,??SMART_REDRAW??rA
        LDR      R0,[R4, #+16]
        LDR      R1,[R5, #+8]
        MOV      R0,R0, LSL #+16
        MOV      R0,R0, ASR #+16
        BLX      R1
??socket_msg_handler_11:
        POP      {R0,R4-R10,PC}   ;; return
        DATA
??socket_msg_handler_1:
        DC32     disautorecconect
        DC32     `?<Constant "GPRS offline...">`
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable8:
        DC32     logmsg

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon1
        CFI NoFunction
        ARM
??CONNDATA_getTop??rA:
        LDR      R12,??Subroutine9_0  ;; CONNDATA_getTop
        BX       R12
        DATA
??Subroutine9_0:
        DC32     CONNDATA_getTop
        CFI EndBlock cfiBlock18

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI NoFunction
        ARM
??free_buffers??rA:
        LDR      R12,??Subroutine10_0  ;; free_buffers
        BX       R12
        DATA
??Subroutine10_0:
        DC32     free_buffers
        CFI EndBlock cfiBlock19

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon1
        CFI NoFunction
        ARM
??SMART_REDRAW??rA:
        LDR      R12,??Subroutine11_0  ;; SMART_REDRAW
        BX       R12
        DATA
??Subroutine11_0:
        DC32     SMART_REDRAW
        CFI EndBlock cfiBlock20

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI NoFunction
        ARM
??free_send_buf??rA:
        LDR      R12,??Subroutine12_0  ;; free_send_buf
        BX       R12
        DATA
??Subroutine12_0:
        DC32     free_send_buf
        CFI EndBlock cfiBlock21

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon1
        CFI NoFunction
        ARM
??CONNDATA_findByURL??rA:
        LDR      R12,??Subroutine13_0  ;; CONNDATA_findByURL
        BX       R12
        DATA
??Subroutine13_0:
        DC32     CONNDATA_findByURL
        CFI EndBlock cfiBlock22

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI NoFunction
        ARM
??CONNDATA_new??rA:
        LDR      R12,??Subroutine14_0  ;; CONNDATA_new
        BX       R12
        DATA
??Subroutine14_0:
        DC32     CONNDATA_new
        CFI EndBlock cfiBlock23

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon1
        CFI NoFunction
        ARM
??CONNDATA_findByDNR??rA:
        LDR      R12,??Subroutine15_0  ;; CONNDATA_findByDNR
        BX       R12
        DATA
??Subroutine15_0:
        DC32     CONNDATA_findByDNR
        CFI EndBlock cfiBlock24

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon1
        CFI NoFunction
        ARM
??CONNDATA_findBySock??rA:
        LDR      R12,??Subroutine16_0  ;; CONNDATA_findBySock
        BX       R12
        DATA
??Subroutine16_0:
        DC32     CONNDATA_findBySock
        CFI EndBlock cfiBlock25

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for disautorecconect>`:
        DATA
        DC32 0
`?<Initializer for sock_data_read_handler>`:
        DC32 0H
`?<Initializer for sock_remote_closed_handler>`:
        DC32 0H
`?<Initializer for sock_error_handler>`:
        DC32 0H
`?<Initializer for is_gprs_online>`:
        DC32 1
`?<Initializer for __conn>`:
        DC8 0, 0, 0, 0
`?<Initializer for reconnect_tmr>`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "Waiting for GPRS up...">`:
        DATA
        DC8 "Waiting for GPRS up..."
        DC8 0
        DC8 "Connect to: %s Using port: %d"
        DC8 0, 0
        DC8 "Wait DNR.."
        DC8 0
        DC8 "DNR ok!"
        DC8 "Socket connected"
        DC8 0, 0, 0
        DC8 "Connect fault"
        DC8 0, 0
        DC8 "Error Create Socket"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "sock data sended">`:
        DATA
        DC8 "sock data sended"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "recv ok">`:
        DATA
        DC8 "recv ok"
        DC8 "recv error!"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "GPRS offline...">`:
        DATA
        DC8 "GPRS offline..."
        DC8 "GPRS online"
        DC8 "ENIP_BUFFER_FREE"
        DC8 0, 0, 0
        DC8 "\321\345\360\342\345\360 \347\340\352\360\373\353 \361\356\345\344."

        END
// 
// 1 844 bytes in segment CODE
//   240 bytes in segment DATA_C
//    40 bytes in segment DATA_I
//    40 bytes in segment DATA_ID
//     8 bytes in segment DATA_Z
//    24 bytes in segment INITTAB
// 
// 1 712 bytes of CODE  memory (+ 156 bytes shared)
//   280 bytes of CONST memory
//    48 bytes of DATA  memory
//
//Errors: none
//Warnings: none
