##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    15/Mar/2023  22:35:38 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \Menu_GroupWall.c                                    #
#    Command line    =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \Menu_GroupWall.c -D NEWSGOLD -D DEBUG -lCN          #
#                       D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \Releas_NSG\List\ -la D:\Users\alfinant\Documents\Si #
#                       emens\Dev\IAR\VK.ELF_C\Releas_NSG\List\ -o           #
#                       D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \Releas_NSG\Obj\ -s9 --cpu_mode arm --endian little  #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork         #
#                       --diag_suppress Pe301 -e --fpu None --dlib_config    #
#                       D:\Users\alfinant\Documents\Siemens\IAR\ARM\LIB\dl5t #
#                       painl8n.h -I D:\Users\alfinant\Documents\Siemens\IAR #
#                       \ARM\INC\ --inline_threshold=2                       #
#    List file       =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \Releas_NSG\List\Menu_GroupWall.lst                  #
#    Object file     =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \Releas_NSG\Obj\Menu_GroupWall.r79                   #
#                                                                            #
#                                                                            #
##############################################################################

D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C\Menu_GroupWall.c
      1          //Это меню можно было реализовать через EDITCONTROL, но там нет скроллбара в режиме readonly. Поэтому TVIEW.
      2          //Пока все заточено под один шрифт. С другим шрифтом корректная работа курсора не гарантируется.
      3          /*27.02.2023 
      4              - подрубил функции для списков из include/linux/list.h.
      5          */
      6          
      7          #include <siemens\swilib.h>
      8          #include "rect_patcher.h"
      9          #include "process.h"
     10          #include "http.h"
     11          #include "vk_api.h"
     12          #include "dyn_images.h"
     13          #include "dyn_theme.h"
     14          #include "anim_widget.h"
     15          #include "main.h"
     16          #include "parser_wall.h"
     17          #include "anim_widget.h"
     18          
     19          #ifdef ELKA
     20          #define TWIEW_SCROLLBAR_WIDTH  4
     21          #else
     22          #define TWIEW_SCROLLBAR_WIDTH  3
     23          #endif
     24          
     25          extern const TTime GMT;
     26          extern char logmsg[];
     27          

   \                                 In segment DATA_C, align 4, align-sorted
     28          static const char percent_d[]="%d";
   \                     percent_d:
   \   00000000   256400             DC8 "%d"
   \   00000003   00                 DC8 0
   \   00000004   256420257420       DC8 "%d %t %d:%02d"
   \              25643A253032
   \              6400        
   \   00000012   0000               DC8 0, 0
   \   00000014   E2F7E5F0E020       DC8 "\342\367\345\360\340 \342"
   \              E200        
   \   0000001C   F1E5E3EEE4ED       DC8 "\361\345\343\356\344\355\377 \342"
   \              FF20E200    
   \   00000026   0000               DC8 0, 0
   \   00000028   25742025643A       DC8 "%t %d:%02d"
   \              2530326400  
   \   00000033   00                 DC8 0
   \   00000034   CDF0E0E2E8F2       DC8 "\315\360\340\342\350\362\361\377"
   \              F1FF00      
   \   0000003D   000000             DC8 0, 0, 0
   \   00000040   CAEEECECE5ED       DC8 "\312\356\354\354\345\355\362\340\360\350\350"
   \              F2E0F0E8E800
   \   0000004C   257420256400       DC8 "%t %d"
   \   00000052   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
     29          static const char percent_t[]="%t";
   \                     percent_t:
   \   00000000   257400             DC8 "%t"
   \   00000003   00                 DC8 0
   \   00000004   F4EEF2EE00         DC8 "\364\356\362\356"
   \   00000009   000000             DC8 0, 0, 0
   \   0000000C   F1F1FBEBEAE0       DC8 "\361\361\373\353\352\340"
   \              00          
   \   00000013   00                 DC8 0
   \   00000014   E2E8E4E5EE00       DC8 "\342\350\344\345\356"
   \   0000001A   0000               DC8 0, 0
     30          static const char percent_t_d[]="%t %d";
     31          
     32          static const char* MONTH_NAME[]={"янв","фев","март","апр","май","июнь","июль","авг","сен","окт","ноя","дек"};
     33          
     34          extern const char DIR[];
     35          extern int CreateDebugGUI();
     36          
     37          static VkGroup* selected_group=NULL;
     38          
     39          VkPost* post=NULL;
     40          static int offset=0;
     41          
     42          static int full_text_h;
     43          static int offset_text_h;
     44          static int IsScrollbar;
     45          static int cursor;
     46          static int attach_count;
     47          
     48          static int header_icon=0x4E74;
     49          static IMGHDR* img_icon=NULL;
     50          
     51          static HEADER_DESC hdr={0,0,0,0,NULL,NULL,LGP_NULL};
     52          

   \                                 In segment DATA_C, align 4, align-sorted
     53          static const int menusoftkeys[]={0, 1, 2};
   \                     menusoftkeys:
   \   00000000   000000000100       DC32 0, 1, 2
   \              000002000000
     54          
     55          static SOFTKEY_DESC sk[]=
     56          {
     57            {0x0000, 0x0000, 0xFFFFFFFF},
     58            {0x0001, 0x0000, (int)"Назад"},
     59            {0x0000, 0x0000, 0xFFFFFFFF}, 
     60          };
     61          
     62          static SOFTKEY_DESC lsk={0x0018, 0x0000, (int)"Выбрать"};
     63          static SOFTKEY_DESC esk={0x001D, 0x0000, (int)LGP_DOIT_PIC};
     64          
     65          static SOFTKEYSTAB skt=
     66          {
     67            sk,0
     68          };
     69          

   \                                 In segment CODE, align 4, keep-with-next
     70          static void proc3(){}
   \                     proc3:
   \   00000000   1EFF2FE1           BX       LR               ;; return
     71          
     72          void Wall_Refresh();
     73          extern TVIEW_DESC tv_desc;
     74          

   \                                 In segment CODE, align 4, keep-with-next
     75          static int onKey(void* gui, GUI_MSG *msg)
     76          { 
   \                     onKey:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
     77            int font_h;
     78            
     79            switch (msg->keys)
   \   00000004   ........           LDR      R4,??DataTable12  ;; tv_desc
   \   00000008   0050A0E3           MOV      R5,#+0
   \   0000000C   200094E5           LDR      R0,[R4, #+32]
   \   00000010   0160A0E1           MOV      R6,R1
   \   00000014   F220D6E1           LDRSH    R2,[R6, #+2]
   \   00000018   4C1094E5           LDR      R1,[R4, #+76]
   \   0000001C   012052E2           SUBS     R2,R2,#+1
   \   00000020   0800000A           BEQ      ??onKey_0
   \   00000024   242052E2           SUBS     R2,R2,#+36
   \   00000028   1A00000A           BEQ      ??onKey_1
   \   0000002C   012052E2           SUBS     R2,R2,#+1
   \   00000030   0B00000A           BEQ      ??onKey_2
   \   00000034   042052E2           SUBS     R2,R2,#+4
   \   00000038   1600000A           BEQ      ??onKey_1
   \   0000003C   012052E2           SUBS     R2,R2,#+1
   \   00000040   0700000A           BEQ      ??onKey_2
   \   00000044   2F0000EA           B        ??onKey_3
     80            {
     81            case 1: //закрытие по нажатию кнопки
     82                offset=0;
     83                if(post)
     84                  //FreePost(post);
     85                post=NULL;
     86                csm->wallgui_id=NULL;
   \                     ??onKey_0:
   \   00000048   ........           LDR      R0,??DataTable11  ;; csm
   \   0000004C   505084E5           STR      R5,[R4, #+80]
   \   00000050   000090E5           LDR      R0,[R0, #+0]
   \   00000054   000051E3           CMP      R1,#+0
   \   00000058   4C508415           STRNE    R5,[R4, #+76]
   \   0000005C   2C5080E5           STR      R5,[R0, #+44]
     87                return (0);
   \   00000060   470000EA           B        ??onKey_4
     88            
     89            case 0x26://up
     90            case 0x2B://up (long press)
     91              if(post){
   \                     ??onKey_2:
   \   00000064   000051E3           CMP      R1,#+0
   \   00000068   2600000A           BEQ      ??onKey_3
     92              font_h=GetFontYSIZE(tv_desc.font);
   \   0000006C   C50100EF           SWI      +453
     93              if (offset_text_h > 0) offset_text_h-=font_h;
   \   00000070   581094E5           LDR      R1,[R4, #+88]
   \   00000074   010051E3           CMP      R1,#+1
   \   00000078   000041A0           SUBGE    R0,R1,R0
   \   0000007C   580084A5           STRGE    R0,[R4, #+88]
     94              if (cursor > 0)
   \   00000080   600094E5           LDR      R0,[R4, #+96]
   \   00000084   010050E3           CMP      R0,#+1
   \   00000088   1A0000BA           BLT      ??onKey_5
     95                cursor--;
   \   0000008C   010040E2           SUB      R0,R0,#+1
   \   00000090   600084E5           STR      R0,[R4, #+96]
     96              if (IsScrollbar==0)
   \   00000094   170000EA           B        ??onKey_5
     97                DirectRedrawGUI();}
     98              break;
     99            
    100            case 0x25://down
    101            case 0x2A://down (long press)
    102              if(post){
   \                     ??onKey_1:
   \   00000098   000051E3           CMP      R1,#+0
   \   0000009C   1900000A           BEQ      ??onKey_3
    103              font_h=GetFontYSIZE(tv_desc.font);
   \   000000A0   C50100EF           SWI      +453
    104              if ((full_text_h - offset_text_h) > (tv_desc.rc.y2-tv_desc.rc.y+1))
   \   000000A4   FE31D4E1           LDRSH    R3,[R4, #+30]
   \   000000A8   FAC1D4E1           LDRSH    R12,[R4, #+26]
   \   000000AC   582094E5           LDR      R2,[R4, #+88]
   \   000000B0   601094E5           LDR      R1,[R4, #+96]
   \   000000B4   0C3043E0           SUB      R3,R3,R12
   \   000000B8   54C094E5           LDR      R12,[R4, #+84]
   \   000000BC   013083E2           ADD      R3,R3,#+1
   \   000000C0   02C04CE0           SUB      R12,R12,R2
   \   000000C4   0C0053E1           CMP      R3,R12
   \   000000C8   030000AA           BGE      ??onKey_6
    105              {
    106                offset_text_h+=font_h;
   \   000000CC   020080E0           ADD      R0,R0,R2
   \   000000D0   580084E5           STR      R0,[R4, #+88]
    107                cursor=0;
   \   000000D4   0010A0E3           MOV      R1,#+0
   \   000000D8   050000EA           B        ??onKey_7
    108              }
    109              else
    110                if (attach_count)
   \                     ??onKey_6:
   \   000000DC   640094E5           LDR      R0,[R4, #+100]
   \   000000E0   000050E3           CMP      R0,#+0
   \   000000E4   0200000A           BEQ      ??onKey_7
    111                {
    112                  cursor++;
   \   000000E8   011081E2           ADD      R1,R1,#+1
    113                  if (cursor > attach_count)
   \   000000EC   010050E1           CMP      R0,R1
    114                    cursor=attach_count;
   \   000000F0   0010A0B1           MOVLT    R1,R0
   \                     ??onKey_7:
   \   000000F4   601084E5           STR      R1,[R4, #+96]
    115                }
    116              if (IsScrollbar==0)
   \                     ??onKey_5:
   \   000000F8   5C0094E5           LDR      R0,[R4, #+92]
   \   000000FC   000050E3           CMP      R0,#+0
   \   00000100   0000001A           BNE      ??onKey_3
    117                DirectRedrawGUI();}
   \   00000104   3F0100EF           SWI      +319
    118              break;
    119            }
    120          
    121            
    122            if ((msg->gbsmsg->msg==KEY_DOWN)||(msg->gbsmsg->msg==LONG_PRESS))
   \                     ??onKey_3:
   \   00000108   040096E5           LDR      R0,[R6, #+4]
   \   0000010C   9320A0E3           MOV      R2,#+147
   \   00000110   041090E5           LDR      R1,[R0, #+4]
   \   00000114   402F82E3           ORR      R2,R2,#0x100
   \   00000118   020051E1           CMP      R1,R2
   \   0000011C   02208212           ADDNE    R2,R2,#+2
   \   00000120   02005111           CMPNE    R1,R2
   \   00000124   1600001A           BNE      ??onKey_4
    123            { 
    124              switch(msg->gbsmsg->submess)
   \   00000128   ........           LDR      R6,??DataTable6  ;; INET_PROCESS
   \   0000012C   080090E5           LDR      R0,[R0, #+8]
   \   00000130   501094E5           LDR      R1,[R4, #+80]
   \   00000134   002096E5           LDR      R2,[R6, #+0]
   \   00000138   010050E2           SUBS     R0,R0,#+1
   \   0000013C   1900000A           BEQ      ??onKey_8
   \   00000140   030050E2           SUBS     R0,R0,#+3
   \   00000144   3400000A           BEQ      ??onKey_9
   \   00000148   070050E2           SUBS     R0,R0,#+7
   \   0000014C   1200000A           BEQ      ??onKey_10
   \   00000150   320050E2           SUBS     R0,R0,#+50
   \   00000154   0200000A           BEQ      ??onKey_11
   \   00000158   010050E2           SUBS     R0,R0,#+1
   \   0000015C   0A00000A           BEQ      ??onKey_12
   \   00000160   0E0000EA           B        ??onKey_13
    125              {
    126              case LEFT_BUTTON:
    127                if (INET_PROCESS==0 && offset > 0)
   \                     ??onKey_11:
   \   00000164   000052E3           CMP      R2,#+0
   \   00000168   0500001A           BNE      ??onKey_4
   \   0000016C   010051E3           CMP      R1,#+1
   \   00000170   030000BA           BLT      ??onKey_4
    128                {
    129                  offset--;
   \   00000174   010041E2           SUB      R0,R1,#+1
   \                     ??onKey_14:
   \   00000178   500084E5           STR      R0,[R4, #+80]
    130                  //if(post) FreePost(post);
    131                  post=NULL;
   \   0000017C   4C5084E5           STR      R5,[R4, #+76]
    132                  Wall_Refresh();
   \   00000180   ........           BL       Wall_Refresh
    133                }       
    134                break;
    135                
    136              case RIGHT_BUTTON:
    137                if (INET_PROCESS==0)
    138                {
    139                  offset++;
    140                  //if(post) FreePost(post);
    141                  post=NULL;
    142                  Wall_Refresh();
    143                }       
    144                break;
    145                  
    146              case GREEN_BUTTON:
    147          #ifdef DEBUG
    148                CreateDebugGUI();
    149          #endif
    150              break;
    151              
    152              case ENTER_BUTTON:
    153              break;
    154              
    155              case LEFT_SOFT:
    156                if (INET_PROCESS==0 && cursor)
    157                {
    158                  if (post && !list_empty(&post->attachments))
    159                  {
    160                    struct list_head* i=get_ListByIndex(&post->attachments, cursor-1);
    161                    ATTACH_WALL* entry = list_entry(i, ATTACH_WALL, list);
    162                    if (entry->type==1 && entry->url)//photo
    163                    {
    164                      INET_PROCESS=DOWNLOAD_ATTACH_PHOTO;
    165                      SUBPROC((void *)HttpSendReq, entry->url);
    166                      AnimWidget_Wait(0);
    167                    }
    168                  }   
    169                }
    170                break;
    171                
    172              case RIGHT_SOFT:
    173                //не срабатывает
    174                return(1); 
    175              }
    176            }
    177            return(0);
   \                     ??onKey_4:
   \   00000184   0000A0E3           MOV      R0,#+0
   \   00000188   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??onKey_12:
   \   0000018C   000052E3           CMP      R2,#+0
   \   00000190   FBFFFF1A           BNE      ??onKey_4
   \   00000194   010081E2           ADD      R0,R1,#+1
   \   00000198   F6FFFFEA           B        ??onKey_14
   \                     ??onKey_10:
   \   0000019C   ........           _BLF     CreateDebugGUI,??CreateDebugGUI??rA
   \                     ??onKey_13:
   \   000001A0   0000A0E3           MOV      R0,#+0
   \   000001A4   7080BDE8           POP      {R4-R6,PC}
   \                     ??onKey_8:
   \   000001A8   000052E3           CMP      R2,#+0
   \   000001AC   F4FFFF1A           BNE      ??onKey_4
   \   000001B0   600094E5           LDR      R0,[R4, #+96]
   \   000001B4   000050E3           CMP      R0,#+0
   \   000001B8   7080BD08           POPEQ    {R4-R6,PC}
   \   000001BC   4C2094E5           LDR      R2,[R4, #+76]
   \   000001C0   000052E3           CMP      R2,#+0
   \   000001C4   EEFFFF0A           BEQ      ??onKey_4
   \   000001C8   341082E2           ADD      R1,R2,#+52
   \   000001CC   003091E5           LDR      R3,[R1, #+0]
   \   000001D0   010053E1           CMP      R3,R1
   \   000001D4   EAFFFF0A           BEQ      ??onKey_4
   \   000001D8   011040E2           SUB      R1,R0,#+1
   \   000001DC   340082E2           ADD      R0,R2,#+52
   \   000001E0   ........           _BLF     get_ListByIndex,??get_ListByIndex??rA
   \   000001E4   081090E5           LDR      R1,[R0, #+8]
   \   000001E8   010051E3           CMP      R1,#+1
   \   000001EC   E4FFFF1A           BNE      ??onKey_4
   \   000001F0   0C1090E5           LDR      R1,[R0, #+12]
   \   000001F4   000051E3           CMP      R1,#+0
   \   000001F8   E1FFFF0A           BEQ      ??onKey_4
   \   000001FC   1810A0E3           MOV      R1,#+24
   \   00000200   001086E5           STR      R1,[R6, #+0]
   \   00000204   0C1090E5           LDR      R1,[R0, #+12]
   \   00000208   ........           LDR      R0,??DataTable7  ;; HttpSendReq
   \   0000020C   710100EF           SWI      +369
   \   00000210   0000A0E3           MOV      R0,#+0
   \   00000214   ........           _BLF     AnimWidget_Wait,??AnimWidget_Wait??rA
   \   00000218   E0FFFFEA           B        ??onKey_13
   \                     ??onKey_9:
   \   0000021C   0100A0E3           MOV      R0,#+1
   \   00000220   7080BDE8           POP      {R4-R6,PC}
    178          }
    179          

   \                                 In segment CODE, align 4, keep-with-next
    180          static void gHook(void* data, int cmd)
    181          {
   \                     gHook:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    182            //static int hdr_pic;
    183            
    184            if (cmd==TI_CMD_CREATE)
   \   00000008   020051E3           CMP      R1,#+2
   \   0000000C   2D00001A           BNE      ??gHook_0
    185            {
    186              LoadDynTheme();
   \   00000010   ........           _BLF     LoadDynTheme,??LoadDynTheme??rA
    187              
    188              if (img_icon)
    189                hdr.icon=&header_icon;
    190              void* hdr_pointer=GetHeaderPointer(data);
   \   00000014   0400A0E1           MOV      R0,R4
    191              WSHDR* ws=AllocWS(32);
    192              if (selected_group->name)
   \   00000018   ........           LDR      R4,??DataTable10  ;; tv_desc
   \   0000001C   AE0200EF           SWI      +686
   \   00000020   0050A0E1           MOV      R5,R0
   \   00000024   2000A0E3           MOV      R0,#+32
   \   00000028   250100EF           SWI      +293
   \   0000002C   0060A0E1           MOV      R6,R0
   \   00000030   480094E5           LDR      R0,[R4, #+72]
   \   00000034   0C1090E5           LDR      R1,[R0, #+12]
   \   00000038   000051E3           CMP      R1,#+0
   \   0000003C   0200000A           BEQ      ??gHook_1
    193                wstrcat(ws, selected_group->name);
   \   00000040   0600A0E1           MOV      R0,R6
   \   00000044   210100EF           SWI      +289
   \   00000048   030000EA           B        ??gHook_2
    194              else
    195                wsprintf(ws, percent_d, selected_group->id);
   \                     ??gHook_1:
   \   0000004C   082090E5           LDR      R2,[R0, #+8]
   \   00000050   ........           LDR      R1,??DataTable9  ;; percent_d
   \   00000054   0600A0E1           MOV      R0,R6
   \   00000058   240100EF           SWI      +292
    196              SetHeaderText(hdr_pointer, ws, malloc_adr(), mfree_adr());
   \                     ??gHook_2:
   \   0000005C   158000EF           SWI      +32789
   \   00000060   0070A0E1           MOV      R7,R0
   \   00000064   148000EF           SWI      +32788
   \   00000068   0730A0E1           MOV      R3,R7
   \   0000006C   0020A0E1           MOV      R2,R0
   \   00000070   0610A0E1           MOV      R1,R6
   \   00000074   0500A0E1           MOV      R0,R5
   \   00000078   AF0200EF           SWI      +687
    197              
    198              if (INET_PROCESS==0 && post==0)
   \   0000007C   ........           LDR      R0,??DataTable6  ;; INET_PROCESS
   \   00000080   001090E5           LDR      R1,[R0, #+0]
   \   00000084   000051E3           CMP      R1,#+0
   \   00000088   4C109405           LDREQ    R1,[R4, #+76]
   \   0000008C   00005103           CMPEQ    R1,#+0
   \   00000090   F080BD18           POPNE    {R4-R7,PC}
    199              {
    200                INET_PROCESS=LOAD_WALL; 
   \   00000094   1710A0E3           MOV      R1,#+23
   \   00000098   001080E5           STR      R1,[R0, #+0]
    201                SUBPROC((void *)HttpSendReq, url_wall_get(selected_group->id, offset,1));
   \   0000009C   480094E5           LDR      R0,[R4, #+72]
   \   000000A0   501094E5           LDR      R1,[R4, #+80]
   \   000000A4   080090E5           LDR      R0,[R0, #+8]
   \   000000A8   0120A0E3           MOV      R2,#+1
   \   000000AC   ........           _BLF     url_wall_get,??url_wall_get??rA
   \   000000B0   0010A0E1           MOV      R1,R0
   \   000000B4   ........           LDR      R0,??DataTable7  ;; HttpSendReq
   \   000000B8   710100EF           SWI      +369
    202                AnimWidget_Wait(0);
   \   000000BC   0000A0E3           MOV      R0,#+0
   \   000000C0   ........           _BLF     AnimWidget_Wait,??AnimWidget_Wait??rA
   \   000000C4   F080BDE8           POP      {R4-R7,PC}
    203              }           
    204            }
    205            
    206            if (cmd==TI_CMD_UNFOCUS)
   \                     ??gHook_0:
   \   000000C8   090051E3           CMP      R1,#+9
   \   000000CC   0600000A           BEQ      ??gHook_3
    207            {
    208              AnimWidget_Close();
    209              DisableDynTheme();
    210            }
    211            
    212            if (cmd==TI_CMD_FOCUS)
   \                     ??gHook_4:
   \   000000D0   0A0051E3           CMP      R1,#+10
   \   000000D4   0200001A           BNE      ??gHook_5
    213            {
    214              EnableDynTheme();  
   \   000000D8   ........           _BLF     EnableDynTheme,??EnableDynTheme??rA
    215              DisableIDLETMR();
   \   000000DC   7F0100EF           SWI      +383
   \   000000E0   F080BDE8           POP      {R4-R7,PC}
    216            }
    217            
    218            if (cmd==TI_CMD_DESTROY)
   \                     ??gHook_5:
   \   000000E4   030051E3           CMP      R1,#+3
   \   000000E8   F080BD18           POPNE    {R4-R7,PC}
    219            { 
    220              AnimWidget_Close();
   \                     ??gHook_3:
   \   000000EC   ........           _BLF     AnimWidget_Close,??AnimWidget_Close??rA
    221              DisableDynTheme();
   \   000000F0   ........           _BLF     DisableDynTheme,??DisableDynTheme??rA
    222              /* else if (img_icon)
    223                {
    224                  mfree(img_icon->bitmap);
    225                  mfree(img_icon);
    226                  img_icon=NULL;
    227                }*/
    228            }
    229           
    230          }
   \   000000F4   F080BDE8           POP      {R4-R7,PC}       ;; return
    231          
    232          static TVIEW_DESC tv_desc=
    233          {
    234            8,
    235            onKey,
    236            gHook,
    237            proc3,
    238            menusoftkeys,//menusoftkeys
    239            &skt,
    240          #ifdef ELKA  
    241            {1,56,239,287},
    242          #else
    243            {1,23,131,154},
    244          #endif
    245            FONT_SMALL,
    246            0x64,
    247            0x65,
    248            0,
    249            0 //выравнивание
    250          };
    251          

   \                                 In segment CODE, align 4, keep-with-next
    252          int CalcTextH(WSHDR* ws, int ws_len, int font, int w, int text_flag)
    253          {
   \                     CalcTextH:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   34D04DE2           SUB      SP,SP,#+52
   \   00000008   50809DE5           LDR      R8,[SP, #+80]
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   0370A0E1           MOV      R7,R3
    254            DRWOBJ drwobj;
    255            RECT rc;
    256            int _w=0;
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   04108DE5           STR      R1,[SP, #+4]
    257            int _h=0;
   \   00000024   00108DE5           STR      R1,[SP, #+0]
    258            
    259            int len=wstrlen(ws);
   \   00000028   230100EF           SWI      +291
   \   0000002C   0090A0E1           MOV      R9,R0
    260            ws->wsbody[0]=ws_len;
   \   00000030   000094E5           LDR      R0,[R4, #+0]
    261            StoreXYWHtoRECT(&rc, 0, 0, w, 0x7FFF);
   \   00000034   0730A0E1           MOV      R3,R7
   \   00000038   B050C0E1           STRH     R5,[R0, #+0]
   \   0000003C   FF00A0E3           MOV      R0,#+255
   \   00000040   7F0C80E3           ORR      R0,R0,#0x7F00
   \   00000044   01002DE9           PUSH     {R0}
   \   00000048   0020A0E3           MOV      R2,#+0
   \   0000004C   0010A0E3           MOV      R1,#+0
   \   00000050   0C008DE2           ADD      R0,SP,#+12
   \   00000054   330100EF           SWI      +307
    262            SetPropTo_Obj1(&drwobj, &rc, 0, ws, font, text_flag);
   \   00000058   00012DE9           PUSH     {R8}
   \   0000005C   40002DE9           PUSH     {R6}
   \   00000060   0430A0E1           MOV      R3,R4
   \   00000064   0020A0E3           MOV      R2,#+0
   \   00000068   14108DE2           ADD      R1,SP,#+20
   \   0000006C   1C008DE2           ADD      R0,SP,#+28
   \   00000070   490100EF           SWI      +329
    263            //UnkFunc_Obj1(&drwobj, 0);
    264            Get_Obj1_WH(&drwobj, &_w, &_h);
   \   00000074   0C208DE2           ADD      R2,SP,#+12
   \   00000078   10108DE2           ADD      R1,SP,#+16
   \   0000007C   1C008DE2           ADD      R0,SP,#+28
   \   00000080   A60300EF           SWI      +934
    265            ws->wsbody[0]=len;
   \   00000084   000094E5           LDR      R0,[R4, #+0]
   \   00000088   B090C0E1           STRH     R9,[R0, #+0]
    266            FreeDrawObject_subobj(&drwobj);
   \   0000008C   1C008DE2           ADD      R0,SP,#+28
   \   00000090   4A0100EF           SWI      +330
    267            return _h;
   \   00000094   0C009DE5           LDR      R0,[SP, #+12]
   \   00000098   40D08DE2           ADD      SP,SP,#+64
   \   0000009C   F083BDE8           POP      {R4-R9,PC}       ;; return
    268          }
    269          

   \                                 In segment CODE, align 4, keep-with-next
    270          static WSHDR* crt_text(VkPost* msg)
    271          {
   \                     crt_text:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0050A0E3           MOV      R5,#+0
    272            WSHDR* ws=NULL;
    273            
    274            TDate t_date;
    275            TTime time;
    276            TDate s_date;
    277            int timestap; 
    278            TDate phone_date;
    279            TTime phone_time;  
    280            
    281            if (msg)
   \   00000010   D000000A           BEQ      ??crt_text_0
    282            {
    283              ws=AllocWS(254+wstrlen(msg->text));
   \   00000014   1C0094E5           LDR      R0,[R4, #+28]
    284              
    285              wsAppendChar(ws, UTF16_FONT_SMALL_BOLD);  
    286              wsAppendChar(ws, UTF16_INK_RGBA); 
    287              wsAppendChar(ws, 0x5D80);//RG
    288              wsAppendChar(ws, 0xA664);//BA - вк синий 
    289              
    290              if (msg->from_id != selected_group->id)//если сообщение не от сообщества, то указываем от кого
   \   00000018   ........           LDR      R7,??DataTable10  ;; tv_desc
   \   0000001C   230100EF           SWI      +291
   \   00000020   FE0080E2           ADD      R0,R0,#+254
   \   00000024   250100EF           SWI      +293
   \   00000028   0050A0E1           MOV      R5,R0
   \   0000002C   1310A0E3           MOV      R1,#+19
   \   00000030   E01C81E3           ORR      R1,R1,#0xE000
   \   00000034   1C0000EF           SWI      +28
   \   00000038   0660A0E3           MOV      R6,#+6
   \   0000003C   E06C86E3           ORR      R6,R6,#0xE000
   \   00000040   0610A0E1           MOV      R1,R6
   \   00000044   ........           LDR      R8,??DataTable9  ;; percent_d
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   1C0000EF           SWI      +28
   \   00000050   8010A0E3           MOV      R1,#+128
   \   00000054   5D1C81E3           ORR      R1,R1,#0x5D00
   \   00000058   0500A0E1           MOV      R0,R5
   \   0000005C   1C0000EF           SWI      +28
   \   00000060   6410A0E3           MOV      R1,#+100
   \   00000064   A61C81E3           ORR      R1,R1,#0xA600
   \   00000068   0500A0E1           MOV      R0,R5
   \   0000006C   1C0000EF           SWI      +28
   \   00000070   480097E5           LDR      R0,[R7, #+72]
   \   00000074   142094E5           LDR      R2,[R4, #+20]
   \   00000078   081090E5           LDR      R1,[R0, #+8]
   \   0000007C   010052E1           CMP      R2,R1
   \   00000080   1700000A           BEQ      ??crt_text_1
    291              {
    292                if (!list_empty(&msg->profiles))
   \   00000084   3C0084E2           ADD      R0,R4,#+60
   \   00000088   001090E5           LDR      R1,[R0, #+0]
   \   0000008C   000051E1           CMP      R1,R0
   \   00000090   0300001A           BNE      ??crt_text_2
    293                {
    294                  struct list_head *i;
    295                  list_for_each(i, &msg->profiles)
    296                  {
    297                    VkUser* entry = list_entry(i, VkUser, list);
    298                    wstrcat(ws, entry->first_name);
    299                    wsAppendChar(ws, ' ');
    300                    wstrcat(ws, entry->last_name);
    301                  }
    302                }
    303                else
    304                  wstrcatprintf(ws, percent_d, msg->from_id);
   \   00000094   0810A0E1           MOV      R1,R8
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   160200EF           SWI      +534
   \   000000A0   120000EA           B        ??crt_text_3
   \                     ??crt_text_2:
   \   000000A4   0190A0E1           MOV      R9,R1
   \   000000A8   1000000A           BEQ      ??crt_text_3
   \                     ??crt_text_4:
   \   000000AC   0C1099E5           LDR      R1,[R9, #+12]
   \   000000B0   0500A0E1           MOV      R0,R5
   \   000000B4   210100EF           SWI      +289
   \   000000B8   2010A0E3           MOV      R1,#+32
   \   000000BC   0500A0E1           MOV      R0,R5
   \   000000C0   1C0000EF           SWI      +28
   \   000000C4   101099E5           LDR      R1,[R9, #+16]
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   210100EF           SWI      +289
   \   000000D0   009099E5           LDR      R9,[R9, #+0]
   \   000000D4   3C0084E2           ADD      R0,R4,#+60
   \   000000D8   000059E1           CMP      R9,R0
   \   000000DC   0300000A           BEQ      ??crt_text_3
   \   000000E0   F1FFFFEA           B        ??crt_text_4
    305              }
    306              else
    307                wstrcat(ws, selected_group->name);
   \                     ??crt_text_1:
   \   000000E4   0C1090E5           LDR      R1,[R0, #+12]
   \   000000E8   0500A0E1           MOV      R0,R5
   \   000000EC   210100EF           SWI      +289
    308              
    309              wsAppendChar(ws, ':');
   \                     ??crt_text_3:
   \   000000F0   3A10A0E3           MOV      R1,#+58
   \   000000F4   0500A0E1           MOV      R0,R5
   \   000000F8   1C0000EF           SWI      +28
    310              wsAppendChar(ws, '\n');
   \   000000FC   0A10A0E3           MOV      R1,#+10
   \   00000100   0500A0E1           MOV      R0,R5
   \   00000104   1C0000EF           SWI      +28
   \   00000108   0C1086E2           ADD      R1,R6,#+12
   \   0000010C   0500A0E1           MOV      R0,R5
    311              
    312              wsAppendChar(ws, UTF16_FONT_SMALL);
   \   00000110   1C0000EF           SWI      +28
    313              wsAppendChar(ws, UTF16_INK_RGBA); 
   \   00000114   0610A0E1           MOV      R1,R6
   \   00000118   0500A0E1           MOV      R0,R5
   \   0000011C   1C0000EF           SWI      +28
    314              wsAppendChar(ws, 0x8080);//RG
   \   00000120   8090A0E3           MOV      R9,#+128
   \   00000124   809C89E3           ORR      R9,R9,#0x8000
   \   00000128   0910A0E1           MOV      R1,R9
   \   0000012C   0500A0E1           MOV      R0,R5
   \   00000130   1C0000EF           SWI      +28
    315              wsAppendChar(ws, 0x8064);//BA - серый
   \   00000134   1CA049E2           SUB      R10,R9,#+28
   \   00000138   0A10A0E1           MOV      R1,R10
   \   0000013C   0500A0E1           MOV      R0,R5
   \   00000140   1C0000EF           SWI      +28
    316              
    317              timestap=msg->date + (GMT.hour*3600)+(GMT.min*60);
   \   00000144   18129FE5           LDR      R1,??crt_text_5  ;; GMT
   \   00000148   102094E5           LDR      R2,[R4, #+16]
   \   0000014C   0030D1E5           LDRB     R3,[R1, #+0]
   \   00000150   0110D1E5           LDRB     R1,[R1, #+1]
   \   00000154   E1BEA0E3           MOV      R11,#+3600
   \   00000158   9B2322E0           MLA      R2,R11,R3,R2
   \   0000015C   3C30A0E3           MOV      R3,#+60
   \   00000160   932121E0           MLA      R1,R3,R1,R2
    318              s_date.year=1970;
    319              s_date.month=1;
   \   00000164   0100A0E3           MOV      R0,#+1
   \   00000168   18108DE5           STR      R1,[SP, #+24]
   \   0000016C   B210A0E3           MOV      R1,#+178
   \   00000170   701E81E3           ORR      R1,R1,#0x700
   \   00000174   1C108DE5           STR      R1,[SP, #+28]
   \   00000178   2000CDE5           STRB     R0,[SP, #+32]
    320              s_date.day=1;
   \   0000017C   2100CDE5           STRB     R0,[SP, #+33]
    321              GetDateTimeFromSeconds(&timestap, &t_date, &time, &s_date);    
   \   00000180   1C308DE2           ADD      R3,SP,#+28
   \   00000184   10208DE2           ADD      R2,SP,#+16
   \   00000188   0D10A0E1           MOV      R1,SP
   \   0000018C   18008DE2           ADD      R0,SP,#+24
   \   00000190   C90200EF           SWI      +713
    322              GetDateTime(&phone_date, &phone_time);
   \   00000194   24108DE2           ADD      R1,SP,#+36
   \   00000198   08008DE2           ADD      R0,SP,#+8
   \   0000019C   B40000EF           SWI      +180
    323              
    324              if (phone_date.day==t_date.day && phone_date.month==t_date.month && phone_date.year==t_date.year)
   \   000001A0   0520DDE5           LDRB     R2,[SP, #+5]
   \   000001A4   0D00DDE5           LDRB     R0,[SP, #+13]
   \   000001A8   020050E1           CMP      R0,R2
   \   000001AC   1000001A           BNE      ??crt_text_6
   \   000001B0   0C10DDE5           LDRB     R1,[SP, #+12]
   \   000001B4   0430DDE5           LDRB     R3,[SP, #+4]
   \   000001B8   030051E1           CMP      R1,R3
   \   000001BC   0C00001A           BNE      ??crt_text_6
   \   000001C0   08109DE5           LDR      R1,[SP, #+8]
   \   000001C4   00309DE5           LDR      R3,[SP, #+0]
   \   000001C8   030051E1           CMP      R1,R3
   \   000001CC   0800001A           BNE      ??crt_text_6
    325                wstrcatprintf(ws, "%t %d:%02d", "сегодня в", time.hour, time.min);
   \   000001D0   1100DDE5           LDRB     R0,[SP, #+17]
   \   000001D4   1C2088E2           ADD      R2,R8,#+28
   \   000001D8   01002DE9           PUSH     {R0}
   \   000001DC   1430DDE5           LDRB     R3,[SP, #+20]
   \                     ??crt_text_7:
   \   000001E0   281088E2           ADD      R1,R8,#+40
   \   000001E4   0500A0E1           MOV      R0,R5
   \   000001E8   160200EF           SWI      +534
   \   000001EC   04D08DE2           ADD      SP,SP,#+4
   \   000001F0   160000EA           B        ??crt_text_8
    326              else
    327                if ((phone_date.day-1)==t_date.day && phone_date.month==t_date.month && phone_date.year==t_date.year)
   \                     ??crt_text_6:
   \   000001F4   04C0DDE5           LDRB     R12,[SP, #+4]
   \   000001F8   1110DDE5           LDRB     R1,[SP, #+17]
   \   000001FC   1030DDE5           LDRB     R3,[SP, #+16]
   \   00000200   010040E2           SUB      R0,R0,#+1
   \   00000204   020050E1           CMP      R0,R2
   \   00000208   0C00DD05           LDRBEQ   R0,[SP, #+12]
   \   0000020C   0C005001           CMPEQ    R0,R12
   \   00000210   0600001A           BNE      ??crt_text_9
   \   00000214   08009DE5           LDR      R0,[SP, #+8]
   \   00000218   00B09DE5           LDR      R11,[SP, #+0]
   \   0000021C   0B0050E1           CMP      R0,R11
   \   00000220   0200001A           BNE      ??crt_text_9
    328                  wstrcatprintf(ws, "%t %d:%02d", "вчера в", time.hour, time.min);
   \   00000224   02002DE9           PUSH     {R1}
   \   00000228   142088E2           ADD      R2,R8,#+20
   \   0000022C   EBFFFFEA           B        ??crt_text_7
    329              else
    330                wstrcatprintf(ws, "%d %t %d:%02d", t_date.day, MONTH_NAME[t_date.month-1], time.hour, time.min);
   \                     ??crt_text_9:
   \   00000230   02002DE9           PUSH     {R1}
   \   00000234   08002DE9           PUSH     {R3}
   \   00000238   0C0187E0           ADD      R0,R7,R12, LSL #+2
   \   0000023C   CC3090E5           LDR      R3,[R0, #+204]
   \   00000240   041088E2           ADD      R1,R8,#+4
   \   00000244   0500A0E1           MOV      R0,R5
   \   00000248   160200EF           SWI      +534
   \   0000024C   08D08DE2           ADD      SP,SP,#+8
    331               
    332              if (msg->text)
   \                     ??crt_text_8:
   \   00000250   1C0094E5           LDR      R0,[R4, #+28]
   \   00000254   000050E3           CMP      R0,#+0
   \   00000258   0E00000A           BEQ      ??crt_text_10
    333              {
    334                wsAppendChar(ws, '\n');
   \   0000025C   0A10A0E3           MOV      R1,#+10
   \   00000260   0500A0E1           MOV      R0,R5
   \   00000264   1C0000EF           SWI      +28
    335                wsAppendChar(ws, UTF16_INK_RGBA);
   \   00000268   0610A0E1           MOV      R1,R6
   \   0000026C   0500A0E1           MOV      R0,R5
   \   00000270   1C0000EF           SWI      +28
    336                wsAppendChar(ws, 0x0000);//RG
   \   00000274   0010A0E3           MOV      R1,#+0
   \   00000278   0500A0E1           MOV      R0,R5
   \   0000027C   1C0000EF           SWI      +28
    337                wsAppendChar(ws, 0x0064);//BA - черный    
   \   00000280   6410A0E3           MOV      R1,#+100
   \   00000284   0500A0E1           MOV      R0,R5
   \   00000288   1C0000EF           SWI      +28
    338                wstrcat(ws, msg->text);
   \   0000028C   1C1094E5           LDR      R1,[R4, #+28]
   \   00000290   0500A0E1           MOV      R0,R5
   \   00000294   210100EF           SWI      +289
    339              }
    340              
    341              wsAppendChar(ws, '\n');
   \                     ??crt_text_10:
   \   00000298   0A10A0E3           MOV      R1,#+10
   \   0000029C   0500A0E1           MOV      R0,R5
   \   000002A0   1C0000EF           SWI      +28
    342              
    343              attach_count=0;
   \   000002A4   0000A0E3           MOV      R0,#+0
   \   000002A8   640087E5           STR      R0,[R7, #+100]
    344              if (!list_empty(&msg->attachments))
   \   000002AC   340084E2           ADD      R0,R4,#+52
   \   000002B0   001090E5           LDR      R1,[R0, #+0]
   \   000002B4   000051E1           CMP      R1,R0
    345              {
    346                struct list_head *i;
    347                list_for_each(i, &msg->attachments)
   \   000002B8   01B0A011           MOVNE    R11,R1
   \   000002BC   0C00000A           BEQ      ??crt_text_11
    348                {
    349                  ATTACH_WALL* entry = list_entry(i, ATTACH_WALL, list);       
    350                  //wsAppendChar(ws, UTF16_FONT_SMALL);
    351                  //wsAppendChar(ws, UTF16_INK_RGBA); 
    352                  //wsAppendChar(ws, 0x319A);//RG
    353                  //wsAppendChar(ws, 0xFF64);//BA - сочный синий  
    354                  entry->offset_ws=wstrlen(ws);
   \                     ??crt_text_12:
   \   000002C0   0500A0E1           MOV      R0,R5
   \   000002C4   230100EF           SWI      +291
   \   000002C8   10008BE5           STR      R0,[R11, #+16]
    355                  wsAppendChar(ws, '\n');
   \   000002CC   0A10A0E3           MOV      R1,#+10
   \   000002D0   0500A0E1           MOV      R0,R5
   \   000002D4   1C0000EF           SWI      +28
    356                  attach_count++;
   \   000002D8   640097E5           LDR      R0,[R7, #+100]
   \   000002DC   010080E2           ADD      R0,R0,#+1
   \   000002E0   640087E5           STR      R0,[R7, #+100]
    357                }
   \   000002E4   00B09BE5           LDR      R11,[R11, #+0]
   \   000002E8   340084E2           ADD      R0,R4,#+52
   \   000002EC   00005BE1           CMP      R11,R0
   \   000002F0   F2FFFF1A           BNE      ??crt_text_12
    358              }
    359              
    360              wsAppendChar(ws, UTF16_FONT_SMALL);
   \                     ??crt_text_11:
   \   000002F4   0C1086E2           ADD      R1,R6,#+12
   \   000002F8   0500A0E1           MOV      R0,R5
   \   000002FC   1C0000EF           SWI      +28
    361              wsAppendChar(ws, UTF16_INK_RGBA); 
   \   00000300   0610A0E1           MOV      R1,R6
   \   00000304   0500A0E1           MOV      R0,R5
   \   00000308   1C0000EF           SWI      +28
    362              wsAppendChar(ws, 0x8080);//RG
   \   0000030C   0910A0E1           MOV      R1,R9
   \   00000310   0500A0E1           MOV      R0,R5
   \   00000314   1C0000EF           SWI      +28
    363              wsAppendChar(ws, 0x8064);//BA - серый  
   \   00000318   0A10A0E1           MOV      R1,R10
   \   0000031C   0500A0E1           MOV      R0,R5
   \   00000320   1C0000EF           SWI      +28
    364              wstrcatprintf(ws, percent_t_d, "Нравится", msg->likes);
   \   00000324   243094E5           LDR      R3,[R4, #+36]
   \   00000328   342088E2           ADD      R2,R8,#+52
   \   0000032C   4C1088E2           ADD      R1,R8,#+76
   \   00000330   0500A0E1           MOV      R0,R5
   \   00000334   160200EF           SWI      +534
    365              wsAppendChar(ws, '\n');
   \   00000338   0A10A0E3           MOV      R1,#+10
   \   0000033C   0500A0E1           MOV      R0,R5
   \   00000340   1C0000EF           SWI      +28
    366              wstrcatprintf(ws, percent_t_d, "Комментарии", msg->comments_count);
   \   00000344   2C3094E5           LDR      R3,[R4, #+44]
   \   00000348   402088E2           ADD      R2,R8,#+64
   \   0000034C   4C1088E2           ADD      R1,R8,#+76
   \   00000350   0500A0E1           MOV      R0,R5
   \   00000354   160200EF           SWI      +534
    367            }
    368            return ws;
   \                     ??crt_text_0:
   \   00000358   0500A0E1           MOV      R0,R5
   \   0000035C   2CD08DE2           ADD      SP,SP,#+44
   \   00000360   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??crt_text_5:
   \   00000364   ........           DC32     GMT
    369          }

   \                                 In segment DATA_I, align 4, align-sorted
   \                     tv_desc:
   \   00000000                      DS8 52
   \   00000034                      REQUIRE `?<Initializer for tv_desc>`
   \   00000034                      DS8 20
   \   00000048                      REQUIRE `?<Initializer for hdr>`
   \   00000048                      DS8 4
   \   0000004C                      REQUIRE `?<Initializer for selected_group>`
   \                     post:
   \   0000004C                      DS8 4
   \   00000050                      REQUIRE `?<Initializer for post>`
   \   00000050                      DS8 4
   \   00000054                      REQUIRE `?<Initializer for offset>`
   \   00000054                      DS8 4
   \   00000058                      REQUIRE `?<Initializer for full_text_h>`
   \   00000058                      DS8 4
   \   0000005C                      REQUIRE `?<Initializer for offset_text_h>`
   \   0000005C                      DS8 4
   \   00000060                      REQUIRE `?<Initializer for IsScrollbar>`
   \   00000060                      DS8 4
   \   00000064                      REQUIRE `?<Initializer for cursor>`
   \   00000064                      DS8 4
   \   00000068                      REQUIRE `?<Initializer for attach_count>`
   \   00000068                      DS8 4
   \   0000006C                      REQUIRE `?<Initializer for OnRedraw>`
   \   0000006C                      DS8 96
   \   000000CC                      REQUIRE `?<Initializer for gui_methods_copy>`
   \   000000CC                      DS8 4
   \   000000D0                      REQUIRE `?<Initializer for tvgui_methods>`
   \   000000D0                      DS8 48
   \   00000100                      REQUIRE `?<Initializer for MONTH_NAME>`
   \                     sk:
   \   00000100                      DS8 24
   \   00000118                      REQUIRE `?<Initializer for sk>`
   \   00000118                      DS8 8
   \   00000120                      REQUIRE `?<Initializer for lsk>`
   \   00000120                      DS8 8
   \   00000128                      REQUIRE `?<Initializer for esk>`

   \                                 In segment DATA_I, align 4, align-sorted
   \                     skt:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for skt>`
    370          
    371          static void (*OnRedraw)(void*);
    372          static void* gui_methods_copy[24];
    373          static void* tvgui_methods;
    374          

   \                                 In segment CODE, align 4, keep-with-next
    375          static void MyOnRedraw(void *gui)
    376          {
    377            WSHDR ws;
    378            unsigned short wsbody[32];
    379            unsigned color_blue=0x64FF9A31;// сочный синий 
   \                     MyOnRedraw:
   \   00000000   9C119FE5           LDR      R1,??MyOnRedraw_0  ;; 0x64ff9a31
   \   00000004   F0412DE9           PUSH     {R4-R8,LR}
    380            unsigned color_white=0x64FFFFFF;// белый
    381            unsigned brush=0;
    382            
    383            if (cursor)
   \   00000008   ........           LDR      R4,??DataTable10  ;; tv_desc
   \   0000000C   60D04DE2           SUB      SP,SP,#+96
   \   00000010   0050A0E1           MOV      R5,R0
   \   00000014   600094E5           LDR      R0,[R4, #+96]
   \   00000018   00108DE5           STR      R1,[SP, #+0]
   \   0000001C   9B14E0E3           MVN      R1,#-1694498816
   \   00000020   04108DE5           STR      R1,[SP, #+4]
   \   00000024   0010A0E3           MOV      R1,#+0
   \   00000028   08108DE5           STR      R1,[SP, #+8]
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   0020A0E3           MOV      R2,#+0
   \   00000034   0500000A           BEQ      ??MyOnRedraw_1
    384            {
    385              SetMenuSoftKey(gui, &lsk, 0);
   \   00000038   461F84E2           ADD      R1,R4,#+280
   \   0000003C   0500A0E1           MOV      R0,R5
   \   00000040   B00200EF           SWI      +688
    386              SetMenuSoftKey(gui, &esk, 2);
   \   00000044   0220A0E3           MOV      R2,#+2
   \   00000048   481F84E2           ADD      R1,R4,#+288
   \   0000004C   040000EA           B        ??MyOnRedraw_2
    387            }
    388            else
    389            {
    390              SetMenuSoftKey(gui, &sk[0], 0);
   \                     ??MyOnRedraw_1:
   \   00000050   401F84E2           ADD      R1,R4,#+256
   \   00000054   0500A0E1           MOV      R0,R5
   \   00000058   B00200EF           SWI      +688
    391              SetMenuSoftKey(gui, &sk[2], 2);
   \   0000005C   0220A0E3           MOV      R2,#+2
   \   00000060   441F84E2           ADD      R1,R4,#+272
   \                     ??MyOnRedraw_2:
   \   00000064   0500A0E1           MOV      R0,R5
   \   00000068   B00200EF           SWI      +688
    392            }
    393            
    394            OnRedraw(gui);// тут отрисуется текст который добавили с помощью TViewSetText
   \   0000006C   681094E5           LDR      R1,[R4, #+104]
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   31FF2FE1           BLX      R1
    395            
    396            //void* data=GetDataOfItemByID(gui, 4);
    397            //int* ptr=(void*)GetItemTextPtr(data);
    398            //int* data_unk=ptr;
    399            //int offset_t=TVIEW_GetTextOffset((void*)data_unk[3]);//счетчик прочитанных WS символов-тупит частенько
    400            //int offset_h1=CalcTextH(ws, offset_t, tv_desc.font, w, tv_desc.unk4);
    401            
    402            //wsAppendChar(ws, UTF16_FONT_SMALL);
    403            //wsAppendChar(ws, UTF16_INK_RGBA); 
    404            //wsAppendChar(ws, 0x319A);//RG
    405            //wsAppendChar(ws, 0xFF64);//BA - сочный синий  
    406            // WSHDR* ws=(WSHDR*)ptr[2];
    407            
    408            if (post && !list_empty(&post->attachments))
   \   00000078   4C0094E5           LDR      R0,[R4, #+76]
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   3410B015           LDRNE    R1,[R0, #+52]!
   \   00000084   00005111           CMPNE    R1,R0
   \   00000088   4300000A           BEQ      ??MyOnRedraw_3
    409            { 
    410              CreateLocalWS(&ws, wsbody, 31);
   \   0000008C   1F20A0E3           MOV      R2,#+31
   \   00000090   20108DE2           ADD      R1,SP,#+32
   \   00000094   0C008DE2           ADD      R0,SP,#+12
   \   00000098   270100EF           SWI      +295
    411              
    412              int n=0;
    413              struct list_head *i;
    414              list_for_each(i, &post->attachments)
   \   0000009C   4C0094E5           LDR      R0,[R4, #+76]
   \   000000A0   0050A0E3           MOV      R5,#+0
   \   000000A4   346090E5           LDR      R6,[R0, #+52]
   \   000000A8   340080E2           ADD      R0,R0,#+52
   \   000000AC   000056E1           CMP      R6,R0
   \   000000B0   3900000A           BEQ      ??MyOnRedraw_3
    415              {
    416                ATTACH_WALL* entry = list_entry(i, ATTACH_WALL, list);
    417                
    418                if (entry->type==1)//photo
   \                     ??MyOnRedraw_4:
   \   000000B4   EC109FE5           LDR      R1,??MyOnRedraw_0+0x4  ;; percent_t
   \   000000B8   080096E5           LDR      R0,[R6, #+8]
   \   000000BC   010050E3           CMP      R0,#+1
    419                  wsprintf(&ws, percent_t, "фото");
   \   000000C0   04208102           ADDEQ    R2,R1,#+4
   \   000000C4   0500000A           BEQ      ??MyOnRedraw_5
    420                else
    421                  if (entry->type==7)//link
   \   000000C8   070050E3           CMP      R0,#+7
    422                    wsprintf(&ws, percent_t, "ссылка");
   \   000000CC   0C208102           ADDEQ    R2,R1,#+12
   \   000000D0   0200000A           BEQ      ??MyOnRedraw_5
    423                  else
    424                    if (entry->type==3)//video
   \   000000D4   030050E3           CMP      R0,#+3
   \   000000D8   0200001A           BNE      ??MyOnRedraw_6
    425                      wsprintf(&ws, percent_t, "видео");
   \   000000DC   142081E2           ADD      R2,R1,#+20
   \                     ??MyOnRedraw_5:
   \   000000E0   0C008DE2           ADD      R0,SP,#+12
   \   000000E4   240100EF           SWI      +292
    426                  
    427                  int y=tv_desc.rc.y + (entry->offset_h - offset_text_h);
   \                     ??MyOnRedraw_6:
   \   000000E8   FA01D4E1           LDRSH    R0,[R4, #+26]
   \   000000EC   141096E5           LDR      R1,[R6, #+20]
   \   000000F0   000081E0           ADD      R0,R1,R0
   \   000000F4   581094E5           LDR      R1,[R4, #+88]
   \   000000F8   017040E0           SUB      R7,R0,R1
    428                  int font_h=GetFontYSIZE(tv_desc.font);
   \   000000FC   200094E5           LDR      R0,[R4, #+32]
   \   00000100   C50100EF           SWI      +453
    429                  
    430                  SetDrawingCanvas(tv_desc.rc.x, tv_desc.rc.y, tv_desc.rc.x2, tv_desc.rc.y2);
   \   00000104   FE31D4E1           LDRSH    R3,[R4, #+30]
   \   00000108   FC21D4E1           LDRSH    R2,[R4, #+28]
   \   0000010C   FA11D4E1           LDRSH    R1,[R4, #+26]
   \   00000110   0080A0E1           MOV      R8,R0
   \   00000114   F801D4E1           LDRSH    R0,[R4, #+24]
   \   00000118   A40300EF           SWI      +932
    431                  //DrawIMGHDR(30, y, img_link);
    432                  if (cursor && n==cursor-1)
   \   0000011C   600094E5           LDR      R0,[R4, #+96]
   \   00000120   000050E3           CMP      R0,#+0
   \   00000124   0600000A           BEQ      ??MyOnRedraw_7
   \   00000128   010040E2           SUB      R0,R0,#+1
   \   0000012C   000055E1           CMP      R5,R0
   \   00000130   0300001A           BNE      ??MyOnRedraw_7
    433                    DrawString(&ws, tv_desc.rc.x, y, 131, y+font_h, tv_desc.font, 0, (char*)&color_white, (char*)&color_blue);
   \   00000134   0D00A0E1           MOV      R0,SP
   \   00000138   01002DE9           PUSH     {R0}
   \   0000013C   08008DE2           ADD      R0,SP,#+8
   \   00000140   020000EA           B        ??MyOnRedraw_8
    434                  else
    435                    DrawString(&ws, tv_desc.rc.x, y, 131, y+font_h, tv_desc.font, 0, (char*)&color_blue, (char*)&brush);
   \                     ??MyOnRedraw_7:
   \   00000144   08008DE2           ADD      R0,SP,#+8
   \   00000148   01002DE9           PUSH     {R0}
   \   0000014C   04008DE2           ADD      R0,SP,#+4
   \                     ??MyOnRedraw_8:
   \   00000150   01002DE9           PUSH     {R0}
   \   00000154   8330A0E3           MOV      R3,#+131
   \   00000158   0720A0E1           MOV      R2,R7
    436                  
    437                  n++;
   \   0000015C   015085E2           ADD      R5,R5,#+1
   \   00000160   0000A0E3           MOV      R0,#+0
   \   00000164   01002DE9           PUSH     {R0}
   \   00000168   200094E5           LDR      R0,[R4, #+32]
   \   0000016C   01002DE9           PUSH     {R0}
   \   00000170   070088E0           ADD      R0,R8,R7
   \   00000174   01002DE9           PUSH     {R0}
   \   00000178   F811D4E1           LDRSH    R1,[R4, #+24]
   \   0000017C   20008DE2           ADD      R0,SP,#+32
   \   00000180   4C0100EF           SWI      +332
   \   00000184   14D08DE2           ADD      SP,SP,#+20
    438              }
   \   00000188   006096E5           LDR      R6,[R6, #+0]
   \   0000018C   4C0094E5           LDR      R0,[R4, #+76]
   \   00000190   340080E2           ADD      R0,R0,#+52
   \   00000194   000056E1           CMP      R6,R0
   \   00000198   C5FFFF1A           BNE      ??MyOnRedraw_4
    439            }
    440          }
   \                     ??MyOnRedraw_3:
   \   0000019C   60D08DE2           ADD      SP,SP,#+96       ;; stack cleaning
   \   000001A0   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??MyOnRedraw_0:
   \   000001A4   319AFF64           DC32     0x64ff9a31
   \   000001A8   ........           DC32     percent_t
    441          

   \                                 In segment CODE, align 4, keep-with-next
    442          int CreateWall(VkGroup *group)
    443          {
   \                     CreateWall:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
    444            WSHDR* ws=NULL;
    445            
    446            if(csm->wallgui_id)//закрываем до этого созданный гуй
   \   00000004   ........           LDR      R4,??DataTable11  ;; csm
   \   00000008   ........           LDR      R5,??DataTable12  ;; tv_desc
   \   0000000C   0060A0E1           MOV      R6,R0
   \   00000010   000094E5           LDR      R0,[R4, #+0]
   \   00000014   0070A0E3           MOV      R7,#+0
   \   00000018   2C0090E5           LDR      R0,[R0, #+44]
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0900000A           BEQ      ??CreateWall_0
    447            {
    448              GUI* gui=FindGUIbyId(csm->wallgui_id, 0);
   \   00000024   0010A0E3           MOV      R1,#+0
   \   00000028   090200EF           SWI      +521
    449              gui->methods=tvgui_methods;//восстанавливаем методы
   \   0000002C   CC1095E5           LDR      R1,[R5, #+204]
   \   00000030   041080E5           STR      R1,[R0, #+4]
    450              GeneralFunc_flag1(csm->wallgui_id, 1);
   \   00000034   000094E5           LDR      R0,[R4, #+0]
   \   00000038   0110A0E3           MOV      R1,#+1
   \   0000003C   2C0090E5           LDR      R0,[R0, #+44]
   \   00000040   3D0100EF           SWI      +317
    451              csm->wallgui_id=NULL;
   \   00000044   000094E5           LDR      R0,[R4, #+0]
   \   00000048   2C7080E5           STR      R7,[R0, #+44]
    452            }
    453          
    454            selected_group=group;
   \                     ??CreateWall_0:
   \   0000004C   486085E5           STR      R6,[R5, #+72]
    455            
    456            GUI* tvgui=TViewGetGUI(malloc_adr(), mfree_adr());
   \   00000050   158000EF           SWI      +32789
   \   00000054   0060A0E1           MOV      R6,R0
   \   00000058   148000EF           SWI      +32788
   \   0000005C   0610A0E1           MOV      R1,R6
   \   00000060   D60200EF           SWI      +726
   \   00000064   0060A0E1           MOV      R6,R0
    457            TViewSetDefinition(tvgui, &tv_desc);
   \   00000068   0510A0E1           MOV      R1,R5
   \   0000006C   D70200EF           SWI      +727
    458            patch_header(&hdr);
   \   00000070   347085E5           STR      R7,[R5, #+52]
   \   00000074   888100EF           SWI      +33160
   \   00000078   010040E2           SUB      R0,R0,#+1
   \   0000007C   B803C5E1           STRH     R0,[R5, #+56]
   \   00000080   8A8100EF           SWI      +33162
   \   00000084   010040E2           SUB      R0,R0,#+1
   \   00000088   BA03C5E1           STRH     R0,[R5, #+58]
    459            SetHeaderToMenu(tvgui, &hdr, malloc_adr());
   \   0000008C   148000EF           SWI      +32788
   \   00000090   0020A0E1           MOV      R2,R0
   \   00000094   341085E2           ADD      R1,R5,#+52
   \   00000098   0600A0E1           MOV      R0,R6
   \   0000009C   A60200EF           SWI      +678
    460          
    461            offset_text_h=0;
    462            IsScrollbar=0;
    463            attach_count=0;
    464            cursor=0;
    465              
    466            if (post)
   \   000000A0   4C0095E5           LDR      R0,[R5, #+76]
   \   000000A4   587085E5           STR      R7,[R5, #+88]
   \   000000A8   5C7085E5           STR      R7,[R5, #+92]
   \   000000AC   647085E5           STR      R7,[R5, #+100]
   \   000000B0   607085E5           STR      R7,[R5, #+96]
   \   000000B4   000050E3           CMP      R0,#+0
   \   000000B8   0200000A           BEQ      ??CreateWall_1
    467              ws=crt_text(post);
   \   000000BC   ........           BL       crt_text
   \   000000C0   0070B0E1           MOVS     R7,R0
    468            if (ws==NULL)
   \   000000C4   0200001A           BNE      ??CreateWall_2
    469              ws=AllocWS(32);
   \                     ??CreateWall_1:
   \   000000C8   2000A0E3           MOV      R0,#+32
   \   000000CC   250100EF           SWI      +293
   \   000000D0   0070A0E1           MOV      R7,R0
    470            
    471            int w=tv_desc.rc.x2-tv_desc.rc.x+1;
   \                     ??CreateWall_2:
   \   000000D4   FC01D5E1           LDRSH    R0,[R5, #+28]
   \   000000D8   F811D5E1           LDRSH    R1,[R5, #+24]
   \   000000DC   010040E0           SUB      R0,R0,R1
   \   000000E0   018080E2           ADD      R8,R0,#+1
    472            
    473            full_text_h=CalcTextH(ws, wstrlen(ws), tv_desc.font, w, tv_desc.unk4);
   \   000000E4   0700A0E1           MOV      R0,R7
   \   000000E8   230100EF           SWI      +291
   \   000000EC   0010A0E1           MOV      R1,R0
   \   000000F0   300095E5           LDR      R0,[R5, #+48]
   \   000000F4   0830A0E1           MOV      R3,R8
   \   000000F8   01002DE9           PUSH     {R0}
   \   000000FC   202095E5           LDR      R2,[R5, #+32]
   \   00000100   0700A0E1           MOV      R0,R7
   \   00000104   ........           BL       CalcTextH
    474            
    475            if (full_text_h > (tv_desc.rc.y2-tv_desc.rc.y+1))//значит будет скроллбар
   \   00000108   FA11D5E1           LDRSH    R1,[R5, #+26]
   \   0000010C   540085E5           STR      R0,[R5, #+84]
   \   00000110   FE01D5E1           LDRSH    R0,[R5, #+30]
   \   00000114   010040E0           SUB      R0,R0,R1
   \   00000118   541095E5           LDR      R1,[R5, #+84]
   \   0000011C   010080E2           ADD      R0,R0,#+1
   \   00000120   010050E1           CMP      R0,R1
   \   00000124   04D08DE2           ADD      SP,SP,#+4
   \   00000128   0D0000AA           BGE      ??CreateWall_3
    476            {
    477              IsScrollbar=1;
   \   0000012C   0100A0E3           MOV      R0,#+1
   \   00000130   5C0085E5           STR      R0,[R5, #+92]
    478              w-=TWIEW_SCROLLBAR_WIDTH;
    479              full_text_h=CalcTextH(ws, wstrlen(ws), tv_desc.font, w, tv_desc.unk4);//пересчитаем занова высоту
   \   00000134   0700A0E1           MOV      R0,R7
   \   00000138   230100EF           SWI      +291
   \   0000013C   301095E5           LDR      R1,[R5, #+48]
   \   00000140   038048E2           SUB      R8,R8,#+3
   \   00000144   02002DE9           PUSH     {R1}
   \   00000148   202095E5           LDR      R2,[R5, #+32]
   \   0000014C   0830A0E1           MOV      R3,R8
   \   00000150   0010A0E1           MOV      R1,R0
   \   00000154   0700A0E1           MOV      R0,R7
   \   00000158   ........           BL       CalcTextH
   \   0000015C   540085E5           STR      R0,[R5, #+84]
   \   00000160   04D08DE2           ADD      SP,SP,#+4
    480            }
    481             
    482            //вычисляем смещение до вложений
    483            if (post && !list_empty(&post->attachments))
   \                     ??CreateWall_3:
   \   00000164   4C0095E5           LDR      R0,[R5, #+76]
   \   00000168   000050E3           CMP      R0,#+0
   \   0000016C   1200000A           BEQ      ??CreateWall_4
   \   00000170   341080E2           ADD      R1,R0,#+52
   \   00000174   002091E5           LDR      R2,[R1, #+0]
   \   00000178   010052E1           CMP      R2,R1
    484            {
    485              struct list_head *i;
    486              list_for_each(i, &post->attachments)
   \   0000017C   0290A011           MOVNE    R9,R2
   \   00000180   0D00000A           BEQ      ??CreateWall_4
    487              {
    488                ATTACH_WALL* entry = list_entry(i, ATTACH_WALL, list);
    489                entry->offset_h=CalcTextH(ws, entry->offset_ws, tv_desc.font, w, tv_desc.unk4);
   \                     ??CreateWall_5:
   \   00000184   300095E5           LDR      R0,[R5, #+48]
   \   00000188   0830A0E1           MOV      R3,R8
   \   0000018C   01002DE9           PUSH     {R0}
   \   00000190   202095E5           LDR      R2,[R5, #+32]
   \   00000194   101099E5           LDR      R1,[R9, #+16]
   \   00000198   0700A0E1           MOV      R0,R7
   \   0000019C   ........           BL       CalcTextH
   \   000001A0   140089E5           STR      R0,[R9, #+20]
    490              }
   \   000001A4   009099E5           LDR      R9,[R9, #+0]
   \   000001A8   4C0095E5           LDR      R0,[R5, #+76]
   \   000001AC   04D08DE2           ADD      SP,SP,#+4
   \   000001B0   340080E2           ADD      R0,R0,#+52
   \   000001B4   000059E1           CMP      R9,R0
   \   000001B8   F1FFFF1A           BNE      ??CreateWall_5
    491            } 
    492             
    493            TViewSetText(tvgui, ws, malloc_adr(), mfree_adr());
   \                     ??CreateWall_4:
   \   000001BC   158000EF           SWI      +32789
   \   000001C0   0080A0E1           MOV      R8,R0
   \   000001C4   148000EF           SWI      +32788
   \   000001C8   0830A0E1           MOV      R3,R8
   \   000001CC   0020A0E1           MOV      R2,R0
   \   000001D0   0710A0E1           MOV      R1,R7
   \   000001D4   0600A0E1           MOV      R0,R6
   \   000001D8   D80200EF           SWI      +728
    494            
    495            //захват OnRedraw
    496            tvgui_methods=tvgui->methods;
   \   000001DC   040096E5           LDR      R0,[R6, #+4]
    497            memcpy(gui_methods_copy, tvgui->methods, sizeof(gui_methods_copy));
   \   000001E0   6020A0E3           MOV      R2,#+96
   \   000001E4   CC0085E5           STR      R0,[R5, #+204]
   \   000001E8   041096E5           LDR      R1,[R6, #+4]
   \   000001EC   6C0085E2           ADD      R0,R5,#+108
   \   000001F0   1E0100EF           SWI      +286
    498            OnRedraw=(void(*)(void*))gui_methods_copy[0];
   \   000001F4   6C0095E5           LDR      R0,[R5, #+108]
   \   000001F8   680085E5           STR      R0,[R5, #+104]
    499            gui_methods_copy[0]=(void*)MyOnRedraw;
   \   000001FC   1C009FE5           LDR      R0,??CreateWall_6  ;; MyOnRedraw
   \   00000200   6C0085E5           STR      R0,[R5, #+108]
    500            tvgui->methods=gui_methods_copy;
   \   00000204   6C0085E2           ADD      R0,R5,#+108
   \   00000208   040086E5           STR      R0,[R6, #+4]
    501            
    502            return (csm->wallgui_id=CreateGUI(tvgui));
   \   0000020C   0600A0E1           MOV      R0,R6
   \   00000210   370100EF           SWI      +311
   \   00000214   001094E5           LDR      R1,[R4, #+0]
   \   00000218   2C0081E5           STR      R0,[R1, #+44]
   \   0000021C   F083BDE8           POP      {R4-R9,PC}       ;; return
   \                     ??CreateWall_6:
   \   00000220   ........           DC32     MyOnRedraw
    503          }
    504          

   \                                 In segment CODE, align 4, keep-with-next
    505          void Wall_Refresh()
    506          {
   \                     Wall_Refresh:
   \   00000000   14009FE5           LDR      R0,??Wall_Refresh_0  ;; tv_desc + 72
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0080BD08           POPEQ    {PC}
    507            if (selected_group)
    508              CreateWall(selected_group);//проще занова создать GUI,чем обновить
   \   00000014   ........           BL       CreateWall
    509          }
   \   00000018   0080BDE8           POP      {PC}             ;; return
   \                     ??Wall_Refresh_0:
   \   0000001C   ........           DC32     tv_desc + 72

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     INET_PROCESS

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     HttpSendReq

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   ........           DC32     percent_d

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   ........           DC32     tv_desc

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   ........           DC32     csm

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   ........           DC32     tv_desc

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for tv_desc>`:
   \   00000000   08000000....       DC32 8, onKey, gHook, proc3, menusoftkeys, skt
   \              ............
   \              ............
   \              ............
   \   00000018   010017008300       DC16 1, 23, 131, 154
   \              9A00        
   \   00000020   0B0000006400       DC32 11, 100, 101, 0, 0
   \              000065000000
   \              000000000000
   \              0000        
   \                     `?<Initializer for hdr>`:
   \   00000034   000000000000       DC16 0, 0, 0, 0
   \              0000        
   \   0000003C   000000000000       DC32 0H, 0, 2147483647
   \              0000FFFFFF7F
   \                     `?<Initializer for selected_group>`:
   \   00000048   00000000           DC32 0H
   \                     `?<Initializer for post>`:
   \   0000004C   00000000           DC32 0H
   \                     `?<Initializer for offset>`:
   \   00000050   00000000           DC32 0
   \                     `?<Initializer for full_text_h>`:
   \   00000054   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for offset_text_h>`:
   \   00000058   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for IsScrollbar>`:
   \   0000005C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for cursor>`:
   \   00000060   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for attach_count>`:
   \   00000064   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for OnRedraw>`:
   \   00000068   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for gui_methods_copy>`:
   \   0000006C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000007C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000008C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000009C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for tvgui_methods>`:
   \   000000CC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for MONTH_NAME>`:
   \   000000D0   ............       DC32 `?<Constant "\\377\\355\\342">`, `?<Constant "\\364\\345\\342">`
   \              ....        
   \   000000D8   ........           DC32 `?<Constant "\\354\\340\\360\\362">`
   \   000000DC   ............       DC32 `?<Constant "\\340\\357\\360">`, `?<Constant "\\354\\340\\351">`
   \              ....        
   \   000000E4   ........           DC32 `?<Constant "\\350\\376\\355\\374">`
   \   000000E8   ........           DC32 `?<Constant "\\350\\376\\353\\374">`
   \   000000EC   ............       DC32 `?<Constant "\\340\\342\\343">`, `?<Constant "\\361\\345\\355">`
   \              ....        
   \   000000F4   ............       DC32 `?<Constant "\\356\\352\\362">`, `?<Constant "\\355\\356\\377">`
   \              ....        
   \   000000FC   ........           DC32 `?<Constant "\\344\\345\\352">`
   \                     `?<Initializer for sk>`:
   \   00000100   00000000           DC16 0, 0
   \   00000104   FFFFFFFF           DC32 -1
   \   00000108   01000000           DC16 1, 0
   \   0000010C   ........           DC32 `?<Constant "\\315\\340\\347\\340\\344">`
   \   00000110   00000000           DC16 0, 0
   \   00000114   FFFFFFFF           DC32 -1
   \                     `?<Initializer for lsk>`:
   \   00000118   18000000           DC16 24, 0
   \   0000011C   ........           DC32 `?<Constant "\\302\\373\\341\\360\\340\\362\\374">`
   \                     `?<Initializer for esk>`:
   \   00000120   1D000000           DC16 29, 0
   \   00000124   FBC0FF7F           DC32 2147467515

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for skt>`:
   \   00000000   ........0000       DC32 sk, 0
   \              0000        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\302\\373\\341\\360\\340\\362\\374">`:
   \   00000000   C2FBE1F0E0F2       DC8 "\302\373\341\360\340\362\374"
   \              FC00        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\315\\340\\347\\340\\344">`:
   \   00000000   CDE0E7E0E400       DC8 "\315\340\347\340\344"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\344\\345\\352">`:
   \   00000000   E4E5EA00           DC8 "\344\345\352"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\355\\356\\377">`:
   \   00000000   EDEEFF00           DC8 "\355\356\377"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\356\\352\\362">`:
   \   00000000   EEEAF200           DC8 "\356\352\362"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\361\\345\\355">`:
   \   00000000   F1E5ED00           DC8 "\361\345\355"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\340\\342\\343">`:
   \   00000000   E0E2E300           DC8 "\340\342\343"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\350\\376\\353\\374">`:
   \   00000000   E8FEEBFC00         DC8 "\350\376\353\374"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\350\\376\\355\\374">`:
   \   00000000   E8FEEDFC00         DC8 "\350\376\355\374"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\354\\340\\351">`:
   \   00000000   ECE0E900           DC8 "\354\340\351"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\340\\357\\360">`:
   \   00000000   E0EFF000           DC8 "\340\357\360"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\354\\340\\360\\362">`:
   \   00000000   ECE0F0F200         DC8 "\354\340\360\362"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\364\\345\\342">`:
   \   00000000   F4E5E200           DC8 "\364\345\342"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\377\\355\\342">`:
   \   00000000   FFEDE200           DC8 "\377\355\342"
    510          
    511          
    512          /*
    513          typedef struct 
    514          {
    515            void* malloc_adr;
    516            void* mfree_adr;
    517            WSHDR* text;  
    518          }
    519          MENU_ITEM_TXT;
    520          
    521          void Wall_Refresh()
    522          {
    523            if (csm->wall_gui_id)
    524            {
    525              GUI* gui=FindGUIbyId(csm->wall_gui_id, NULL);
    526              void* data=GetDataOfItemByID(gui, 4);
    527           
    528              MENU_ITEM_TXT* ptr=GetItemTextPtr(data);
    529              WSHDR* ws=crt_text((WALLMSG*)selected_group->msglist);
    530              if (ws)
    531              {
    532                FreeWS(ptr->text);
    533                ptr->text=ws;
    534                SetItemTextLength(ptr, wstrlen(ws));
    535              }
    536              if (IsGuiOnTop(csm->wall_gui_id))
    537                DirectRedrawGUI();
    538           
    539            }
    540          }
    541          */

   Maximum stack usage in bytes:

     Function     CSTACK
     --------     ------
     CalcTextH       92
     CreateWall      32
     MyOnRedraw     140
     Wall_Refresh     4
     crt_text        88
     gHook           20
     onKey           16
     proc3            0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     percent_d                        84
     percent_t                        28
     menusoftkeys                     12
     proc3                             4
     onKey                           548
     gHook                           248
     CalcTextH                       160
     crt_text                        872
     tv_desc                         296
     skt                               8
     MyOnRedraw                      428
     CreateWall                      548
     Wall_Refresh                     32
     ??DataTable6                      4
     ??DataTable7                      4
     ??DataTable9                      4
     ??DataTable10                     4
     ??DataTable11                     4
     ??DataTable12                     4
     ?<Initializer for tv_desc>      296
     ?<Initializer for skt>            8
     ?<Constant "\302\373\341\360\340\362\374">
                                       8
     ?<Constant "\315\340\347\340\344">
                                       8
     ?<Constant "\344\345\352">        4
     ?<Constant "\355\356\377">        4
     ?<Constant "\356\352\362">        4
     ?<Constant "\361\345\355">        4
     ?<Constant "\340\342\343">        4
     ?<Constant "\350\376\353\374">    8
     ?<Constant "\350\376\355\374">    8
     ?<Constant "\354\340\351">        4
     ?<Constant "\340\357\360">        4
     ?<Constant "\354\340\360\362">    8
     ?<Constant "\364\345\342">        4
     ?<Constant "\377\355\342">        4
      Others                         140

 
 2 992 bytes in segment CODE
   200 bytes in segment DATA_C
   304 bytes in segment DATA_I
   304 bytes in segment DATA_ID
    12 bytes in segment INITTAB
 
 2 864 bytes of CODE  memory (+ 140 bytes shared)
   504 bytes of CONST memory
   304 bytes of DATA  memory

Errors: none
Warnings: none
