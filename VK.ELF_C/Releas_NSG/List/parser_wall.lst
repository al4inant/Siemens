##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    15/Mar/2023  22:35:35 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \parser_wall.c                                       #
#    Command line    =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \parser_wall.c -D NEWSGOLD -D DEBUG -lCN             #
#                       D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \Releas_NSG\List\ -la D:\Users\alfinant\Documents\Si #
#                       emens\Dev\IAR\VK.ELF_C\Releas_NSG\List\ -o           #
#                       D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \Releas_NSG\Obj\ -s9 --cpu_mode arm --endian little  #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork         #
#                       --diag_suppress Pe301 -e --fpu None --dlib_config    #
#                       D:\Users\alfinant\Documents\Siemens\IAR\ARM\LIB\dl5t #
#                       painl8n.h -I D:\Users\alfinant\Documents\Siemens\IAR #
#                       \ARM\INC\ --inline_threshold=2                       #
#    List file       =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \Releas_NSG\List\parser_wall.lst                     #
#    Object file     =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C #
#                       \Releas_NSG\Obj\parser_wall.r79                      #
#                                                                            #
#                                                                            #
##############################################################################

D:\Users\alfinant\Documents\Siemens\Dev\IAR\VK.ELF_C\parser_wall.c
      1          #include "parser_wall.h"
      2          #include <siemens\swilib.h>
      3          #include "list.h"
      4          #include "json/cJSON.h"
      5          #include "string_util.h"
      6          #include "parser_error.h"
      7          #include "parser_user.h"
      8          #include "constants.h"

   \                                 In segment DATA_C, align 4, align-sorted
   \   static char const __data t_id[3]
   \                     t_id:
   \   00000000   696400             DC8 "id"
   \   00000003   00                 DC8 0
   \   00000004   6572726F7200       DC8 "error"
   \   0000000A   0000               DC8 0, 0
   \   0000000C   726573706F6E       DC8 "response"
   \              736500      
   \   00000015   000000             DC8 0, 0, 0
   \   00000018   636F756E7400       DC8 "count"
   \   0000001E   0000               DC8 0, 0
   \   00000020   6974656D7300       DC8 "items"
   \   00000026   0000               DC8 0, 0
   \   00000028   66726F6D5F69       DC8 "from_id"
   \              6400        
   \   00000030   6461746500         DC8 "date"
   \   00000035   000000             DC8 0, 0, 0
   \   00000038   636F6D6D656E       DC8 "comments"
   \              747300      
   \   00000041   000000             DC8 0, 0, 0
   \   00000044   63616E5F706F       DC8 "can_post"
   \              737400      
   \   0000004D   000000             DC8 0, 0, 0
   \   00000050   6C696B657300       DC8 "likes"
   \   00000056   0000               DC8 0, 0
   \   00000058   617474616368       DC8 "attachments"
   \              6D656E747300
   \   00000064   70686F746F00       DC8 "photo"
   \   0000006A   0000               DC8 0, 0
   \   0000006C   7479706500         DC8 "type"
   \   00000071   000000             DC8 0, 0, 0
   \   00000074   73697A657300       DC8 "sizes"
   \   0000007A   0000               DC8 0, 0
   \   0000007C   75726C00           DC8 "url"
   \   00000080   7465787400         DC8 "text"
   \   00000085   000000             DC8 0, 0, 0
   \   00000088   70726F66696C       DC8 "profiles"
   \              657300      
   \   00000091   000000             DC8 0, 0, 0
      9          #include "vk_objects.h"
     10          
     11          //https://dev.vk.com/reference/objects/attachments-wall
     12          //166454362
     13          
     14          

   \                                 In segment CODE, align 4, keep-with-next
     15          VkPost* parse_answer_wall_get(char* json_answer, unsigned* err)
     16          {
   \                     parse_answer_wall_get:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   0150A0E1           MOV      R5,R1
     17            VkPost* post=NULL;
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   00108DE5           STR      R1,[SP, #+0]
     18            *err=0;
   \   00000014   001085E5           STR      R1,[R5, #+0]
     19            int count=0;
   \   00000018   0030A0E3           MOV      R3,#+0
   \   0000001C   0C308DE5           STR      R3,[SP, #+12]
     20            const char *return_parse_end = 0;
   \   00000020   10108DE5           STR      R1,[SP, #+16]
     21            
     22            cJSON *json = cJSON_ParseWithOpts(json_answer, &return_parse_end, 0);
   \   00000024   0120A0E1           MOV      R2,R1
   \   00000028   10108DE2           ADD      R1,SP,#+16
   \   0000002C   ........           _BLF     cJSON_ParseWithOpts,??cJSON_ParseWithOpts??rA
   \   00000030   08008DE5           STR      R0,[SP, #+8]
     23            if (json == NULL)
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   B900000A           BEQ      ??parse_answer_wall_get_0
     24              return NULL;//cJSON parse error
     25            
     26            cJSON* j_response = cJSON_GetObjectItem(json, t_response);
   \   0000003C   EC429FE5           LDR      R4,??parse_answer_wall_get_1+0x4  ;; t_id
   \   00000040   0C1084E2           ADD      R1,R4,#+12
   \   00000044   ........           _BLF     cJSON_GetObjectItem,??cJSON_GetObjectItem??rA
   \   00000048   04008DE5           STR      R0,[SP, #+4]
     27            
     28            if (j_response)
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   A900000A           BEQ      ??parse_answer_wall_get_2
     29            {  
     30              cJSON* j_count = cJSON_GetObjectItem(j_response, t_count);//кол-во записей на стене
   \   00000054   181084E2           ADD      R1,R4,#+24
   \   00000058   ........           _BLF     cJSON_GetObjectItem,??cJSON_GetObjectItem??rA
     31              if (j_count)
   \   0000005C   000050E3           CMP      R0,#+0
     32                count = j_count->valueint;
   \   00000060   14009015           LDRNE    R0,[R0, #+20]
     33              
     34              cJSON *j_items = cJSON_GetObjectItem(j_response, t_items);//находим массив "items" 
   \   00000064   201084E2           ADD      R1,R4,#+32
   \   00000068   0C008D15           STRNE    R0,[SP, #+12]
   \   0000006C   04009DE5           LDR      R0,[SP, #+4]
   \   00000070   ........           _BLF     cJSON_GetObjectItem,??cJSON_GetObjectItem??rA
     35              if (j_items)
   \   00000074   000050E3           CMP      R0,#+0
   \   00000078   8F00000A           BEQ      ??parse_answer_wall_get_3
     36              {
     37                cJSON* j_item = NULL;
     38                cJSON_ArrayForEach(j_item, j_items)//массив записей
   \   0000007C   085090E5           LDR      R5,[R0, #+8]
   \   00000080   070000EA           B        ??parse_answer_wall_get_4
     39                {
     40                  VkPost* _post=malloc(sizeof(VkPost));
     41                  zeromem(_post, sizeof(VkPost));
     42                  INIT_LIST_HEAD(&_post->list);
     43                  INIT_LIST_HEAD(&_post->attachments);//голова списка вложений
     44                  INIT_LIST_HEAD(&_post->profiles);//голова списка профилей
     45                  
     46                  _post->count=count;
     47                 
     48                  cJSON* j_comments = cJSON_GetObjectItem(j_item, t_comments);//comments
     49                  if (j_comments)
     50                  {
     51                    cJSON* j_can_post = cJSON_GetObjectItem(j_comments, t_can_post);
     52                    if (j_can_post)
     53                      _post->can_post = j_can_post->valueint;
     54                    
     55                    cJSON* j_count = cJSON_GetObjectItem(j_comments, t_count);
     56                    if (j_count)          
     57                    _post->comments_count = j_count->valueint;
     58                  }
     59                  
     60                  cJSON* j = cJSON_GetObjectItem(j_item, t_date);//date
     61                  if (j)
     62                    _post->date = j->valueint;
     63          
     64                  j = cJSON_GetObjectItem(j_item, t_from_id);//from_id
     65                  if (j)
     66                    _post->from_id = j->valueint; 
     67                  
     68                  j = cJSON_GetObjectItem(j_item, t_id);//id
     69                  if (j)
     70                    _post->id = j->valueint;
     71                  
     72                  cJSON* j_likes = cJSON_GetObjectItem(j_item, t_likes);//likes
     73                  if (j_likes)
     74                  {
     75                    cJSON* j_count = cJSON_GetObjectItem(j_likes, t_count);
     76                    if (j_count)
     77                      _post->likes = j_count->valueint;
     78                  }
     79          //------------------------------------------------------------------------------     
     80                  cJSON* j_attachments = cJSON_GetObjectItem(j_item, t_attachments);//массив вложений          
     81                  cJSON* j_attach = NULL;
     82                  cJSON_ArrayForEach(j_attach, j_attachments)
     83                  {
     84                    cJSON* j_photo = cJSON_GetObjectItem(j_attach, t_photo);
     85                    if(j_photo)
     86                    {
     87                      cJSON* j_photo_sizes = cJSON_GetObjectItem(j_photo, t_sizes);//массив
     88                      if(j_photo_sizes)
     89                      {
     90                        cJSON* i=NULL;
     91                        cJSON_ArrayForEach(i, j_photo_sizes)//ищем в массиве url c "type": q
     92                        {
     93                          cJSON* j_type = cJSON_GetObjectItem(i, t_type);
     94                          if(j_type)
     95                          {
     96                            if (strcmp(j_type->valuestring, "q") == 0)
     97                            {
     98                              cJSON* j_url = cJSON_GetObjectItem(i, t_url);
     99                              if(j_url)//нашли url, добавляем в список.
    100                              {
    101                                ATTACH_WALL* attach=malloc(sizeof(ATTACH_WALL));
    102                                zeromem(attach, sizeof(ATTACH_WALL));
    103                                INIT_LIST_HEAD(&attach->list);
    104                                
    105                                attach->type=1;
    106                                attach->url=malloc(strlen(j_url->valuestring)+1);
    107                                strcpy(attach->url,j_url->valuestring);
    108                                list_add_tail(&attach->list, &_post->attachments);
    109                              }
    110                            }
    111                          }
    112                        }        
    113                      }   
    114                    }
    115                  }
    116          //------------------------------------------------------------------------------
    117                  cJSON* j_text = cJSON_GetObjectItem(j_item, t_text);
    118                  if (j_text)
    119                    _post->text=CreateWS_emoji(j_text->valuestring);
    120                  
    121                  if(post==NULL)
    122                    post=_post;
    123                  else//если запросили больше 1го поста, юзаем список 
    124                    list_add_tail(&_post->list, &post->list);
   \                     ??parse_answer_wall_get_5:
   \   00000084   00109DE5           LDR      R1,[SP, #+0]
   \   00000088   040090E5           LDR      R0,[R0, #+4]
   \   0000008C   046081E5           STR      R6,[R1, #+4]
   \   00000090   00109DE5           LDR      R1,[SP, #+0]
   \   00000094   001086E5           STR      R1,[R6, #+0]
   \   00000098   040086E5           STR      R0,[R6, #+4]
   \   0000009C   006080E5           STR      R6,[R0, #+0]
   \                     ??parse_answer_wall_get_6:
   \   000000A0   005095E5           LDR      R5,[R5, #+0]
   \                     ??parse_answer_wall_get_4:
   \   000000A4   000055E3           CMP      R5,#+0
   \   000000A8   8300000A           BEQ      ??parse_answer_wall_get_3
   \   000000AC   4400A0E3           MOV      R0,#+68
   \   000000B0   140000EF           SWI      +20
   \   000000B4   0060A0E1           MOV      R6,R0
   \   000000B8   4410A0E3           MOV      R1,#+68
   \   000000BC   1D0100EF           SWI      +285
   \   000000C0   006086E5           STR      R6,[R6, #+0]
   \   000000C4   046086E5           STR      R6,[R6, #+4]
   \   000000C8   347086E2           ADD      R7,R6,#+52
   \   000000CC   007087E5           STR      R7,[R7, #+0]
   \   000000D0   387086E5           STR      R7,[R6, #+56]
   \   000000D4   3C0086E2           ADD      R0,R6,#+60
   \   000000D8   3C0086E5           STR      R0,[R6, #+60]
   \   000000DC   400086E5           STR      R0,[R6, #+64]
   \   000000E0   0C009DE5           LDR      R0,[SP, #+12]
   \   000000E4   381084E2           ADD      R1,R4,#+56
   \   000000E8   080086E5           STR      R0,[R6, #+8]
   \   000000EC   0500A0E1           MOV      R0,R5
   \   000000F0   ........           _BLF     cJSON_GetObjectItem,??cJSON_GetObjectItem??rA
   \   000000F4   0080B0E1           MOVS     R8,R0
   \   000000F8   0A00000A           BEQ      ??parse_answer_wall_get_7
   \   000000FC   441084E2           ADD      R1,R4,#+68
   \   00000100   ........           _BLF     cJSON_GetObjectItem,??cJSON_GetObjectItem??rA
   \   00000104   000050E3           CMP      R0,#+0
   \   00000108   14009015           LDRNE    R0,[R0, #+20]
   \   0000010C   181084E2           ADD      R1,R4,#+24
   \   00000110   30008615           STRNE    R0,[R6, #+48]
   \   00000114   0800A0E1           MOV      R0,R8
   \   00000118   ........           _BLF     cJSON_GetObjectItem,??cJSON_GetObjectItem??rA
   \   0000011C   000050E3           CMP      R0,#+0
   \   00000120   14009015           LDRNE    R0,[R0, #+20]
   \   00000124   2C008615           STRNE    R0,[R6, #+44]
   \                     ??parse_answer_wall_get_7:
   \   00000128   301084E2           ADD      R1,R4,#+48
   \   0000012C   0500A0E1           MOV      R0,R5
   \   00000130   ........           _BLF     cJSON_GetObjectItem,??cJSON_GetObjectItem??rA
   \   00000134   000050E3           CMP      R0,#+0
   \   00000138   14009015           LDRNE    R0,[R0, #+20]
   \   0000013C   281084E2           ADD      R1,R4,#+40
   \   00000140   10008615           STRNE    R0,[R6, #+16]
   \   00000144   0500A0E1           MOV      R0,R5
   \   00000148   ........           _BLF     cJSON_GetObjectItem,??cJSON_GetObjectItem??rA
   \   0000014C   000050E3           CMP      R0,#+0
   \   00000150   14009015           LDRNE    R0,[R0, #+20]
   \   00000154   0410A0E1           MOV      R1,R4
   \   00000158   14008615           STRNE    R0,[R6, #+20]
   \   0000015C   0500A0E1           MOV      R0,R5
   \   00000160   ........           _BLF     cJSON_GetObjectItem,??cJSON_GetObjectItem??rA
   \   00000164   000050E3           CMP      R0,#+0
   \   00000168   14009015           LDRNE    R0,[R0, #+20]
   \   0000016C   501084E2           ADD      R1,R4,#+80
   \   00000170   0C008615           STRNE    R0,[R6, #+12]
   \   00000174   0500A0E1           MOV      R0,R5
   \   00000178   ........           _BLF     cJSON_GetObjectItem,??cJSON_GetObjectItem??rA
   \   0000017C   000050E3           CMP      R0,#+0
   \   00000180   0400000A           BEQ      ??parse_answer_wall_get_8
   \   00000184   181084E2           ADD      R1,R4,#+24
   \   00000188   ........           _BLF     cJSON_GetObjectItem,??cJSON_GetObjectItem??rA
   \   0000018C   000050E3           CMP      R0,#+0
   \   00000190   14009015           LDRNE    R0,[R0, #+20]
   \   00000194   24008615           STRNE    R0,[R6, #+36]
   \                     ??parse_answer_wall_get_8:
   \   00000198   581084E2           ADD      R1,R4,#+88
   \   0000019C   0500A0E1           MOV      R0,R5
   \   000001A0   ........           _BLF     cJSON_GetObjectItem,??cJSON_GetObjectItem??rA
   \   000001A4   000050E3           CMP      R0,#+0
   \   000001A8   3600000A           BEQ      ??parse_answer_wall_get_9
   \   000001AC   088090E5           LDR      R8,[R0, #+8]
   \   000001B0   270000EA           B        ??parse_answer_wall_get_10
   \                     ??parse_answer_wall_get_11:
   \   000001B4   6C1084E2           ADD      R1,R4,#+108
   \   000001B8   0900A0E1           MOV      R0,R9
   \   000001BC   ........           _BLF     cJSON_GetObjectItem,??cJSON_GetObjectItem??rA
   \   000001C0   000050E3           CMP      R0,#+0
   \   000001C4   1E00000A           BEQ      ??parse_answer_wall_get_12
   \   000001C8   100090E5           LDR      R0,[R0, #+16]
   \   000001CC   561F8FE2           ADR      R1,??parse_answer_wall_get_1  ;; "q"
   \   000001D0   190000EF           SWI      +25
   \   000001D4   000050E3           CMP      R0,#+0
   \   000001D8   1900001A           BNE      ??parse_answer_wall_get_12
   \   000001DC   7C1084E2           ADD      R1,R4,#+124
   \   000001E0   0900A0E1           MOV      R0,R9
   \   000001E4   ........           _BLF     cJSON_GetObjectItem,??cJSON_GetObjectItem??rA
   \   000001E8   00B0B0E1           MOVS     R11,R0
   \   000001EC   1400000A           BEQ      ??parse_answer_wall_get_12
   \   000001F0   1800A0E3           MOV      R0,#+24
   \   000001F4   140000EF           SWI      +20
   \   000001F8   00A0A0E1           MOV      R10,R0
   \   000001FC   1810A0E3           MOV      R1,#+24
   \   00000200   1D0100EF           SWI      +285
   \   00000204   00A08AE5           STR      R10,[R10, #+0]
   \   00000208   04A08AE5           STR      R10,[R10, #+4]
   \   0000020C   0100A0E3           MOV      R0,#+1
   \   00000210   08008AE5           STR      R0,[R10, #+8]
   \   00000214   10009BE5           LDR      R0,[R11, #+16]
   \   00000218   1B0000EF           SWI      +27
   \   0000021C   010080E2           ADD      R0,R0,#+1
   \   00000220   140000EF           SWI      +20
   \   00000224   0C008AE5           STR      R0,[R10, #+12]
   \   00000228   10109BE5           LDR      R1,[R11, #+16]
   \   0000022C   1A0000EF           SWI      +26
   \   00000230   040097E5           LDR      R0,[R7, #+4]
   \   00000234   04A087E5           STR      R10,[R7, #+4]
   \   00000238   00708AE5           STR      R7,[R10, #+0]
   \   0000023C   04008AE5           STR      R0,[R10, #+4]
   \   00000240   00A080E5           STR      R10,[R0, #+0]
   \                     ??parse_answer_wall_get_12:
   \   00000244   009099E5           LDR      R9,[R9, #+0]
   \                     ??parse_answer_wall_get_13:
   \   00000248   000059E3           CMP      R9,#+0
   \   0000024C   D8FFFF1A           BNE      ??parse_answer_wall_get_11
   \                     ??parse_answer_wall_get_14:
   \   00000250   008098E5           LDR      R8,[R8, #+0]
   \                     ??parse_answer_wall_get_10:
   \   00000254   000058E3           CMP      R8,#+0
   \   00000258   0A00000A           BEQ      ??parse_answer_wall_get_9
   \   0000025C   641084E2           ADD      R1,R4,#+100
   \   00000260   0800A0E1           MOV      R0,R8
   \   00000264   ........           _BLF     cJSON_GetObjectItem,??cJSON_GetObjectItem??rA
   \   00000268   000050E3           CMP      R0,#+0
   \   0000026C   F7FFFF0A           BEQ      ??parse_answer_wall_get_14
   \   00000270   741084E2           ADD      R1,R4,#+116
   \   00000274   ........           _BLF     cJSON_GetObjectItem,??cJSON_GetObjectItem??rA
   \   00000278   000050E3           CMP      R0,#+0
   \   0000027C   F3FFFF0A           BEQ      ??parse_answer_wall_get_14
   \   00000280   089090E5           LDR      R9,[R0, #+8]
   \   00000284   EFFFFFEA           B        ??parse_answer_wall_get_13
   \                     ??parse_answer_wall_get_9:
   \   00000288   801084E2           ADD      R1,R4,#+128
   \   0000028C   0500A0E1           MOV      R0,R5
   \   00000290   ........           _BLF     cJSON_GetObjectItem,??cJSON_GetObjectItem??rA
   \   00000294   000050E3           CMP      R0,#+0
   \   00000298   0200000A           BEQ      ??parse_answer_wall_get_15
   \   0000029C   100090E5           LDR      R0,[R0, #+16]
   \   000002A0   ........           _BLF     CreateWS_emoji,??CreateWS_emoji??rA
   \   000002A4   1C0086E5           STR      R0,[R6, #+28]
   \                     ??parse_answer_wall_get_15:
   \   000002A8   00009DE5           LDR      R0,[SP, #+0]
   \   000002AC   000050E3           CMP      R0,#+0
   \   000002B0   73FFFF1A           BNE      ??parse_answer_wall_get_5
   \   000002B4   00608DE5           STR      R6,[SP, #+0]
   \   000002B8   78FFFFEA           B        ??parse_answer_wall_get_6
    125                  
    126                }//конец цикла массива "items" 
    127              }
    128              
    129              cJSON *j_profiles = cJSON_GetObjectItem(j_response, t_profiles);//находим массив "items" 
   \                     ??parse_answer_wall_get_3:
   \   000002BC   04009DE5           LDR      R0,[SP, #+4]
   \   000002C0   881084E2           ADD      R1,R4,#+136
   \   000002C4   ........           _BLF     cJSON_GetObjectItem,??cJSON_GetObjectItem??rA
    130              if (j_profiles)
   \   000002C8   000050E3           CMP      R0,#+0
   \   000002CC   1100000A           BEQ      ??parse_answer_wall_get_16
    131              {
    132                VkUser* user=parse_obj_profiles(j_profiles);
   \   000002D0   ........           _BLF     parse_obj_profiles,??parse_obj_profiles??rA
    133                if(user)
   \   000002D4   000050E3           CMP      R0,#+0
   \   000002D8   0E00000A           BEQ      ??parse_answer_wall_get_16
    134                   list_add_tail(&user->list, &post->profiles);
   \   000002DC   00109DE5           LDR      R1,[SP, #+0]
   \   000002E0   3C1081E2           ADD      R1,R1,#+60
   \   000002E4   042091E5           LDR      R2,[R1, #+4]
   \   000002E8   040081E5           STR      R0,[R1, #+4]
   \   000002EC   001080E5           STR      R1,[R0, #+0]
   \   000002F0   042080E5           STR      R2,[R0, #+4]
   \   000002F4   000082E5           STR      R0,[R2, #+0]
   \   000002F8   060000EA           B        ??parse_answer_wall_get_16
    135              }
    136            }
    137            else
    138            {
    139              cJSON* j_err=cJSON_GetObjectItem(json, t_error);
   \                     ??parse_answer_wall_get_2:
   \   000002FC   08009DE5           LDR      R0,[SP, #+8]
   \   00000300   041084E2           ADD      R1,R4,#+4
   \   00000304   ........           _BLF     cJSON_GetObjectItem,??cJSON_GetObjectItem??rA
    140              if(j_err)
   \   00000308   000050E3           CMP      R0,#+0
   \   0000030C   0100000A           BEQ      ??parse_answer_wall_get_16
    141                *err = __parse_obj_Error(j_err);
   \   00000310   ........           _BLF     __parse_obj_Error,??__parse_obj_Error??rA
   \   00000314   000085E5           STR      R0,[R5, #+0]
    142            }
    143            
    144            if (json) cJSON_Delete(json);
   \                     ??parse_answer_wall_get_16:
   \   00000318   08009DE5           LDR      R0,[SP, #+8]
   \   0000031C   ........           _BLF     cJSON_Delete,??cJSON_Delete??rA
    145            
    146            return post;
   \   00000320   00009DE5           LDR      R0,[SP, #+0]
   \                     ??parse_answer_wall_get_0:
   \   00000324   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   00000328   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??parse_answer_wall_get_1:
   \   0000032C   71000000           DC8      "q",+0,+0
   \   00000330   ........           DC32     t_id
    147          }

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   7100               DC8 "q"

   Maximum stack usage in bytes:

     Function              CSTACK
     --------              ------
     parse_answer_wall_get    56


   Segment part sizes:

     Function/Label        Bytes
     --------------        -----
     t_id                   148
     parse_answer_wall_get  820
     ?<Constant "q">          2
      Others                 76

 
 896 bytes in segment CODE
 150 bytes in segment DATA_C
 
 820 bytes of CODE  memory (+ 76 bytes shared)
 150 bytes of CONST memory

Errors: none
Warnings: none
