##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    17/Nov/2019  22:07:01 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  E:\Users\alfinant7\Documents\Siemens\alfinant\src_ia #
#                       r\openssl\crypto\evp\e_aes.c                         #
#    Command line    =  E:\Users\alfinant7\Documents\Siemens\alfinant\src_ia #
#                       r\openssl\crypto\evp\e_aes.c -D NEWSGOLD -D DEBUG    #
#                       -lCN E:\Users\alfinant7\Documents\Siemens\alfinant\s #
#                       rc_iar\VK.ELF_C\Releas_NSG\List\ -la                 #
#                       E:\Users\alfinant7\Documents\Siemens\alfinant\src_ia #
#                       r\VK.ELF_C\Releas_NSG\List\ -o                       #
#                       E:\Users\alfinant7\Documents\Siemens\alfinant\src_ia #
#                       r\VK.ELF_C\Releas_NSG\Obj\ -z9 --cpu_mode arm        #
#                       --endian little --cpu ARM926EJ-S --stack_align 4     #
#                       --interwork --diag_suppress Pe301 -e --fpu None      #
#                       --dlib_config E:\Users\alfinant7\Documents\Siemens\I #
#                       AR\ARM\LIB\dl5tpainl8n.h -I                          #
#                       E:\Users\alfinant7\Documents\Siemens\IAR\ARM\INC\    #
#                       --inline_threshold=2                                 #
#    List file       =  E:\Users\alfinant7\Documents\Siemens\alfinant\src_ia #
#                       r\VK.ELF_C\Releas_NSG\List\e_aes.lst                 #
#    Object file     =  E:\Users\alfinant7\Documents\Siemens\alfinant\src_ia #
#                       r\VK.ELF_C\Releas_NSG\Obj\e_aes.r79                  #
#                                                                            #
#                                                                            #
##############################################################################

E:\Users\alfinant7\Documents\Siemens\alfinant\src_iar\openssl\crypto\evp\e_aes.c
      1          /* ====================================================================
      2           * Copyright (c) 2001 The OpenSSL Project.  All rights reserved.
      3           *
      4           * Redistribution and use in source and binary forms, with or without
      5           * modification, are permitted provided that the following conditions
      6           * are met:
      7           *
      8           * 1. Redistributions of source code must retain the above copyright
      9           *    notice, this list of conditions and the following disclaimer. 
     10           *
     11           * 2. Redistributions in binary form must reproduce the above copyright
     12           *    notice, this list of conditions and the following disclaimer in
     13           *    the documentation and/or other materials provided with the
     14           *    distribution.
     15           *
     16           * 3. All advertising materials mentioning features or use of this
     17           *    software must display the following acknowledgment:
     18           *    "This product includes software developed by the OpenSSL Project
     19           *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
     20           *
     21           * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
     22           *    endorse or promote products derived from this software without
     23           *    prior written permission. For written permission, please contact
     24           *    openssl-core@openssl.org.
     25           *
     26           * 5. Products derived from this software may not be called "OpenSSL"
     27           *    nor may "OpenSSL" appear in their names without prior written
     28           *    permission of the OpenSSL Project.
     29           *
     30           * 6. Redistributions of any form whatsoever must retain the following
     31           *    acknowledgment:
     32           *    "This product includes software developed by the OpenSSL Project
     33           *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
     34           *
     35           * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
     36           * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     37           * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
     38           * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
     39           * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     40           * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
     41           * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
     42           * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     43           * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
     44           * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
     45           * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
     46           * OF THE POSSIBILITY OF SUCH DAMAGE.
     47           * ====================================================================
     48           *
     49           */
     50          
     51          #ifndef OPENSSL_NO_AES
     52          #include <openssl/evp.h>
     53          #include <openssl/err.h>
     54          #include <string.h>
     55          #include <openssl/aes.h>
     56          #include "evp_locl.h"
     57          
     58          #define EVP_CIPHER_get_asn1_iv (*(int(*)(EVP_CIPHER_CTX *c, ASN1_TYPE *type))0xA0E8F143)
     59          #define EVP_CIPHER_set_asn1_iv (*(int(*)(EVP_CIPHER_CTX *c, ASN1_TYPE *type))0xA0E8F215)
     60          
     61          static int aes_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
     62                                  const unsigned char *iv, int enc);
     63          
     64          
     65          typedef struct
     66          	{
     67          	AES_KEY ks;
     68          	} EVP_AES_KEY;
     69          
     70          #define data(ctx)	EVP_C_DATA(EVP_AES_KEY,ctx)
     71          

   \                                 In segment CODE, align 4, keep-with-next
     72          IMPLEMENT_BLOCK_CIPHER(aes_128, ks, AES, EVP_AES_KEY,
     73          		       NID_aes_128, 16, 16, 16, 128,
     74          		       EVP_CIPH_FLAG_FIPS, aes_init_key, NULL, 
     75          		       EVP_CIPHER_set_asn1_iv,
     76          		       EVP_CIPHER_get_asn1_iv,
     77          		       NULL)
   \                     aes_128_cbc_cipher:
   \   00000000   ........           B        ?Subroutine37

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __code __interwork __atpcs int aes_128_cfb128_cipher(EVP_CIPHER_CTX *, unsigned char *, unsigned char const *, unsigned int)
   \                     aes_128_cfb128_cipher:
   \   00000000   ........           B        ?Subroutine38

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __code __interwork __atpcs int aes_128_ecb_cipher(EVP_CIPHER_CTX *, unsigned char *, unsigned char const *, unsigned int)
   \                     aes_128_ecb_cipher:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   048090E5           LDR      R8,[R0, #+4]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   080053E1           CMP      R3,R8
   \   0000001C   0000002A           BCS      ??aes_128_ecb_cipher_0
   \                     ??aes_128_ecb_cipher_1:
   \   00000020   ........           B        ?Subroutine39
   \                     ??aes_128_ecb_cipher_0:
   \   00000024   087043E0           SUB      R7,R3,R8
   \   00000028   0090A0E3           MOV      R9,#+0
   \                     ??aes_128_ecb_cipher_2:
   \   0000002C   090057E1           CMP      R7,R9
   \   00000030   FAFFFF3A           BCC      ??aes_128_ecb_cipher_1
   \   00000034   083094E5           LDR      R3,[R4, #+8]
   \   00000038   602094E5           LDR      R2,[R4, #+96]
   \   0000003C   051089E0           ADD      R1,R9,R5
   \   00000040   060089E0           ADD      R0,R9,R6
   \   00000044   ........           _BLF     AES_ecb_encrypt,??AES_ecb_encrypt??rA
   \   00000048   099088E0           ADD      R9,R8,R9
   \   0000004C   F6FFFFEA           B        ??aes_128_ecb_cipher_2

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __code __interwork __atpcs int aes_128_ofb_cipher(EVP_CIPHER_CTX *, unsigned char *, unsigned char const *, unsigned int)
   \                     aes_128_ofb_cipher:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   00C0A0E1           MOV      R12,R0
   \   00000008   0200A0E1           MOV      R0,R2
   \   0000000C   0320A0E1           MOV      R2,R3
   \   00000010   50308CE2           ADD      R3,R12,#+80
   \   00000014   08002DE9           PUSH     {R3}
   \   00000018   20308CE2           ADD      R3,R12,#+32
   \   0000001C   08002DE9           PUSH     {R3}
   \   00000020   60309CE5           LDR      R3,[R12, #+96]
   \   00000024   ........           _BLF     AES_ofb128_encrypt,??AES_ofb128_encrypt??rA
   \   00000028   ........           B        ??Subroutine37_0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs struct evp_cipher_st const *EVP_aes_128_cbc(void)
   \                     EVP_aes_128_cbc:
   \   00000000   00009FE5           LDR      R0,??EVP_aes_128_cbc_0  ;; aes_128_cbc
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??EVP_aes_128_cbc_0:
   \   00000008   ........           DC32     aes_128_cbc

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs struct evp_cipher_st const *EVP_aes_128_cfb128(void)
   \                     EVP_aes_128_cfb128:
   \   00000000   00009FE5           LDR      R0,??EVP_aes_128_cfb128_0  ;; aes_128_cfb128
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??EVP_aes_128_cfb128_0:
   \   00000008   ........           DC32     aes_128_cfb128

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs struct evp_cipher_st const *EVP_aes_128_ofb(void)
   \                     EVP_aes_128_ofb:
   \   00000000   00009FE5           LDR      R0,??EVP_aes_128_ofb_0  ;; aes_128_ofb
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??EVP_aes_128_ofb_0:
   \   00000008   ........           DC32     aes_128_ofb

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs struct evp_cipher_st const *EVP_aes_128_ecb(void)
   \                     EVP_aes_128_ecb:
   \   00000000   00009FE5           LDR      R0,??EVP_aes_128_ecb_0  ;; aes_128_ecb
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??EVP_aes_128_ecb_0:
   \   00000008   ........           DC32     aes_128_ecb

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine37:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   00C0A0E1           MOV      R12,R0
   \   00000008   0200A0E1           MOV      R0,R2
   \   0000000C   0320A0E1           MOV      R2,R3
   \   00000010   08309CE5           LDR      R3,[R12, #+8]
   \   00000014   08002DE9           PUSH     {R3}
   \   00000018   20308CE2           ADD      R3,R12,#+32
   \   0000001C   08002DE9           PUSH     {R3}
   \   00000020   60309CE5           LDR      R3,[R12, #+96]
   \   00000024   ........           _BLF     AES_cbc_encrypt,??AES_cbc_encrypt??rA
   \                     ??Subroutine37_0:
   \   00000028   0100A0E3           MOV      R0,#+1
   \   0000002C   0680BDE8           POP      {R1,R2,PC}       ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine38:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   00C0A0E1           MOV      R12,R0
   \   00000008   0200A0E1           MOV      R0,R2
   \   0000000C   0320A0E1           MOV      R2,R3
   \   00000010   08309CE5           LDR      R3,[R12, #+8]
   \   00000014   08002DE9           PUSH     {R3}
   \   00000018   50308CE2           ADD      R3,R12,#+80
   \   0000001C   08002DE9           PUSH     {R3}
   \   00000020   20308CE2           ADD      R3,R12,#+32
   \   00000024   08002DE9           PUSH     {R3}
   \   00000028   60309CE5           LDR      R3,[R12, #+96]
   \   0000002C   ........           _BLF     AES_cfb128_encrypt,??AES_cfb128_encrypt??rA
   \                     ??Subroutine38_0:
   \   00000030   0100A0E3           MOV      R0,#+1
   \   00000034   0E80BDE8           POP      {R1-R3,PC}       ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine39:
   \   00000000   0100A0E3           MOV      R0,#+1
   \   00000004   F083BDE8           POP      {R4-R9,PC}       ;; return

   \                                 In segment DATA_C, align 4, align-sorted
   \   static EVP_CIPHER const __data aes_128_cbc
   \                     aes_128_cbc:
   \   00000000   A30100001000       DC32 419, 16, 16, 16, 1026, aes_init_key, aes_128_cbc_cipher, 0H, 244
   \              000010000000
   \              100000000204
   \              0000........
   \              ........0000
   \              0000F4000000
   \   00000024   15F2E8A043F1       DC32 0A0E8F215H, 0A0E8F143H, 0H, 0H
   \              E8A000000000
   \              00000000    

   \                                 In segment DATA_C, align 4, align-sorted
   \   static EVP_CIPHER const __data aes_128_cfb128
   \                     aes_128_cfb128:
   \   00000000   A50100000100       DC32 421, 1, 16, 16, 1027, aes_init_key, aes_128_cfb128_cipher, 0H, 244
   \              000010000000
   \              100000000304
   \              0000........
   \              ........0000
   \              0000F4000000
   \   00000024   15F2E8A043F1       DC32 0A0E8F215H, 0A0E8F143H, 0H, 0H
   \              E8A000000000
   \              00000000    

   \                                 In segment DATA_C, align 4, align-sorted
   \   static EVP_CIPHER const __data aes_128_ofb
   \                     aes_128_ofb:
   \   00000000   A40100000100       DC32 420, 1, 16, 16, 1028, aes_init_key, aes_128_ofb_cipher, 0H, 244
   \              000010000000
   \              100000000404
   \              0000........
   \              ........0000
   \              0000F4000000
   \   00000024   15F2E8A043F1       DC32 0A0E8F215H, 0A0E8F143H, 0H, 0H
   \              E8A000000000
   \              00000000    

   \                                 In segment DATA_C, align 4, align-sorted
   \   static EVP_CIPHER const __data aes_128_ecb
   \                     aes_128_ecb:
   \   00000000   A20100001000       DC32 418, 16, 16, 16, 1025, aes_init_key, aes_128_ecb_cipher, 0H, 244
   \              000010000000
   \              100000000104
   \              0000........
   \              ........0000
   \              0000F4000000
   \   00000024   15F2E8A043F1       DC32 0A0E8F215H, 0A0E8F143H, 0H, 0H
   \              E8A000000000
   \              00000000    

   \                                 In segment CODE, align 4, keep-with-next
     78          IMPLEMENT_BLOCK_CIPHER(aes_192, ks, AES, EVP_AES_KEY,
     79          		       NID_aes_192, 16, 24, 16, 128,
     80          		       EVP_CIPH_FLAG_FIPS, aes_init_key, NULL, 
     81          		       EVP_CIPHER_set_asn1_iv,
     82          		       EVP_CIPHER_get_asn1_iv,
     83          		       NULL)
   \                     aes_192_cbc_cipher:
   \   00000000                      REQUIRE ?Subroutine37
   \   00000000                      ;; // Fall through to label ?Subroutine37

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __code __interwork __atpcs int aes_192_cfb128_cipher(EVP_CIPHER_CTX *, unsigned char *, unsigned char const *, unsigned int)
   \                     aes_192_cfb128_cipher:
   \   00000000                      REQUIRE ?Subroutine38
   \   00000000                      ;; // Fall through to label ?Subroutine38

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __code __interwork __atpcs int aes_192_ecb_cipher(EVP_CIPHER_CTX *, unsigned char *, unsigned char const *, unsigned int)
   \                     aes_192_ecb_cipher:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   048090E5           LDR      R8,[R0, #+4]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   080053E1           CMP      R3,R8
   \   0000001C   0000002A           BCS      ??aes_192_ecb_cipher_0
   \                     ??aes_192_ecb_cipher_1:
   \   00000020   ........           B        ?Subroutine39
   \                     ??aes_192_ecb_cipher_0:
   \   00000024   087043E0           SUB      R7,R3,R8
   \   00000028   0090A0E3           MOV      R9,#+0
   \                     ??aes_192_ecb_cipher_2:
   \   0000002C   090057E1           CMP      R7,R9
   \   00000030   FAFFFF3A           BCC      ??aes_192_ecb_cipher_1
   \   00000034   083094E5           LDR      R3,[R4, #+8]
   \   00000038   602094E5           LDR      R2,[R4, #+96]
   \   0000003C   051089E0           ADD      R1,R9,R5
   \   00000040   060089E0           ADD      R0,R9,R6
   \   00000044   ........           _BLF     AES_ecb_encrypt,??AES_ecb_encrypt??rA
   \   00000048   099088E0           ADD      R9,R8,R9
   \   0000004C   F6FFFFEA           B        ??aes_192_ecb_cipher_2

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __code __interwork __atpcs int aes_192_ofb_cipher(EVP_CIPHER_CTX *, unsigned char *, unsigned char const *, unsigned int)
   \                     aes_192_ofb_cipher:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   00C0A0E1           MOV      R12,R0
   \   00000008   0200A0E1           MOV      R0,R2
   \   0000000C   0320A0E1           MOV      R2,R3
   \   00000010   50308CE2           ADD      R3,R12,#+80
   \   00000014   08002DE9           PUSH     {R3}
   \   00000018   20308CE2           ADD      R3,R12,#+32
   \   0000001C   08002DE9           PUSH     {R3}
   \   00000020   60309CE5           LDR      R3,[R12, #+96]
   \   00000024   ........           _BLF     AES_ofb128_encrypt,??AES_ofb128_encrypt??rA
   \   00000028   ........           B        ??Subroutine37_0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs struct evp_cipher_st const *EVP_aes_192_cbc(void)
   \                     EVP_aes_192_cbc:
   \   00000000   00009FE5           LDR      R0,??EVP_aes_192_cbc_0  ;; aes_192_cbc
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??EVP_aes_192_cbc_0:
   \   00000008   ........           DC32     aes_192_cbc

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs struct evp_cipher_st const *EVP_aes_192_cfb128(void)
   \                     EVP_aes_192_cfb128:
   \   00000000   00009FE5           LDR      R0,??EVP_aes_192_cfb128_0  ;; aes_192_cfb128
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??EVP_aes_192_cfb128_0:
   \   00000008   ........           DC32     aes_192_cfb128

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs struct evp_cipher_st const *EVP_aes_192_ofb(void)
   \                     EVP_aes_192_ofb:
   \   00000000   00009FE5           LDR      R0,??EVP_aes_192_ofb_0  ;; aes_192_ofb
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??EVP_aes_192_ofb_0:
   \   00000008   ........           DC32     aes_192_ofb

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs struct evp_cipher_st const *EVP_aes_192_ecb(void)
   \                     EVP_aes_192_ecb:
   \   00000000   00009FE5           LDR      R0,??EVP_aes_192_ecb_0  ;; aes_192_ecb
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??EVP_aes_192_ecb_0:
   \   00000008   ........           DC32     aes_192_ecb

   \                                 In segment DATA_C, align 4, align-sorted
   \   static EVP_CIPHER const __data aes_192_cbc
   \                     aes_192_cbc:
   \   00000000   A70100001000       DC32 423, 16, 24, 16, 1026, aes_init_key, aes_192_cbc_cipher, 0H, 244
   \              000018000000
   \              100000000204
   \              0000........
   \              ........0000
   \              0000F4000000
   \   00000024   15F2E8A043F1       DC32 0A0E8F215H, 0A0E8F143H, 0H, 0H
   \              E8A000000000
   \              00000000    

   \                                 In segment DATA_C, align 4, align-sorted
   \   static EVP_CIPHER const __data aes_192_cfb128
   \                     aes_192_cfb128:
   \   00000000   A90100000100       DC32 425, 1, 24, 16, 1027, aes_init_key, aes_192_cfb128_cipher, 0H, 244
   \              000018000000
   \              100000000304
   \              0000........
   \              ........0000
   \              0000F4000000
   \   00000024   15F2E8A043F1       DC32 0A0E8F215H, 0A0E8F143H, 0H, 0H
   \              E8A000000000
   \              00000000    

   \                                 In segment DATA_C, align 4, align-sorted
   \   static EVP_CIPHER const __data aes_192_ofb
   \                     aes_192_ofb:
   \   00000000   A80100000100       DC32 424, 1, 24, 16, 1028, aes_init_key, aes_192_ofb_cipher, 0H, 244
   \              000018000000
   \              100000000404
   \              0000........
   \              ........0000
   \              0000F4000000
   \   00000024   15F2E8A043F1       DC32 0A0E8F215H, 0A0E8F143H, 0H, 0H
   \              E8A000000000
   \              00000000    

   \                                 In segment DATA_C, align 4, align-sorted
   \   static EVP_CIPHER const __data aes_192_ecb
   \                     aes_192_ecb:
   \   00000000   A60100001000       DC32 422, 16, 24, 16, 1025, aes_init_key, aes_192_ecb_cipher, 0H, 244
   \              000018000000
   \              100000000104
   \              0000........
   \              ........0000
   \              0000F4000000
   \   00000024   15F2E8A043F1       DC32 0A0E8F215H, 0A0E8F143H, 0H, 0H
   \              E8A000000000
   \              00000000    

   \                                 In segment CODE, align 4, keep-with-next
     84          IMPLEMENT_BLOCK_CIPHER(aes_256, ks, AES, EVP_AES_KEY,
     85          		       NID_aes_256, 16, 32, 16, 128,
     86          		       EVP_CIPH_FLAG_FIPS, aes_init_key, NULL, 
     87          		       EVP_CIPHER_set_asn1_iv,
     88          		       EVP_CIPHER_get_asn1_iv,
     89          		       NULL)
   \                     aes_256_cbc_cipher:
   \   00000000   ........           B        ?Subroutine37

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __code __interwork __atpcs int aes_256_cfb128_cipher(EVP_CIPHER_CTX *, unsigned char *, unsigned char const *, unsigned int)
   \                     aes_256_cfb128_cipher:
   \   00000000   ........           B        ?Subroutine38

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __code __interwork __atpcs int aes_256_ecb_cipher(EVP_CIPHER_CTX *, unsigned char *, unsigned char const *, unsigned int)
   \                     aes_256_ecb_cipher:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   048090E5           LDR      R8,[R0, #+4]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   080053E1           CMP      R3,R8
   \   0000001C   0000002A           BCS      ??aes_256_ecb_cipher_0
   \                     ??aes_256_ecb_cipher_1:
   \   00000020   ........           B        ?Subroutine39
   \                     ??aes_256_ecb_cipher_0:
   \   00000024   087043E0           SUB      R7,R3,R8
   \   00000028   0090A0E3           MOV      R9,#+0
   \                     ??aes_256_ecb_cipher_2:
   \   0000002C   090057E1           CMP      R7,R9
   \   00000030   FAFFFF3A           BCC      ??aes_256_ecb_cipher_1
   \   00000034   083094E5           LDR      R3,[R4, #+8]
   \   00000038   602094E5           LDR      R2,[R4, #+96]
   \   0000003C   051089E0           ADD      R1,R9,R5
   \   00000040   060089E0           ADD      R0,R9,R6
   \   00000044   ........           _BLF     AES_ecb_encrypt,??AES_ecb_encrypt??rA
   \   00000048   099088E0           ADD      R9,R8,R9
   \   0000004C   F6FFFFEA           B        ??aes_256_ecb_cipher_2

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __code __interwork __atpcs int aes_256_ofb_cipher(EVP_CIPHER_CTX *, unsigned char *, unsigned char const *, unsigned int)
   \                     aes_256_ofb_cipher:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   00C0A0E1           MOV      R12,R0
   \   00000008   0200A0E1           MOV      R0,R2
   \   0000000C   0320A0E1           MOV      R2,R3
   \   00000010   50308CE2           ADD      R3,R12,#+80
   \   00000014   08002DE9           PUSH     {R3}
   \   00000018   20308CE2           ADD      R3,R12,#+32
   \   0000001C   08002DE9           PUSH     {R3}
   \   00000020   60309CE5           LDR      R3,[R12, #+96]
   \   00000024   ........           _BLF     AES_ofb128_encrypt,??AES_ofb128_encrypt??rA
   \   00000028   ........           B        ??Subroutine37_0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs struct evp_cipher_st const *EVP_aes_256_cbc(void)
   \                     EVP_aes_256_cbc:
   \   00000000   00009FE5           LDR      R0,??EVP_aes_256_cbc_0  ;; aes_256_cbc
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??EVP_aes_256_cbc_0:
   \   00000008   ........           DC32     aes_256_cbc

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs struct evp_cipher_st const *EVP_aes_256_cfb128(void)
   \                     EVP_aes_256_cfb128:
   \   00000000   00009FE5           LDR      R0,??EVP_aes_256_cfb128_0  ;; aes_256_cfb128
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??EVP_aes_256_cfb128_0:
   \   00000008   ........           DC32     aes_256_cfb128

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs struct evp_cipher_st const *EVP_aes_256_ofb(void)
   \                     EVP_aes_256_ofb:
   \   00000000   00009FE5           LDR      R0,??EVP_aes_256_ofb_0  ;; aes_256_ofb
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??EVP_aes_256_ofb_0:
   \   00000008   ........           DC32     aes_256_ofb

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs struct evp_cipher_st const *EVP_aes_256_ecb(void)
   \                     EVP_aes_256_ecb:
   \   00000000   00009FE5           LDR      R0,??EVP_aes_256_ecb_0  ;; aes_256_ecb
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??EVP_aes_256_ecb_0:
   \   00000008   ........           DC32     aes_256_ecb

   \                                 In segment DATA_C, align 4, align-sorted
   \   static EVP_CIPHER const __data aes_256_cbc
   \                     aes_256_cbc:
   \   00000000   AB0100001000       DC32 427, 16, 32, 16, 1026, aes_init_key, aes_256_cbc_cipher, 0H, 244
   \              000020000000
   \              100000000204
   \              0000........
   \              ........0000
   \              0000F4000000
   \   00000024   15F2E8A043F1       DC32 0A0E8F215H, 0A0E8F143H, 0H, 0H
   \              E8A000000000
   \              00000000    

   \                                 In segment DATA_C, align 4, align-sorted
   \   static EVP_CIPHER const __data aes_256_cfb128
   \                     aes_256_cfb128:
   \   00000000   AD0100000100       DC32 429, 1, 32, 16, 1027, aes_init_key, aes_256_cfb128_cipher, 0H, 244
   \              000020000000
   \              100000000304
   \              0000........
   \              ........0000
   \              0000F4000000
   \   00000024   15F2E8A043F1       DC32 0A0E8F215H, 0A0E8F143H, 0H, 0H
   \              E8A000000000
   \              00000000    

   \                                 In segment DATA_C, align 4, align-sorted
   \   static EVP_CIPHER const __data aes_256_ofb
   \                     aes_256_ofb:
   \   00000000   AC0100000100       DC32 428, 1, 32, 16, 1028, aes_init_key, aes_256_ofb_cipher, 0H, 244
   \              000020000000
   \              100000000404
   \              0000........
   \              ........0000
   \              0000F4000000
   \   00000024   15F2E8A043F1       DC32 0A0E8F215H, 0A0E8F143H, 0H, 0H
   \              E8A000000000
   \              00000000    

   \                                 In segment DATA_C, align 4, align-sorted
   \   static EVP_CIPHER const __data aes_256_ecb
   \                     aes_256_ecb:
   \   00000000   AA0100001000       DC32 426, 16, 32, 16, 1025, aes_init_key, aes_256_ecb_cipher, 0H, 244
   \              000020000000
   \              100000000104
   \              0000........
   \              ........0000
   \              0000F4000000
   \   00000024   15F2E8A043F1       DC32 0A0E8F215H, 0A0E8F143H, 0H, 0H
   \              E8A000000000
   \              00000000    
     90          
     91          #define IMPLEMENT_AES_CFBR(ksize,cbits,flags)	IMPLEMENT_CFBR(aes,AES,EVP_AES_KEY,ks,ksize,cbits,16,flags)
     92          

   \                                 In segment CODE, align 4, keep-with-next
     93          IMPLEMENT_AES_CFBR(128,1,EVP_CIPH_FLAG_FIPS)
   \                     aes_128_cfb1_cipher:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   00C0A0E1           MOV      R12,R0
   \   00000008   0200A0E1           MOV      R0,R2
   \   0000000C   0320A0E1           MOV      R2,R3
   \   00000010   08309CE5           LDR      R3,[R12, #+8]
   \   00000014   08002DE9           PUSH     {R3}
   \   00000018   50308CE2           ADD      R3,R12,#+80
   \   0000001C   08002DE9           PUSH     {R3}
   \   00000020   20308CE2           ADD      R3,R12,#+32
   \   00000024   08002DE9           PUSH     {R3}
   \   00000028   60309CE5           LDR      R3,[R12, #+96]
   \   0000002C   ........           _BLF     AES_cfb1_encrypt,??AES_cfb1_encrypt??rA
   \   00000030   ........           B        ??Subroutine38_0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs struct evp_cipher_st const *EVP_aes_128_cfb1(void)
   \                     EVP_aes_128_cfb1:
   \   00000000   00009FE5           LDR      R0,??EVP_aes_128_cfb1_0  ;; aes_128_cfb1
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??EVP_aes_128_cfb1_0:
   \   00000008   ........           DC32     aes_128_cfb1

   \                                 In segment DATA_C, align 4, align-sorted
   \   static EVP_CIPHER const __data aes_128_cfb1
   \                     aes_128_cfb1:
   \   00000000   8A0200000100       DC32 650, 1, 16, 16, 1027, aes_init_key, aes_128_cfb1_cipher, 0H, 244
   \              000010000000
   \              100000000304
   \              0000........
   \              ........0000
   \              0000F4000000
   \   00000024   15F2E8A043F1       DC32 0A0E8F215H, 0A0E8F143H, 0H, 0H
   \              E8A000000000
   \              00000000    

   \                                 In segment CODE, align 4, keep-with-next
     94          IMPLEMENT_AES_CFBR(192,1,EVP_CIPH_FLAG_FIPS)
   \                     aes_192_cfb1_cipher:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   00C0A0E1           MOV      R12,R0
   \   00000008   0200A0E1           MOV      R0,R2
   \   0000000C   0320A0E1           MOV      R2,R3
   \   00000010   08309CE5           LDR      R3,[R12, #+8]
   \   00000014   08002DE9           PUSH     {R3}
   \   00000018   50308CE2           ADD      R3,R12,#+80
   \   0000001C   08002DE9           PUSH     {R3}
   \   00000020   20308CE2           ADD      R3,R12,#+32
   \   00000024   08002DE9           PUSH     {R3}
   \   00000028   60309CE5           LDR      R3,[R12, #+96]
   \   0000002C   ........           _BLF     AES_cfb1_encrypt,??AES_cfb1_encrypt??rA
   \   00000030   ........           B        ??Subroutine38_0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs struct evp_cipher_st const *EVP_aes_192_cfb1(void)
   \                     EVP_aes_192_cfb1:
   \   00000000   00009FE5           LDR      R0,??EVP_aes_192_cfb1_0  ;; aes_192_cfb1
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??EVP_aes_192_cfb1_0:
   \   00000008   ........           DC32     aes_192_cfb1

   \                                 In segment DATA_C, align 4, align-sorted
   \   static EVP_CIPHER const __data aes_192_cfb1
   \                     aes_192_cfb1:
   \   00000000   8B0200000100       DC32 651, 1, 24, 16, 1027, aes_init_key, aes_192_cfb1_cipher, 0H, 244
   \              000018000000
   \              100000000304
   \              0000........
   \              ........0000
   \              0000F4000000
   \   00000024   15F2E8A043F1       DC32 0A0E8F215H, 0A0E8F143H, 0H, 0H
   \              E8A000000000
   \              00000000    

   \                                 In segment CODE, align 4, keep-with-next
     95          IMPLEMENT_AES_CFBR(256,1,EVP_CIPH_FLAG_FIPS)
   \                     aes_256_cfb1_cipher:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   00C0A0E1           MOV      R12,R0
   \   00000008   0200A0E1           MOV      R0,R2
   \   0000000C   0320A0E1           MOV      R2,R3
   \   00000010   08309CE5           LDR      R3,[R12, #+8]
   \   00000014   08002DE9           PUSH     {R3}
   \   00000018   50308CE2           ADD      R3,R12,#+80
   \   0000001C   08002DE9           PUSH     {R3}
   \   00000020   20308CE2           ADD      R3,R12,#+32
   \   00000024   08002DE9           PUSH     {R3}
   \   00000028   60309CE5           LDR      R3,[R12, #+96]
   \   0000002C   ........           _BLF     AES_cfb1_encrypt,??AES_cfb1_encrypt??rA
   \   00000030   ........           B        ??Subroutine38_0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs struct evp_cipher_st const *EVP_aes_256_cfb1(void)
   \                     EVP_aes_256_cfb1:
   \   00000000   00009FE5           LDR      R0,??EVP_aes_256_cfb1_0  ;; aes_256_cfb1
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??EVP_aes_256_cfb1_0:
   \   00000008   ........           DC32     aes_256_cfb1

   \                                 In segment DATA_C, align 4, align-sorted
   \   static EVP_CIPHER const __data aes_256_cfb1
   \                     aes_256_cfb1:
   \   00000000   8C0200000100       DC32 652, 1, 32, 16, 1027, aes_init_key, aes_256_cfb1_cipher, 0H, 244
   \              000020000000
   \              100000000304
   \              0000........
   \              ........0000
   \              0000F4000000
   \   00000024   15F2E8A043F1       DC32 0A0E8F215H, 0A0E8F143H, 0H, 0H
   \              E8A000000000
   \              00000000    
     96          

   \                                 In segment CODE, align 4, keep-with-next
     97          IMPLEMENT_AES_CFBR(128,8,EVP_CIPH_FLAG_FIPS)
   \                     aes_128_cfb8_cipher:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   00C0A0E1           MOV      R12,R0
   \   00000008   0200A0E1           MOV      R0,R2
   \   0000000C   0320A0E1           MOV      R2,R3
   \   00000010   08309CE5           LDR      R3,[R12, #+8]
   \   00000014   08002DE9           PUSH     {R3}
   \   00000018   50308CE2           ADD      R3,R12,#+80
   \   0000001C   08002DE9           PUSH     {R3}
   \   00000020   20308CE2           ADD      R3,R12,#+32
   \   00000024   08002DE9           PUSH     {R3}
   \   00000028   60309CE5           LDR      R3,[R12, #+96]
   \   0000002C   ........           _BLF     AES_cfb8_encrypt,??AES_cfb8_encrypt??rA
   \   00000030   ........           B        ??Subroutine38_0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs struct evp_cipher_st const *EVP_aes_128_cfb8(void)
   \                     EVP_aes_128_cfb8:
   \   00000000   00009FE5           LDR      R0,??EVP_aes_128_cfb8_0  ;; aes_128_cfb8
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??EVP_aes_128_cfb8_0:
   \   00000008   ........           DC32     aes_128_cfb8

   \                                 In segment DATA_C, align 4, align-sorted
   \   static EVP_CIPHER const __data aes_128_cfb8
   \                     aes_128_cfb8:
   \   00000000   8D0200000100       DC32 653, 1, 16, 16, 1027, aes_init_key, aes_128_cfb8_cipher, 0H, 244
   \              000010000000
   \              100000000304
   \              0000........
   \              ........0000
   \              0000F4000000
   \   00000024   15F2E8A043F1       DC32 0A0E8F215H, 0A0E8F143H, 0H, 0H
   \              E8A000000000
   \              00000000    

   \                                 In segment CODE, align 4, keep-with-next
     98          IMPLEMENT_AES_CFBR(192,8,EVP_CIPH_FLAG_FIPS)
   \                     aes_192_cfb8_cipher:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   00C0A0E1           MOV      R12,R0
   \   00000008   0200A0E1           MOV      R0,R2
   \   0000000C   0320A0E1           MOV      R2,R3
   \   00000010   08309CE5           LDR      R3,[R12, #+8]
   \   00000014   08002DE9           PUSH     {R3}
   \   00000018   50308CE2           ADD      R3,R12,#+80
   \   0000001C   08002DE9           PUSH     {R3}
   \   00000020   20308CE2           ADD      R3,R12,#+32
   \   00000024   08002DE9           PUSH     {R3}
   \   00000028   60309CE5           LDR      R3,[R12, #+96]
   \   0000002C   ........           _BLF     AES_cfb8_encrypt,??AES_cfb8_encrypt??rA
   \   00000030   ........           B        ??Subroutine38_0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs struct evp_cipher_st const *EVP_aes_192_cfb8(void)
   \                     EVP_aes_192_cfb8:
   \   00000000   00009FE5           LDR      R0,??EVP_aes_192_cfb8_0  ;; aes_192_cfb8
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??EVP_aes_192_cfb8_0:
   \   00000008   ........           DC32     aes_192_cfb8

   \                                 In segment DATA_C, align 4, align-sorted
   \   static EVP_CIPHER const __data aes_192_cfb8
   \                     aes_192_cfb8:
   \   00000000   8E0200000100       DC32 654, 1, 24, 16, 1027, aes_init_key, aes_192_cfb8_cipher, 0H, 244
   \              000018000000
   \              100000000304
   \              0000........
   \              ........0000
   \              0000F4000000
   \   00000024   15F2E8A043F1       DC32 0A0E8F215H, 0A0E8F143H, 0H, 0H
   \              E8A000000000
   \              00000000    

   \                                 In segment CODE, align 4, keep-with-next
     99          IMPLEMENT_AES_CFBR(256,8,EVP_CIPH_FLAG_FIPS)
   \                     aes_256_cfb8_cipher:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   00C0A0E1           MOV      R12,R0
   \   00000008   0200A0E1           MOV      R0,R2
   \   0000000C   0320A0E1           MOV      R2,R3
   \   00000010   08309CE5           LDR      R3,[R12, #+8]
   \   00000014   08002DE9           PUSH     {R3}
   \   00000018   50308CE2           ADD      R3,R12,#+80
   \   0000001C   08002DE9           PUSH     {R3}
   \   00000020   20308CE2           ADD      R3,R12,#+32
   \   00000024   08002DE9           PUSH     {R3}
   \   00000028   60309CE5           LDR      R3,[R12, #+96]
   \   0000002C   ........           _BLF     AES_cfb8_encrypt,??AES_cfb8_encrypt??rA
   \   00000030   ........           B        ??Subroutine38_0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs struct evp_cipher_st const *EVP_aes_256_cfb8(void)
   \                     EVP_aes_256_cfb8:
   \   00000000   00009FE5           LDR      R0,??EVP_aes_256_cfb8_0  ;; aes_256_cfb8
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??EVP_aes_256_cfb8_0:
   \   00000008   ........           DC32     aes_256_cfb8

   \                                 In segment DATA_C, align 4, align-sorted
   \   static EVP_CIPHER const __data aes_256_cfb8
   \                     aes_256_cfb8:
   \   00000000   8F0200000100       DC32 655, 1, 32, 16, 1027, aes_init_key, aes_256_cfb8_cipher, 0H, 244
   \              000020000000
   \              100000000304
   \              0000........
   \              ........0000
   \              0000F4000000
   \   00000024   15F2E8A043F1       DC32 0A0E8F215H, 0A0E8F143H, 0H, 0H
   \              E8A000000000
   \              00000000    
    100          

   \                                 In segment CODE, align 4, keep-with-next
    101          static int aes_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
    102          		   const unsigned char *iv, int enc)
    103          	{
   \                     aes_init_key:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   00C0A0E1           MOV      R12,R0
    104          	int ret;
    105          
    106          	if ((ctx->cipher->flags & EVP_CIPH_MODE) == EVP_CIPH_CFB_MODE
    107          	    || (ctx->cipher->flags & EVP_CIPH_MODE) == EVP_CIPH_OFB_MODE
    108          	    || enc) 
   \   00000008   60209CE5           LDR      R2,[R12, #+96]
   \   0000000C   0100A0E1           MOV      R0,R1
   \   00000010   58109CE5           LDR      R1,[R12, #+88]
   \   00000014   00C09CE5           LDR      R12,[R12, #+0]
   \   00000018   8111A0E1           LSL      R1,R1,#+3
   \   0000001C   10409CE5           LDR      R4,[R12, #+16]
   \   00000020   074004E2           AND      R4,R4,#0x7
   \   00000024   030054E3           CMP      R4,#+3
   \   00000028   10409C15           LDRNE    R4,[R12, #+16]
   \   0000002C   07400412           ANDNE    R4,R4,#0x7
   \   00000030   04005413           CMPNE    R4,#+4
   \   00000034   0100000A           BEQ      ??aes_init_key_0
   \   00000038   000053E3           CMP      R3,#+0
   \   0000003C   0100000A           BEQ      ??aes_init_key_1
    109          		ret=AES_set_encrypt_key(key, ctx->key_len * 8, ctx->cipher_data);
   \                     ??aes_init_key_0:
   \   00000040   ........           _BLF     AES_set_encrypt_key,??AES_set_encrypt_key??rA
   \   00000044   000000EA           B        ??aes_init_key_2
    110          	else
    111          		ret=AES_set_decrypt_key(key, ctx->key_len * 8, ctx->cipher_data);
   \                     ??aes_init_key_1:
   \   00000048   ........           _BLF     AES_set_decrypt_key,??AES_set_decrypt_key??rA
    112          
    113          	if(ret < 0)
   \                     ??aes_init_key_2:
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   0900005A           BPL      ??aes_init_key_3
    114          		{
    115          		EVPerr(EVP_F_AES_INIT_KEY,EVP_R_AES_KEY_SETUP_FAILED);
   \   00000054   28309FE5           LDR      R3,??aes_init_key_4  ;; `?<Constant "E:\\\\Users\\\\alfinant7\\\\Do...">`
   \   00000058   7300A0E3           MOV      R0,#+115
   \   0000005C   01002DE9           PUSH     {R0}
   \   00000060   8C20A0E3           MOV      R2,#+140
   \   00000064   8110A0E3           MOV      R1,#+129
   \   00000068   0600A0E3           MOV      R0,#+6
   \   0000006C   ........           _BLF     ERR_put_error,??ERR_put_error??rA
    116          		return 0;
   \   00000070   0000A0E3           MOV      R0,#+0
   \   00000074   04D08DE2           ADD      SP,SP,#+4
   \   00000078   1080BDE8           POP      {R4,PC}
    117          		}
    118          
    119          	return 1;
   \                     ??aes_init_key_3:
   \   0000007C   0100A0E3           MOV      R0,#+1
   \   00000080   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??aes_init_key_4:
   \   00000084   ........           DC32     `?<Constant "E:\\\\Users\\\\alfinant7\\\\Do...">`
    120          	}

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "E:\\\\Users\\\\alfinant7\\\\Do...">`:
   \   00000000   453A5C557365       DC8 45H, 3AH, 5CH, 55H, 73H, 65H, 72H, 73H
   \              7273        
   \   00000008   5C616C66696E       DC8 5CH, 61H, 6CH, 66H, 69H, 6EH, 61H, 6EH
   \              616E        
   \   00000010   74375C446F63       DC8 74H, 37H, 5CH, 44H, 6FH, 63H, 75H, 6DH
   \              756D        
   \   00000018   656E74735C53       DC8 65H, 6EH, 74H, 73H, 5CH, 53H, 69H, 65H
   \              6965        
   \   00000020   6D656E735C61       DC8 6DH, 65H, 6EH, 73H, 5CH, 61H, 6CH, 66H
   \              6C66        
   \   00000028   696E616E745C       DC8 69H, 6EH, 61H, 6EH, 74H, 5CH, 73H, 72H
   \              7372        
   \   00000030   635F6961725C       DC8 63H, 5FH, 69H, 61H, 72H, 5CH, 6FH, 70H
   \              6F70        
   \   00000038   656E73736C5C       DC8 65H, 6EH, 73H, 73H, 6CH, 5CH, 63H, 72H
   \              6372        
   \   00000040   7970746F5C65       DC8 79H, 70H, 74H, 6FH, 5CH, 65H, 76H, 70H
   \              7670        
   \   00000048   5C655F616573       DC8 5CH, 65H, 5FH, 61H, 65H, 73H, 2EH, 63H
   \              2E63        
   \   00000050   00                 DC8 0
   \   00000051   000000             DC8 0, 0, 0
    121          
    122          
    123          #endif

   Maximum stack usage in bytes:

     Function              CSTACK
     --------              ------
     EVP_aes_128_cbc           0
     EVP_aes_128_cfb1          0
     EVP_aes_128_cfb128        0
     EVP_aes_128_cfb8          0
     EVP_aes_128_ecb           0
     EVP_aes_128_ofb           0
     EVP_aes_192_cbc           0
     EVP_aes_192_cfb1          0
     EVP_aes_192_cfb128        0
     EVP_aes_192_cfb8          0
     EVP_aes_192_ecb           0
     EVP_aes_192_ofb           0
     EVP_aes_256_cbc           0
     EVP_aes_256_cfb1          0
     EVP_aes_256_cfb128        0
     EVP_aes_256_cfb8          0
     EVP_aes_256_ecb           0
     EVP_aes_256_ofb           0
     aes_128_cbc_cipher       12
     aes_128_cfb128_cipher    16
     aes_128_cfb1_cipher      16
     aes_128_cfb8_cipher      16
     aes_128_ecb_cipher       28
     aes_128_ofb_cipher       12
     aes_192_cbc_cipher       12
     aes_192_cfb128_cipher    16
     aes_192_cfb1_cipher      16
     aes_192_cfb8_cipher      16
     aes_192_ecb_cipher       28
     aes_192_ofb_cipher       12
     aes_256_cbc_cipher       12
     aes_256_cfb128_cipher    16
     aes_256_cfb1_cipher      16
     aes_256_cfb8_cipher      16
     aes_256_ecb_cipher       28
     aes_256_ofb_cipher       12
     aes_init_key             12


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     aes_128_cbc_cipher                4
     aes_128_cfb128_cipher             4
     aes_128_ecb_cipher               80
     aes_128_ofb_cipher               44
     EVP_aes_128_cbc                  12
     EVP_aes_128_cfb128               12
     EVP_aes_128_ofb                  12
     EVP_aes_128_ecb                  12
     ?Subroutine37                    48
     ?Subroutine38                    56
     ?Subroutine39                     8
     aes_128_cbc                      52
     aes_128_cfb128                   52
     aes_128_ofb                      52
     aes_128_ecb                      52
     aes_192_cbc_cipher                0
     aes_192_cfb128_cipher             0
     aes_192_ecb_cipher               80
     aes_192_ofb_cipher               44
     EVP_aes_192_cbc                  12
     EVP_aes_192_cfb128               12
     EVP_aes_192_ofb                  12
     EVP_aes_192_ecb                  12
     aes_192_cbc                      52
     aes_192_cfb128                   52
     aes_192_ofb                      52
     aes_192_ecb                      52
     aes_256_cbc_cipher                4
     aes_256_cfb128_cipher             4
     aes_256_ecb_cipher               80
     aes_256_ofb_cipher               44
     EVP_aes_256_cbc                  12
     EVP_aes_256_cfb128               12
     EVP_aes_256_ofb                  12
     EVP_aes_256_ecb                  12
     aes_256_cbc                      52
     aes_256_cfb128                   52
     aes_256_ofb                      52
     aes_256_ecb                      52
     aes_128_cfb1_cipher              52
     EVP_aes_128_cfb1                 12
     aes_128_cfb1                     52
     aes_192_cfb1_cipher              52
     EVP_aes_192_cfb1                 12
     aes_192_cfb1                     52
     aes_256_cfb1_cipher              52
     EVP_aes_256_cfb1                 12
     aes_256_cfb1                     52
     aes_128_cfb8_cipher              52
     EVP_aes_128_cfb8                 12
     aes_128_cfb8                     52
     aes_192_cfb8_cipher              52
     EVP_aes_192_cfb8                 12
     aes_192_cfb8                     52
     aes_256_cfb8_cipher              52
     EVP_aes_256_cfb8                 12
     aes_256_cfb8                     52
     aes_init_key                    136
     ?<Constant "E:\\Users\\alfinant7\\Do...">
                                      84
      Others                         256

 
 1 420 bytes in segment CODE
 1 020 bytes in segment DATA_C
 
 1 164 bytes of CODE  memory (+ 256 bytes shared)
 1 020 bytes of CONST memory

Errors: none
Warnings: none
