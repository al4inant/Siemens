##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    08/Jan/2015  21:39:52 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  arm                                                  #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\Users\alfin_000\Documents\Siemens\alfinant\i2c_sw #
#                       \main.c                                              #
#    Command line    =  C:\Users\alfin_000\Documents\Siemens\alfinant\i2c_sw #
#                       \main.c -D NEWSGOLD -D S75v52 -lCN                   #
#                       C:\Users\alfin_000\Documents\Siemens\alfinant\i2c_sw #
#                       \Release_NSG\List\ -o C:\Users\alfin_000\Documents\S #
#                       iemens\alfinant\i2c_sw\Release_NSG\Obj\ -s3          #
#                       --no_cse --no_unroll --no_inline --no_code_motion    #
#                       --no_tbaa --no_clustering --no_scheduling            #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 -e --fpu None --dlib_config          #
#                       C:\Users\alfin_000\Documents\Siemens\IAR\ARM\LIB\dl5 #
#                       tpannl8n.h -I C:\Users\alfin_000\Documents\Siemens\I #
#                       AR\ARM\INC\                                          #
#    List file       =  C:\Users\alfin_000\Documents\Siemens\alfinant\i2c_sw #
#                       \Release_NSG\List\main.lst                           #
#    Object file     =  C:\Users\alfin_000\Documents\Siemens\alfinant\i2c_sw #
#                       \Release_NSG\Obj\main.r79                            #
#                                                                            #
#                                                                            #
##############################################################################

C:\Users\alfin_000\Documents\Siemens\alfinant\i2c_sw\main.c
      1          #include "..\inc\swilib.h"
      2          #include "..\inc\strings.h"
      3          #include "..\inc\clkman.h"
      4          #include "I2C_SW.H"
      5          
      6          #define IPC_CHECK_DOUBLERUN 1
      7          #define IPC_I2C_WRITE 2
      8          

   \                                 In segment DATA_Z, align 4, align-sorted
      9          int dooble_run=0;
   \                     dooble_run:
   \   00000000                      DS8 4
     10          

   \                                 In segment CODE, align 4, keep-with-next
     11          int i2c_writeByte()
     12          {
   \                     i2c_writeByte:
   \   00000000   00402DE9           PUSH     {LR}
     13            I2cStart();
   \   00000004   ........           _BLF     I2cStart,??I2cStart??rA
     14            I2cMasterWrite(0x88);
   \   00000008   8800A0E3           MOV      R0,#+136
   \   0000000C   ........           _BLF     I2cMasterWrite,??I2cMasterWrite??rA
     15            while(COM_ON);
   \                     ??i2c_writeByte_0:
   \   00000010   98009FE5           LDR      R0,??i2c_writeByte_1  ;; COM_ON
   \   00000014   000090E5           LDR      R0,[R0, #+0]
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   FBFFFF1A           BNE      ??i2c_writeByte_0
     16          
     17            if (RecAck) //если slave не ответил
   \   00000020   8C009FE5           LDR      R0,??i2c_writeByte_1+0x4  ;; RecAck
   \   00000024   000090E5           LDR      R0,[R0, #+0]
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0500000A           BEQ      ??i2c_writeByte_2
     18            {
     19              ShowMSG(1, (int)"Адрес: иди NACK!");
   \   00000030   80109FE5           LDR      R1,??i2c_writeByte_1+0x8  ;; `?<Constant "\\300\\344\\360\\345\\361: \\350\\344\\350`
   \   00000034   0100A0E3           MOV      R0,#+1
   \   00000038   480100EF           SWI      +328
     20              I2cStop();
   \   0000003C   ........           _BLF     I2cStop,??I2cStop??rA
     21              return (1);
   \   00000040   0100A0E3           MOV      R0,#+1
   \   00000044   180000EA           B        ??i2c_writeByte_3
     22            }
     23            if(!RecAck)
   \                     ??i2c_writeByte_2:
   \   00000048   64009FE5           LDR      R0,??i2c_writeByte_1+0x4  ;; RecAck
   \   0000004C   000090E5           LDR      R0,[R0, #+0]
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   0F00001A           BNE      ??i2c_writeByte_4
     24            {
     25              I2cMasterWrite(0x88);
   \   00000058   8800A0E3           MOV      R0,#+136
   \   0000005C   ........           _BLF     I2cMasterWrite,??I2cMasterWrite??rA
     26              while (COM_ON);
   \                     ??i2c_writeByte_5:
   \   00000060   48009FE5           LDR      R0,??i2c_writeByte_1  ;; COM_ON
   \   00000064   000090E5           LDR      R0,[R0, #+0]
   \   00000068   000050E3           CMP      R0,#+0
   \   0000006C   FBFFFF1A           BNE      ??i2c_writeByte_5
     27              if (RecAck) //если slave не ответил
   \   00000070   3C009FE5           LDR      R0,??i2c_writeByte_1+0x4  ;; RecAck
   \   00000074   000090E5           LDR      R0,[R0, #+0]
   \   00000078   000050E3           CMP      R0,#+0
   \   0000007C   0500000A           BEQ      ??i2c_writeByte_4
     28              {
     29                ShowMSG(1, (int)"Данные: иди NACK!");
   \   00000080   34109FE5           LDR      R1,??i2c_writeByte_1+0xC  ;; `?<Constant "\\304\\340\\355\\355\\373\\345: \\350\\344`
   \   00000084   0100A0E3           MOV      R0,#+1
   \   00000088   480100EF           SWI      +328
     30                I2cStop();
   \   0000008C   ........           _BLF     I2cStop,??I2cStop??rA
     31                return (1);
   \   00000090   0100A0E3           MOV      R0,#+1
   \   00000094   040000EA           B        ??i2c_writeByte_3
     32              }
     33            }
     34            
     35            I2cStop();
   \                     ??i2c_writeByte_4:
   \   00000098   ........           _BLF     I2cStop,??I2cStop??rA
     36            ShowMSG(1, (int)"I2C_SW: Молодцом!");  
   \   0000009C   1C109FE5           LDR      R1,??i2c_writeByte_1+0x10  ;; `?<Constant "I2C_SW: \\314\\356\\353\\356\\344\\366\\3`
   \   000000A0   0100A0E3           MOV      R0,#+1
   \   000000A4   480100EF           SWI      +328
     37            return (0);
   \   000000A8   0000A0E3           MOV      R0,#+0
   \                     ??i2c_writeByte_3:
   \   000000AC   0080BDE8           POP      {PC}             ;; return
   \                     ??i2c_writeByte_1:
   \   000000B0   ........           DC32     COM_ON
   \   000000B4   ........           DC32     RecAck
   \   000000B8   ........           DC32     `?<Constant "\\300\\344\\360\\345\\361: \\350\\344\\350`
   \   000000BC   ........           DC32     `?<Constant "\\304\\340\\355\\355\\373\\345: \\350\\344`
   \   000000C0   ........           DC32     `?<Constant "I2C_SW: \\314\\356\\353\\356\\344\\366\\3`
     38          }
     39          

   \                                 In segment DATA_C, align 4, align-sorted
     40          const int minus11=-11;
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11

   \                                 In segment DATA_C, align 4, align-sorted
     41          const char ipc_my_name[32]="I2C_SW";
   \                     ipc_my_name:
   \   00000000   4932435F5357       DC8 "I2C_SW"
   \              00          
   \   00000007   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000017   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000      

   \                                 In segment DATA_Z, align 4, align-sorted
     42          IPC_REQ ipc;
   \                     ipc:
   \   00000000                      DS8 12
     43          
     44          extern const char LOGFILE[];
     45          
     46          typedef struct
     47          {
     48            CSM_RAM csm;
     49          }MAIN_CSM;
     50          

   \                                 In segment DATA_Z, align 4, align-sorted
     51          int maincsm_id;
   \                     maincsm_id:
   \   00000000                      DS8 4
     52          

   \                                 In segment CODE, align 4, keep-with-next
     53          void destroyApp()
     54          {
   \                     destroyApp:
   \   00000000   00402DE9           PUSH     {LR}
     55             if(!dooble_run)
   \   00000004   ........           LDR      R0,??DataTable13  ;; dooble_run
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0000001A           BNE      ??destroyApp_0
     56               I2cDeInit();
   \   00000014   ........           _BLF     I2cDeInit,??I2cDeInit??rA
     57          }
   \                     ??destroyApp_0:
   \   00000018   0080BDE8           POP      {PC}             ;; return
     58          

   \                                 In segment CODE, align 4, keep-with-next
     59          void startApp()
     60          {
   \                     startApp:
   \   00000000   00402DE9           PUSH     {LR}
     61            I2cInit();
   \   00000004   ........           _BLF     I2cInit,??I2cInit??rA
     62          }
   \   00000008   0080BDE8           POP      {PC}             ;; return
     63          

   \                                 In segment CODE, align 4, keep-with-next
     64          void CheckDoubleRun(void)
     65          {
   \                     CheckDoubleRun:
   \   00000000   00402DE9           PUSH     {LR}
     66            if ((int)ipc.data !=-1)
   \   00000004   ........           LDR      R0,??DataTable18  ;; ipc + 8
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   010070E3           CMN      R0,#+1
   \   00000010   1800000A           BEQ      ??CheckDoubleRun_0
     67            {
     68              dooble_run=1;
   \   00000014   ........           LDR      R0,??DataTable13  ;; dooble_run
   \   00000018   0110A0E3           MOV      R1,#+1
   \   0000001C   001080E5           STR      R1,[R0, #+0]
     69              ipc.name_to=ipc_my_name;
   \   00000020   ........           LDR      R0,??DataTable19  ;; ipc
   \   00000024   ........           LDR      R1,??DataTable17  ;; ipc_my_name
   \   00000028   001080E5           STR      R1,[R0, #+0]
     70              ipc.name_from=ipc_my_name;
   \   0000002C   ........           LDR      R0,??DataTable16  ;; ipc + 4
   \   00000030   ........           LDR      R1,??DataTable17  ;; ipc_my_name
   \   00000034   001080E5           STR      R1,[R0, #+0]
     71              ipc.data=0;
   \   00000038   ........           LDR      R0,??DataTable18  ;; ipc + 8
   \   0000003C   0010A0E3           MOV      R1,#+0
   \   00000040   001080E5           STR      R1,[R0, #+0]
     72              GBS_SendMessage(MMI_CEPID,MSG_IPC,IPC_I2C_WRITE,&ipc); 
   \   00000044   ........           LDR      R3,??DataTable19  ;; ipc
   \   00000048   0220A0E3           MOV      R2,#+2
   \   0000004C   B010A0E3           MOV      R1,#+176
   \   00000050   DE1C81E3           ORR      R1,R1,#0xDE00
   \   00000054   0900A0E3           MOV      R0,#+9
   \   00000058   420C80E3           ORR      R0,R0,#0x4200
   \   0000005C   000100EF           SWI      +256
     73          
     74            //  ShowMSG(0x11,(int)"I2C_SW был уже запущен!");    
     75              LockSched();
   \   00000060   460100EF           SWI      +326
     76              CloseCSM(maincsm_id);
   \   00000064   ........           LDR      R0,??DataTable20  ;; maincsm_id
   \   00000068   000090E5           LDR      R0,[R0, #+0]
   \   0000006C   FC0100EF           SWI      +508
     77              UnlockSched();
   \   00000070   470100EF           SWI      +327
   \   00000074   010000EA           B        ??CheckDoubleRun_1
     78              
     79             
     80            }
     81            else
     82            {
     83              SUBPROC((void *) startApp );
   \                     ??CheckDoubleRun_0:
   \   00000078   04009FE5           LDR      R0,??CheckDoubleRun_2  ;; startApp
   \   0000007C   710100EF           SWI      +369
     84            }
     85          }
   \                     ??CheckDoubleRun_1:
   \   00000080   0080BDE8           POP      {PC}             ;; return
   \                     ??CheckDoubleRun_2:
   \   00000084   ........           DC32     startApp
     86          
     87          

   \                                 In segment CODE, align 4, keep-with-next
     88          int maincsm_onmessage(CSM_RAM* data,GBS_MSG* msg)
     89          {   
   \                     maincsm_onmessage:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0140B0E1           MOVS     R4,R1
     90          //IPC
     91              if (msg->msg==MSG_IPC)
   \   00000008   040094E5           LDR      R0,[R4, #+4]
   \   0000000C   B010A0E3           MOV      R1,#+176
   \   00000010   DE1C81E3           ORR      R1,R1,#0xDE00
   \   00000014   010050E1           CMP      R0,R1
   \   00000018   2100001A           BNE      ??maincsm_onmessage_0
     92              {
     93                if (msg->submess!=392305998)
   \   0000001C   080094E5           LDR      R0,[R4, #+8]
   \   00000020   84109FE5           LDR      R1,??maincsm_onmessage_1  ;; 0x17621d4e
   \   00000024   010050E1           CMP      R0,R1
   \   00000028   1D00000A           BEQ      ??maincsm_onmessage_0
     94                {
     95                  IPC_REQ *ipc;
     96                  if ((ipc=(IPC_REQ*)msg->data0))
   \   0000002C   0C5094E5           LDR      R5,[R4, #+12]
   \   00000030   000055E3           CMP      R5,#+0
   \   00000034   1A00000A           BEQ      ??maincsm_onmessage_0
     97                  {
     98                    if (strcmp_nocase(ipc->name_to,ipc_my_name)==0)
   \   00000038   ........           LDR      R1,??DataTable17  ;; ipc_my_name
   \   0000003C   000095E5           LDR      R0,[R5, #+0]
   \   00000040   ........           _BLF     strcmp_nocase,??strcmp_nocase??rA
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   1500001A           BNE      ??maincsm_onmessage_0
     99                    {
    100                      switch (msg->submess)
   \   0000004C   080094E5           LDR      R0,[R4, #+8]
   \   00000050   010050E3           CMP      R0,#+1
   \   00000054   0200000A           BEQ      ??maincsm_onmessage_2
   \   00000058   020050E3           CMP      R0,#+2
   \   0000005C   0B00000A           BEQ      ??maincsm_onmessage_3
   \   00000060   0F0000EA           B        ??maincsm_onmessage_0
    101                      {
    102                      case IPC_CHECK_DOUBLERUN:
    103          	    //Если приняли свое собственное сообщение, значит запускаем чекер
    104          	    if (ipc->name_from==ipc_my_name) SUBPROC((void *)CheckDoubleRun);
   \                     ??maincsm_onmessage_2:
   \   00000064   040095E5           LDR      R0,[R5, #+4]
   \   00000068   ........           LDR      R1,??DataTable17  ;; ipc_my_name
   \   0000006C   010050E1           CMP      R0,R1
   \   00000070   0200001A           BNE      ??maincsm_onmessage_4
   \   00000074   34009FE5           LDR      R0,??maincsm_onmessage_1+0x4  ;; CheckDoubleRun
   \   00000078   710100EF           SWI      +369
   \   0000007C   080000EA           B        ??maincsm_onmessage_0
    105                      else ipc->data=(void *)maincsm_id;
   \                     ??maincsm_onmessage_4:
   \   00000080   ........           LDR      R0,??DataTable20  ;; maincsm_id
   \   00000084   000090E5           LDR      R0,[R0, #+0]
   \   00000088   080085E5           STR      R0,[R5, #+8]
   \   0000008C   040000EA           B        ??maincsm_onmessage_0
    106          	    break;
    107                      case IPC_I2C_WRITE:
    108                         if(!dooble_run) i2c_writeByte();
   \                     ??maincsm_onmessage_3:
   \   00000090   ........           LDR      R0,??DataTable13  ;; dooble_run
   \   00000094   000090E5           LDR      R0,[R0, #+0]
   \   00000098   000050E3           CMP      R0,#+0
   \   0000009C   0000001A           BNE      ??maincsm_onmessage_0
   \   000000A0   ........           BL       i2c_writeByte
    109                        break;
    110                      }
    111                    }
    112                  }
    113                }
    114              }
    115            
    116            return (1);  
   \                     ??maincsm_onmessage_0:
   \   000000A4   0100A0E3           MOV      R0,#+1
   \   000000A8   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??maincsm_onmessage_1:
   \   000000AC   4E1D6217           DC32     0x17621d4e
   \   000000B0   ........           DC32     CheckDoubleRun
    117          }
    118          

   \                                 In segment CODE, align 4, keep-with-next
    119          static void maincsm_oncreate(CSM_RAM *data)
    120          {
   \                     maincsm_oncreate:
   \   00000000   00402DE9           PUSH     {LR}
    121            ipc.name_to=ipc_my_name;
   \   00000004   ........           LDR      R0,??DataTable19  ;; ipc
   \   00000008   ........           LDR      R1,??DataTable17  ;; ipc_my_name
   \   0000000C   001080E5           STR      R1,[R0, #+0]
    122            ipc.name_from=ipc_my_name;
   \   00000010   ........           LDR      R0,??DataTable16  ;; ipc + 4
   \   00000014   ........           LDR      R1,??DataTable17  ;; ipc_my_name
   \   00000018   001080E5           STR      R1,[R0, #+0]
    123            ipc.data=(void *)-1;
   \   0000001C   ........           LDR      R0,??DataTable18  ;; ipc + 8
   \   00000020   0010E0E3           MVN      R1,#+0
   \   00000024   001080E5           STR      R1,[R0, #+0]
    124            GBS_SendMessage(MMI_CEPID,MSG_IPC,IPC_CHECK_DOUBLERUN,&ipc);
   \   00000028   ........           LDR      R3,??DataTable19  ;; ipc
   \   0000002C   0120A0E3           MOV      R2,#+1
   \   00000030   B010A0E3           MOV      R1,#+176
   \   00000034   DE1C81E3           ORR      R1,R1,#0xDE00
   \   00000038   0900A0E3           MOV      R0,#+9
   \   0000003C   420C80E3           ORR      R0,R0,#0x4200
   \   00000040   000100EF           SWI      +256
    125          }
   \   00000044   0080BDE8           POP      {PC}             ;; return
    126          
    127          extern void kill_data(void *p, void (*func_p)(void *));

   \                                 In segment CODE, align 4, keep-with-next
    128          void ElfKiller(void)
    129          {
   \                     ElfKiller:
   \   00000000   00402DE9           PUSH     {LR}
    130            extern void *ELF_BEGIN;
    131            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010B0E1           MOVS     R1,R0
   \   0000000C   04009FE5           LDR      R0,??ElfKiller_0  ;; ELF_BEGIN
   \   00000010   ........           _BLF     kill_data,??kill_data??rA
    132          }
   \   00000014   0080BDE8           POP      {PC}             ;; return
   \                     ??ElfKiller_0:
   \   00000018   ........           DC32     ELF_BEGIN
    133          

   \                                 In segment CODE, align 4, keep-with-next
    134          static void maincsm_onclose(CSM_RAM *csm)
    135          {
   \                     maincsm_onclose:
   \   00000000   00402DE9           PUSH     {LR}
    136            destroyApp();
   \   00000004   ........           BL       destroyApp
    137            SUBPROC((void *)ElfKiller);
   \   00000008   04009FE5           LDR      R0,??maincsm_onclose_0  ;; ElfKiller
   \   0000000C   710100EF           SWI      +369
    138          }
   \   00000010   0080BDE8           POP      {PC}             ;; return
   \                     ??maincsm_onclose_0:
   \   00000014   ........           DC32     ElfKiller
    139          

   \                                 In segment DATA_Z, align 4, align-sorted
    140          static unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280
    141          
    142          static const struct
    143          {
    144            CSM_DESC maincsm;
    145            WSHDR maincsm_name;

   \                                 In segment DATA_C, align 4, align-sorted
    146          }MAINCSM =
   \                     MAINCSM:
   \   00000000   ............       DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
   \              ....00000000
   \              000000000000
   \              000000000000
   \              ........    
   \   0000001C   280000000100       DC32 40, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              0000........
   \              ........CCCC
   \              AA5555AA3333
   \              00000000    
   \   00000038   8B00               DC16 139
   \   0000003A   0000               DC8 0, 0
    147          {
    148            {
    149            maincsm_onmessage,
    150            maincsm_oncreate,
    151          #ifdef NEWSGOLD
    152            0,
    153            0,
    154            0,
    155            0,
    156          #endif
    157            maincsm_onclose,
    158            sizeof(MAIN_CSM),
    159            1,
    160            &minus11
    161            },
    162            {
    163              maincsm_name_body,
    164              NAMECSM_MAGIC1,
    165              NAMECSM_MAGIC2,
    166              0x0,
    167              139
    168            }
    169          };
    170          

   \                                 In segment CODE, align 4, keep-with-next
    171          static void UpdateCSMname(void)
    172          {
   \                     UpdateCSMname:
   \   00000000   00402DE9           PUSH     {LR}
    173            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"I2C_SW");
   \   00000004   08109FE5           LDR      R1,??UpdateCSMname_0  ;; `?<Constant "I2C_SW">`
   \   00000008   08009FE5           LDR      R0,??UpdateCSMname_0+0x4  ;; MAINCSM + 40
   \   0000000C   240100EF           SWI      +292
    174          }
   \   00000010   0080BDE8           POP      {PC}             ;; return
   \                     ??UpdateCSMname_0:
   \   00000014   ........           DC32     `?<Constant "I2C_SW">`
   \   00000018   ........           DC32     MAINCSM + 40
    175          

   \                                 In segment CODE, align 4, keep-with-next
    176          int main(char *exename, char *fname)
    177          {
   \                     main:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   28D04DE2           SUB      SP,SP,#+40
    178            CSM_RAM *save_cmpc;
    179            char dummy[sizeof(MAIN_CSM)];
    180            UpdateCSMname();  
   \   00000008   ........           BL       UpdateCSMname
    181            LockSched();
   \   0000000C   460100EF           SWI      +326
    182            save_cmpc=CSM_root()->csm_q->current_msg_processing_csm;
   \   00000010   068100EF           SWI      +33030
   \   00000014   080090E5           LDR      R0,[R0, #+8]
   \   00000018   044090E5           LDR      R4,[R0, #+4]
    183            CSM_root()->csm_q->current_msg_processing_csm=CSM_root()->csm_q->csm.first;
   \   0000001C   068100EF           SWI      +33030
   \   00000020   0050B0E1           MOVS     R5,R0
   \   00000024   068100EF           SWI      +33030
   \   00000028   080090E5           LDR      R0,[R0, #+8]
   \   0000002C   080090E5           LDR      R0,[R0, #+8]
   \   00000030   081095E5           LDR      R1,[R5, #+8]
   \   00000034   040081E5           STR      R0,[R1, #+4]
    184            maincsm_id=CreateCSM(&MAINCSM.maincsm,dummy,0);
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   0D10B0E1           MOVS     R1,SP
   \   00000040   24009FE5           LDR      R0,??main_0      ;; MAINCSM
   \   00000044   070100EF           SWI      +263
   \   00000048   ........           LDR      R1,??DataTable20  ;; maincsm_id
   \   0000004C   000081E5           STR      R0,[R1, #+0]
    185            CSM_root()->csm_q->current_msg_processing_csm=save_cmpc;
   \   00000050   068100EF           SWI      +33030
   \   00000054   080090E5           LDR      R0,[R0, #+8]
   \   00000058   044080E5           STR      R4,[R0, #+4]
    186            UnlockSched();
   \   0000005C   470100EF           SWI      +327
    187          
    188          
    189            
    190           // SUBPROC((void *)ElfKiller);
    191            return(1);  
   \   00000060   0100A0E3           MOV      R0,#+1
   \   00000064   28D08DE2           ADD      SP,SP,#+40       ;; stack cleaning
   \   00000068   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??main_0:
   \   0000006C   ........           DC32     MAINCSM
    192          
    193          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   ........           DC32     dooble_run

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   ........           DC32     ipc + 4

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   ........           DC32     ipc_my_name

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   ........           DC32     ipc + 8

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   ........           DC32     ipc

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   ........           DC32     maincsm_id

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\300\\344\\360\\345\\361: \\350\\344\\350`:
   \   00000000   C0E4F0E5F13A       DC8 "\300\344\360\345\361: \350\344\350 NACK!"
   \              20E8E4E8204E
   \              41434B2100  
   \   00000011   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\304\\340\\355\\355\\373\\345: \\350\\344`:
   \   00000000   C4E0EDEDFBE5       DC8 "\304\340\355\355\373\345: \350\344\350 NACK!"
   \              3A20E8E4E820
   \              4E41434B2100
   \   00000012   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "I2C_SW: \\314\\356\\353\\356\\344\\366\\3`:
   \   00000000   4932435F5357       DC8 "I2C_SW: \314\356\353\356\344\366\356\354!"
   \              3A20CCEEEBEE
   \              E4F6EEEC2100
   \   00000012   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "I2C_SW">`:
   \   00000000   4932435F5357       DC8 "I2C_SW"
   \              00          
   \   00000007   00                 DC8 0
    194          

   Maximum stack usage in bytes:

     Function          CSTACK
     --------          ------
     CheckDoubleRun        4
     ElfKiller             4
     UpdateCSMname         4
     destroyApp            4
     i2c_writeByte         4
     main                 52
     maincsm_onclose       4
     maincsm_oncreate      4
     maincsm_onmessage    12
     startApp              4


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     dooble_run                        4
     i2c_writeByte                   196
     minus11                           4
     ipc_my_name                      32
     ipc                              12
     maincsm_id                        4
     destroyApp                       28
     startApp                         12
     CheckDoubleRun                  136
     maincsm_onmessage               180
     maincsm_oncreate                 72
     ElfKiller                        28
     maincsm_onclose                  24
     maincsm_name_body               280
     MAINCSM                          60
     UpdateCSMname                    28
     main                            112
     ??DataTable13                     4
     ??DataTable16                     4
     ??DataTable17                     4
     ??DataTable18                     4
     ??DataTable19                     4
     ??DataTable20                     4
     ?<Constant "\300\344\360\345\361: \350\344\350
                                      20
     ?<Constant "\304\340\355\355\373\345: \350\344
                                      20
     ?<Constant "I2C_SW: \314\356\353\356\344\366\3
                                      20
     ?<Constant "I2C_SW">              8
      Others                          96

 
 924 bytes in segment CODE
 164 bytes in segment DATA_C
 300 bytes in segment DATA_Z
  12 bytes in segment INITTAB
 
 840 bytes of CODE  memory (+ 96 bytes shared)
 164 bytes of CONST memory
 300 bytes of DATA  memory

Errors: none
Warnings: none
