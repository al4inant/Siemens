##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    02/Feb/2023  22:11:47 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\AES_Test #
#                       \main.c                                              #
#    Command line    =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\AES_Test #
#                       \main.c -D NEWSGOLD -lCN D:\Users\alfinant\Documents #
#                       \Siemens\Dev\IAR\AES_Test\Release_NSG\List\ -la      #
#                       D:\Users\alfinant\Documents\Siemens\Dev\IAR\AES_Test #
#                       \Release_NSG\List\ -o D:\Users\alfinant\Documents\Si #
#                       emens\Dev\IAR\AES_Test\Release_NSG\Obj\ -z9          #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --fpu None            #
#                       --dlib_config D:\Users\alfinant\Documents\Siemens\IA #
#                       R\ARM\LIB\dl5tpainl8n.h -I                           #
#                       D:\Users\alfinant\Documents\Siemens\IAR\ARM\INC\     #
#                       --inline_threshold=2                                 #
#    List file       =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\AES_Test #
#                       \Release_NSG\List\main.lst                           #
#    Object file     =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\AES_Test #
#                       \Release_NSG\Obj\main.r79                            #
#                                                                            #
#                                                                            #
##############################################################################

D:\Users\alfinant\Documents\Siemens\Dev\IAR\AES_Test\main.c
      1          #include <siemens/swilib.h>
      2          #include <openssl/aes.h>
      3          
      4          #define RAND_pseudo_bytes   (*(int(*)(unsigned char *buf, int num))0xA0F42863)
      5          
      6          unsigned char secret[AES_BLOCK_SIZE] = "Allsiemens.com";
      7          
      8          void __aes_cbc_encrypt_test()
      9          {
     10            AES_KEY enc_key;
     11            AES_KEY dec_key;
     12            unsigned char in[320];
     13            unsigned char enc[320];
     14            unsigned char out[320];
     15            unsigned char init_vector[AES_BLOCK_SIZE];
     16            unsigned char iv_enc[AES_BLOCK_SIZE];
     17            unsigned char iv_dec[AES_BLOCK_SIZE];
     18            
     19            RAND_pseudo_bytes(init_vector, AES_BLOCK_SIZE);
     20            memcpy(iv_enc, init_vector, AES_BLOCK_SIZE);
     21            memcpy(iv_dec, init_vector, AES_BLOCK_SIZE);
     22            
     23            sprintf(in, "Отлично! Данные расшифрованы:)");
     24            int len = strlen(in);
     25            
     26            zeromem(enc, 320);
     27            zeromem(out, 320);
     28            AES_set_encrypt_key(secret, 128, &enc_key);
     29            AES_set_decrypt_key(secret, 128, &dec_key);
     30            
     31            AES_cbc_encrypt(in, enc, len, &enc_key, iv_enc, AES_ENCRYPT);
     32            AES_cbc_encrypt(enc, out, len, &dec_key, iv_dec, AES_DECRYPT);
     33          }
     34          
     35          int do_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out, const unsigned char *in, size_t inl)
     36          {
     37            return 0;
     38          }
     39          
     40          void __evp_test()
     41          {
     42            EVP_CIPHER *cipher = NULL;
     43            EVP_CIPHER_CTX ctx;
     44            
     45            EVP_CipherInit(&ctx, EVP_aes_256_cbc(), &key, const unsigned char *iv, int enc);
     46            int blocksize = EVP_CIPHER_CTX_block_size(&ctx);
     47            cipher_buf = (unsigned char *)malloc(BUFSIZE + blocksize);
     48            EVP_Cipher(&ctx, NULL, NULL, 5);
     49            
     50            
     51          }
     52          
     53          int main(char *exename, char *fname)
     54          {
     55            __aes_cbc_encrypt_test();
     56            
     57            return 0;
     58          }
     59          
     60          

Errors: 5
Warnings: 7
