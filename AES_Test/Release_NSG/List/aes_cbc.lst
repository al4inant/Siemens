##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    02/Feb/2023  22:11:46 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\openssl\ #
#                       crypto\aes\aes_cbc.c                                 #
#    Command line    =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\openssl\ #
#                       crypto\aes\aes_cbc.c -D NEWSGOLD -lCN                #
#                       D:\Users\alfinant\Documents\Siemens\Dev\IAR\AES_Test #
#                       \Release_NSG\List\ -la D:\Users\alfinant\Documents\S #
#                       iemens\Dev\IAR\AES_Test\Release_NSG\List\ -o         #
#                       D:\Users\alfinant\Documents\Siemens\Dev\IAR\AES_Test #
#                       \Release_NSG\Obj\ -z9 --cpu_mode arm --endian        #
#                       little --cpu ARM926EJ-S --stack_align 4 --interwork  #
#                       -e --fpu None --dlib_config                          #
#                       D:\Users\alfinant\Documents\Siemens\IAR\ARM\LIB\dl5t #
#                       painl8n.h -I D:\Users\alfinant\Documents\Siemens\IAR #
#                       \ARM\INC\ --inline_threshold=2                       #
#    List file       =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\AES_Test #
#                       \Release_NSG\List\aes_cbc.lst                        #
#    Object file     =  D:\Users\alfinant\Documents\Siemens\Dev\IAR\AES_Test #
#                       \Release_NSG\Obj\aes_cbc.r79                         #
#                                                                            #
#                                                                            #
##############################################################################

D:\Users\alfinant\Documents\Siemens\Dev\IAR\openssl\crypto\aes\aes_cbc.c
      1          /* crypto/aes/aes_cbc.c -*- mode:C; c-file-style: "eay" -*- */
      2          /* ====================================================================
      3           * Copyright (c) 1998-2002 The OpenSSL Project.  All rights reserved.
      4           *
      5           * Redistribution and use in source and binary forms, with or without
      6           * modification, are permitted provided that the following conditions
      7           * are met:
      8           *
      9           * 1. Redistributions of source code must retain the above copyright
     10           *    notice, this list of conditions and the following disclaimer. 
     11           *
     12           * 2. Redistributions in binary form must reproduce the above copyright
     13           *    notice, this list of conditions and the following disclaimer in
     14           *    the documentation and/or other materials provided with the
     15           *    distribution.
     16           *
     17           * 3. All advertising materials mentioning features or use of this
     18           *    software must display the following acknowledgment:
     19           *    "This product includes software developed by the OpenSSL Project
     20           *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
     21           *
     22           * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
     23           *    endorse or promote products derived from this software without
     24           *    prior written permission. For written permission, please contact
     25           *    openssl-core@openssl.org.
     26           *
     27           * 5. Products derived from this software may not be called "OpenSSL"
     28           *    nor may "OpenSSL" appear in their names without prior written
     29           *    permission of the OpenSSL Project.
     30           *
     31           * 6. Redistributions of any form whatsoever must retain the following
     32           *    acknowledgment:
     33           *    "This product includes software developed by the OpenSSL Project
     34           *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
     35           *
     36           * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
     37           * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     38           * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
     39           * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
     40           * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     41           * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
     42           * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
     43           * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     44           * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
     45           * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
     46           * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
     47           * OF THE POSSIBILITY OF SUCH DAMAGE.
     48           * ====================================================================
     49           *
     50           */
     51          
     52          #ifndef AES_DEBUG
     53          # ifndef NDEBUG
     54          #  define NDEBUG
     55          # endif
     56          #endif
     57          #include <assert.h>
     58          
     59          #include <siemens/swilib.h>
     60          
     61          #include <openssl/aes.h>
     62          #include "aes_locl.h"
     63          
     64          #if !defined(OPENSSL_FIPS_AES_ASM)

   \                                 In segment CODE, align 4, keep-with-next
     65          void AES_cbc_encrypt(const unsigned char *in, unsigned char *out,
     66          		     const unsigned long length, const AES_KEY *key,
     67          		     unsigned char *ivec, const int enc) {
   \                     AES_cbc_encrypt:
   \   00000000   FF432DE9           PUSH     {R0-R9,LR}
   \   00000004   2C509DE5           LDR      R5,[SP, #+44]
   \   00000008   0070A0E1           MOV      R7,R0
   \   0000000C   30009DE5           LDR      R0,[SP, #+48]
   \   00000010   0180A0E1           MOV      R8,R1
   \   00000014   0290A0E1           MOV      R9,R2
   \   00000018   0340A0E1           MOV      R4,R3
     68          
     69          	unsigned long n;
     70          	unsigned long len = length;
     71          	unsigned char tmp[AES_BLOCK_SIZE];
     72          	const unsigned char *iv = ivec;
   \   0000001C   0560A0E1           MOV      R6,R5
     73          
     74          	assert(in && out && key && ivec);
     75          	assert((AES_ENCRYPT == enc)||(AES_DECRYPT == enc));
     76          
     77          	if (AES_ENCRYPT == enc) {
   \   00000020   010050E3           CMP      R0,#+1
   \   00000024   1200000A           BEQ      ??AES_cbc_encrypt_0
     78          		while (len >= AES_BLOCK_SIZE) {
     79          			for(n=0; n < AES_BLOCK_SIZE; ++n)
     80          				out[n] = in[n] ^ iv[n];
     81          			AES_encrypt(out, out, key);
     82          			iv = out;
     83          			len -= AES_BLOCK_SIZE;
     84          			in += AES_BLOCK_SIZE;
     85          			out += AES_BLOCK_SIZE;
     86          		}
     87          		if (len) {
     88          			for(n=0; n < len; ++n)
     89          				out[n] = in[n] ^ iv[n];
     90          			for(n=len; n < AES_BLOCK_SIZE; ++n)
     91          				out[n] = iv[n];
     92          			AES_encrypt(out, out, key);
     93          			iv = out;
     94          		}
     95          		memcpy(ivec,iv,AES_BLOCK_SIZE);
     96          	} else if (in != out) {
   \   00000028   080057E1           CMP      R7,R8
   \   0000002C   6800000A           BEQ      ??AES_cbc_encrypt_1
   \   00000030   3B0000EA           B        ??AES_cbc_encrypt_2
   \                     ??AES_cbc_encrypt_3:
   \   00000034   0000A0E3           MOV      R0,#+0
   \                     ??AES_cbc_encrypt_4:
   \   00000038   0710D0E7           LDRB     R1,[R0, +R7]
   \   0000003C   0620D0E7           LDRB     R2,[R0, +R6]
   \   00000040   011022E0           EOR      R1,R2,R1
   \   00000044   0810C0E7           STRB     R1,[R0, +R8]
   \   00000048   010080E2           ADD      R0,R0,#+1
   \   0000004C   100050E3           CMP      R0,#+16
   \   00000050   F8FFFF3A           BCC      ??AES_cbc_encrypt_4
   \   00000054   0420A0E1           MOV      R2,R4
   \   00000058   0810A0E1           MOV      R1,R8
   \   0000005C   0800A0E1           MOV      R0,R8
   \   00000060   ........           _BLF     AES_encrypt,??AES_encrypt??rA
   \   00000064   0860A0E1           MOV      R6,R8
   \   00000068   109049E2           SUB      R9,R9,#+16
   \   0000006C   107087E2           ADD      R7,R7,#+16
   \   00000070   108088E2           ADD      R8,R8,#+16
   \                     ??AES_cbc_encrypt_0:
   \   00000074   100059E3           CMP      R9,#+16
   \   00000078   EDFFFF2A           BCS      ??AES_cbc_encrypt_3
   \   0000007C   000059E3           CMP      R9,#+0
   \   00000080   1300000A           BEQ      ??AES_cbc_encrypt_5
   \   00000084   0000A0E3           MOV      R0,#+0
   \   00000088   040000EA           B        ??AES_cbc_encrypt_6
   \                     ??AES_cbc_encrypt_7:
   \   0000008C   0710D0E7           LDRB     R1,[R0, +R7]
   \   00000090   0620D0E7           LDRB     R2,[R0, +R6]
   \   00000094   011022E0           EOR      R1,R2,R1
   \   00000098   0810C0E7           STRB     R1,[R0, +R8]
   \   0000009C   010080E2           ADD      R0,R0,#+1
   \                     ??AES_cbc_encrypt_6:
   \   000000A0   090050E1           CMP      R0,R9
   \   000000A4   F8FFFF3A           BCC      ??AES_cbc_encrypt_7
   \   000000A8   0900A0E1           MOV      R0,R9
   \                     ??AES_cbc_encrypt_8:
   \   000000AC   0610D0E7           LDRB     R1,[R0, +R6]
   \   000000B0   0810C0E7           STRB     R1,[R0, +R8]
   \   000000B4   010080E2           ADD      R0,R0,#+1
   \   000000B8   100050E3           CMP      R0,#+16
   \   000000BC   FAFFFF3A           BCC      ??AES_cbc_encrypt_8
   \   000000C0   0420A0E1           MOV      R2,R4
   \   000000C4   0810A0E1           MOV      R1,R8
   \   000000C8   0800A0E1           MOV      R0,R8
   \   000000CC   ........           _BLF     AES_encrypt,??AES_encrypt??rA
   \   000000D0   0860A0E1           MOV      R6,R8
   \                     ??AES_cbc_encrypt_5:
   \   000000D4   1020A0E3           MOV      R2,#+16
   \   000000D8   0610A0E1           MOV      R1,R6
   \   000000DC   5B0000EA           B        ??AES_cbc_encrypt_9
     97          		while (len >= AES_BLOCK_SIZE) {
     98          			AES_decrypt(in, out, key);
   \                     ??AES_cbc_encrypt_10:
   \   000000E0   0420A0E1           MOV      R2,R4
   \   000000E4   0810A0E1           MOV      R1,R8
   \   000000E8   0700A0E1           MOV      R0,R7
   \   000000EC   ........           _BLF     AES_decrypt,??AES_decrypt??rA
     99          			for(n=0; n < AES_BLOCK_SIZE; ++n)
   \   000000F0   0000A0E3           MOV      R0,#+0
    100          				out[n] ^= iv[n];
   \                     ??AES_cbc_encrypt_11:
   \   000000F4   0630D0E7           LDRB     R3,[R0, +R6]
   \   000000F8   081080E0           ADD      R1,R0,R8
   \   000000FC   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000100   010080E2           ADD      R0,R0,#+1
   \   00000104   100050E3           CMP      R0,#+16
   \   00000108   022023E0           EOR      R2,R3,R2
   \   0000010C   0020C1E5           STRB     R2,[R1, #+0]
   \   00000110   F7FFFF3A           BCC      ??AES_cbc_encrypt_11
    101          			iv = in;
   \   00000114   0760A0E1           MOV      R6,R7
    102          			len -= AES_BLOCK_SIZE;
   \   00000118   109049E2           SUB      R9,R9,#+16
    103          			in  += AES_BLOCK_SIZE;
   \   0000011C   107087E2           ADD      R7,R7,#+16
    104          			out += AES_BLOCK_SIZE;
   \   00000120   108088E2           ADD      R8,R8,#+16
    105          		}
   \                     ??AES_cbc_encrypt_2:
   \   00000124   100059E3           CMP      R9,#+16
   \   00000128   ECFFFF2A           BCS      ??AES_cbc_encrypt_10
    106          		if (len) {
   \   0000012C   000059E3           CMP      R9,#+0
   \   00000130   E7FFFF0A           BEQ      ??AES_cbc_encrypt_5
    107          			AES_decrypt(in,tmp,key);
   \   00000134   0420A0E1           MOV      R2,R4
   \   00000138   0D10A0E1           MOV      R1,SP
   \   0000013C   0700A0E1           MOV      R0,R7
   \   00000140   ........           _BLF     AES_decrypt,??AES_decrypt??rA
    108          			for(n=0; n < len; ++n)
   \   00000144   0000A0E3           MOV      R0,#+0
   \   00000148   050000EA           B        ??AES_cbc_encrypt_12
    109          				out[n] = tmp[n] ^ iv[n];
   \                     ??AES_cbc_encrypt_13:
   \   0000014C   0620D0E7           LDRB     R2,[R0, +R6]
   \   00000150   0D10A0E1           MOV      R1,SP
   \   00000154   0110D0E7           LDRB     R1,[R0, +R1]
   \   00000158   011022E0           EOR      R1,R2,R1
   \   0000015C   0810C0E7           STRB     R1,[R0, +R8]
   \   00000160   010080E2           ADD      R0,R0,#+1
   \                     ??AES_cbc_encrypt_12:
   \   00000164   090050E1           CMP      R0,R9
   \   00000168   F7FFFF3A           BCC      ??AES_cbc_encrypt_13
    110          			iv = in;
   \   0000016C   0760A0E1           MOV      R6,R7
   \   00000170   D7FFFFEA           B        ??AES_cbc_encrypt_5
    111          		}
    112          		memcpy(ivec,iv,AES_BLOCK_SIZE);
    113          	} else {
    114          		while (len >= AES_BLOCK_SIZE) {
    115          			memcpy(tmp, in, AES_BLOCK_SIZE);
   \                     ??AES_cbc_encrypt_14:
   \   00000174   1020A0E3           MOV      R2,#+16
   \   00000178   0710A0E1           MOV      R1,R7
   \   0000017C   0D00A0E1           MOV      R0,SP
   \   00000180   1E0100EF           SWI      +286
    116          			AES_decrypt(in, out, key);
   \   00000184   0420A0E1           MOV      R2,R4
   \   00000188   0810A0E1           MOV      R1,R8
   \   0000018C   0700A0E1           MOV      R0,R7
   \   00000190   ........           _BLF     AES_decrypt,??AES_decrypt??rA
    117          			for(n=0; n < AES_BLOCK_SIZE; ++n)
   \   00000194   0000A0E3           MOV      R0,#+0
    118          				out[n] ^= ivec[n];
   \                     ??AES_cbc_encrypt_15:
   \   00000198   0530D0E7           LDRB     R3,[R0, +R5]
   \   0000019C   081080E0           ADD      R1,R0,R8
   \   000001A0   0020D1E5           LDRB     R2,[R1, #+0]
   \   000001A4   010080E2           ADD      R0,R0,#+1
   \   000001A8   100050E3           CMP      R0,#+16
   \   000001AC   022023E0           EOR      R2,R3,R2
   \   000001B0   0020C1E5           STRB     R2,[R1, #+0]
   \   000001B4   F7FFFF3A           BCC      ??AES_cbc_encrypt_15
    119          			memcpy(ivec, tmp, AES_BLOCK_SIZE);
   \   000001B8   1020A0E3           MOV      R2,#+16
   \   000001BC   0D10A0E1           MOV      R1,SP
   \   000001C0   0500A0E1           MOV      R0,R5
   \   000001C4   1E0100EF           SWI      +286
    120          			len -= AES_BLOCK_SIZE;
   \   000001C8   109049E2           SUB      R9,R9,#+16
    121          			in += AES_BLOCK_SIZE;
   \   000001CC   107087E2           ADD      R7,R7,#+16
    122          			out += AES_BLOCK_SIZE;
   \   000001D0   108088E2           ADD      R8,R8,#+16
    123          		}
   \                     ??AES_cbc_encrypt_1:
   \   000001D4   100059E3           CMP      R9,#+16
   \   000001D8   E5FFFF2A           BCS      ??AES_cbc_encrypt_14
    124          		if (len) {
   \   000001DC   000059E3           CMP      R9,#+0
   \   000001E0   FF83BD08           POPEQ    {R0-R9,PC}
    125          			memcpy(tmp, in, AES_BLOCK_SIZE);
   \   000001E4   1020A0E3           MOV      R2,#+16
   \   000001E8   0710A0E1           MOV      R1,R7
   \   000001EC   0D00A0E1           MOV      R0,SP
   \   000001F0   1E0100EF           SWI      +286
    126          			AES_decrypt(tmp, out, key);
   \   000001F4   0420A0E1           MOV      R2,R4
   \   000001F8   0810A0E1           MOV      R1,R8
   \   000001FC   0D00A0E1           MOV      R0,SP
   \   00000200   ........           _BLF     AES_decrypt,??AES_decrypt??rA
    127          			for(n=0; n < len; ++n)
   \   00000204   0000A0E3           MOV      R0,#+0
   \   00000208   050000EA           B        ??AES_cbc_encrypt_16
    128          				out[n] ^= ivec[n];
   \                     ??AES_cbc_encrypt_17:
   \   0000020C   0530D0E7           LDRB     R3,[R0, +R5]
   \   00000210   081080E0           ADD      R1,R0,R8
   \   00000214   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000218   010080E2           ADD      R0,R0,#+1
   \   0000021C   022023E0           EOR      R2,R3,R2
   \   00000220   0020C1E5           STRB     R2,[R1, #+0]
   \                     ??AES_cbc_encrypt_16:
   \   00000224   090050E1           CMP      R0,R9
   \   00000228   F7FFFF3A           BCC      ??AES_cbc_encrypt_17
    129          			for(n=len; n < AES_BLOCK_SIZE; ++n)
   \   0000022C   0900A0E1           MOV      R0,R9
    130          				out[n] = tmp[n];
   \                     ??AES_cbc_encrypt_18:
   \   00000230   0D10A0E1           MOV      R1,SP
   \   00000234   0110D0E7           LDRB     R1,[R0, +R1]
   \   00000238   0810C0E7           STRB     R1,[R0, +R8]
   \   0000023C   010080E2           ADD      R0,R0,#+1
   \   00000240   100050E3           CMP      R0,#+16
   \   00000244   F9FFFF3A           BCC      ??AES_cbc_encrypt_18
    131          			memcpy(ivec, tmp, AES_BLOCK_SIZE);
   \   00000248   1020A0E3           MOV      R2,#+16
   \   0000024C   0D10A0E1           MOV      R1,SP
   \                     ??AES_cbc_encrypt_9:
   \   00000250   0500A0E1           MOV      R0,R5
   \   00000254   1E0100EF           SWI      +286
    132          		}
    133          	}
    134          }
   \   00000258   FF83BDE8           POP      {R0-R9,PC}       ;; return
    135          #endif

   Maximum stack usage in bytes:

     Function        CSTACK
     --------        ------
     AES_cbc_encrypt    44


   Segment part sizes:

     Function/Label  Bytes
     --------------  -----
     AES_cbc_encrypt  604
      Others           28

 
 632 bytes in segment CODE
 
 604 bytes of CODE memory (+ 28 bytes shared)

Errors: none
Warnings: 4
