//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   08/Dec/2018  21:23:05 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  E:\Users\alfinant\Documents\Siemens\alfinant\src_ia /
//                       r\Test\string_util.c                                /
//    Command line    =  E:\Users\alfinant\Documents\Siemens\alfinant\src_ia /
//                       r\Test\string_util.c -D NEWSGOLD -lCN               /
//                       E:\Users\alfinant\Documents\Siemens\alfinant\src_ia /
//                       r\Test\Release_NSG\List\ -la                        /
//                       E:\Users\alfinant\Documents\Siemens\alfinant\src_ia /
//                       r\Test\Release_NSG\List\ -o                         /
//                       E:\Users\alfinant\Documents\Siemens\alfinant\src_ia /
//                       r\Test\Release_NSG\Obj\ -z9 --cpu_mode arm          /
//                       --endian little --cpu ARM926EJ-S --stack_align 4    /
//                       --interwork -e --fpu None --dlib_config             /
//                       E:\Users\alfinant\Documents\Siemens\IAR\ARM\LIB\dl5 /
//                       tpainl8n.h -I E:\Users\alfinant\Documents\Siemens\I /
//                       AR\ARM\INC\ --inline_threshold=2                    /
//    List file       =  E:\Users\alfinant\Documents\Siemens\alfinant\src_ia /
//                       r\Test\Release_NSG\List\string_util.s79             /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME string_util

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        EXTERN ??div32_a

        PUBWEAK `?*?DATA_ID`
        MULTWEAK ??ANSI2UTF8??rT
        MULTWEAK ??Correct_UTF8_String??rT
        MULTWEAK ??CutWSStringWidth??rT
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable3 EQU 0
??DataTable4 EQU 0
??DataTable5 EQU 0
        MULTWEAK ??GetIDLETime??rT
        MULTWEAK ??GetSpecialSym??rT
        MULTWEAK ??GetSpecialSymMaskN??rT
        MULTWEAK ??Get_Param_Value??rT
        MULTWEAK ??Mask_Special_Syms??rT
        MULTWEAK ??Replace_Smiles_Syms??rT
        MULTWEAK ??Replace_Special_Syms??rT
        MULTWEAK ??ascii2ws??rT
        MULTWEAK ??char16to8??rT
        MULTWEAK ??char8to16??rT
        MULTWEAK ??convUTF8_to_ANSI??rT
        MULTWEAK ??convUTF8_to_ANSI_STR??rT
        MULTWEAK ??rA??div32_a
        MULTWEAK ??remove_bad_chars??rT
        MULTWEAK ??str2lower??rT
        MULTWEAK ??str2lower_ANSI??rT
        MULTWEAK ??stricmp??rT
        MULTWEAK ??stristr??rT
        MULTWEAK ??strnicmp??rT
        MULTWEAK ??tolower??rA
        MULTWEAK ??utf16_to_utf8??rT
        MULTWEAK ??utf82filename??rT
        MULTWEAK ??utf82win??rT
        MULTWEAK ??utf8_2unicode??rT
        MULTWEAK ??utf8_syms_n??rT
        MULTWEAK ??utf8_to_utf16??rT
        PUBWEAK ?init?tab?DATA_I
        PUBLIC ANSI2UTF8
        FUNCTION ANSI2UTF8,0203H
        LOCFRAME CSTACK, 20, STACK
        PUBLIC Correct_UTF8_String
        FUNCTION Correct_UTF8_String,0203H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC CutWSStringWidth
        FUNCTION CutWSStringWidth,0203H
        LOCFRAME CSTACK, 28, STACK
        FUNCTION DecodeUTF8,0203H
        LOCFRAME CSTACK, 8, STACK
        FUNCTION EncodeUTF8,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC GetIDLETime
        FUNCTION GetIDLETime,0203H
        LOCFRAME CSTACK, 40, STACK
        PUBLIC GetSpecialSym
        FUNCTION GetSpecialSym,0203H
        LOCFRAME CSTACK, 36, STACK
        PUBLIC GetSpecialSymMaskN
        FUNCTION GetSpecialSymMaskN,0203H
        PUBLIC Get_Param_Value
        FUNCTION Get_Param_Value,0203H
        LOCFRAME CSTACK, 20, STACK
        PUBLIC Mask_Special_Syms
        FUNCTION Mask_Special_Syms,0203H
        LOCFRAME CSTACK, 36, STACK
        PUBLIC Repl_chars
        PUBLIC Repl_chars_count
        PUBLIC Replace_Smiles_Syms
        FUNCTION Replace_Smiles_Syms,0203H
        LOCFRAME CSTACK, 32, STACK
        PUBLIC Replace_Special_Syms
        FUNCTION Replace_Special_Syms,0203H
        LOCFRAME CSTACK, 28, STACK
        FUNCTION UTF8_GetSize,0203H
        PUBLIC ascii2ws
        FUNCTION ascii2ws,0203H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC badchars
        PUBLIC char16to8
        FUNCTION char16to8,0203H
        PUBLIC char8to16
        FUNCTION char8to16,0203H
        PUBLIC convUTF8_to_ANSI
        FUNCTION convUTF8_to_ANSI,0203H
        LOCFRAME CSTACK, 20, STACK
        PUBLIC convUTF8_to_ANSI_STR
        FUNCTION convUTF8_to_ANSI_STR,0203H
        LOCFRAME CSTACK, 24, STACK
        PUBLIC remove_bad_chars
        FUNCTION remove_bad_chars,0203H
        PUBLIC str2lower
        FUNCTION str2lower,0203H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC str2lower_ANSI
        FUNCTION str2lower_ANSI,0203H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC stricmp
        FUNCTION stricmp,0203H
        LOCFRAME CSTACK, 16, STACK
        PUBLIC stristr
        FUNCTION stristr,0203H
        LOCFRAME CSTACK, 20, STACK
        PUBLIC strnicmp
        FUNCTION strnicmp,0203H
        LOCFRAME CSTACK, 24, STACK
        PUBWEAK tolower
        FUNCTION tolower,0203H
        PUBLIC unicode2char
        PUBLIC utf16_to_utf8
        FUNCTION utf16_to_utf8,0203H
        LOCFRAME CSTACK, 36, STACK
        PUBLIC utf82filename
        FUNCTION utf82filename,0203H
        LOCFRAME CSTACK, 20, STACK
        PUBLIC utf82win
        FUNCTION utf82win,0203H
        PUBLIC utf8_2unicode
        FUNCTION utf8_2unicode,0203H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC utf8_syms_n
        FUNCTION utf8_syms_n,0203H
        LOCFRAME CSTACK, 20, STACK
        PUBLIC utf8_to_utf16
        FUNCTION utf8_to_utf16,0203H
        LOCFRAME CSTACK, 16, STACK
        PUBLIC win2unicode
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
ANSI2UTF8           SYMBOL "ANSI2UTF8"
??ANSI2UTF8??rT     SYMBOL "??rT", ANSI2UTF8
Correct_UTF8_String SYMBOL "Correct_UTF8_String"
??Correct_UTF8_String??rT SYMBOL "??rT", Correct_UTF8_String
CutWSStringWidth    SYMBOL "CutWSStringWidth"
??CutWSStringWidth??rT SYMBOL "??rT", CutWSStringWidth
GetIDLETime         SYMBOL "GetIDLETime"
??GetIDLETime??rT   SYMBOL "??rT", GetIDLETime
GetSpecialSym       SYMBOL "GetSpecialSym"
??GetSpecialSym??rT SYMBOL "??rT", GetSpecialSym
GetSpecialSymMaskN  SYMBOL "GetSpecialSymMaskN"
??GetSpecialSymMaskN??rT SYMBOL "??rT", GetSpecialSymMaskN
Get_Param_Value     SYMBOL "Get_Param_Value"
??Get_Param_Value??rT SYMBOL "??rT", Get_Param_Value
Mask_Special_Syms   SYMBOL "Mask_Special_Syms"
??Mask_Special_Syms??rT SYMBOL "??rT", Mask_Special_Syms
Replace_Smiles_Syms SYMBOL "Replace_Smiles_Syms"
??Replace_Smiles_Syms??rT SYMBOL "??rT", Replace_Smiles_Syms
Replace_Special_Syms SYMBOL "Replace_Special_Syms"
??Replace_Special_Syms??rT SYMBOL "??rT", Replace_Special_Syms
ascii2ws            SYMBOL "ascii2ws"
??ascii2ws??rT      SYMBOL "??rT", ascii2ws
char16to8           SYMBOL "char16to8"
??char16to8??rT     SYMBOL "??rT", char16to8
char8to16           SYMBOL "char8to16"
??char8to16??rT     SYMBOL "??rT", char8to16
convUTF8_to_ANSI    SYMBOL "convUTF8_to_ANSI"
??convUTF8_to_ANSI??rT SYMBOL "??rT", convUTF8_to_ANSI
convUTF8_to_ANSI_STR SYMBOL "convUTF8_to_ANSI_STR"
??convUTF8_to_ANSI_STR??rT SYMBOL "??rT", convUTF8_to_ANSI_STR
remove_bad_chars    SYMBOL "remove_bad_chars"
??remove_bad_chars??rT SYMBOL "??rT", remove_bad_chars
str2lower           SYMBOL "str2lower"
??str2lower??rT     SYMBOL "??rT", str2lower
str2lower_ANSI      SYMBOL "str2lower_ANSI"
??str2lower_ANSI??rT SYMBOL "??rT", str2lower_ANSI
stricmp             SYMBOL "stricmp"
??stricmp??rT       SYMBOL "??rT", stricmp
stristr             SYMBOL "stristr"
??stristr??rT       SYMBOL "??rT", stristr
strnicmp            SYMBOL "strnicmp"
??strnicmp??rT      SYMBOL "??rT", strnicmp
tolower             SYMBOL "tolower"
??tolower??rA       SYMBOL "??rA", tolower
utf16_to_utf8       SYMBOL "utf16_to_utf8"
??utf16_to_utf8??rT SYMBOL "??rT", utf16_to_utf8
utf82filename       SYMBOL "utf82filename"
??utf82filename??rT SYMBOL "??rT", utf82filename
utf82win            SYMBOL "utf82win"
??utf82win??rT      SYMBOL "??rT", utf82win
utf8_2unicode       SYMBOL "utf8_2unicode"
??utf8_2unicode??rT SYMBOL "??rT", utf8_2unicode
utf8_syms_n         SYMBOL "utf8_syms_n"
??utf8_syms_n??rT   SYMBOL "??rT", utf8_syms_n
utf8_to_utf16       SYMBOL "utf8_to_utf16"
??utf8_to_utf16??rT SYMBOL "??rT", utf8_to_utf16


        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "Bad UTF-8 Encoding en...">`:
        DATA
        DC8 "Bad UTF-8 Encoding encountered (chr<0xC0)"
        DC8 0, 0
        DC8 "Bad UTF-8 Encoding encountered (chr2<0x80)"
        DC8 0
        DC8 "Bad UTF-8 Encoding encountered"
        DC8 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
Repl_chars_count:
        DATA
        DC32 6

        RSEG DATA_I:DATA:SORT:NOROOT(2)
Repl_chars:
        DS8 48
        REQUIRE `?<Initializer for Repl_chars>`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??utf8_2unicode??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE utf8_2unicode

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function utf8_2unicode
        ARM
utf8_2unicode:
        PUSH     {R0,R4}
        CFI R4 Frame(CFA, -4)
        CFI CFA R13+8
        MOV      R3,#+0
        STR      R3,[SP, #+0]
        LDRB     R2,[R1], #+1
        STR      R3,[R0, #+0]
        ASRS     R3,R2,#+7
        STREQ    R2,[SP, #+0]
        BEQ      ??utf8_2unicode_0
        ASR      R3,R2,#+5
        CMP      R3,#+6
        BNE      ??utf8_2unicode_1
        AND      R12,R2,#0x1F
        ASR      R12,R12,#+2
        STRB     R12,[SP, #+1]
        LSL      R2,R2,#+6
        STRB     R2,[SP, #+0]
        LDRB     R2,[R1], #+1
        LDRB     R12,[SP, #+0]
        AND      R2,R2,#0x3F
        ORR      R2,R2,R12
        B        ??utf8_2unicode_2
??utf8_2unicode_1:
        ASR      R3,R2,#+4
        CMP      R3,#+14
        BNE      ??utf8_2unicode_0
        LSL      R2,R2,#+4
        STRB     R2,[SP, #+1]
        LDRB     R2,[R1], #+1
        LDRB     R12,[SP, #+1]
        ASR      R4,R2,#+2
        AND      R4,R4,#0xF
        ORR      R4,R4,R12
        STRB     R4,[SP, #+1]
        LSL      R2,R2,#+6
        STRB     R2,[SP, #+0]
        LDRB     R2,[R1], #+1
        LDRB     R4,[SP, #+0]
        AND      R2,R2,#0x3F
        ORR      R2,R2,R4
??utf8_2unicode_2:
        STRB     R2,[SP, #+0]
??utf8_2unicode_0:
        STR      R1,[R0, #+0]
        LDR      R0,[SP, #+0]
        POP      {R1,R4}
        CFI R4 SameValue
        CFI CFA R13+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??GetSpecialSym??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE GetSpecialSym

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function GetSpecialSym
        ARM
GetSpecialSym:
        PUSH     {R0-R2,R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+36
        MOV      R5,R0
        LDRB     R0,[R5, #+0]
        MOV      R4,R1
        CMP      R0,#+38
        BEQ      ??GetSpecialSym_0
??GetSpecialSym_1:
        LDRB     R0,[R5, #+0]
        POP      {R1-R8,PC}
??GetSpecialSym_0:
        MOV      R6,#+0
        B        ??GetSpecialSym_2
??GetSpecialSym_3:
        ADD      R6,R6,#+1
        CMP      R6,#+6
        BGE      ??GetSpecialSym_1
??GetSpecialSym_2:
        LDR      R0,??DataTable2  ;; Repl_chars
        ADD      R7,R0,R6, LSL #+3
        MOV      R0,R7
        SWI      +27
        MOV      R8,R0
        MOV      R1,#+10
        MOV      R0,SP
        SWI      +285
        MOV      R2,R8
        MOV      R1,R5
        MOV      R0,SP
        SWI      +278
        MOV      R1,R7
        MOV      R0,SP
        SWI      +25
        CMP      R0,#+0
        BNE      ??GetSpecialSym_3
        LDR      R0,[R4, #+0]
        SUB      R1,R8,#+1
        ADD      R0,R1,R0
        STR      R0,[R4, #+0]
        LDRB     R0,[R7, #+7]
        POP      {R1-R8,PC}       ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??GetSpecialSymMaskN??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE GetSpecialSymMaskN

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function GetSpecialSymMaskN
        ARM
GetSpecialSymMaskN:
        MOV      R1,#+0
??GetSpecialSymMaskN_0:
        LDR      R2,??DataTable2  ;; Repl_chars
        ADD      R2,R2,R1, LSL #+3
        LDRB     R2,[R2, #+7]
        CMP      R2,R0
        MOVEQ    R0,R1
        BXEQ     LR
        ADD      R1,R1,#+1
        CMP      R1,#+6
        BLT      ??GetSpecialSymMaskN_0
        MVN      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??Replace_Special_Syms??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE Replace_Special_Syms

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function Replace_Special_Syms
        ARM
Replace_Special_Syms:
        PUSH     {R0,R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+28
        MOV      R4,R0
        SWI      +27
        MOV      R5,R0
        ADD      R7,R5,#+1
        MOV      R0,R7
        SWI      +20
        MOV      R6,R0
        MOV      R1,R7
        SWI      +285
        MOV      R7,#+0
        MOV      R1,#+0
        B        ??Replace_Special_Syms_0
??Replace_Special_Syms_1:
        MOV      R1,SP
        ADD      R0,R0,R4
        BL       GetSpecialSym
        STRB     R0,[R7, +R6]
        LDR      R1,[SP, #+0]
        MOV      R7,R8
        ADD      R1,R1,#+1
??Replace_Special_Syms_0:
        STR      R1,[SP, #+0]
        LDR      R0,[SP, #+0]
        ADD      R8,R7,#+1
        CMP      R0,R5
        BCC      ??Replace_Special_Syms_1
        MOV      R1,R8
        MOV      R0,R6
        SWI      +186
        POP      {R1,R4-R8,PC}    ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??Mask_Special_Syms??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE Mask_Special_Syms

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function Mask_Special_Syms
        ARM
Mask_Special_Syms:
        PUSH     {R4-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+36
        MOV      R4,R0
        MOV      R6,#+0
        MOV      R9,#+0
        SWI      +27
        MOV      R5,R0
        MOV      R0,#+16
        ADD      R7,R0,R5, LSL #+1
        MOV      R0,R7
        SWI      +20
        MOV      R8,R0
        B        ??Mask_Special_Syms_0
??Mask_Special_Syms_1:
        LDRB     R0,[R9, +R4]
        MOV      R6,R11
        STRB     R0,[R10, #+0]
??Mask_Special_Syms_2:
        ADD      R0,R6,#+10
        CMP      R7,R0
        BCS      ??Mask_Special_Syms_3
        LSL      R7,R7,#+1
        MOV      R1,R7
        MOV      R0,R8
        SWI      +186
        MOV      R8,R0
??Mask_Special_Syms_3:
        ADD      R9,R9,#+1
??Mask_Special_Syms_0:
        ADD      R10,R6,R8
        ADD      R11,R6,#+1
        CMP      R9,R5
        BCS      ??Mask_Special_Syms_4
        LDRB     R0,[R9, +R4]
        BL       GetSpecialSymMaskN
        CMN      R0,#+1
        BEQ      ??Mask_Special_Syms_1
        LDR      R1,??DataTable2  ;; Repl_chars
        ADD      R11,R1,R0, LSL #+3
        MOV      R1,R11
        MOV      R0,R10
        SWI      +26
        MOV      R0,R11
        SWI      +27
        ADD      R6,R0,R6
        B        ??Mask_Special_Syms_2
??Mask_Special_Syms_4:
        MOV      R0,#+0
        STRB     R0,[R10, #+0]
        MOV      R1,R11
        MOV      R0,R8
        B        ?Subroutine30
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable2:
        DC32     Repl_chars

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??Get_Param_Value??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE Get_Param_Value

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function Get_Param_Value
        ARM
Get_Param_Value:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        MOV      R5,R0
        MOV      R4,R1
        MOV      R6,R2
        SWI      +280
        MOV      R7,R0
        MOV      R0,R4
        SWI      +27
        ADD      R4,R0,R7
        LDRB     R0,[R4], #+1
        CMP      R0,#+61
        MOVNE    R0,#+0
        POPNE    {R4-R7,PC}
        MOV      R1,#+44
        MOV      R0,R7
        SWI      +24
        CMP      R0,#+0
        BNE      ??Get_Param_Value_0
        MOV      R0,R5
        SWI      +27
        ADD      R0,R0,R5
??Get_Param_Value_0:
        SUB      R5,R0,R4
        CMP      R6,#+0
        BEQ      ??Get_Param_Value_1
        SUB      R5,R5,#+2
        ADD      R0,R5,#+1
        SWI      +20
        MOV      R1,#+0
??Get_Param_Value_2:
        CMP      R1,R5
        BGE      ??Get_Param_Value_3
        ADD      R2,R1,R4
        LDRB     R2,[R2, #+1]
        STRB     R2,[R1, +R0]
        ADD      R1,R1,#+1
        B        ??Get_Param_Value_2
??Get_Param_Value_1:
        ADD      R0,R5,#+1
        SWI      +20
        MOV      R1,#+0
        B        ??Get_Param_Value_4
??Get_Param_Value_5:
        LDRB     R2,[R1, +R4]
        STRB     R2,[R1, +R0]
        ADD      R1,R1,#+1
??Get_Param_Value_4:
        CMP      R1,R5
        BLT      ??Get_Param_Value_5
??Get_Param_Value_3:
        MOV      R1,#+0
        STRB     R1,[R5, +R0]
        POP      {R4-R7,PC}       ;; return
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??convUTF8_to_ANSI??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE convUTF8_to_ANSI

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function convUTF8_to_ANSI
        ARM
convUTF8_to_ANSI:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        MOV      R4,R0
        MOV      R5,R3
        CMP      R1,#+0
        BNE      ??convUTF8_to_ANSI_0
??convUTF8_to_ANSI_1:
        MOV      R0,#+0
        POP      {R4-R7,PC}
??convUTF8_to_ANSI_0:
        MOV      R6,#+0
        MOV      R0,#+0
        B        ??convUTF8_to_ANSI_2
??convUTF8_to_ANSI_3:
        AND      R3,R3,#0x3F
        ORR      R3,R3,LR, LSL #+6
        STRB     R3,[R6, +R4]
        ADD      R0,R0,#+2
??convUTF8_to_ANSI_4:
        ADD      R0,R0,#+1
??convUTF8_to_ANSI_2:
        CMP      R0,R2
        BGE      ??convUTF8_to_ANSI_5
        LDRB     R12,[R0, +R1]
        ADD      R3,R6,#+1
        CMP      R12,#+128
        BCS      ??convUTF8_to_ANSI_6
        STRB     R12,[R6, +R4]
??convUTF8_to_ANSI_7:
        MOV      R6,R3
        B        ??convUTF8_to_ANSI_4
??convUTF8_to_ANSI_6:
        CMP      R12,#+192
        BCS      ??convUTF8_to_ANSI_8
        LDR      R1,??DataTable6  ;; `?<Constant "Bad UTF-8 Encoding en...">`
??convUTF8_to_ANSI_9:
        MOV      R0,#+1
        SWI      +328
        MOV      R0,R4
        SWI      +21
        B        ??convUTF8_to_ANSI_1
??convUTF8_to_ANSI_8:
        ADD      LR,R0,R1
        LDRB     LR,[LR, #+1]
        CMP      LR,#+128
        LDRCC    R1,??DataTable7  ;; `?<Constant "Bad UTF-8 Encoding en...">` + 44
        BCC      ??convUTF8_to_ANSI_9
        CMP      R12,#+224
        BCS      ??convUTF8_to_ANSI_10
        AND      R7,LR,#0x3F
        ADD      R7,R7,#+176
        ORR      R7,R7,R12, LSL #+6
        STRB     R7,[R6, +R4]
        ADD      R0,R0,#+1
        B        ??convUTF8_to_ANSI_7
??convUTF8_to_ANSI_10:
        CMP      R12,#+240
        BCS      ??convUTF8_to_ANSI_4
        ADD      R3,R0,R1
        LDRB     R3,[R3, #+2]
        CMP      R3,#+128
        BCS      ??convUTF8_to_ANSI_3
        LDR      R1,??DataTable8  ;; `?<Constant "Bad UTF-8 Encoding en...">` + 88
        B        ??convUTF8_to_ANSI_9
??convUTF8_to_ANSI_5:
        MOV      R1,R6
        MOV      R0,R4
        SWI      +186
        STR      R6,[R5, #+0]
        POP      {R4-R7,PC}       ;; return
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??str2lower??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE str2lower

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function str2lower
        ARM
str2lower:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
        SWI      +27
        MOV      R1,#+0
        B        ??str2lower_0
??str2lower_1:
        CMP      R2,#+224
        BCS      ??str2lower_2
        ADD      R1,R1,#+1
        LDRB     R2,[R1, +R4]
        CMP      R2,#+144
        BCC      ??str2lower_2
        CMP      R2,#+176
??str2lower_3:
        ADDCC    R2,R2,#+32
        STRBCC   R2,[R1, +R4]
??str2lower_2:
        ADD      R1,R1,#+1
??str2lower_0:
        CMP      R1,R0
        BCS      ??str2lower_4
        LDRB     R2,[R1, +R4]
        CMP      R2,#+128
        BCS      ??str2lower_1
        CMP      R2,#+65
        BCC      ??str2lower_2
        CMP      R2,#+91
        B        ??str2lower_3
??str2lower_4:
        B        ?Subroutine31
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??stricmp??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE stricmp

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function stricmp
        ARM
stricmp:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R4,R0
        MOV      R5,R1
??stricmp_0:
        LDRB     R0,[R4], #+1
        _BLF     tolower,??tolower??rA
        MOV      R6,R0
        LDRB     R0,[R5], #+1
        _BLF     tolower,??tolower??rA
        SUBS     R1,R6,R0
        BNE      ??stricmp_1
        CMP      R0,#+0
        BNE      ??stricmp_0
??stricmp_1:
        MOV      R0,R1
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        THUMB
??strnicmp??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock18
        REQUIRE strnicmp

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI Function strnicmp
        ARM
strnicmp:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        MOV      R4,R0
        MOV      R5,R1
        MOVS     R6,R2
        MOV      R7,#+0
        MOV      R8,#+0
        BEQ      ??strnicmp_0
??strnicmp_1:
        LDRB     R7,[R4], #+1
        LDRB     R8,[R5], #+1
        CMP      R7,#+0
        CMPNE    R8,#+0
        BEQ      ??strnicmp_0
        CMP      R7,R8
        BEQ      ??strnicmp_2
        MOV      R0,R7
        _BLF     tolower,??tolower??rA
        MOV      R7,R0
        MOV      R0,R8
        _BLF     tolower,??tolower??rA
        MOV      R8,R0
        CMP      R7,R8
        BNE      ??strnicmp_0
??strnicmp_2:
        SUBS     R6,R6,#+1
        BNE      ??strnicmp_1
??strnicmp_0:
        SUB      R0,R7,R8
        POP      {R4-R8,PC}       ;; return
        CFI EndBlock cfiBlock19

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        THUMB
??stristr??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock20
        REQUIRE stristr

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI Function stristr
        ARM
stristr:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        MOV      R4,R0
        MOV      R5,R1
        LDRB     R0,[R5], #+1
        _BLF     tolower,??tolower??rA
        ANDS     R6,R0,#0xFF
        BEQ      ??stristr_0
        MOV      R0,R5
        SWI      +27
        MOV      R7,R0
??stristr_1:
        LDRB     R0,[R4], #+1
        _BLF     tolower,??tolower??rA
        MOVS     R0,R0, LSL #+24
        MOVEQ    R0,#+0
        POPEQ    {R4-R7,PC}
        CMP      R6,R0, LSR #+24
        BNE      ??stristr_1
        MOV      R2,R7
        MOV      R1,R5
        MOV      R0,R4
        BL       strnicmp
        CMP      R0,#+0
        BNE      ??stristr_1
        SUB      R4,R4,#+1
??stristr_0:
        MOV      R0,R4
        POP      {R4-R7,PC}       ;; return
        CFI EndBlock cfiBlock21

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon0
        CFI NoFunction
        THUMB
??str2lower_ANSI??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock22
        REQUIRE str2lower_ANSI

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI Function str2lower_ANSI
        ARM
str2lower_ANSI:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
        SWI      +27
        MOV      R1,#+0
        B        ??str2lower_ANSI_0
??str2lower_ANSI_1:
        STRB     R2,[R1, +R4]
        ADD      R1,R1,#+1
??str2lower_ANSI_0:
        CMP      R1,R0
        BCS      ??str2lower_ANSI_2
        LDRB     R2,[R1, +R4]
        CMP      R2,#+65
        BCC      ??str2lower_ANSI_3
        CMP      R2,#+91
        BCS      ??str2lower_ANSI_3
??str2lower_ANSI_4:
        ADD      R2,R2,#+32
        B        ??str2lower_ANSI_1
??str2lower_ANSI_3:
        CMP      R2,#+192
        BCC      ??str2lower_ANSI_1
        CMP      R2,#+224
        BCS      ??str2lower_ANSI_1
        B        ??str2lower_ANSI_4
        CFI EndBlock cfiBlock23
??str2lower_ANSI_2:
        REQUIRE ?Subroutine31
        ;; // Fall through to label ?Subroutine31

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon1
        CFI NoFunction
        CFI CFA R13+8
        CFI R4 Frame(CFA, -8)
        CFI ?RET Frame(CFA, -4)
        ARM
?Subroutine31:
        MOV      R0,R4
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock24

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon0
        CFI NoFunction
        THUMB
??convUTF8_to_ANSI_STR??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock25
        REQUIRE convUTF8_to_ANSI_STR

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock26 Using cfiCommon1
        CFI Function convUTF8_to_ANSI_STR
        ARM
convUTF8_to_ANSI_STR:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        MOVS     R4,R0
        BNE      ??convUTF8_to_ANSI_STR_0
??convUTF8_to_ANSI_STR_1:
        MOV      R0,#+0
        POP      {R4-R8,PC}
??convUTF8_to_ANSI_STR_0:
        SWI      +27
        MOV      R5,R0
        MOV      R6,#+0
        ADD      R8,R5,#+1
        MOV      R0,R8
        SWI      +20
        MOV      R7,R0
        MOV      R1,R8
        SWI      +285
        MOV      R0,#+0
        B        ??convUTF8_to_ANSI_STR_2
??convUTF8_to_ANSI_STR_3:
        AND      R1,R1,#0x3F
        ORR      R1,R1,R3, LSL #+6
        STRB     R1,[R6, +R7]
        ADD      R0,R0,#+2
??convUTF8_to_ANSI_STR_4:
        ADD      R0,R0,#+1
??convUTF8_to_ANSI_STR_2:
        CMP      R0,R5
        BGE      ??convUTF8_to_ANSI_STR_5
        LDRB     R1,[R0, +R4]
        ADD      R2,R6,#+1
        CMP      R1,#+128
        BCS      ??convUTF8_to_ANSI_STR_6
        STRB     R1,[R6, +R7]
??convUTF8_to_ANSI_STR_7:
        MOV      R6,R2
        B        ??convUTF8_to_ANSI_STR_4
??convUTF8_to_ANSI_STR_6:
        CMP      R1,#+192
        BCS      ??convUTF8_to_ANSI_STR_8
        LDR      R1,??DataTable6  ;; `?<Constant "Bad UTF-8 Encoding en...">`
??convUTF8_to_ANSI_STR_9:
        MOV      R0,#+1
        SWI      +328
        MOV      R0,R7
        SWI      +21
        B        ??convUTF8_to_ANSI_STR_1
??convUTF8_to_ANSI_STR_8:
        ADD      R3,R0,R4
        LDRB     R3,[R3, #+1]
        CMP      R3,#+128
        LDRCC    R1,??DataTable7  ;; `?<Constant "Bad UTF-8 Encoding en...">` + 44
        BCC      ??convUTF8_to_ANSI_STR_9
        CMP      R1,#+224
        BCS      ??convUTF8_to_ANSI_STR_10
        CMP      R1,#+208
        BNE      ??convUTF8_to_ANSI_STR_11
        CMP      R3,#+129
        MOVEQ    R1,#+168
        BEQ      ??convUTF8_to_ANSI_STR_12
        CMP      R3,#+134
        MOVEQ    R1,#+178
        BEQ      ??convUTF8_to_ANSI_STR_12
        CMP      R3,#+135
        MOVEQ    R1,#+175
        BEQ      ??convUTF8_to_ANSI_STR_12
        CMP      R3,#+132
        BNE      ??convUTF8_to_ANSI_STR_13
        MOV      R1,#+170
        B        ??convUTF8_to_ANSI_STR_12
??convUTF8_to_ANSI_STR_11:
        CMP      R1,#+209
        BNE      ??convUTF8_to_ANSI_STR_14
        CMP      R3,#+145
        BNE      ??convUTF8_to_ANSI_STR_15
        MOV      R1,#+184
        B        ??convUTF8_to_ANSI_STR_12
??convUTF8_to_ANSI_STR_14:
        CMP      R1,#+210
        BNE      ??convUTF8_to_ANSI_STR_13
        CMP      R3,#+145
        BNE      ??convUTF8_to_ANSI_STR_16
        MOV      R1,#+227
        B        ??convUTF8_to_ANSI_STR_12
??convUTF8_to_ANSI_STR_15:
        CMP      R3,#+150
        MOVEQ    R1,#+179
        BEQ      ??convUTF8_to_ANSI_STR_12
        CMP      R3,#+151
        MOVEQ    R1,#+191
        BEQ      ??convUTF8_to_ANSI_STR_12
        CMP      R3,#+148
        BNE      ??convUTF8_to_ANSI_STR_13
        MOV      R1,#+186
        B        ??convUTF8_to_ANSI_STR_12
??convUTF8_to_ANSI_STR_16:
        CMP      R3,#+144
        MOVEQ    R1,#+195
        BEQ      ??convUTF8_to_ANSI_STR_12
??convUTF8_to_ANSI_STR_13:
        AND      R3,R3,#0x3F
        ADD      R3,R3,#+176
        ORR      R1,R3,R1, LSL #+6
??convUTF8_to_ANSI_STR_12:
        STRB     R1,[R6, +R7]
        ADD      R0,R0,#+1
        B        ??convUTF8_to_ANSI_STR_7
??convUTF8_to_ANSI_STR_10:
        CMP      R1,#+240
        BCS      ??convUTF8_to_ANSI_STR_4
        ADD      R1,R0,R4
        LDRB     R1,[R1, #+2]
        CMP      R1,#+128
        BCS      ??convUTF8_to_ANSI_STR_3
        LDR      R1,??DataTable8  ;; `?<Constant "Bad UTF-8 Encoding en...">` + 88
        B        ??convUTF8_to_ANSI_STR_9
??convUTF8_to_ANSI_STR_5:
        MOV      R0,R7
        SWI      +27
        ADD      R1,R0,#+1
        MOV      R0,R7
        SWI      +186
        POP      {R4-R8,PC}       ;; return
        CFI EndBlock cfiBlock26

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable6:
        DC32     `?<Constant "Bad UTF-8 Encoding en...">`

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable7:
        DC32     `?<Constant "Bad UTF-8 Encoding en...">` + 44

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable8:
        DC32     `?<Constant "Bad UTF-8 Encoding en...">` + 88

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock27 Using cfiCommon0
        CFI NoFunction
        THUMB
??utf8_to_utf16??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock27
        REQUIRE utf8_to_utf16

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock28 Using cfiCommon1
        CFI Function utf8_to_utf16
        ARM
utf8_to_utf16:
        PUSH     {R4-R7}
        CFI R7 Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R3,#+0
        B        ??utf8_to_utf16_0
??utf8_to_utf16_1:
        STRB     R12,[R2], #+1
??utf8_to_utf16_2:
        MOV      R3,R4
??utf8_to_utf16_0:
        SUBS     R1,R1,#+1
        BMI      ??utf8_to_utf16_3
        LDRB     R12,[R0], #+1
        ADD      R4,R3,#+1
        CMP      R12,#+128
        BCC      ??utf8_to_utf16_1
        AND      R5,R12,#0xC0
        CMP      R5,#+128
        BNE      ??utf8_to_utf16_4
??utf8_to_utf16_5:
        MVN      R0,#+0
        B        ??utf8_to_utf16_6
??utf8_to_utf16_4:
        SUBS     R1,R1,#+1
        BMI      ??utf8_to_utf16_5
        LDRB     R6,[R0], #+1
        AND      R7,R6,#0xC0
        CMP      R7,#+128
        BNE      ??utf8_to_utf16_5
        AND      R6,R6,#0x3F
        ORR      R5,R6,R12, LSL #+6
        TST      R12,#0x20
        BNE      ??utf8_to_utf16_7
        CMP      R5,#+128
        BCC      ??utf8_to_utf16_5
??utf8_to_utf16_8:
        STRB     R5,[R2], #+1
        B        ??utf8_to_utf16_2
??utf8_to_utf16_7:
        SUBS     R1,R1,#+1
        BMI      ??utf8_to_utf16_5
        LDRB     R6,[R0], #+1
        AND      R7,R6,#0xC0
        CMP      R7,#+128
        BNE      ??utf8_to_utf16_5
        AND      R6,R6,#0x3F
        ORR      R5,R6,R5, LSL #+6
        TST      R12,#0x10
        BNE      ??utf8_to_utf16_9
        CMP      R5,#+2048
        BCC      ??utf8_to_utf16_5
        CMP      R5,#+55296
        BCC      ??utf8_to_utf16_8
        CMP      R5,#+57344
        BCS      ??utf8_to_utf16_8
        B        ??utf8_to_utf16_5
??utf8_to_utf16_9:
        LDRB     R6,[R0], #+1
        SUBS     R1,R1,#+1
        BMI      ??utf8_to_utf16_5
        AND      R4,R6,#0xC0
        CMP      R4,#+128
        ANDEQ    R4,R6,#0x3F
        ORREQ    R5,R4,R5, LSL #+6
        TSTEQ    R12,#0x8
        BNE      ??utf8_to_utf16_5
        CMP      R5,#+65536
        BCC      ??utf8_to_utf16_5
        MOV      R4,#-16777216
        ORR      R4,R4,#0xFF0000
        ADD      R5,R4,R5
        LSR      R4,R5,#+10
        STRB     R4,[R2], #+1
        STRB     R5,[R2], #+1
        ADD      R3,R3,#+2
        B        ??utf8_to_utf16_0
??utf8_to_utf16_3:
        MOV      R0,R3
??utf8_to_utf16_6:
        POP      {R4-R7}
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI CFA R13+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock28

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock29 Using cfiCommon0
        CFI NoFunction
        THUMB
??utf16_to_utf8??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock29
        REQUIRE utf16_to_utf8

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock30 Using cfiCommon1
        CFI Function utf16_to_utf8
        ARM
utf16_to_utf8:
        PUSH     {R4-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+36
        MOV      R5,R1
        LDR      R9,[R5, #+0]
        MOV      R4,R0
        MOV      R0,R9
        SWI      +20
        MOV      R10,R0
        MOV      R1,R9
        SWI      +285
        MOV      R11,#+0
        MOV      R7,#+2
        B        ??utf16_to_utf8_0
??utf16_to_utf8_1:
        SUB      R1,R1,#+1
        MOV      R0,R1
        MUL      R0,R2,R0
        ASR      R0,R8,R0
        AND      R0,R0,#0x3F
        ORR      R0,R0,#0x80
        STRB     R0,[R11, +R10]
        ADD      R11,R11,#+1
??utf16_to_utf8_2:
        CMP      R1,#+0
        BNE      ??utf16_to_utf8_1
??utf16_to_utf8_3:
        ADD      R7,R7,#+2
??utf16_to_utf8_0:
        LDR      R0,[R5, #+0]
        ADD      R6,R11,#+1
        CMP      R0,R7
        BCC      ??utf16_to_utf8_4
        LDR      R1,[R4, #+0]
        ADD      R2,R7,R1
        LDRB     R3,[R2, #+1]
        LDRB     R2,[R2, #+0]
        ORR      R8,R2,R3, LSL #+8
        CMP      R8,#+55296
        BLT      ??utf16_to_utf8_5
        CMP      R8,#+57344
        BGE      ??utf16_to_utf8_5
        ADD      R7,R7,#+2
        SUB      R0,R0,#+1
        CMP      R7,R0
        BCS      ??utf16_to_utf8_5
        ADD      R0,R7,R1
        LDRB     R3,[R0, #+1]
        LDRB     R0,[R0, #+0]
        MOV      R1,#+255
        ORR      R1,R1,#0x300
        AND      R2,R1,R8
        ORR      R0,R0,R3, LSL #+8
        AND      R0,R1,R0
        ORR      R0,R0,R2, LSL #+10
        ADD      R8,R0,#+65536
        B        ??utf16_to_utf8_5
??utf16_to_utf8_6:
        ADD      R9,R9,#+1024
        MOV      R1,R9
        MOV      R0,R10
        SWI      +186
        MOV      R10,R0
??utf16_to_utf8_5:
        ADD      R0,R11,#+6
        CMP      R9,R0
        BCC      ??utf16_to_utf8_6
        ADD      R2,R11,R10
        CMP      R8,#+128
        STRBLT   R8,[R2, #+0]
        MOVLT    R11,R6
        BLT      ??utf16_to_utf8_3
        MOV      R0,#+0
        MOV      R1,R8
??utf16_to_utf8_7:
        ADD      R0,R0,#+1
        ADD      R1,R1,R1, LSR #+31
        ASRS     R1,R1,#+1
        BNE      ??utf16_to_utf8_7
        SUB      R0,R0,#+2
        MOV      R1,#+5
        _BLF     ??div32_a,??rA??div32_a
        MOV      R0,#+255
        MOV      R3,R1
        RSB      R3,R3,#+7
        LSL      R0,R0,R3
        MOV      R3,R1
        MOV      R11,#+6
        MUL      R3,R11,R3
        MOV      R11,R6
        ASR      R3,R8,R3
        ORR      R0,R3,R0
        STRB     R0,[R2, #+0]
        MOV      R2,#+6
        B        ??utf16_to_utf8_2
??utf16_to_utf8_4:
        STR      R11,[R5, #+0]
        MOV      R1,R6
        MOV      R0,R10
        CFI EndBlock cfiBlock30
        REQUIRE ?Subroutine30
        ;; // Fall through to label ?Subroutine30

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock31 Using cfiCommon1
        CFI NoFunction
        CFI CFA R13+36
        CFI R4 Frame(CFA, -36)
        CFI R5 Frame(CFA, -32)
        CFI R6 Frame(CFA, -28)
        CFI R7 Frame(CFA, -24)
        CFI R8 Frame(CFA, -20)
        CFI R9 Frame(CFA, -16)
        CFI R10 Frame(CFA, -12)
        CFI R11 Frame(CFA, -8)
        CFI ?RET Frame(CFA, -4)
        ARM
?Subroutine30:
        SWI      +186
        POP      {R4-R11,PC}      ;; return
        CFI EndBlock cfiBlock31

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock32 Using cfiCommon0
        CFI NoFunction
        THUMB
??Correct_UTF8_String??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock32
        REQUIRE Correct_UTF8_String

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock33 Using cfiCommon1
        CFI Function Correct_UTF8_String
        ARM
Correct_UTF8_String:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
        SWI      +27
        LDRB     R3,[R4, #+0]
        MOV      R0,#+0
        MOV      R2,#+0
        B        ??Correct_UTF8_String_0
??Correct_UTF8_String_1:
        CMP      R3,#+31
        STRBNE   R3,[R0, +R4]
        MOVNE    R0,R1
        ADD      R2,R2,#+1
        LDRB     R3,[R2, +R4]
??Correct_UTF8_String_0:
        ADD      R1,R0,#+1
        MOVS     R12,R3
        BNE      ??Correct_UTF8_String_1
        MOV      R2,#+0
        STRB     R2,[R0, +R4]
        MOV      R0,R4
        SWI      +186
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock33

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock34 Using cfiCommon0
        CFI NoFunction
        THUMB
??ANSI2UTF8??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock34
        REQUIRE ANSI2UTF8

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock35 Using cfiCommon1
        CFI Function ANSI2UTF8
        ARM
ANSI2UTF8:
        PUSH     {R0,R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+20
        MOV      R4,R0
        MOV      R5,R1
        MOV      R1,#+0
        STR      R1,[SP, #+0]
        MOV      R0,R5
        SWI      +293
        MOV      R6,R0
        MOV      R1,R4
        BL       ascii2ws
        MOV      R0,#+1
        ADD      R4,R0,R5, LSL #+1
        MOV      R0,R4
        SWI      +20
        MOV      R5,R0
        MOV      R3,R4
        MOV      R2,SP
        MOV      R1,R5
        MOV      R0,R6
        SWI      +482
        MOV      R0,R6
        SWI      +297
        LDR      R0,[SP, #+0]
        ADD      R1,R0,#+1
        MOV      R0,R5
        SWI      +186
        LDR      R1,[SP, #+0]
        MOV      R2,#+0
        STRB     R2,[R1, +R0]
        POP      {R1,R4-R6,PC}    ;; return
        CFI EndBlock cfiBlock35

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock36 Using cfiCommon0
        CFI NoFunction
        THUMB
??char8to16??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock36
        REQUIRE char8to16

        RSEG DATA_C:CONST:SORT:NOROOT(2)
unicode2char:
        DATA
        DC16 1040
        DC8 128, 192, 225, 0
        DC16 1041
        DC8 129, 193, 226, 0
        DC16 1042
        DC8 130, 194, 247, 0
        DC16 1043
        DC8 131, 195, 231, 0
        DC16 1044
        DC8 132, 196, 228, 0
        DC16 1045
        DC8 133, 197, 229, 0
        DC16 1046
        DC8 134, 198, 246, 0
        DC16 1047
        DC8 135, 199, 250, 0
        DC16 1048
        DC8 136, 200, 233, 0
        DC16 1049
        DC8 137, 201, 234, 0
        DC16 1050
        DC8 138, 202, 235, 0
        DC16 1051
        DC8 139, 203, 236, 0
        DC16 1052
        DC8 140, 204, 237, 0
        DC16 1053
        DC8 141, 205, 238, 0
        DC16 1054
        DC8 142, 206, 239, 0
        DC16 1055
        DC8 143, 207, 240, 0
        DC16 1056
        DC8 144, 208, 242, 0
        DC16 1057
        DC8 145, 209, 243, 0
        DC16 1058
        DC8 146, 210, 244, 0
        DC16 1059
        DC8 147, 211, 245, 0
        DC16 1060
        DC8 148, 212, 230, 0
        DC16 1061
        DC8 149, 213, 232, 0
        DC16 1062
        DC8 150, 214, 227, 0
        DC16 1063
        DC8 151, 215, 254, 0
        DC16 1064
        DC8 152, 216, 251, 0
        DC16 1065
        DC8 153, 217, 253, 0
        DC16 1066
        DC8 154, 218, 255, 0
        DC16 1067
        DC8 155, 219, 249, 0
        DC16 1068
        DC8 156, 220, 248, 0
        DC16 1069
        DC8 157, 221, 252, 0
        DC16 1070
        DC8 158, 222, 224, 0
        DC16 1071
        DC8 159, 223, 241, 0
        DC16 1026
        DC8 95, 128, 95, 0
        DC16 1027
        DC8 95, 129, 95, 0
        DC16 1033
        DC8 95, 138, 95, 0
        DC16 1034
        DC8 95, 140, 95, 0
        DC16 1036
        DC8 95, 141, 95, 0
        DC16 1035
        DC8 95, 142, 95, 0
        DC16 1039
        DC8 95, 143, 95, 0
        DC16 1038
        DC8 246, 161, 95, 0
        DC16 1032
        DC8 74, 163, 74, 0
        DC16 1033
        DC8 131, 165, 189, 0
        DC16 1025
        DC8 240, 168, 179, 0
        DC16 1028
        DC8 242, 170, 180, 0
        DC16 1031
        DC8 244, 175, 183, 0
        DC16 1030
        DC8 73, 178, 182, 0
        DC16 1029
        DC8 83, 189, 83, 0
        DC16 1072
        DC8 160, 224, 193, 0
        DC16 1073
        DC8 161, 225, 194, 0
        DC16 1074
        DC8 162, 226, 215, 0
        DC16 1075
        DC8 163, 227, 199, 0
        DC16 1076
        DC8 164, 228, 196, 0
        DC16 1077
        DC8 165, 229, 197, 0
        DC16 1078
        DC8 166, 230, 214, 0
        DC16 1079
        DC8 167, 231, 218, 0
        DC16 1080
        DC8 168, 232, 201, 0
        DC16 1081
        DC8 169, 233, 202, 0
        DC16 1082
        DC8 170, 234, 203, 0
        DC16 1083
        DC8 171, 235, 204, 0
        DC16 1084
        DC8 172, 236, 205, 0
        DC16 1085
        DC8 173, 237, 206, 0
        DC16 1086
        DC8 174, 238, 207, 0
        DC16 1087
        DC8 175, 239, 208, 0
        DC16 1088
        DC8 224, 240, 210, 0
        DC16 1089
        DC8 225, 241, 211, 0
        DC16 1090
        DC8 226, 242, 212, 0
        DC16 1091
        DC8 227, 243, 213, 0
        DC16 1092
        DC8 228, 244, 198, 0
        DC16 1093
        DC8 229, 245, 200, 0
        DC16 1094
        DC8 230, 246, 195, 0
        DC16 1095
        DC8 231, 247, 222, 0
        DC16 1096
        DC8 232, 248, 219, 0
        DC16 1097
        DC8 233, 249, 221, 0
        DC16 1098
        DC8 234, 250, 223, 0
        DC16 1099
        DC8 235, 251, 217, 0
        DC16 1100
        DC8 236, 252, 216, 0
        DC16 1101
        DC8 237, 253, 220, 0
        DC16 1102
        DC8 238, 254, 192, 0
        DC16 1103
        DC8 239, 255, 209, 0
        DC16 1106
        DC8 95, 144, 95, 0
        DC16 1107
        DC8 95, 131, 95, 0
        DC16 1113
        DC8 95, 154, 95, 0
        DC16 1114
        DC8 95, 156, 95, 0
        DC16 1116
        DC8 95, 157, 95, 0
        DC16 1115
        DC8 95, 158, 95, 0
        DC16 1119
        DC8 95, 159, 95, 0
        DC16 1118
        DC8 247, 162, 95, 0
        DC16 1112
        DC8 106, 188, 106, 0
        DC16 1169
        DC8 163, 180, 173, 0
        DC16 1105
        DC8 241, 184, 163, 0
        DC16 1108
        DC8 243, 186, 164, 0
        DC16 1111
        DC8 245, 191, 167, 0
        DC16 1110
        DC8 105, 179, 166, 0
        DC16 1109
        DC8 115, 190, 115, 0
        DC16 160
        DC8 95, 160, 32, 0
        DC16 164
        DC8 95, 164, 253, 0
        DC16 166
        DC8 95, 166, 95, 0
        DC16 176
        DC8 248, 176, 156, 0
        DC16 183
        DC8 250, 183, 158, 0
        DC16 0
        DC8 0, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
win2unicode:
        DATA
        DC16 1026, 1027, 8218, 1107, 8222, 8230, 8224, 8225, 8364, 8240, 1033
        DC16 8249, 1034, 1036, 1035, 1039, 1106, 8216, 8217, 8220, 8221, 8226
        DC16 8211, 8212, 32, 8482, 1113, 8250, 1114, 1116, 1115, 1119, 160
        DC16 1038, 1118, 1032, 164, 1168, 166, 167, 1025, 169, 1028, 171, 172
        DC16 173, 174, 1031, 176, 177, 1030, 1110, 1169, 181, 182, 183, 1105
        DC16 8470, 1108, 187, 1112, 1029, 1109, 1111, 1040, 1041, 1042, 1043
        DC16 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054
        DC16 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065
        DC16 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076
        DC16 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087
        DC16 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098
        DC16 1099, 1100, 1101, 1102, 1103

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock37 Using cfiCommon1
        CFI Function char8to16
        ARM
char8to16:
        CMP      R0,#+128
        LDRGE    R2,??char8to16_0  ;; win2unicode
        MVNGE    R1,#+255
        ADDGE    R0,R2,R0, LSL #+1
        LDRHGE   R0,[R1, +R0]
        BX       LR               ;; return
        DATA
??char8to16_0:
        DC32     win2unicode
        CFI EndBlock cfiBlock37

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock38 Using cfiCommon0
        CFI NoFunction
        THUMB
??char16to8??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock38
        REQUIRE char16to8

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock39 Using cfiCommon1
        CFI Function char16to8
        ARM
char16to8:
        LDR      R1,??char16to8_0  ;; unicode2char
        CMP      R0,#+128
        BCS      ??char16to8_1
        BX       LR
??char16to8_2:
        ADD      R1,R1,#+6
??char16to8_1:
        LDRH     R2,[R1, #+0]
        CMP      R2,#+0
        BEQ      ??char16to8_3
        CMP      R0,R2
        BNE      ??char16to8_2
        LDRB     R0,[R1, #+3]
        BX       LR
??char16to8_3:
        AND      R0,R0,#0xFF
        CMP      R0,#+32
        MOVCC    R0,#+32
        BX       LR               ;; return
        DATA
??char16to8_0:
        DC32     unicode2char
        CFI EndBlock cfiBlock39

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock40 Using cfiCommon0
        CFI NoFunction
        THUMB
??ascii2ws??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock40
        REQUIRE ascii2ws

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock41 Using cfiCommon1
        CFI Function ascii2ws
        ARM
ascii2ws:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R0
        MOV      R5,R1
        MOV      R1,#+0
        SWI      +294
        B        ??ascii2ws_0
??ascii2ws_1:
        BL       char8to16
        MOV      R1,R0
        MOV      R0,R4
        SWI      +28
??ascii2ws_0:
        LDRB     R1,[R5], #+1
        MOVS     R0,R1
        BNE      ??ascii2ws_1
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock41

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock42 Using cfiCommon0
        CFI NoFunction
        THUMB
??utf82win??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock42
        REQUIRE utf82win

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock43 Using cfiCommon1
        CFI Function utf82win
        ARM
utf82win:
        B        ??utf82win_0
??utf82win_1:
        STRB     R3,[R0, #+0]
        SUB      R1,R1,#+1
??utf82win_2:
        ADD      R0,R0,#+1
        ADD      R1,R1,#+2
??utf82win_0:
        LDRB     R2,[R1, #+0]
        CMP      R2,#+0
        BEQ      ??utf82win_3
        MOV      R3,R2
        LDRB     R2,[R1, #+1]
        CMP      R3,#+208
        BNE      ??utf82win_4
        CMP      R2,#+129
        BNE      ??utf82win_5
        MOV      R2,#+168
??utf82win_6:
        STRB     R2,[R0, #+0]
        B        ??utf82win_2
??utf82win_5:
        CMP      R2,#+134
        MOVEQ    R2,#+178
        BEQ      ??utf82win_6
        CMP      R2,#+135
        BNE      ??utf82win_7
        MOV      R2,#+175
??utf82win_8:
        B        ??utf82win_6
??utf82win_7:
        CMP      R2,#+132
        MOVEQ    R2,#+170
        BEQ      ??utf82win_6
        ADD      R2,R2,#+48
        B        ??utf82win_6
??utf82win_4:
        CMP      R3,#+209
        BNE      ??utf82win_9
        CMP      R2,#+145
        MOVEQ    R2,#+184
        BEQ      ??utf82win_6
        CMP      R2,#+150
        BNE      ??utf82win_10
        MOV      R2,#+179
??utf82win_11:
        STRB     R2,[R0, #+0]
        B        ??utf82win_2
??utf82win_10:
        CMP      R2,#+151
        MOVEQ    R2,#+191
        BEQ      ??utf82win_6
        CMP      R2,#+148
        MOVEQ    R2,#+186
        BEQ      ??utf82win_6
        ADD      R2,R2,#+112
        B        ??utf82win_6
??utf82win_9:
        CMP      R3,#+210
        BNE      ??utf82win_1
        CMP      R2,#+145
        MOVEQ    R2,#+227
        BEQ      ??utf82win_11
        CMP      R2,#+144
        BNE      ??utf82win_2
        MOV      R2,#+195
        B        ??utf82win_6
??utf82win_3:
        MOV      R1,#+0
        STRB     R1,[R0, #+0]
        BX       LR               ;; return
        CFI EndBlock cfiBlock43

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock44 Using cfiCommon0
        CFI NoFunction
        THUMB
??GetIDLETime??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock44
        REQUIRE GetIDLETime

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock45 Using cfiCommon1
        CFI Function GetIDLETime
        ARM
GetIDLETime:
        PUSH     {R0-R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+24
        SUB      SP,SP,#+16
        CFI CFA R13+40
        MOV      R1,SP
        ADD      R0,SP,#+8
        SWI      +180
        LDRB     R0,[SP, #+2]
        LDRB     R1,[SP, #+18]
        LDRB     R2,[SP, #+17]
        MOV      R4,#+0
        SUBS     R0,R0,R1
        LDRB     R1,[SP, #+1]
        ADDMI    R0,R0,#+60
        MOVMI    R4,#+1
        SUB      R1,R1,R2
        SUBS     R1,R1,R4
        ADDMI    R1,R1,#+60
        MOV      R3,#+60
        MLA      R0,R3,R1,R0
        LDRB     R1,[SP, #+0]
        LDRB     R3,[SP, #+16]
        MOV      R2,#+0
        MOVMI    R2,#+1
        SUB      R1,R1,R3
        SUBS     R1,R1,R2
        ADDMI    R1,R1,#+24
        MOV      R3,#+3600
        MLA      R0,R3,R1,R0
        LDRB     R1,[SP, #+13]
        LDRB     R3,[SP, #+29]
        MOV      R2,#+0
        MOVMI    R2,#+1
        SUB      R1,R1,R3
        SUBS     R1,R1,R2
        ADDMI    R1,R1,#+31
        MOV      R2,#+81920
        ORR      R2,R2,#0x1180
        MLA      R0,R2,R1,R0
        ADD      SP,SP,#+32
        CFI CFA R13+8
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock45

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock46 Using cfiCommon0
        CFI NoFunction
        THUMB
??utf82filename??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock46
        REQUIRE utf82filename

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock47 Using cfiCommon1
        CFI Function utf82filename
        ARM
utf82filename:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        MOV      R4,R0
        SWI      +27
        ADD      R5,R0,#+16
        MOV      R0,R5
        SWI      +293
        MOV      R6,R0
        MOV      R0,R5
        SWI      +20
        MOV      R7,R0
        MOV      R2,R5
        MOV      R1,R4
        MOV      R0,R6
        SWI      +483
        MOV      R2,R5
        MOV      R1,R7
        MOV      R0,R6
        SWI      +163
        MOV      R0,R6
        SWI      +297
        MOV      R0,R7
        POP      {R4-R7,PC}       ;; return
        CFI EndBlock cfiBlock47

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock48 Using cfiCommon0
        CFI NoFunction
        THUMB
??CutWSStringWidth??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock48
        REQUIRE CutWSStringWidth

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock49 Using cfiCommon1
        CFI Function CutWSStringWidth
        ARM
CutWSStringWidth:
        PUSH     {R4-R9,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R9 Frame(CFA, -8)
        CFI R8 Frame(CFA, -12)
        CFI R7 Frame(CFA, -16)
        CFI R6 Frame(CFA, -20)
        CFI R5 Frame(CFA, -24)
        CFI R4 Frame(CFA, -28)
        CFI CFA R13+28
        MOV      R4,R0
        LDR      R7,[R4, #+0]
        MOV      R5,R1
        MOV      R6,R2
        MOV      R8,#+0
        MOV      R9,#+0
        B        ??CutWSStringWidth_0
??CutWSStringWidth_1:
        ADD      R9,R9,#+1
        ADD      R0,R7,R9, LSL #+1
        LDRH     R0,[R0, #+0]
        MOV      R1,R6
        SWI      +481
        ADD      R8,R0,R8
??CutWSStringWidth_0:
        CMP      R8,R5
        BGE      ??CutWSStringWidth_2
        LDRH     R0,[R7, #+0]
        CMP      R0,R9
        BGE      ??CutWSStringWidth_1
??CutWSStringWidth_2:
        SUB      R1,R9,#+1
        MOV      R0,R4
        SWI      +294
        POP      {R4-R9,PC}       ;; return
        CFI EndBlock cfiBlock49

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock50 Using cfiCommon0
        CFI NoFunction
        THUMB
??remove_bad_chars??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock50
        REQUIRE remove_bad_chars

        RSEG DATA_C:CONST:SORT:NOROOT(2)
badchars:
        DATA
        DC8 63, 42, 34, 58, 60, 62, 47, 92, 124, 10, 13, 44

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock51 Using cfiCommon1
        CFI Function remove_bad_chars
        ARM
remove_bad_chars:
        B        ??remove_bad_chars_0
??remove_bad_chars_1:
        ADD      R1,R1,#+1
??remove_bad_chars_2:
        CMP      R1,#+12
        BCS      ??remove_bad_chars_3
        LDR      R3,??remove_bad_chars_4  ;; badchars
        LDRB     R3,[R1, +R3]
        CMP      R2,R3
        BNE      ??remove_bad_chars_1
        MOV      R1,#+95
        STRB     R1,[R0, #+0]
??remove_bad_chars_3:
        ADD      R0,R0,#+1
??remove_bad_chars_0:
        LDRB     R2,[R0, #+0]
        CMP      R2,#+0
        MOVNE    R1,#+0
        BNE      ??remove_bad_chars_2
        BX       LR               ;; return
        DATA
??remove_bad_chars_4:
        DC32     badchars
        CFI EndBlock cfiBlock51

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock52 Using cfiCommon0
        CFI NoFunction
        THUMB
??UTF8_GetSize??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock52
        REQUIRE UTF8_GetSize

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock53 Using cfiCommon1
        CFI Function UTF8_GetSize
        ARM
UTF8_GetSize:
        LDRB     R0,[R0, #+0]
        MOV      R1,#+0
        CMP      R0,#+128
        MOVCC    R1,#+1
        BCC      ??UTF8_GetSize_0
        AND      R2,R0,#0xF8
        CMP      R2,#+240
        MOVEQ    R1,#+4
        BEQ      ??UTF8_GetSize_0
        AND      R2,R0,#0xF0
        CMP      R2,#+224
        MOVEQ    R1,#+3
        BEQ      ??UTF8_GetSize_0
        AND      R0,R0,#0xE0
        CMP      R0,#+192
        MOVEQ    R1,#+2
??UTF8_GetSize_0:
        MOV      R0,R1
        BX       LR               ;; return
        CFI EndBlock cfiBlock53

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock54 Using cfiCommon0
        CFI NoFunction
        THUMB
??DecodeUTF8??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock54
        REQUIRE DecodeUTF8

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock55 Using cfiCommon1
        CFI Function DecodeUTF8
        ARM
DecodeUTF8:
        PUSH     {R4,R5}
        CFI R5 Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        LDRB     R3,[R0, #+0]
        CMP      R3,#+128
        STRCC    R3,[R1, #+0]
        MOVCC    R0,#+1
        BCC      ??DecodeUTF8_0
        AND      R2,R3,#0xF8
        CMP      R2,#+240
        BNE      ??DecodeUTF8_1
        MOV      R2,#+4
??DecodeUTF8_2:
        MOV      R12,#+7
        MOV      R4,R2
        RSB      R4,R4,#+4
        MOV      R5,#+3
        ORR      R4,R5,R12, LSL R4
        AND      R3,R4,R3
        STR      R3,[R1, #+0]
        MOV      R3,#+1
        B        ??DecodeUTF8_3
??DecodeUTF8_1:
        AND      R2,R3,#0xF0
        CMP      R2,#+224
        MOVEQ    R2,#+3
        BEQ      ??DecodeUTF8_2
        AND      R2,R3,#0xE0
        CMP      R2,#+192
        MOVEQ    R2,#+2
        BEQ      ??DecodeUTF8_2
        MOV      R0,#+0
        B        ??DecodeUTF8_0
??DecodeUTF8_4:
        LDR      R4,[R1, #+0]
        ADD      R3,R3,#+1
        LSL      R12,R4,#+6
        STR      R12,[R1, #+0]
        LDRB     R4,[R0, #+1]!
        AND      R4,R4,#0x3F
        ORR      R4,R4,R12
        STR      R4,[R1, #+0]
??DecodeUTF8_3:
        CMP      R3,R2
        BLT      ??DecodeUTF8_4
        MOV      R0,R2
??DecodeUTF8_0:
        POP      {R4,R5}
        CFI R4 SameValue
        CFI R5 SameValue
        CFI CFA R13+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock55

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock56 Using cfiCommon0
        CFI NoFunction
        THUMB
??EncodeUTF8??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock56
        REQUIRE EncodeUTF8

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock57 Using cfiCommon1
        CFI Function EncodeUTF8
        ARM
EncodeUTF8:
        PUSH     {R4}
        CFI R4 Frame(CFA, -4)
        CFI CFA R13+4
        CMP      R0,#+128
        BCS      ??EncodeUTF8_0
        CMP      R1,#+1
        BLT      ??EncodeUTF8_1
        STRB     R0,[R2, #+0]
        MOV      R0,#+1
        B        ??EncodeUTF8_2
??EncodeUTF8_0:
        AND      R3,R0,#0x3F
        ORR      R3,R3,#0x80
        LSR      R12,R0,#+6
        CMP      R0,#+2048
        BCS      ??EncodeUTF8_3
        CMP      R1,#+2
        BLT      ??EncodeUTF8_1
        AND      R0,R12,#0x1F
        ORR      R0,R0,#0xC0
        STRB     R0,[R2], #+1
        STRB     R3,[R2, #+0]
        MOV      R0,#+2
        B        ??EncodeUTF8_2
??EncodeUTF8_3:
        AND      R4,R12,#0x3F
        ORR      R12,R4,#0x80
        LSR      R4,R0,#+12
        CMP      R0,#+65536
        BCS      ??EncodeUTF8_4
        CMP      R1,#+3
        BLT      ??EncodeUTF8_1
        AND      R0,R4,#0xF
        ORR      R0,R0,#0xE0
        STRB     R0,[R2], #+1
        STRB     R12,[R2], #+1
        STRB     R3,[R2, #+0]
        MOV      R0,#+3
        B        ??EncodeUTF8_2
??EncodeUTF8_4:
        CMP      R0,#+1114112
        BCS      ??EncodeUTF8_1
        CMP      R1,#+4
        BLT      ??EncodeUTF8_1
        LSR      R0,R0,#+18
        AND      R0,R0,#0x7
        ORR      R0,R0,#0xF0
        STRB     R0,[R2], #+1
        AND      R0,R4,#0x3F
        ORR      R0,R0,#0x80
        STRB     R0,[R2], #+1
        STRB     R12,[R2], #+1
        STRB     R3,[R2, #+0]
        MOV      R0,#+4
        B        ??EncodeUTF8_2
??EncodeUTF8_1:
        MOV      R0,#+0
??EncodeUTF8_2:
        POP      {R4}
        CFI R4 SameValue
        CFI CFA R13+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock57

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock58 Using cfiCommon0
        CFI NoFunction
        THUMB
??utf8_syms_n??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock58
        REQUIRE utf8_syms_n

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock59 Using cfiCommon1
        CFI Function utf8_syms_n
        ARM
utf8_syms_n:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        MOV      R4,R0
        MOV      R5,R1
        MOV      R6,#+0
        MOV      R7,R4
        B        ??utf8_syms_n_0
??utf8_syms_n_1:
        MOV      R0,R7
        BL       UTF8_GetSize
        ADD      R7,R0,R7
        ADD      R6,R6,#+1
??utf8_syms_n_0:
        ADD      R0,R5,R4
        CMP      R7,R0
        BCC      ??utf8_syms_n_1
        MOV      R0,R6
        POP      {R4-R7,PC}       ;; return
        CFI EndBlock cfiBlock59

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock60 Using cfiCommon0
        CFI NoFunction
        THUMB
??Replace_Smiles_Syms??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock60
        REQUIRE Replace_Smiles_Syms

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock61 Using cfiCommon1
        CFI Function Replace_Smiles_Syms
        ARM
Replace_Smiles_Syms:
        PUSH     {R0,R4-R9,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R9 Frame(CFA, -8)
        CFI R8 Frame(CFA, -12)
        CFI R7 Frame(CFA, -16)
        CFI R6 Frame(CFA, -20)
        CFI R5 Frame(CFA, -24)
        CFI R4 Frame(CFA, -28)
        CFI CFA R13+32
        MOV      R4,R0
        MOV      R5,#+0
        MOV      R6,R4
        MOV      R7,R4
        SWI      +27
        MOV      R8,R0
        B        ??Replace_Smiles_Syms_1
??Replace_Smiles_Syms_2:
        LDRB     R0,[R6], #+1
        ADD      R5,R5,#+1
??Replace_Smiles_Syms_3:
        STRB     R0,[R7], #+1
??Replace_Smiles_Syms_1:
        MOV      R0,#+0
        ADD      R1,R8,R4
        CMP      R6,R1
        BCS      ??Replace_Smiles_Syms_4
        MOV      R9,#+255
        ORR      R9,R9,#0xFF00
        STR      R0,[SP, #+0]
        MOV      R0,R6
        BL       UTF8_GetSize
        CMP      R0,#+4
        BHI      ??Replace_Smiles_Syms_1
        ADR      R1,??Replace_Smiles_Syms_0
        LDRSB    R1,[R1, R0]
        ADD      PC,PC,R1, LSL #+2
        DATA
??Replace_Smiles_Syms_0:
        DC8      +1,+238,+3,+8
        DC8      +56,+0,+0,+0
        ARM
??Replace_Smiles_Syms_5:
        MOV      R0,#+0
        POP      {R1,R4-R9,PC}
??Replace_Smiles_Syms_6:
        LDRB     R0,[R6], #+1
        ADD      R5,R5,#+2
        STRB     R0,[R7], #+1
        LDRB     R0,[R6], #+1
        B        ??Replace_Smiles_Syms_3
??Replace_Smiles_Syms_7:
        MOV      R1,SP
        MOV      R0,R6
        BL       DecodeUTF8
        LDR      R0,[SP, #+0]
        CMP      R0,#+9728
        BCC      ??Replace_Smiles_Syms_8
        CMP      R0,#+10176
        BCS      ??Replace_Smiles_Syms_8
        MOV      R1,#+57
        ORR      R1,R1,#0x2600
        CMP      R0,R1
        MOVEQ    R9,#+113
        BEQ      ??Replace_Smiles_Syms_9
        ADD      R1,R1,#+1
        CMP      R0,R1
        MOVEQ    R9,#+114
        BEQ      ??Replace_Smiles_Syms_9
        ADD      R1,R1,#+210
        CMP      R0,R1
        MOVEQ    R9,#+115
        BEQ      ??Replace_Smiles_Syms_9
        ADD      R1,R1,#+88
        CMP      R0,R1
        BNE      ??Replace_Smiles_Syms_10
        MOV      R9,#+116
??Replace_Smiles_Syms_9:
        ORR      R9,R9,#0xE200
??Replace_Smiles_Syms_10:
        MOV      R2,R7
        MOV      R1,#+4
        MOV      R0,R9
        BL       EncodeUTF8
        ADD      R5,R0,R5
        ADD      R7,R0,R7
        B        ??Replace_Smiles_Syms_11
??Replace_Smiles_Syms_8:
        CMP      R0,#+65024
        BCC      ??Replace_Smiles_Syms_12
        MOV      R1,#+16
        ORR      R1,R1,#0xFE00
        CMP      R0,R1
        BCS      ??Replace_Smiles_Syms_12
??Replace_Smiles_Syms_11:
        ADD      R6,R6,#+3
        B        ??Replace_Smiles_Syms_1
??Replace_Smiles_Syms_12:
        LDRB     R0,[R6], #+1
        ADD      R5,R5,#+3
        STRB     R0,[R7], #+1
        LDRB     R0,[R6], #+1
        STRB     R0,[R7], #+1
        LDRB     R0,[R6], #+1
        B        ??Replace_Smiles_Syms_3
??Replace_Smiles_Syms_13:
        MOV      R1,SP
        MOV      R0,R6
        BL       DecodeUTF8
        ADD      R6,R0,R6
        LDR      R0,[SP, #+0]
        MOV      R1,#+65536
        ORR      R1,R1,#0xF600
        CMP      R0,R1
        BCC      ??Replace_Smiles_Syms_14
        ORR      R1,R1,#0x50
        CMP      R0,R1
        BCS      ??Replace_Smiles_Syms_15
        MOV      R1,#+3
        ORR      R1,R1,#0xEC00
??Replace_Smiles_Syms_16:
        ADD      R9,R1,R0
        B        ??Replace_Smiles_Syms_15
??Replace_Smiles_Syms_14:
        SUB      R1,R1,#+448
        CMP      R0,R1
        BCC      ??Replace_Smiles_Syms_17
        ORR      R1,R1,#0x11
        CMP      R0,R1
        BCS      ??Replace_Smiles_Syms_15
        MOV      R1,#+32
        ORR      R1,R1,#0xEE00
        B        ??Replace_Smiles_Syms_16
??Replace_Smiles_Syms_17:
        SUB      R1,R1,#+69
        CMP      R0,R1
        BCC      ??Replace_Smiles_Syms_15
        CMP      R0,#+128000
        BCC      ??Replace_Smiles_Syms_1
??Replace_Smiles_Syms_15:
        MOV      R2,R7
        MOV      R1,#+4
        MOV      R0,R9, LSL #+16
        MOV      R0,R0, LSR #+16
        BL       EncodeUTF8
        ADD      R5,R0,R5
        ADD      R7,R0,R7
        B        ??Replace_Smiles_Syms_1
??Replace_Smiles_Syms_4:
        STRB     R0,[R7, #+0]
        MOV      R0,R5
        POP      {R1,R4-R9,PC}    ;; return
        CFI EndBlock cfiBlock61

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock62 Using cfiCommon1
        CFI NoFunction
        ARM
??tolower??rA:
        LDR      R12,??Subroutine32_0  ;; tolower
        BX       R12
        DATA
??Subroutine32_0:
        DC32     tolower
        CFI EndBlock cfiBlock62

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock63 Using cfiCommon1
        CFI NoFunction
        ARM
??rA??div32_a:
        LDR      R12,??Subroutine33_0  ;; ??div32_a
        MOV      PC,R12
        DATA
??Subroutine33_0:
        DC32     ??div32_a
        CFI EndBlock cfiBlock63

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock64 Using cfiCommon1
        CFI Function tolower
        ARM
tolower:
        ADD      R1,R0,#+32
        CMP      R0,#+128
        BGE      ??tolower_0
        CMP      R0,#+65
        BXLT     LR
        CMP      R0,#+91
        MOVLT    R0,R1
        BX       LR               ;; return
??tolower_0:
        CMP      R0,#+144
        BXLT     LR
        CMP      R0,#+176
        BXGE     LR
        MOV      R0,R1
        BX       LR
        CFI EndBlock cfiBlock64

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for Repl_chars>`:
        DATA
        DC8 "&apos;"
        DC8 39
        DC8 26H, 23H, 33H, 39H, 3BH, 0, 0
        DC8 39
        DC8 "&quot;"
        DC8 34
        DC8 26H, 6CH, 74H, 3BH, 0, 0, 0
        DC8 60
        DC8 26H, 67H, 74H, 3BH, 0, 0, 0
        DC8 62
        DC8 26H, 61H, 6DH, 70H, 3BH, 0, 0
        DC8 38

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        END
// 
// 4 812 bytes in segment CODE
//   992 bytes in segment DATA_C
//    48 bytes in segment DATA_I
//    48 bytes in segment DATA_ID
//    12 bytes in segment INITTAB
// 
// 4 612 bytes of CODE  memory (+ 212 bytes shared)
// 1 040 bytes of CONST memory
//    48 bytes of DATA  memory
//
//Errors: none
//Warnings: 4
