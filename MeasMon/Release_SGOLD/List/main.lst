##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    06/May/2018  20:17:15 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  E:\Users\alfinant\Documents\Siemens\alfinant\MeasMon #
#                       \main.c                                              #
#    Command line    =  E:\Users\alfinant\Documents\Siemens\alfinant\MeasMon #
#                       \main.c -D SGOLD -lCN E:\Users\alfinant\Documents\Si #
#                       emens\alfinant\MeasMon\Release_SGOLD\List\ -la       #
#                       E:\Users\alfinant\Documents\Siemens\alfinant\MeasMon #
#                       \Release_SGOLD\List\ -o E:\Users\alfinant\Documents\ #
#                       Siemens\alfinant\MeasMon\Release_SGOLD\Obj\ -z9      #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --fpu None            #
#                       --dlib_config E:\Users\alfinant\Documents\Siemens\IA #
#                       R\ARM\LIB\dl5tpainl8n.h -I                           #
#                       E:\Users\alfinant\Documents\Siemens\IAR\ARM\INC\     #
#                       --inline_threshold=2                                 #
#    List file       =  E:\Users\alfinant\Documents\Siemens\alfinant\MeasMon #
#                       \Release_SGOLD\List\main.lst                         #
#    Object file     =  E:\Users\alfinant\Documents\Siemens\alfinant\MeasMon #
#                       \Release_SGOLD\Obj\main.r79                          #
#                                                                            #
#                                                                            #
##############################################################################

E:\Users\alfinant\Documents\Siemens\alfinant\MeasMon\main.c
      1          #include "../inc/swilib.h"
      2          #include "../inc/nu_swilib.h"
      3          #include "clkman.h"
      4          #include "irq_work.h"
      5          #include "rect_patcher.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void patch_header(HEADER_DESC const *)
   \                     patch_header:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   B000C4E1           STRH     R0,[R4, #+0]
   \   00000010   B200C4E1           STRH     R0,[R4, #+2]
   \   00000014   888100EF           SWI      +33160
   \   00000018   010040E2           SUB      R0,R0,#+1
   \   0000001C   B400C4E1           STRH     R0,[R4, #+4]
   \   00000020   8A8100EF           SWI      +33162
   \   00000024   010040E2           SUB      R0,R0,#+1
   \   00000028   B600C4E1           STRH     R0,[R4, #+6]
   \   0000002C   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void patch_tview(TVIEW_DESC const *)
   \                     patch_tview:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   B801C4E1           STRH     R0,[R4, #+24]
   \   00000010   8A8100EF           SWI      +33162
   \   00000014   010080E2           ADD      R0,R0,#+1
   \   00000018   BA01C4E1           STRH     R0,[R4, #+26]
   \   0000001C   888100EF           SWI      +33160
   \   00000020   010040E2           SUB      R0,R0,#+1
   \   00000024   BC01C4E1           STRH     R0,[R4, #+28]
   \   00000028   898100EF           SWI      +33161
   \   0000002C   0050A0E1           MOV      R5,R0
   \   00000030   8B8100EF           SWI      +33163
   \   00000034   000045E0           SUB      R0,R5,R0
   \   00000038   010040E2           SUB      R0,R0,#+1
   \   0000003C   BE01C4E1           STRH     R0,[R4, #+30]
   \   00000040   3080BDE8           POP      {R4,R5,PC}       ;; return
      6          #include "meas.h"
      7          
      8          #ifdef NEWSGOLD
      9          #include "../inc/reg8876.h"
     10          #else
     11          #include "../inc/reg8875.h"
     12          #endif
     13          
     14          #define C72
     15          
     16          #ifdef CX75
     17          #define     GUI_AddTimer             ((int(*)(GUI* gui)) 0xA0800A17)//таймеров всего 10
     18          //pattern SGOLD=EC,54,58,19,C2,60,08,1C,??,??,01,31,0A,29 - 0x17
     19          #define     GUI_StartTimerProc       ((void(*)(GUI* gui, int id, long ms, void ptr())) 0xA0800A89)
     20          //pattern SGOLD=F8,B5,16,1C,18,1C,0A,29,??,??,14,23,59,43 +1
     21          #define     GUI_DeleteTimer          ((int(*)(GUI* gui, int id)) 0xA0800B03)
     22          //pattern SGOLD=10,B5,0C,1C,0A,29,??,??,21,1C,??,??,EE,FF,14,22,62,43 +1
     23          #endif
     24             
     25          #ifdef C72
     26          #define     GUI_AddTimer             ((int(*)(GUI* gui)) 0xA0CC8B3B)
     27          #define     GUI_StartTimerProc       ((void(*)(GUI* gui, int id, long ms, void ptr())) 0xA0CC8BAD)
     28          #define     GUI_DeleteTimer          ((int(*)(GUI* gui, int id)) 0xA0CC8C27)
     29          #endif
     30             
     31          #define PM_CHARGE_UC   GPIO.TOUT1
     32          
     33          extern int adata;
     34          
     35          int VREF=1960;//Измеренное опорное напряжение 
     36          int VMAX=15220; 
     37          int volt=0;
     38          
     39          int tmr_id;
     40          GUI* tvgui;
     41          int maingui_id;
     42          

   \                                 In segment DATA_C, align 4, align-sorted
     43          static const char percent_t[]="%t";
   \                     percent_t:
   \   00000000   257400             DC8 "%t"
   \   00000003   00                 DC8 0
   \   00000004   4D454153204D       DC8 "MEAS Monitor"
   \              6F6E69746F72
   \              00          
   \   00000011   000000             DC8 0, 0, 0
     44          static const char HEADER_TEXT[]="MEAS Monitor";
     45          
     46          static HEADER_DESC hdr={0,0,0,0,NULL,NULL,LGP_NULL};
     47          

   \                                 In segment DATA_C, align 4, align-sorted
     48          static const int mmenusoftkeys[]={0,1,2};
   \                     mmenusoftkeys:
   \   00000000   000000000100       DC32 0, 1, 2
   \              000002000000
     49          
     50          static SOFTKEY_DESC sk[]=
     51          {
     52            {0x0018,0x0000,(int)""},
     53            {0x0001,0x0000, (int)"Выход"},
     54            {0x0000,0x0000,0xFFFFFFFF},
     55          };
     56          
     57          static SOFTKEYSTAB skt=
     58          {
     59            sk,0
     60          };
     61          

   \                                 In segment CODE, align 4, keep-with-next
     62          static void tmr_hndl()
     63          {
   \                     tmr_hndl:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
     64            if (adata != -1)
   \   00000004   ........           LDR      R4,??DataTable7  ;; VREF
   \   00000008   ........           LDR      R5,??DataTable10  ;; adata
   \   0000000C   000095E5           LDR      R0,[R5, #+0]
   \   00000010   010070E3           CMN      R0,#+1
   \   00000014   1300000A           BEQ      ??tmr_hndl_0
     65            {
     66              WSHDR* ws=AllocWS(80);
   \   00000018   5000A0E3           MOV      R0,#+80
   \   0000001C   250100EF           SWI      +293
   \   00000020   0060A0E1           MOV      R6,R0
     67              wsAppendChar(ws, UTF16_FONT_MEDIUM_BOLD); 
   \   00000024   1510A0E3           MOV      R1,#+21
   \   00000028   E01C81E3           ORR      R1,R1,#0xE000
   \   0000002C   1C0000EF           SWI      +28
     68              wstrcatprintf(ws, "\n\n"
     69                          "M2: "
     70                            "0x%X\n"
     71                              "V: %d mV", adata, volt);
   \   00000030   083094E5           LDR      R3,[R4, #+8]
   \   00000034   002095E5           LDR      R2,[R5, #+0]
   \   00000038   48109FE5           LDR      R1,??tmr_hndl_1  ;; `?<Constant "\\n\\nM2: 0x%X\\nV: %d mV">`
   \   0000003C   0600A0E1           MOV      R0,R6
   \   00000040   160200EF           SWI      +534
     72              TViewSetText(tvgui, ws, malloc_adr(), mfree_adr());
   \   00000044   158000EF           SWI      +32789
   \   00000048   0050A0E1           MOV      R5,R0
   \   0000004C   148000EF           SWI      +32788
   \   00000050   0530A0E1           MOV      R3,R5
   \   00000054   0020A0E1           MOV      R2,R0
   \   00000058   100094E5           LDR      R0,[R4, #+16]
   \   0000005C   0610A0E1           MOV      R1,R6
   \   00000060   D80200EF           SWI      +728
     73              DirectRedrawGUI();
   \   00000064   3F0100EF           SWI      +319
     74            }
     75            
     76            MEAS_Start();
   \                     ??tmr_hndl_0:
   \   00000068   ........           _BLF     MEAS_Start,??MEAS_Start??rA
     77            GUI_StartTimerProc (tvgui, tmr_id, 1000, tmr_hndl);
   \   0000006C   ........           LDR      R3,??DataTable6  ;; tmr_hndl
   \   00000070   0C1094E5           LDR      R1,[R4, #+12]
   \   00000074   100094E5           LDR      R0,[R4, #+16]
   \   00000078   ........           LDR      R4,??DataTable5  ;; 0xffffffffa0cc8bad
   \   0000007C   FA2FA0E3           MOV      R2,#+1000
   \   00000080   34FF2FE1           BLX      R4
     78          }
   \   00000084   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??tmr_hndl_1:
   \   00000088   ........           DC32     `?<Constant "\\n\\nM2: 0x%X\\nV: %d mV">`
     79          

   \                                 In segment CODE, align 4, keep-with-next
     80          static void proc3(){}
   \                     proc3:
   \   00000000   1EFF2FE1           BX       LR               ;; return
     81          

   \                                 In segment CODE, align 4, keep-with-next
     82          static int onKey(void* gui, GUI_MSG *msg)
     83          {
     84            if (msg->keys==1)//закрытие
   \                     onKey:
   \   00000000   F200D1E1           LDRSH    R0,[R1, #+2]
   \   00000004   010050E3           CMP      R0,#+1
   \   00000008   0100001A           BNE      ??onKey_0
     85            {
     86              //
     87              return (0);
   \                     ??onKey_1:
   \   0000000C   0000A0E3           MOV      R0,#+0
   \   00000010   1EFF2FE1           BX       LR
     88            }
     89            
     90            if ((msg->gbsmsg->msg==KEY_DOWN)||(msg->gbsmsg->msg==LONG_PRESS))
   \                     ??onKey_0:
   \   00000014   040091E5           LDR      R0,[R1, #+4]
   \   00000018   9320A0E3           MOV      R2,#+147
   \   0000001C   F210D0E1           LDRSH    R1,[R0, #+2]
   \   00000020   402F82E3           ORR      R2,R2,#0x100
   \   00000024   020051E1           CMP      R1,R2
   \   00000028   02208212           ADDNE    R2,R2,#+2
   \   0000002C   02005111           CMPNE    R1,R2
     91            {
     92              switch(msg->gbsmsg->submess)
   \   00000030   04009005           LDREQ    R0,[R0, #+4]
   \   00000034   04005003           CMPEQ    R0,#+4
   \   00000038   F3FFFF1A           BNE      ??onKey_1
     93              {
     94              case LEFT_SOFT:
     95                break;
     96                
     97              case RIGHT_SOFT:
     98                return(1);//выход
   \   0000003C   ........           B        ?Subroutine11
     99              }
    100            }
    101            return(0);
    102          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine11:
   \   00000000   0100A0E3           MOV      R0,#+1
   \   00000004   1EFF2FE1           BX       LR               ;; return
    103          

   \                                 In segment CODE, align 4, keep-with-next
    104          static void gHook(void* data, int cmd)
    105          { 
   \                     gHook:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    106            if (cmd==TI_CMD_CREATE)
   \   00000004   020051E3           CMP      R1,#+2
   \   00000008   1000001A           BNE      ??gHook_0
    107            {
    108              void* hdr_pointer=GetHeaderPointer(data);
   \   0000000C   AE0200EF           SWI      +686
   \   00000010   0040A0E1           MOV      R4,R0
    109              WSHDR* ws=AllocWS(32);
   \   00000014   2000A0E3           MOV      R0,#+32
   \   00000018   250100EF           SWI      +293
    110              wsprintf(ws, percent_t, HEADER_TEXT);
   \   0000001C   3C109FE5           LDR      R1,??gHook_1     ;; percent_t
   \   00000020   0050A0E1           MOV      R5,R0
   \   00000024   042081E2           ADD      R2,R1,#+4
   \   00000028   240100EF           SWI      +292
    111              SetHeaderText(hdr_pointer, ws, malloc_adr(), mfree_adr());
   \   0000002C   158000EF           SWI      +32789
   \   00000030   0060A0E1           MOV      R6,R0
   \   00000034   148000EF           SWI      +32788
   \   00000038   0020A0E1           MOV      R2,R0
   \   0000003C   0630A0E1           MOV      R3,R6
   \   00000040   0510A0E1           MOV      R1,R5
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   AF0200EF           SWI      +687
   \   0000004C   7080BDE8           POP      {R4-R6,PC}
    112            }
    113            
    114            if (cmd==TI_CMD_UNFOCUS)
    115            {
    116          
    117            }
    118            
    119            if (cmd==TI_CMD_FOCUS)
   \                     ??gHook_0:
   \   00000050   0A0051E3           CMP      R1,#+10
   \   00000054   7080BD18           POPNE    {R4-R6,PC}
    120            {  
    121              DisableIDLETMR();
   \   00000058   7F0100EF           SWI      +383
    122            }
    123            
    124            if (cmd==TI_CMD_DESTROY)
    125            {
    126          
    127            }
    128          }
   \   0000005C   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??gHook_1:
   \   00000060   ........           DC32     percent_t

   \                                 In segment DATA_I, align 4, align-sorted
   \                     VREF:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for VREF>`
   \                     VMAX:
   \   00000004                      DS8 4
   \   00000008                      REQUIRE `?<Initializer for VMAX>`
   \                     volt:
   \   00000008                      DS8 4
   \   0000000C                      REQUIRE `?<Initializer for volt>`
   \                     tmr_id:
   \   0000000C                      DS8 4
   \   00000010                      REQUIRE `?<Initializer for tmr_id>`
   \                     tvgui:
   \   00000010                      DS8 4
   \   00000014                      REQUIRE `?<Initializer for tvgui>`
   \                     maingui_id:
   \   00000014                      DS8 4
   \   00000018                      REQUIRE `?<Initializer for maingui_id>`
   \   00000018                      DS8 20
   \   0000002C                      REQUIRE `?<Initializer for hdr>`
   \   0000002C                      DS8 52
   \   00000060                      REQUIRE `?<Initializer for tv_desc>`

   \                                 In segment DATA_I, align 4, align-sorted
   \                     sk:
   \   00000000                      DS8 24
   \   00000018                      REQUIRE `?<Initializer for sk>`

   \                                 In segment DATA_I, align 4, align-sorted
   \                     skt:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for skt>`
    129          
    130          static TVIEW_DESC tv_desc=
    131          {
    132            8,
    133            onKey,
    134            gHook,
    135            proc3,
    136            mmenusoftkeys,
    137            &skt,
    138            {0, 0, 0, 0},//RECT текста
    139            8,//font
    140            0x64,
    141            0x65,
    142            0,
    143            2 //выравнивание по центру
    144          };
    145          
    146          //---------------------------- CSM -------------------------------------------
    147          
    148          typedef struct
    149          {
    150            CSM_RAM csm;
    151            int gui_id;
    152          }MAIN_CSM;
    153          
    154          

   \                                 In segment CODE, align 4, keep-with-next
    155          static void maincsm_oncreate(CSM_RAM *data)
    156          {
   \                     maincsm_oncreate:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    157            MAIN_CSM *csm=(MAIN_CSM *)data;
    158            csm->csm.state=0;
    159            csm->csm.unk1=0;
    160            
    161            tvgui=TViewGetGUI(malloc_adr(), mfree_adr());
   \   00000004   ........           LDR      R6,??DataTable7  ;; VREF
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0000A0E3           MOV      R0,#+0
   \   00000010   100084E5           STR      R0,[R4, #+16]
   \   00000014   140084E5           STR      R0,[R4, #+20]
   \   00000018   158000EF           SWI      +32789
   \   0000001C   0050A0E1           MOV      R5,R0
   \   00000020   148000EF           SWI      +32788
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   D60200EF           SWI      +726
   \   0000002C   100086E5           STR      R0,[R6, #+16]
    162            TViewSetDefinition(tvgui, &tv_desc);
   \   00000030   2C1086E2           ADD      R1,R6,#+44
   \   00000034   D70200EF           SWI      +727
    163            patch_header(&hdr);
   \   00000038   180086E2           ADD      R0,R6,#+24
   \   0000003C   ........           _BLF     patch_header,??patch_header??rA
    164            SetHeaderToMenu(tvgui, &hdr, malloc_adr());
   \   00000040   148000EF           SWI      +32788
   \   00000044   0020A0E1           MOV      R2,R0
   \   00000048   100096E5           LDR      R0,[R6, #+16]
   \   0000004C   181086E2           ADD      R1,R6,#+24
   \   00000050   A60200EF           SWI      +678
    165            patch_header(&hdr);
   \   00000054   180086E2           ADD      R0,R6,#+24
   \   00000058   ........           _BLF     patch_header,??patch_header??rA
    166            patch_tview(&tv_desc);
   \   0000005C   2C0086E2           ADD      R0,R6,#+44
   \   00000060   ........           _BLF     patch_tview,??patch_tview??rA
    167            WSHDR* ws=AllocWS(80);
   \   00000064   5000A0E3           MOV      R0,#+80
   \   00000068   250100EF           SWI      +293
   \   0000006C   0050A0E1           MOV      R5,R0
    168            wsAppendChar(ws, UTF16_FONT_MEDIUM_BOLD); 
   \   00000070   1510A0E3           MOV      R1,#+21
   \   00000074   E01C81E3           ORR      R1,R1,#0xE000
   \   00000078   1C0000EF           SWI      +28
    169            wstrcatprintf(ws, "\n\n"
    170                          "M2: -----");
   \   0000007C   60109FE5           LDR      R1,??maincsm_oncreate_0  ;; `?<Constant "\\n\\nM2: -----">`
   \   00000080   0500A0E1           MOV      R0,R5
   \   00000084   160200EF           SWI      +534
    171            TViewSetText(tvgui, ws, malloc_adr(), mfree_adr());
   \   00000088   158000EF           SWI      +32789
   \   0000008C   0070A0E1           MOV      R7,R0
   \   00000090   148000EF           SWI      +32788
   \   00000094   0730A0E1           MOV      R3,R7
   \   00000098   0020A0E1           MOV      R2,R0
   \   0000009C   100096E5           LDR      R0,[R6, #+16]
   \   000000A0   0510A0E1           MOV      R1,R5
   \   000000A4   D80200EF           SWI      +728
    172            maingui_id=CreateGUI(tvgui);
   \   000000A8   100096E5           LDR      R0,[R6, #+16]
   \   000000AC   370100EF           SWI      +311
    173            csm->gui_id=maingui_id;
    174            
    175            tmr_id=GUI_AddTimer(tvgui);
   \   000000B0   30109FE5           LDR      R1,??maincsm_oncreate_0+0x4  ;; 0xffffffffa0cc8b3b
   \   000000B4   140086E5           STR      R0,[R6, #+20]
   \   000000B8   280084E5           STR      R0,[R4, #+40]
   \   000000BC   100096E5           LDR      R0,[R6, #+16]
    176            GUI_StartTimerProc (tvgui, tmr_id, 0, tmr_hndl);
   \   000000C0   ........           LDR      R4,??DataTable5  ;; 0xffffffffa0cc8bad
   \   000000C4   31FF2FE1           BLX      R1
   \   000000C8   ........           LDR      R3,??DataTable6  ;; tmr_hndl
   \   000000CC   0C0086E5           STR      R0,[R6, #+12]
   \   000000D0   0020A0E3           MOV      R2,#+0
   \   000000D4   0010A0E1           MOV      R1,R0
   \   000000D8   100096E5           LDR      R0,[R6, #+16]
   \   000000DC   34FF2FE1           BLX      R4
    177          }
   \   000000E0   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??maincsm_oncreate_0:
   \   000000E4   ........           DC32     `?<Constant "\\n\\nM2: -----">`
   \   000000E8   3B8BCCA0           DC32     0xffffffffa0cc8b3b
    178          
    179          extern void kill_data(void *p, void (*func_p)(void *));
    180          
    181          #pragma segment="ELFBEGIN"

   \                                 In segment CODE, align 4, keep-with-next
    182          void ElfKiller(void)
    183          {
   \                     ElfKiller:
   \   00000000   00402DE9           PUSH     {LR}
    184            kill_data(__segment_begin("ELFBEGIN"),(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??ElfKiller_0  ;; SFB(ELFBEGIN)
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??ElfKiller_0:
   \   00000018   ........           DC32     SFB(ELFBEGIN)
    185          }
    186          

   \                                 In segment CODE, align 4, keep-with-next
    187          static void maincsm_onclose(CSM_RAM *data)
    188          { 
    189            GUI_DeleteTimer(tvgui, tmr_id);
   \                     maincsm_onclose:
   \   00000000   ........           LDR      R0,??DataTable7  ;; VREF
   \   00000004   1C209FE5           LDR      R2,??maincsm_onclose_0  ;; 0xffffffffa0cc8c27
   \   00000008   00402DE9           PUSH     {LR}
   \   0000000C   0C1090E5           LDR      R1,[R0, #+12]
   \   00000010   100090E5           LDR      R0,[R0, #+16]
   \   00000014   32FF2FE1           BLX      R2
    190            MEAS_Delete(); 
   \   00000018   ........           _BLF     MEAS_Delete,??MEAS_Delete??rA
    191            SUBPROC((void *)ElfKiller);
   \   0000001C   ........           LDR      R0,??DataTable12  ;; ElfKiller
   \   00000020   710100EF           SWI      +369
    192          }
   \   00000024   0080BDE8           POP      {PC}             ;; return
   \                     ??maincsm_onclose_0:
   \   00000028   278CCCA0           DC32     0xffffffffa0cc8c27
    193          

   \                                 In segment CODE, align 4, keep-with-next
    194          static int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
    195          {
    196            MAIN_CSM *csm=(MAIN_CSM*)data;
    197            if ((msg->msg==MSG_GUI_DESTROYED)&&((int)msg->data0==csm->gui_id))
   \                     maincsm_onmessage:
   \   00000000   F220D1E1           LDRSH    R2,[R1, #+2]
   \   00000004   980052E3           CMP      R2,#+152
   \   00000008   08109105           LDREQ    R1,[R1, #+8]
   \   0000000C   28209005           LDREQ    R2,[R0, #+40]
   \   00000010   02005101           CMPEQ    R1,R2
    198            {
    199              csm->csm.state=-3;
   \   00000014   0210E003           MVNEQ    R1,#+2
   \   00000018   10108005           STREQ    R1,[R0, #+16]
    200            }
    201          
    202            return(1);
   \   0000001C                      REQUIRE ?Subroutine11
   \   0000001C                      ;; // Fall through to label ?Subroutine11
    203          }
    204          

   \                                 In segment DATA_Z, align 4, align-sorted
    205          static unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280

   \                                 In segment DATA_C, align 4, align-sorted
    206          static const int minus11=-11;
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11
    207          
    208          static const struct
    209          {
    210            CSM_DESC maincsm;
    211            WSHDR maincsm_name;

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Meas Monitor">`:
   \   00000000   4D656173204D       DC8 "Meas Monitor"
   \              6F6E69746F72
   \              00          
   \   0000000D   000000             DC8 0, 0, 0
   \   00000010   48495352206E       DC8 "HISR not created:("
   \              6F7420637265
   \              617465643A28
   \              00          
   \   00000023   00                 DC8 0
   \   00000024   ............       DC32 maincsm_onmessage, maincsm_oncreate, maincsm_onclose, 44, 1
   \              ............
   \              2C0000000100
   \              0000        
   \   00000038   ............       DC32 minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              ....CCCCAA55
   \              55AA33330000
   \              0000        
   \   0000004C   8B00               DC16 139
   \   0000004E   0000               DC8 0, 0
    212          }MAINCSM =
    213          {
    214            {
    215            maincsm_onmessage,
    216            maincsm_oncreate,
    217          #ifdef NEWSGOLD
    218            0,
    219            0,
    220            0,
    221            0,
    222          #endif
    223            maincsm_onclose,
    224            sizeof(MAIN_CSM),
    225            1,
    226            &minus11
    227            },
    228            {
    229              maincsm_name_body,
    230              NAMECSM_MAGIC1,
    231              NAMECSM_MAGIC2,
    232              0x0,
    233              139
    234            }
    235          };
    236          

   \                                 In segment CODE, align 4, keep-with-next
    237          void UpdateCSMname(void)
    238          {
    239            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"Meas Monitor");
   \                     UpdateCSMname:
   \   00000000   ........           LDR      R0,??DataTable11  ;; `?<Constant "Meas Monitor">`
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   3C0080E2           ADD      R0,R0,#+60
   \   00000010   240100EF           SWI      +292
    240          }
   \   00000014   0080BDE8           POP      {PC}             ;; return
    241          

   \                                 In segment CODE, align 4, keep-with-next
    242          void meas_callback()
    243          {
    244            int data=adata-2045;
   \                     meas_callback:
   \   00000000   ........           LDR      R0,??DataTable10  ;; adata
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
    245            if (data < 50 ) data=0;
    246            int v0 = divide(2045, VREF * data);//напряжение на входе M2
   \   0000000C   50409FE5           LDR      R4,??meas_callback_0  ;; VREF
   \   00000010   FC10E0E3           MVN      R1,#+252
   \   00000014   701EC1E3           BIC      R1,R1,#0x700
   \   00000018   000081E0           ADD      R0,R1,R0
   \   0000001C   001094E5           LDR      R1,[R4, #+0]
   \   00000020   320050E3           CMP      R0,#+50
   \   00000024   0000A0B3           MOVLT    R0,#+0
   \   00000028   900101E0           MUL      R1,R0,R1
   \   0000002C   FD00A0E3           MOV      R0,#+253
   \   00000030   700E80E3           ORR      R0,R0,#0x700
   \   00000034   BC0000EF           SWI      +188
   \   00000038   0050A0E1           MOV      R5,R0
    247            int mux = divide(VREF, VMAX * 1000);//множитель для резисторного делителя
   \   0000003C   040094E5           LDR      R0,[R4, #+4]
   \   00000040   FA2FA0E3           MOV      R2,#+1000
   \   00000044   920001E0           MUL      R1,R2,R0
   \   00000048   000094E5           LDR      R0,[R4, #+0]
   \   0000004C   BC0000EF           SWI      +188
    248            volt = divide(1000, v0 * mux);
   \   00000050   900501E0           MUL      R1,R0,R5
   \   00000054   FA0FA0E3           MOV      R0,#+1000
   \   00000058   BC0000EF           SWI      +188
   \   0000005C   080084E5           STR      R0,[R4, #+8]
    249          } 
   \   00000060   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??meas_callback_0:
   \   00000064   ........           DC32     VREF
    250          

   \                                 In segment CODE, align 4, keep-with-next
    251          int main(void)
    252          {   
    253          
    254            if (MEAS_Init(meas_callback))
   \                     main:
   \   00000000   60009FE5           LDR      R0,??main_0      ;; meas_callback
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   ........           LDR      R4,??DataTable11  ;; `?<Constant "Meas Monitor">`
   \   0000000C   2CD04DE2           SUB      SP,SP,#+44
   \   00000010   ........           _BLF     MEAS_Init,??MEAS_Init??rA
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0A00000A           BEQ      ??main_1
    255            {  
    256              MAIN_CSM main_csm;
    257              zeromem(&main_csm, sizeof(MAIN_CSM));
   \   0000001C   2C10A0E3           MOV      R1,#+44
   \   00000020   0D00A0E1           MOV      R0,SP
   \   00000024   1D0100EF           SWI      +285
    258              UpdateCSMname();
   \   00000028   ........           BL       UpdateCSMname
    259              LockSched();
   \   0000002C   460100EF           SWI      +326
    260              CreateCSM(&MAINCSM.maincsm,&main_csm,0);
   \   00000030   0020A0E3           MOV      R2,#+0
   \   00000034   0D10A0E1           MOV      R1,SP
   \   00000038   240084E2           ADD      R0,R4,#+36
   \   0000003C   070100EF           SWI      +263
    261              UnlockSched();
   \   00000040   470100EF           SWI      +327
   \   00000044   040000EA           B        ??main_2
    262            }
    263            else
    264            {
    265              ShowMSG(1,(int)"HISR not created:(" );
   \                     ??main_1:
   \   00000048   101084E2           ADD      R1,R4,#+16
   \   0000004C   0100A0E3           MOV      R0,#+1
   \   00000050   480100EF           SWI      +328
    266              SUBPROC((void *)ElfKiller);
   \   00000054   ........           LDR      R0,??DataTable12  ;; ElfKiller
   \   00000058   710100EF           SWI      +369
    267            }
    268            
    269            return 0;
   \                     ??main_2:
   \   0000005C   0000A0E3           MOV      R0,#+0
   \   00000060   2CD08DE2           ADD      SP,SP,#+44
   \   00000064   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??main_0:
   \   00000068   ........           DC32     meas_callback
    270          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   AD8BCCA0           DC32     0xffffffffa0cc8bad

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     tmr_hndl

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     VREF

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   ........           DC32     adata

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   ........           DC32     `?<Constant "Meas Monitor">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   ........           DC32     ElfKiller

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for VREF>`:
   \   00000000   A8070000           DC32 1960
   \                     `?<Initializer for VMAX>`:
   \   00000004   743B0000           DC32 15220
   \                     `?<Initializer for volt>`:
   \   00000008   00000000           DC32 0
   \                     `?<Initializer for tmr_id>`:
   \   0000000C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for tvgui>`:
   \   00000010   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for maingui_id>`:
   \   00000014   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for hdr>`:
   \   00000018   000000000000       DC16 0, 0, 0, 0
   \              0000        
   \   00000020   000000000000       DC32 0H, 0, 32767
   \              0000FF7F0000
   \                     `?<Initializer for tv_desc>`:
   \   0000002C   08000000....       DC32 8, onKey, gHook, proc3, mmenusoftkeys, skt
   \              ............
   \              ............
   \              ............
   \   00000044   000000000000       DC16 0, 0, 0, 0
   \              0000        
   \   0000004C   080000006400       DC32 8, 100, 101, 0, 2
   \              000065000000
   \              000000000200
   \              0000        

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for sk>`:
   \   00000000   18000000           DC16 24, 0
   \   00000004   ........           DC32 `?<Constant "">`
   \   00000008   01000000           DC16 1, 0
   \   0000000C   ........           DC32 `?<Constant "\\302\\373\\365\\356\\344">`
   \   00000010   00000000           DC16 0, 0
   \   00000014   FFFFFFFF           DC32 -1

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for skt>`:
   \   00000000   ........0000       DC32 sk, 0
   \              0000        

   \                                 In segment ELFBEGIN, align 1

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant "">`:
   \   00000000   00                 DC8 ""

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\302\\373\\365\\356\\344">`:
   \   00000000   C2FBF5EEE400       DC8 "\302\373\365\356\344"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\n\\nM2: 0x%X\\nV: %d mV">`:
   \   00000000   0A0A4D323A20       DC8 "\012\012M2: 0x%X\012V: %d mV"
   \              307825580A56
   \              3A202564206D
   \              5600        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\n\\nM2: -----">`:
   \   00000000   0A0A4D323A20       DC8 "\012\012M2: -----"
   \              2D2D2D2D2D00
    271          

   Maximum stack usage in bytes:

     Function          CSTACK
     --------          ------
     ElfKiller             4
     UpdateCSMname         4
     gHook                16
     main                 52
     maincsm_onclose       4
     maincsm_oncreate     20
     maincsm_onmessage     0
     meas_callback        12
     onKey                 0
     patch_header          8
     patch_tview          12
     proc3                 0
     tmr_hndl             16


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     patch_header                     48
     patch_tview                      68
     percent_t                        20
     mmenusoftkeys                    12
     tmr_hndl                        140
     proc3                             4
     onKey                            64
     ?Subroutine11                     8
     gHook                           100
     VREF                             96
     sk                               24
     skt                               8
     maincsm_oncreate                236
     ElfKiller                        28
     maincsm_onclose                  44
     maincsm_onmessage                28
     maincsm_name_body               280
     minus11                           4
     ?<Constant "Meas Monitor">       80
     UpdateCSMname                    24
     meas_callback                   104
     main                            108
     ??DataTable5                      4
     ??DataTable6                      4
     ??DataTable7                      4
     ??DataTable10                     4
     ??DataTable11                     4
     ??DataTable12                     4
     ?<Initializer for VREF>          96
     ?<Initializer for sk>            24
     ?<Initializer for skt>            8
     ?<Constant "">                    1
     ?<Constant "\302\373\365\356\344">
                                       8
     ?<Constant "\n\nM2: 0x%X\nV: %d mV">
                                      20
     ?<Constant "\n\nM2: -----">      12
      Others                         140

 
 1 144 bytes in segment CODE
   157 bytes in segment DATA_C
   128 bytes in segment DATA_I
   128 bytes in segment DATA_ID
   280 bytes in segment DATA_Z
    24 bytes in segment INITTAB
 
 912 bytes of CODE  memory (+ 256 bytes shared)
 285 bytes of CONST memory
 408 bytes of DATA  memory

Errors: none
Warnings: 4
