##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    23/Apr/2018  18:44:05 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  arm                                                  #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  E:\Users\alfinant\Documents\Siemens\alfinant\MeasMoo #
#                       n\main.c                                             #
#    Command line    =  E:\Users\alfinant\Documents\Siemens\alfinant\MeasMoo #
#                       n\main.c -D NEWSGOLD -D E71v45 -lCN                  #
#                       E:\Users\alfinant\Documents\Siemens\alfinant\MeasMoo #
#                       n\Release_NSG\List\ -la E:\Users\alfinant\Documents\ #
#                       Siemens\alfinant\MeasMoon\Release_NSG\List\ -o       #
#                       E:\Users\alfinant\Documents\Siemens\alfinant\MeasMoo #
#                       n\Release_NSG\Obj\ -z9 --cpu_mode arm --endian       #
#                       little --cpu ARM926EJ-S --stack_align 4 -e --fpu     #
#                       None --dlib_config E:\Users\alfinant\Documents\Sieme #
#                       ns\IAR\ARM\LIB\dl5tpannl8n.h -I                      #
#                       E:\Users\alfinant\Documents\Siemens\IAR\ARM\INC\     #
#                       --inline_threshold=2                                 #
#    List file       =  E:\Users\alfinant\Documents\Siemens\alfinant\MeasMoo #
#                       n\Release_NSG\List\main.lst                          #
#    Object file     =  E:\Users\alfinant\Documents\Siemens\alfinant\MeasMoo #
#                       n\Release_NSG\Obj\main.r79                           #
#                                                                            #
#                                                                            #
##############################################################################

E:\Users\alfinant\Documents\Siemens\alfinant\MeasMoon\main.c
      1          /******************************************************************************/
      2          /*     Пример для работы с Measurement Interface для измерения напряжения     */
      3          /*                                                                            */
      4          /* Макс. значение регистра MEAS.DATA может быть 0 или 4095(0xFFF)             */
      5          /* зависит от полярности подключения.                                         */
      6          /* MEAS.DATA == 2048(0x800) - это нулевое значение.                           */
      7          /* Получается что при измерениии имеем разрешение 4095-2048=2047(0x7FF).      */
      8          /* Опорное напряжение ~2000 mV.                                               */
      9          /* Резисторный делитель: R2=2K, R1=6.8K+6.8K=13.6K                            */
     10          /* Рассчитан на макс напряжение источника == ~15.2V                           */  
     11          /*  +                                                                         */             
     12          /*    |                                                                       */
     13          /*   | |                                                                      */
     14          /*   | | R1                                                                   */
     15          /*    |                                                                       */
     16          /*    -------------- M2                                                        */
     17          /*    |                                                                       */
     18          /*   | |                                                                      */ 
     19          /*   | | R2                                                                   */
     20          /*    |                                                                       */
     21          /*  - ------------- GND                                                       */
     22          /******************************************************************************/
     23          
     24          //#define CX75v25
     25          //#define CX72v22
     26          
     27          #include "../inc/swilib.h"
     28          #include "../inc/nu_swilib.h"
     29          #include "clkman.h"
     30          #include "irq_work.h"
     31          #include "rect_patcher.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __arm __atpcs void patch_header(HEADER_DESC const *)
   \                     patch_header:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   B000C4E1           STRH     R0,[R4, #+0]
   \   00000010   B200C4E1           STRH     R0,[R4, #+2]
   \   00000014   888100EF           SWI      +33160
   \   00000018   010040E2           SUB      R0,R0,#+1
   \   0000001C   B400C4E1           STRH     R0,[R4, #+4]
   \   00000020   8A8100EF           SWI      +33162
   \   00000024   010040E2           SUB      R0,R0,#+1
   \   00000028   B600C4E1           STRH     R0,[R4, #+6]
   \   0000002C   1080BDE8           POP      {R4,PC}          ;; return
     32          
     33          #ifdef NEWSGOLD
     34          #include "../inc/reg8876.h"

   \                                 In segment DATA_AN, at 0xf4c00000
   \   MEAS_TypeDef __data MEAS
   \                     MEAS:
   \   00000000                      DS8 248

   \                                 In segment DATA_AN, at 0xf4300000
   \   GPIO_TypeDef __data GPIO
   \                     GPIO:
   \   00000000                      DS8 488
     35          #else
     36          #include "../inc/reg8875.h"
     37          #endif
     38          
     39          #define PM_CHARGE_UC   GPIO.TOUT1
     40          
     41          #define HISR_STACK_SIZE 512
     42          unsigned long hisr_stack[HISR_STACK_SIZE];
     43          NU_HISR hisr;
     44          
     45          int VREF=1960;//Измеренное опорное напряжение 
     46          int VMAX=15220; 
     47          int AOffset=-2; //коррекция на нуль
     48          int voltage=0;
     49          int adata=0, adata0, adata1, adata2, adata3, adata4, adata5, adata6;
     50          int saved_meas_ctrl2;
     51          IRQ_DESC irq_desc;
     52          
     53          
     54          extern void kill_data(void *p, void (*func_p)(void *));

   \                                 In segment CODE, align 4, keep-with-next
     55          void ElfKiller(void)
     56          { 
   \                     ElfKiller:
   \   00000000   00402DE9           PUSH     {LR}
     57            extern void *ELF_BEGIN;
     58            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??ElfKiller_0  ;; ELF_BEGIN
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??ElfKiller_0:
   \   00000018   ........           DC32     ELF_BEGIN
     59          }
     60          

   \                                 In segment CODE, align 4, keep-with-next
     61          void show_res()
     62          {
     63            char s[128];
     64            
     65            sprintf(s, "Analog Data: 0x%X\n"
     66                       "Voltage: %dmV"
     67                         ,adata, voltage);
   \                     show_res:
   \   00000000   ........           LDR      R0,??DataTable3  ;; VREF
   \   00000004   28109FE5           LDR      R1,??show_res_0  ;; `?<Constant "Analog Data: 0x%X\\nVol...">`
   \   00000008   00402DE9           PUSH     {LR}
   \   0000000C   80D04DE2           SUB      SP,SP,#+128
   \   00000010   083090E5           LDR      R3,[R0, #+8]
   \   00000014   0C2090E5           LDR      R2,[R0, #+12]
   \   00000018   0D00A0E1           MOV      R0,SP
   \   0000001C   160000EF           SWI      +22
     68            ShowMSG(1, (int)s );   
   \   00000020   0D10A0E1           MOV      R1,SP
   \   00000024   0100A0E3           MOV      R0,#+1
   \   00000028   480100EF           SWI      +328
     69          }
   \   0000002C   80D08DE2           ADD      SP,SP,#+128
   \   00000030   0080BDE8           POP      {PC}             ;; return
   \                     ??show_res_0:
   \   00000034   ........           DC32     `?<Constant "Analog Data: 0x%X\\nVol...">`
     70          

   \                                 In segment CODE, align 4, keep-with-next
     71          void H_MEAS_RDY_M2_entry()
     72          {
   \                     H_MEAS_RDY_M2_entry:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
     73            //MEAS.DATAX: 0x800-значение при нуле, 0xFFF-макс. значение
     74            adata = divide(7, adata0+adata1+adata2+adata3+adata4+adata5+adata6);
   \   00000004   9C409FE5           LDR      R4,??H_MEAS_RDY_M2_entry_0  ;; VREF
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   141094E5           LDR      R1,[R4, #+20]
   \   00000010   000081E0           ADD      R0,R1,R0
   \   00000014   181094E5           LDR      R1,[R4, #+24]
   \   00000018   000081E0           ADD      R0,R1,R0
   \   0000001C   1C1094E5           LDR      R1,[R4, #+28]
   \   00000020   000081E0           ADD      R0,R1,R0
   \   00000024   201094E5           LDR      R1,[R4, #+32]
   \   00000028   000081E0           ADD      R0,R1,R0
   \   0000002C   241094E5           LDR      R1,[R4, #+36]
   \   00000030   000081E0           ADD      R0,R1,R0
   \   00000034   281094E5           LDR      R1,[R4, #+40]
   \   00000038   001081E0           ADD      R1,R1,R0
   \   0000003C   0700A0E3           MOV      R0,#+7
   \   00000040   BC0000EF           SWI      +188
   \   00000044   0C0084E5           STR      R0,[R4, #+12]
     75            
     76            int v0 = divide(2047, VREF * (adata-2048));//напряжение на входе M2
   \   00000048   000094E5           LDR      R0,[R4, #+0]
   \   0000004C   0C1094E5           LDR      R1,[R4, #+12]
   \   00000050   FF20E0E3           MVN      R2,#+255
   \   00000054   702EC2E3           BIC      R2,R2,#0x700
   \   00000058   012082E0           ADD      R2,R2,R1
   \   0000005C   920001E0           MUL      R1,R2,R0
   \   00000060   FF00A0E3           MOV      R0,#+255
   \   00000064   700E80E3           ORR      R0,R0,#0x700
   \   00000068   BC0000EF           SWI      +188
   \   0000006C   0050A0E1           MOV      R5,R0
     77            int mux = divide(VREF, VMAX * 1000);//множитель для резисторного делителя
   \   00000070   040094E5           LDR      R0,[R4, #+4]
   \   00000074   FA2FA0E3           MOV      R2,#+1000
   \   00000078   920001E0           MUL      R1,R2,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   BC0000EF           SWI      +188
     78            voltage = divide(1000, v0 * mux);
   \   00000084   900501E0           MUL      R1,R0,R5
   \   00000088   FA0FA0E3           MOV      R0,#+1000
   \   0000008C   BC0000EF           SWI      +188
     79            
     80            if (voltage < 0)
   \   00000090   000050E3           CMP      R0,#+0
     81              voltage=0;
   \   00000094   0000A043           MOVMI    R0,#+0
   \   00000098   080084E5           STR      R0,[R4, #+8]
     82               
     83            SUBPROC((void*)show_res);  
   \   0000009C   08009FE5           LDR      R0,??H_MEAS_RDY_M2_entry_0+0x4  ;; show_res
   \   000000A0   710100EF           SWI      +369
     84          }
   \   000000A4   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??H_MEAS_RDY_M2_entry_0:
   \   000000A8   ........           DC32     VREF
   \   000000AC   ........           DC32     show_res
     85          

   \                                 In segment CODE, align 4, keep-with-next
     86          void meas_rdyirq(int vector)//vector==0x46
     87          {
   \                     meas_rdyirq:
   \   00000000   10402DE9           PUSH     {R4,LR}
     88            MEAS.RDYIRQ = 0x4000;//сбросили флаг
   \   00000004   C004A0E3           MOV      R0,#-1073741824
   \   00000008   D30580E3           ORR      R0,R0,#0x34C00000
   \   0000000C   401CA0E3           MOV      R1,#+16384
   \   00000010   F01080E5           STR      R1,[R0, #+240]
     89            
     90            if (MEAS.STAT & MEAS_READY)
   \   00000014   1C1090E5           LDR      R1,[R0, #+28]
   \   00000018   800411E3           TST      R1,#0x80000000
   \   0000001C   1080BD08           POPEQ    {R4,PC}
     91            {
     92              MEAS.RDYIRQ = 0;//вообще отключили 
     93              MEAS.CTRL2 &=~ MEAS_ENTRIG;
     94              
     95              adata0=MEAS.DATA0;
   \   00000020   ........           LDR      R4,??DataTable3  ;; VREF
   \   00000024   0010A0E3           MOV      R1,#+0
   \   00000028   F01080E5           STR      R1,[R0, #+240]
   \   0000002C   181090E5           LDR      R1,[R0, #+24]
   \   00000030   4015C1E3           BIC      R1,R1,#0x10000000
   \   00000034   181080E5           STR      R1,[R0, #+24]
   \   00000038   201090E5           LDR      R1,[R0, #+32]
   \   0000003C   101084E5           STR      R1,[R4, #+16]
     96              adata1=MEAS.DATA1;
   \   00000040   241090E5           LDR      R1,[R0, #+36]
   \   00000044   141084E5           STR      R1,[R4, #+20]
     97              adata2=MEAS.DATA2;
   \   00000048   281090E5           LDR      R1,[R0, #+40]
   \   0000004C   181084E5           STR      R1,[R4, #+24]
     98              adata3=MEAS.DATA3;
   \   00000050   2C1090E5           LDR      R1,[R0, #+44]
   \   00000054   1C1084E5           STR      R1,[R4, #+28]
     99              adata4=MEAS.DATA4;
   \   00000058   301090E5           LDR      R1,[R0, #+48]
   \   0000005C   201084E5           STR      R1,[R4, #+32]
    100              adata5=MEAS.DATA5;
   \   00000060   341090E5           LDR      R1,[R0, #+52]
   \   00000064   241084E5           STR      R1,[R4, #+36]
    101              adata6=MEAS.DATA6;
   \   00000068   381090E5           LDR      R1,[R0, #+56]
   \   0000006C   281084E5           STR      R1,[R4, #+40]
    102              
    103              MEAS.CTRL2=saved_meas_ctrl2;//восстанавливаем
   \   00000070   2C1094E5           LDR      R1,[R4, #+44]
   \   00000074   181080E5           STR      R1,[R0, #+24]
    104              irq_set_prio(0x72, 8);//разблокируем прерывание gsm_tpu_measur
   \   00000078   0810A0E3           MOV      R1,#+8
   \   0000007C   7200A0E3           MOV      R0,#+114
   \   00000080   ........           _BLF     irq_set_prio,??irq_set_prio??rA
    105              //irq_set_prio(0x46, 0);//блокируем. необязательно
    106              
    107              PM_CHARGE_UC &= ~ GPIO_ENAQ;//включаем зарядку
   \   00000084   F004A0E3           MOV      R0,#-268435456
   \   00000088   430680E3           ORR      R0,R0,#0x4300000
   \   0000008C   D01090E5           LDR      R1,[R0, #+208]
   \   00000090   801CC1E3           BIC      R1,R1,#0x8000
   \   00000094   D01080E5           STR      R1,[R0, #+208]
    108              NU_Activate_HISR(&hisr);
   \   00000098   830E84E2           ADD      R0,R4,#+2096
   \   0000009C   530300EF           SWI      +851
    109            }
    110          }
   \   000000A0   1080BDE8           POP      {R4,PC}          ;; return
    111          

   \                                 In segment CODE, align 4, keep-with-next
    112          void start_measuring_M2()
    113          {
   \                     start_measuring_M2:
   \   00000000   00402DE9           PUSH     {LR}
    114             PM_CHARGE_UC |= GPIO_ENAQ;//отключаем зарядку(иначе измерения будут неверными)
   \   00000004   F004A0E3           MOV      R0,#-268435456
   \   00000008   430680E3           ORR      R0,R0,#0x4300000
   \   0000000C   D01090E5           LDR      R1,[R0, #+208]
   \   00000010   801C81E3           ORR      R1,R1,#0x8000
   \   00000014   D01080E5           STR      R1,[R0, #+208]
    115             irq_set_prio(0x72, 0);//блокируем прерывание GSM таймера, irq_n==0x72
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   7200A0E3           MOV      R0,#+114
   \   00000020   ........           _BLF     irq_set_prio,??irq_set_prio??rA
    116             
    117             //ClkStateOn(MEASIF_MASK);//желательно вызывать
    118             MEAS.CLK &= ~ 1;
   \   00000024   C004A0E3           MOV      R0,#-1073741824
   \   00000028   D30580E3           ORR      R0,R0,#0x34C00000
   \   0000002C   001090E5           LDR      R1,[R0, #+0]
   \   00000030   0110C1E3           BIC      R1,R1,#0x1
   \   00000034   001080E5           STR      R1,[R0, #+0]
    119             MEAS.CLK &= 0x114;
   \   00000038   001090E5           LDR      R1,[R0, #+0]
   \   0000003C   451F01E2           AND      R1,R1,#0x114
   \   00000040   001080E5           STR      R1,[R0, #+0]
    120             saved_meas_ctrl2 = MEAS.CTRL2;//сохраняемся
   \   00000044   30109FE5           LDR      R1,??start_measuring_M2_0  ;; VREF + 44
   \   00000048   182090E5           LDR      R2,[R0, #+24]
   \   0000004C   002081E5           STR      R2,[R1, #+0]
    121             MEAS.CTRL2 &=~ MEAS_ENTRIG;
   \   00000050   181090E5           LDR      R1,[R0, #+24]
   \   00000054   4015C1E3           BIC      R1,R1,#0x10000000
   \   00000058   181080E5           STR      R1,[R0, #+24]
    122          
    123             MEAS.RDYIRQ = 0x4000;//сброс флага прерывания
   \   0000005C   401CA0E3           MOV      R1,#+16384
   \   00000060   F01080E5           STR      R1,[R0, #+240]
    124             MEAS.RDYIRQ = 0x1000;//активируем прерывание 
   \   00000064   401DA0E3           MOV      R1,#+4096
   \   00000068   F01080E5           STR      R1,[R0, #+240]
    125             
    126             //while (MEAS.STAT & MEAS_BUSY);//ждемс...//только если не используешь прерывание
    127             MEAS.CTRL2=0x30300003; //конфиг-я для чтения напряжения с M2
   \   0000006C   CC13A0E3           MOV      R1,#+805306371
   \   00000070   C01981E3           ORR      R1,R1,#0x300000
   \   00000074   181080E5           STR      R1,[R0, #+24]
    128             //while ((MEAS.STAT & MEAS_READY) == 0);//только если не используешь прерывание
    129          }
   \   00000078   0080BDE8           POP      {PC}             ;; return
   \                     ??start_measuring_M2_0:
   \   0000007C   ........           DC32     VREF + 44
    130          

   \                                 In segment DATA_C, align 4, align-sorted
    131          static const char percent_t[]="%t";
   \                     percent_t:
   \   00000000   257400             DC8 "%t"
   \   00000003   00                 DC8 0
   \   00000004   CEE120FDEBFC       DC8 "\316\341 \375\353\374\364\345"
   \              F4E500      
   \   0000000D   000000             DC8 0, 0, 0
    132          static const char HEADER_TEXT[]="Об эльфе";
    133          
    134          static HEADER_DESC hdr={0,0,0,0,NULL,NULL,LGP_NULL};
    135          

   \                                 In segment DATA_C, align 4, align-sorted
    136          static const int mmenusoftkeys[]={0,1,2};
   \                     mmenusoftkeys:
   \   00000000   000000000100       DC32 0, 1, 2
   \              000002000000
    137          
    138          static SOFTKEY_DESC sk[]=
    139          {
    140            {0x0018,0x0000,(int)""},
    141            {0x0001,0x0000, (int)"Назад"},
    142            {0x0000,0x0000,0xFFFFFFFF},
    143          };
    144          
    145          static SOFTKEYSTAB skt=
    146          {
    147            sk,0
    148          };
    149          
    150          

   \                                 In segment CODE, align 4, keep-with-next
    151          static void proc3(){}
   \                     proc3:
   \   00000000   0EF0A0E1           MOV      PC,LR            ;; return
    152          

   \                                 In segment CODE, align 4, keep-with-next
    153          static int onKey(void* gui, GUI_MSG *msg)
    154          {
   \                     onKey:
   \   00000000   00402DE9           PUSH     {LR}
    155            if (msg->keys==1)//закрытие
   \   00000004   F200D1E1           LDRSH    R0,[R1, #+2]
   \   00000008   010050E3           CMP      R0,#+1
   \   0000000C   0100001A           BNE      ??onKey_0
    156            {
    157              //
    158              return (0);
   \                     ??onKey_1:
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   0080BDE8           POP      {PC}
    159            }
    160            
    161            if ((msg->gbsmsg->msg==KEY_DOWN)||(msg->gbsmsg->msg==LONG_PRESS))
   \                     ??onKey_0:
   \   00000018   040091E5           LDR      R0,[R1, #+4]
   \   0000001C   9320A0E3           MOV      R2,#+147
   \   00000020   041090E5           LDR      R1,[R0, #+4]
   \   00000024   402F82E3           ORR      R2,R2,#0x100
   \   00000028   020051E1           CMP      R1,R2
   \   0000002C   02208212           ADDNE    R2,R2,#+2
   \   00000030   02005111           CMPNE    R1,R2
    162            { 
    163              switch(msg->gbsmsg->submess)
   \   00000034   08009005           LDREQ    R0,[R0, #+8]
   \   00000038   04005003           CMPEQ    R0,#+4
   \   0000003C   F3FFFF1A           BNE      ??onKey_1
    164              {
    165              case LEFT_SOFT:
    166                break;
    167                
    168              case RIGHT_SOFT:
    169                NU_Delete_HISR(&hisr);  
   \   00000040   10009FE5           LDR      R0,??onKey_2     ;; VREF + 2096
   \   00000044   550300EF           SWI      +853
    170                SUBPROC((void *)ElfKiller);
   \   00000048   ........           LDR      R0,??DataTable4  ;; ElfKiller
   \   0000004C   710100EF           SWI      +369
    171                return(1);
   \   00000050   0100A0E3           MOV      R0,#+1
   \   00000054   0080BDE8           POP      {PC}             ;; return
   \                     ??onKey_2:
   \   00000058   ........           DC32     VREF + 2096
    172              }
    173            }
    174            return(0);
    175          }
    176          

   \                                 In segment CODE, align 4, keep-with-next
    177          static void gHook(void* data, int cmd)
    178          { 
   \                     gHook:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    179            if (cmd==TI_CMD_CREATE)
   \   00000004   020051E3           CMP      R1,#+2
   \   00000008   1000001A           BNE      ??gHook_0
    180            {
    181              void* hdr_pointer=GetHeaderPointer(data);
   \   0000000C   AE0200EF           SWI      +686
   \   00000010   0040A0E1           MOV      R4,R0
    182              WSHDR* ws=AllocWS(32);
   \   00000014   2000A0E3           MOV      R0,#+32
   \   00000018   250100EF           SWI      +293
    183              wsprintf(ws, percent_t, HEADER_TEXT);
   \   0000001C   3C109FE5           LDR      R1,??gHook_1     ;; percent_t
   \   00000020   0050A0E1           MOV      R5,R0
   \   00000024   042081E2           ADD      R2,R1,#+4
   \   00000028   240100EF           SWI      +292
    184              SetHeaderText(hdr_pointer, ws, malloc_adr(), mfree_adr());
   \   0000002C   158000EF           SWI      +32789
   \   00000030   0060A0E1           MOV      R6,R0
   \   00000034   148000EF           SWI      +32788
   \   00000038   0020A0E1           MOV      R2,R0
   \   0000003C   0630A0E1           MOV      R3,R6
   \   00000040   0510A0E1           MOV      R1,R5
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   AF0200EF           SWI      +687
   \   0000004C   7080BDE8           POP      {R4-R6,PC}
    185            }
    186            
    187            if (cmd==TI_CMD_UNFOCUS)
    188            {
    189          
    190            }
    191            
    192            if (cmd==TI_CMD_FOCUS)
   \                     ??gHook_0:
   \   00000050   0A0051E3           CMP      R1,#+10
   \   00000054   7080BD18           POPNE    {R4-R6,PC}
    193            {  
    194              DisableIDLETMR();
   \   00000058   7F0100EF           SWI      +383
    195            }
    196            
    197            if (cmd==TI_CMD_DESTROY)
    198            {
    199          
    200            }
    201          }
   \   0000005C   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??gHook_1:
   \   00000060   ........           DC32     percent_t

   \                                 In segment DATA_I, align 4, align-sorted
   \                     VREF:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for VREF>`
   \                     VMAX:
   \   00000004                      DS8 4
   \   00000008                      REQUIRE `?<Initializer for VMAX>`
   \                     voltage:
   \   00000008                      DS8 4
   \   0000000C                      REQUIRE `?<Initializer for voltage>`
   \                     adata:
   \   0000000C                      DS8 4
   \   00000010                      REQUIRE `?<Initializer for adata>`
   \                     adata0:
   \   00000010                      DS8 4
   \   00000014                      REQUIRE `?<Initializer for adata0>`
   \                     adata1:
   \   00000014                      DS8 4
   \   00000018                      REQUIRE `?<Initializer for adata1>`
   \                     adata2:
   \   00000018                      DS8 4
   \   0000001C                      REQUIRE `?<Initializer for adata2>`
   \                     adata3:
   \   0000001C                      DS8 4
   \   00000020                      REQUIRE `?<Initializer for adata3>`
   \                     adata4:
   \   00000020                      DS8 4
   \   00000024                      REQUIRE `?<Initializer for adata4>`
   \                     adata5:
   \   00000024                      DS8 4
   \   00000028                      REQUIRE `?<Initializer for adata5>`
   \                     adata6:
   \   00000028                      DS8 4
   \   0000002C                      REQUIRE `?<Initializer for adata6>`
   \                     saved_meas_ctrl2:
   \   0000002C                      DS8 4
   \   00000030                      REQUIRE `?<Initializer for saved_meas_ctrl2>`
   \                     hisr_stack:
   \   00000030                      DS8 2048
   \   00000830                      REQUIRE `?<Initializer for hisr_stack>`
   \                     hisr:
   \   00000830                      DS8 400
   \   000009C0                      REQUIRE `?<Initializer for hisr>`
   \                     irq_desc:
   \   000009C0                      DS8 8
   \   000009C8                      REQUIRE `?<Initializer for irq_desc>`
   \   000009C8                      DS8 20
   \   000009DC                      REQUIRE `?<Initializer for hdr>`
   \   000009DC                      DS8 52
   \   00000A10                      REQUIRE `?<Initializer for tv_desc>`

   \                                 In segment DATA_I, align 4, align-sorted
   \                     AOffset:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for AOffset>`

   \                                 In segment DATA_I, align 4, align-sorted
   \                     sk:
   \   00000000                      DS8 24
   \   00000018                      REQUIRE `?<Initializer for sk>`

   \                                 In segment DATA_I, align 4, align-sorted
   \                     skt:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for skt>`
    202          
    203          static TVIEW_DESC tv_desc=
    204          {
    205            8,
    206            onKey,
    207            gHook,
    208            proc3,
    209            mmenusoftkeys,
    210            &skt,
    211          #ifdef ELKA  
    212            {4,56,239,287},
    213          #else
    214            {0,26,131,153},
    215          #endif
    216            8,//font
    217            0x64,
    218            0x65,
    219            0,
    220            2 //выравнивание по центру
    221          };
    222          

   \                                 In segment CODE, align 4, keep-with-next
    223          int main(void)
    224          {   
   \                     main:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    225            STATUS status=NU_Create_HISR(&hisr, "H_MEAS_RDY_M2", H_MEAS_RDY_M2_entry, 0, (void*)hisr_stack, HISR_STACK_SIZE);
    226            
    227            if (status==NU_SUCCESS)
   \   00000004   4C419FE5           LDR      R4,??main_0      ;; `?<Constant "Sorry, HISR not creat...">`
   \   00000008   ........           LDR      R5,??DataTable3  ;; VREF
   \   0000000C   48219FE5           LDR      R2,??main_0+0x4  ;; H_MEAS_RDY_M2_entry
   \   00000010   800FA0E3           MOV      R0,#+512
   \   00000014   01002DE9           PUSH     {R0}
   \   00000018   0030A0E3           MOV      R3,#+0
   \   0000001C   501084E2           ADD      R1,R4,#+80
   \   00000020   300085E2           ADD      R0,R5,#+48
   \   00000024   01002DE9           PUSH     {R0}
   \   00000028   830E85E2           ADD      R0,R5,#+2096
   \   0000002C   540300EF           SWI      +852
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   08D08DE2           ADD      SP,SP,#+8
   \   00000038   3F00001A           BNE      ??main_1
    228            {
    229              irq_req(0x46, 3, 8, meas_rdyirq, &irq_desc);
   \   0000003C   1C319FE5           LDR      R3,??main_0+0x8  ;; meas_rdyirq
   \   00000040   9C0E85E2           ADD      R0,R5,#+2496
   \   00000044   01002DE9           PUSH     {R0}
   \   00000048   0820A0E3           MOV      R2,#+8
   \   0000004C   0310A0E3           MOV      R1,#+3
    230              
    231              GUI* tvgui=TViewGetGUI(malloc_adr(), mfree_adr());
    232              TViewSetDefinition(tvgui, &tv_desc);
    233              patch_header(&hdr);
   \   00000050   C870A0E3           MOV      R7,#+200
   \   00000054   4600A0E3           MOV      R0,#+70
   \   00000058   ........           _BLF     irq_req,??irq_req??rA
   \   0000005C   158000EF           SWI      +32789
   \   00000060   0060A0E1           MOV      R6,R0
   \   00000064   148000EF           SWI      +32788
   \   00000068   0610A0E1           MOV      R1,R6
   \   0000006C   D60200EF           SWI      +726
   \   00000070   0060A0E1           MOV      R6,R0
   \   00000074   DC00A0E3           MOV      R0,#+220
   \   00000078   900E80E3           ORR      R0,R0,#0x900
   \   0000007C   051080E0           ADD      R1,R0,R5
   \   00000080   0600A0E1           MOV      R0,R6
   \   00000084   D70200EF           SWI      +727
   \   00000088   907E87E3           ORR      R7,R7,#0x900
   \   0000008C   050087E0           ADD      R0,R7,R5
   \   00000090   ........           _BLF     patch_header,??patch_header??rA
    234              SetHeaderToMenu(tvgui, &hdr, malloc_adr());
   \   00000094   148000EF           SWI      +32788
   \   00000098   0020A0E1           MOV      R2,R0
   \   0000009C   051087E0           ADD      R1,R7,R5
   \   000000A0   0600A0E1           MOV      R0,R6
   \   000000A4   A60200EF           SWI      +678
    235              patch_header(&hdr);
   \   000000A8   050087E0           ADD      R0,R7,R5
   \   000000AC   ........           _BLF     patch_header,??patch_header??rA
    236              
    237              WSHDR* ws=AllocWS(256);
   \   000000B0   400FA0E3           MOV      R0,#+256
   \   000000B4   250100EF           SWI      +293
   \   000000B8   0050A0E1           MOV      R5,R0
    238              wsAppendChar(ws, UTF16_INK_RGBA);
   \   000000BC   0610A0E3           MOV      R1,#+6
   \   000000C0   E01C81E3           ORR      R1,R1,#0xE000
   \   000000C4   1C0000EF           SWI      +28
    239          
    240              wsAppendChar(ws, 0x8080);//RG
   \   000000C8   8010A0E3           MOV      R1,#+128
   \   000000CC   801C81E3           ORR      R1,R1,#0x8000
   \   000000D0   0500A0E1           MOV      R0,R5
   \   000000D4   1C0000EF           SWI      +28
    241              wsAppendChar(ws, 0x8064);//BA-серый
   \   000000D8   6410A0E3           MOV      R1,#+100
   \   000000DC   801C81E3           ORR      R1,R1,#0x8000
   \   000000E0   0500A0E1           MOV      R0,R5
   \   000000E4   1C0000EF           SWI      +28
    242              wsAppendChar(ws, UTF16_FONT_SMALL); 
   \   000000E8   1210A0E3           MOV      R1,#+18
   \   000000EC   E01C81E3           ORR      R1,R1,#0xE000
   \   000000F0   0500A0E1           MOV      R0,R5
   \   000000F4   1C0000EF           SWI      +28
    243              wstrcatprintf(ws, "\n\n\n"
    244                          "VK ELF\n"
    245                            "%t 5.68\n"
    246                              "rev. %s", "версия апи", __DATE__);
   \   000000F8   1C3084E2           ADD      R3,R4,#+28
   \   000000FC   282084E2           ADD      R2,R4,#+40
   \   00000100   341084E2           ADD      R1,R4,#+52
   \   00000104   0500A0E1           MOV      R0,R5
   \   00000108   160200EF           SWI      +534
    247              TViewSetText(tvgui, ws, malloc_adr(), mfree_adr());
   \   0000010C   158000EF           SWI      +32789
   \   00000110   0040A0E1           MOV      R4,R0
   \   00000114   148000EF           SWI      +32788
   \   00000118   0430A0E1           MOV      R3,R4
   \   0000011C   0020A0E1           MOV      R2,R0
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0600A0E1           MOV      R0,R6
   \   00000128   D80200EF           SWI      +728
    248              CreateGUI(tvgui);
   \   0000012C   0600A0E1           MOV      R0,R6
   \   00000130   370100EF           SWI      +311
   \   00000134   04D08DE2           ADD      SP,SP,#+4
   \   00000138   040000EA           B        ??main_2
    249            }
    250            else
    251            {
    252              ShowMSG(1,(int)"Sorry, HISR not created:(" );
   \                     ??main_1:
   \   0000013C   0410A0E1           MOV      R1,R4
   \   00000140   0100A0E3           MOV      R0,#+1
   \   00000144   480100EF           SWI      +328
    253              SUBPROC((void *)ElfKiller);
   \   00000148   ........           LDR      R0,??DataTable4  ;; ElfKiller
   \   0000014C   710100EF           SWI      +369
    254            }
    255            
    256            return 0;
   \                     ??main_2:
   \   00000150   0000A0E3           MOV      R0,#+0
   \   00000154   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??main_0:
   \   00000158   ........           DC32     `?<Constant "Sorry, HISR not creat...">`
   \   0000015C   ........           DC32     H_MEAS_RDY_M2_entry
   \   00000160   ........           DC32     meas_rdyirq
    257          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     VREF

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     ElfKiller

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for VREF>`:
   \   00000000   A8070000           DC32 1960
   \                     `?<Initializer for VMAX>`:
   \   00000004   743B0000           DC32 15220
   \                     `?<Initializer for voltage>`:
   \   00000008   00000000           DC32 0
   \                     `?<Initializer for adata>`:
   \   0000000C   00000000           DC32 0
   \                     `?<Initializer for adata0>`:
   \   00000010   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for adata1>`:
   \   00000014   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for adata2>`:
   \   00000018   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for adata3>`:
   \   0000001C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for adata4>`:
   \   00000020   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for adata5>`:
   \   00000024   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for adata6>`:
   \   00000028   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for saved_meas_ctrl2>`:
   \   0000002C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for hisr_stack>`:
   \   00000030   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000040   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000050   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000060   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000070   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000080   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000090   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000100   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000110   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000120   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000130   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000140   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000150   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000160   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000170   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000180   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000190   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000200   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000210   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000220   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000230   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000240   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000250   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000260   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000270   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000280   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000290   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000300   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000310   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000320   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000330   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000340   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000350   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000360   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000370   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000380   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000390   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000400   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000410   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000420   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000430   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000440   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000450   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000460   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000470   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000480   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000490   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000500   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000510   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000520   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000530   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000540   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000550   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000560   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000570   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000580   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000590   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000600   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000610   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000620   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000630   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000640   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000650   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000660   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000670   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000680   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000690   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000700   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000710   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000720   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000730   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000740   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000750   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000760   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000770   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000780   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000790   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000800   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000810   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000820   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for hisr>`:
   \   00000830   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000840   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000850   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000860   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000870   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000880   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000890   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000900   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000910   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000920   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000930   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000940   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000950   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000960   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000970   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000980   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000990   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for irq_desc>`:
   \   000009C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     `?<Initializer for hdr>`:
   \   000009C8   000000000000       DC16 0, 0, 0, 0
   \              0000        
   \   000009D0   000000000000       DC32 0H, 0, 2147483647
   \              0000FFFFFF7F
   \                     `?<Initializer for tv_desc>`:
   \   000009DC   08000000....       DC32 8, onKey, gHook, proc3, mmenusoftkeys, skt
   \              ............
   \              ............
   \              ............
   \   000009F4   00001A008300       DC16 0, 26, 131, 153
   \              9900        
   \   000009FC   080000006400       DC32 8, 100, 101, 0, 2
   \              000065000000
   \              000000000200
   \              0000        

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for AOffset>`:
   \   00000000   FEFFFFFF           DC32 -2

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for sk>`:
   \   00000000   18000000           DC16 24, 0
   \   00000004   ........           DC32 `?<Constant "">`
   \   00000008   01000000           DC16 1, 0
   \   0000000C   ........           DC32 `?<Constant "\\315\\340\\347\\340\\344">`
   \   00000010   00000000           DC16 0, 0
   \   00000014   FFFFFFFF           DC32 -1

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for skt>`:
   \   00000000   ........0000       DC32 sk, 0
   \              0000        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Sorry, HISR not creat...">`:
   \   00000000   536F7272792C       DC8 "Sorry, HISR not created:("
   \              204849535220
   \              6E6F74206372
   \              65617465643A
   \              2800        
   \   0000001A   0000               DC8 0, 0
   \   0000001C   417072203233       DC8 "Apr 23 2018"
   \              203230313800
   \   00000028   E2E5F0F1E8FF       DC8 "\342\345\360\361\350\377 \340\357\350"
   \              20E0EFE800  
   \   00000033   00                 DC8 0
   \   00000034   0A0A0A564B20       DC8 "\012\012\012VK ELF\012%t 5.68\012rev. %s"
   \              454C460A2574
   \              20352E36380A
   \              7265762E2025
   \              7300        
   \   0000004E   0000               DC8 0, 0
   \   00000050   485F4D454153       DC8 "H_MEAS_RDY_M2"
   \              5F5244595F4D
   \              3200        
   \   0000005E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant "">`:
   \   00000000   00                 DC8 ""

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Analog Data: 0x%X\\nVol...">`:
   \   00000000   416E616C6F67       DC8 "Analog Data: 0x%X\012Voltage: %dmV"
   \              20446174613A
   \              20307825580A
   \              566F6C746167
   \              653A2025646D
   \              5600        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\315\\340\\347\\340\\344">`:
   \   00000000   CDE0E7E0E400       DC8 "\315\340\347\340\344"
   \   00000006   0000               DC8 0, 0
    258          

   Maximum stack usage in bytes:

     Function            CSTACK
     --------            ------
     ElfKiller               4
     H_MEAS_RDY_M2_entry    12
     gHook                  16
     main                   28
     meas_rdyirq             8
     onKey                   4
     patch_header            8
     proc3                   0
     show_res              132
     start_measuring_M2      4


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     patch_header                     48
     MEAS                            248
     GPIO                            488
     ElfKiller                        28
     show_res                         56
     H_MEAS_RDY_M2_entry             176
     meas_rdyirq                     164
     start_measuring_M2              128
     percent_t                        16
     mmenusoftkeys                    12
     proc3                             4
     onKey                            92
     gHook                           100
     VREF                           2576
     AOffset                           4
     sk                               24
     skt                               8
     main                            356
     ??DataTable3                      4
     ??DataTable4                      4
     ?<Initializer for VREF>        2576
     ?<Initializer for AOffset>        4
     ?<Initializer for sk>            24
     ?<Initializer for skt>            8
     ?<Constant "Sorry, HISR not creat...">
                                      96
     ?<Constant "">                    1
     ?<Constant "Analog Data: 0x%X\nVol...">
                                      32
     ?<Constant "\315\340\347\340\344">
                                       8
      Others                          60

 
 1 208 bytes in segment CODE
   736 bytes in segment DATA_AN
   165 bytes in segment DATA_C
 2 612 bytes in segment DATA_I
 2 612 bytes in segment DATA_ID
    12 bytes in segment INITTAB
 
 1 112 bytes of CODE  memory (+ 108 bytes shared)
 2 777 bytes of CONST memory
 2 612 bytes of DATA  memory (+ 736 bytes shared)

Errors: none
Warnings: 4
