//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   23/Apr/2018  18:44:05 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  arm                                                 /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  E:\Users\alfinant\Documents\Siemens\alfinant\MeasMo /
//                       on\main.c                                           /
//    Command line    =  E:\Users\alfinant\Documents\Siemens\alfinant\MeasMo /
//                       on\main.c -D NEWSGOLD -D E71v45 -lCN                /
//                       E:\Users\alfinant\Documents\Siemens\alfinant\MeasMo /
//                       on\Release_NSG\List\ -la                            /
//                       E:\Users\alfinant\Documents\Siemens\alfinant\MeasMo /
//                       on\Release_NSG\List\ -o E:\Users\alfinant\Documents /
//                       \Siemens\alfinant\MeasMoon\Release_NSG\Obj\ -z9     /
//                       --cpu_mode arm --endian little --cpu ARM926EJ-S     /
//                       --stack_align 4 -e --fpu None --dlib_config         /
//                       E:\Users\alfinant\Documents\Siemens\IAR\ARM\LIB\dl5 /
//                       tpannl8n.h -I E:\Users\alfinant\Documents\Siemens\I /
//                       AR\ARM\INC\ --inline_threshold=2                    /
//    List file       =  E:\Users\alfinant\Documents\Siemens\alfinant\MeasMo /
//                       on\Release_NSG\List\main.s79                        /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__arm"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        PUBWEAK `?*?DATA_ID`
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable2 EQU 0
        MULTWEAK ??irq_req??rA
        MULTWEAK ??irq_set_prio??rA
        MULTWEAK ??kill_data??rA
        MULTWEAK ??patch_header??rA
        PUBWEAK ?init?tab?DATA_I
        PUBLIC AOffset
        PUBLIC ElfKiller
        FUNCTION ElfKiller,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBWEAK GPIO
        PUBLIC H_MEAS_RDY_M2_entry
        FUNCTION H_MEAS_RDY_M2_entry,0601H
        LOCFRAME CSTACK, 12, STACK
        PUBWEAK MEAS
        PUBLIC VMAX
        PUBLIC VREF
        PUBLIC adata
        PUBLIC adata0
        PUBLIC adata1
        PUBLIC adata2
        PUBLIC adata3
        PUBLIC adata4
        PUBLIC adata5
        PUBLIC adata6
        FUNCTION gHook,0603H
        LOCFRAME CSTACK, 16, STACK
        PUBLIC hisr
        PUBLIC hisr_stack
        PUBLIC irq_desc
        PUBLIC main
        FUNCTION main,0a03H
        LOCFRAME CSTACK, 28, STACK
        PUBLIC meas_rdyirq
        FUNCTION meas_rdyirq,0603H
        LOCFRAME CSTACK, 8, STACK
        FUNCTION onKey,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBWEAK patch_header
        FUNCTION patch_header,0203H
        LOCFRAME CSTACK, 8, STACK
        FUNCTION proc3,0601H
        PUBLIC saved_meas_ctrl2
        PUBLIC show_res
        FUNCTION show_res,0601H
        LOCFRAME CSTACK, 132, STACK
        PUBLIC start_measuring_M2
        FUNCTION start_measuring_M2,0201H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC voltage
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
irq_req             SYMBOL "irq_req"
irq_set_prio        SYMBOL "irq_set_prio"
kill_data           SYMBOL "kill_data"
??irq_req??rA       SYMBOL "??rA", irq_req
??irq_set_prio??rA  SYMBOL "??rA", irq_set_prio
??kill_data??rA     SYMBOL "??rA", kill_data
patch_header        SYMBOL "patch_header"
??patch_header??rA  SYMBOL "??rA", patch_header

        EXTERN ELF_BEGIN
        EXTERN irq_req
        FUNCTION irq_req,0202H
        EXTERN irq_set_prio
        FUNCTION irq_set_prio,0202H
        EXTERN kill_data
        FUNCTION kill_data,0202H


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function patch_header
        ARM
// __??Code32?? __code __arm __atpcs void patch_header(HEADER_DESC const *)
patch_header:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
        MOV      R0,#+0
        STRH     R0,[R4, #+0]
        STRH     R0,[R4, #+2]
        SWI      +33160
        SUB      R0,R0,#+1
        STRH     R0,[R4, #+4]
        SWI      +33162
        SUB      R0,R0,#+1
        STRH     R0,[R4, #+6]
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock0

        ASEGN DATA_AN:DATA:NOROOT,0f4c00000H
// MEAS_TypeDef __data MEAS
MEAS:
        DS8 248

        ASEGN DATA_AN:DATA:NOROOT,0f4300000H
// GPIO_TypeDef __data GPIO
GPIO:
        DS8 488

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function ElfKiller
        ARM
ElfKiller:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SWI      +32789
        MOV      R1,R0
        LDR      R0,??ElfKiller_0  ;; ELF_BEGIN
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        _BF      kill_data,??kill_data??rA  ;; tailcall
        DATA
??ElfKiller_0:
        DC32     ELF_BEGIN
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function show_res
        ARM
show_res:
        LDR      R0,??DataTable3  ;; VREF
        LDR      R1,??show_res_0  ;; `?<Constant "Analog Data: 0x%X\\nVol...">`
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SUB      SP,SP,#+128
        CFI CFA R13+132
        LDR      R3,[R0, #+8]
        LDR      R2,[R0, #+12]
        MOV      R0,SP
        SWI      +22
        MOV      R1,SP
        MOV      R0,#+1
        SWI      +328
        ADD      SP,SP,#+128
        CFI CFA R13+4
        POP      {PC}             ;; return
        DATA
??show_res_0:
        DC32     `?<Constant "Analog Data: 0x%X\\nVol...">`
        CFI EndBlock cfiBlock2

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function H_MEAS_RDY_M2_entry
        ARM
H_MEAS_RDY_M2_entry:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        LDR      R4,??H_MEAS_RDY_M2_entry_0  ;; VREF
        LDR      R0,[R4, #+16]
        LDR      R1,[R4, #+20]
        ADD      R0,R1,R0
        LDR      R1,[R4, #+24]
        ADD      R0,R1,R0
        LDR      R1,[R4, #+28]
        ADD      R0,R1,R0
        LDR      R1,[R4, #+32]
        ADD      R0,R1,R0
        LDR      R1,[R4, #+36]
        ADD      R0,R1,R0
        LDR      R1,[R4, #+40]
        ADD      R1,R1,R0
        MOV      R0,#+7
        SWI      +188
        STR      R0,[R4, #+12]
        LDR      R0,[R4, #+0]
        LDR      R1,[R4, #+12]
        MVN      R2,#+255
        BIC      R2,R2,#0x700
        ADD      R2,R2,R1
        MUL      R1,R2,R0
        MOV      R0,#+255
        ORR      R0,R0,#0x700
        SWI      +188
        MOV      R5,R0
        LDR      R0,[R4, #+4]
        MOV      R2,#+1000
        MUL      R1,R2,R0
        LDR      R0,[R4, #+0]
        SWI      +188
        MUL      R1,R0,R5
        MOV      R0,#+1000
        SWI      +188
        CMP      R0,#+0
        MOVMI    R0,#+0
        STR      R0,[R4, #+8]
        LDR      R0,??H_MEAS_RDY_M2_entry_0+0x4  ;; show_res
        SWI      +369
        POP      {R4,R5,PC}       ;; return
        DATA
??H_MEAS_RDY_M2_entry_0:
        DC32     VREF
        DC32     show_res
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function meas_rdyirq
        ARM
meas_rdyirq:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R0,#-1073741824
        ORR      R0,R0,#0x34C00000
        MOV      R1,#+16384
        STR      R1,[R0, #+240]
        LDR      R1,[R0, #+28]
        TST      R1,#0x80000000
        POPEQ    {R4,PC}
        LDR      R4,??DataTable3  ;; VREF
        MOV      R1,#+0
        STR      R1,[R0, #+240]
        LDR      R1,[R0, #+24]
        BIC      R1,R1,#0x10000000
        STR      R1,[R0, #+24]
        LDR      R1,[R0, #+32]
        STR      R1,[R4, #+16]
        LDR      R1,[R0, #+36]
        STR      R1,[R4, #+20]
        LDR      R1,[R0, #+40]
        STR      R1,[R4, #+24]
        LDR      R1,[R0, #+44]
        STR      R1,[R4, #+28]
        LDR      R1,[R0, #+48]
        STR      R1,[R4, #+32]
        LDR      R1,[R0, #+52]
        STR      R1,[R4, #+36]
        LDR      R1,[R0, #+56]
        STR      R1,[R4, #+40]
        LDR      R1,[R4, #+44]
        STR      R1,[R0, #+24]
        MOV      R1,#+8
        MOV      R0,#+114
        _BLF     irq_set_prio,??irq_set_prio??rA
        MOV      R0,#-268435456
        ORR      R0,R0,#0x4300000
        LDR      R1,[R0, #+208]
        BIC      R1,R1,#0x8000
        STR      R1,[R0, #+208]
        ADD      R0,R4,#+2096
        SWI      +851
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock4

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function start_measuring_M2
        ARM
start_measuring_M2:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R0,#-268435456
        ORR      R0,R0,#0x4300000
        LDR      R1,[R0, #+208]
        ORR      R1,R1,#0x8000
        STR      R1,[R0, #+208]
        MOV      R1,#+0
        MOV      R0,#+114
        _BLF     irq_set_prio,??irq_set_prio??rA
        MOV      R0,#-1073741824
        ORR      R0,R0,#0x34C00000
        LDR      R1,[R0, #+0]
        BIC      R1,R1,#0x1
        STR      R1,[R0, #+0]
        LDR      R1,[R0, #+0]
        AND      R1,R1,#0x114
        STR      R1,[R0, #+0]
        LDR      R1,??start_measuring_M2_0  ;; VREF + 44
        LDR      R2,[R0, #+24]
        STR      R2,[R1, #+0]
        LDR      R1,[R0, #+24]
        BIC      R1,R1,#0x10000000
        STR      R1,[R0, #+24]
        MOV      R1,#+16384
        STR      R1,[R0, #+240]
        MOV      R1,#+4096
        STR      R1,[R0, #+240]
        MOV      R1,#+805306371
        ORR      R1,R1,#0x300000
        STR      R1,[R0, #+24]
        POP      {PC}             ;; return
        DATA
??start_measuring_M2_0:
        DC32     VREF + 44
        CFI EndBlock cfiBlock5

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "Sorry, HISR not creat...">`:
        DATA
        DC8 "Sorry, HISR not created:("
        DC8 0, 0
        DC8 "Apr 23 2018"
        DC8 "\342\345\360\361\350\377 \340\357\350"
        DC8 0
        DC8 "\012\012\012VK ELF\012%t 5.68\012rev. %s"
        DC8 0, 0
        DC8 "H_MEAS_RDY_M2"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "">`:
        DATA
        DC8 ""

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "Analog Data: 0x%X\\nVol...">`:
        DATA
        DC8 "Analog Data: 0x%X\012Voltage: %dmV"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "\\315\\340\\347\\340\\344">`:
        DATA
        DC8 "\315\340\347\340\344"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
percent_t:
        DATA
        DC8 "%t"
        DC8 0
        DC8 "\316\341 \375\353\374\364\345"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
mmenusoftkeys:
        DATA
        DC32 0, 1, 2

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function proc3
        ARM
proc3:
        MOV      PC,LR            ;; return
        CFI EndBlock cfiBlock6

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function onKey
        ARM
onKey:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        LDRSH    R0,[R1, #+2]
        CMP      R0,#+1
        BNE      ??onKey_0
??onKey_1:
        MOV      R0,#+0
        POP      {PC}
??onKey_0:
        LDR      R0,[R1, #+4]
        MOV      R2,#+147
        LDR      R1,[R0, #+4]
        ORR      R2,R2,#0x100
        CMP      R1,R2
        ADDNE    R2,R2,#+2
        CMPNE    R1,R2
        LDREQ    R0,[R0, #+8]
        CMPEQ    R0,#+4
        BNE      ??onKey_1
        LDR      R0,??onKey_2     ;; VREF + 2096
        SWI      +853
        LDR      R0,??DataTable4  ;; ElfKiller
        SWI      +369
        MOV      R0,#+1
        POP      {PC}             ;; return
        DATA
??onKey_2:
        DC32     VREF + 2096
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function gHook
        ARM
gHook:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        CMP      R1,#+2
        BNE      ??gHook_0
        SWI      +686
        MOV      R4,R0
        MOV      R0,#+32
        SWI      +293
        LDR      R1,??gHook_1     ;; percent_t
        MOV      R5,R0
        ADD      R2,R1,#+4
        SWI      +292
        SWI      +32789
        MOV      R6,R0
        SWI      +32788
        MOV      R2,R0
        MOV      R3,R6
        MOV      R1,R5
        MOV      R0,R4
        SWI      +687
        POP      {R4-R6,PC}
??gHook_0:
        CMP      R1,#+10
        POPNE    {R4-R6,PC}
        SWI      +383
        POP      {R4-R6,PC}       ;; return
        DATA
??gHook_1:
        DC32     percent_t
        CFI EndBlock cfiBlock8

        RSEG DATA_I:DATA:SORT:NOROOT(2)
VREF:
        DS8 4
        REQUIRE `?<Initializer for VREF>`
VMAX:
        DS8 4
        REQUIRE `?<Initializer for VMAX>`
voltage:
        DS8 4
        REQUIRE `?<Initializer for voltage>`
adata:
        DS8 4
        REQUIRE `?<Initializer for adata>`
adata0:
        DS8 4
        REQUIRE `?<Initializer for adata0>`
adata1:
        DS8 4
        REQUIRE `?<Initializer for adata1>`
adata2:
        DS8 4
        REQUIRE `?<Initializer for adata2>`
adata3:
        DS8 4
        REQUIRE `?<Initializer for adata3>`
adata4:
        DS8 4
        REQUIRE `?<Initializer for adata4>`
adata5:
        DS8 4
        REQUIRE `?<Initializer for adata5>`
adata6:
        DS8 4
        REQUIRE `?<Initializer for adata6>`
saved_meas_ctrl2:
        DS8 4
        REQUIRE `?<Initializer for saved_meas_ctrl2>`
hisr_stack:
        DS8 2048
        REQUIRE `?<Initializer for hisr_stack>`
hisr:
        DS8 400
        REQUIRE `?<Initializer for hisr>`
irq_desc:
        DS8 8
        REQUIRE `?<Initializer for irq_desc>`
        DS8 20
        REQUIRE `?<Initializer for hdr>`
        DS8 52
        REQUIRE `?<Initializer for tv_desc>`

        RSEG DATA_I:DATA:SORT:NOROOT(2)
AOffset:
        DS8 4
        REQUIRE `?<Initializer for AOffset>`

        RSEG DATA_I:DATA:SORT:NOROOT(2)
sk:
        DS8 24
        REQUIRE `?<Initializer for sk>`

        RSEG DATA_I:DATA:SORT:NOROOT(2)
skt:
        DS8 8
        REQUIRE `?<Initializer for skt>`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function main
        ARM
main:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        LDR      R4,??main_0      ;; `?<Constant "Sorry, HISR not creat...">`
        LDR      R5,??DataTable3  ;; VREF
        LDR      R2,??main_0+0x4  ;; H_MEAS_RDY_M2_entry
        MOV      R0,#+512
        PUSH     {R0}
        CFI CFA R13+24
        MOV      R3,#+0
        ADD      R1,R4,#+80
        ADD      R0,R5,#+48
        PUSH     {R0}
        CFI CFA R13+28
        ADD      R0,R5,#+2096
        SWI      +852
        CMP      R0,#+0
        ADD      SP,SP,#+8
        CFI CFA R13+20
        BNE      ??main_1
        LDR      R3,??main_0+0x8  ;; meas_rdyirq
        ADD      R0,R5,#+2496
        PUSH     {R0}
        CFI CFA R13+24
        MOV      R2,#+8
        MOV      R1,#+3
        MOV      R7,#+200
        MOV      R0,#+70
        _BLF     irq_req,??irq_req??rA
        SWI      +32789
        MOV      R6,R0
        SWI      +32788
        MOV      R1,R6
        SWI      +726
        MOV      R6,R0
        MOV      R0,#+220
        ORR      R0,R0,#0x900
        ADD      R1,R0,R5
        MOV      R0,R6
        SWI      +727
        ORR      R7,R7,#0x900
        ADD      R0,R7,R5
        _BLF     patch_header,??patch_header??rA
        SWI      +32788
        MOV      R2,R0
        ADD      R1,R7,R5
        MOV      R0,R6
        SWI      +678
        ADD      R0,R7,R5
        _BLF     patch_header,??patch_header??rA
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
        MOV      R1,#+6
        ORR      R1,R1,#0xE000
        SWI      +28
        MOV      R1,#+128
        ORR      R1,R1,#0x8000
        MOV      R0,R5
        SWI      +28
        MOV      R1,#+100
        ORR      R1,R1,#0x8000
        MOV      R0,R5
        SWI      +28
        MOV      R1,#+18
        ORR      R1,R1,#0xE000
        MOV      R0,R5
        SWI      +28
        ADD      R3,R4,#+28
        ADD      R2,R4,#+40
        ADD      R1,R4,#+52
        MOV      R0,R5
        SWI      +534
        SWI      +32789
        MOV      R4,R0
        SWI      +32788
        MOV      R3,R4
        MOV      R2,R0
        MOV      R1,R5
        MOV      R0,R6
        SWI      +728
        MOV      R0,R6
        SWI      +311
        ADD      SP,SP,#+4
        CFI CFA R13+20
        B        ??main_2
??main_1:
        MOV      R1,R4
        MOV      R0,#+1
        SWI      +328
        LDR      R0,??DataTable4  ;; ElfKiller
        SWI      +369
??main_2:
        MOV      R0,#+0
        POP      {R4-R7,PC}       ;; return
        DATA
??main_0:
        DC32     `?<Constant "Sorry, HISR not creat...">`
        DC32     H_MEAS_RDY_M2_entry
        DC32     meas_rdyirq
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable3:
        DC32     VREF

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable4:
        DC32     ElfKiller

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        ARM
??kill_data??rA:
        LDR      R12,??Subroutine0_0  ;; kill_data
        MOV      PC,R12
        DATA
??Subroutine0_0:
        DC32     kill_data
        CFI EndBlock cfiBlock10

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon0
        CFI NoFunction
        ARM
??irq_set_prio??rA:
        LDR      R12,??Subroutine1_0  ;; irq_set_prio
        MOV      PC,R12
        DATA
??Subroutine1_0:
        DC32     irq_set_prio
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        ARM
??irq_req??rA:
        LDR      R12,??Subroutine2_0  ;; irq_req
        MOV      PC,R12
        DATA
??Subroutine2_0:
        DC32     irq_req
        CFI EndBlock cfiBlock12

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon0
        CFI NoFunction
        ARM
??patch_header??rA:
        LDR      R12,??Subroutine3_0  ;; patch_header
        MOV      PC,R12
        DATA
??Subroutine3_0:
        DC32     patch_header
        CFI EndBlock cfiBlock13

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for VREF>`:
        DATA
        DC32 1960
`?<Initializer for VMAX>`:
        DC32 15220
`?<Initializer for voltage>`:
        DC32 0
`?<Initializer for adata>`:
        DC32 0
`?<Initializer for adata0>`:
        DC8 0, 0, 0, 0
`?<Initializer for adata1>`:
        DC8 0, 0, 0, 0
`?<Initializer for adata2>`:
        DC8 0, 0, 0, 0
`?<Initializer for adata3>`:
        DC8 0, 0, 0, 0
`?<Initializer for adata4>`:
        DC8 0, 0, 0, 0
`?<Initializer for adata5>`:
        DC8 0, 0, 0, 0
`?<Initializer for adata6>`:
        DC8 0, 0, 0, 0
`?<Initializer for saved_meas_ctrl2>`:
        DC8 0, 0, 0, 0
`?<Initializer for hisr_stack>`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
`?<Initializer for hisr>`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
`?<Initializer for irq_desc>`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0
`?<Initializer for hdr>`:
        DC16 0, 0, 0, 0
        DC32 0H, 0, 2147483647
`?<Initializer for tv_desc>`:
        DC32 8, onKey, gHook, proc3, mmenusoftkeys, skt
        DC16 0, 26, 131, 153
        DC32 8, 100, 101, 0, 2

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for AOffset>`:
        DATA
        DC32 -2

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for sk>`:
        DATA
        DC16 24, 0
        DC32 `?<Constant "">`
        DC16 1, 0
        DC32 `?<Constant "\\315\\340\\347\\340\\344">`
        DC16 0, 0
        DC32 -1

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for skt>`:
        DATA
        DC32 sk, 0

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        END
// 
// 1 208 bytes in segment CODE
//   736 bytes in segment DATA_AN
//   165 bytes in segment DATA_C
// 2 612 bytes in segment DATA_I
// 2 612 bytes in segment DATA_ID
//    12 bytes in segment INITTAB
// 
// 1 112 bytes of CODE  memory (+ 108 bytes shared)
// 2 777 bytes of CONST memory
// 2 612 bytes of DATA  memory (+ 736 bytes shared)
//
//Errors: none
//Warnings: 4
